globals
//globals from Alloc:
constant boolean LIBRARY_Alloc=true
//endglobals from Alloc
//globals from DestructableHider:
constant boolean LIBRARY_DestructableHider=true
    //==== CONFIGURABLES ====
constant real DestructableHider___INTERVAL= 0.25
                                         //[in multiplayer, the camera positions will only get updated every 0.05-0.1 seconds, so setting it to a lower value than 0.05 makes no sense]
                                         //[update frequency can be much higher in single player mode!]
constant integer DestructableHider___DRAW_DISTANCE= 2048
                                                 //Use multiples of 1024 for maximum efficiency on square division. Recommended value: 5120
constant integer DestructableHider___TILE_RESOLUTION= 10
                                        //- higher resolution = more overhead to incrementing loop variables, but less amounts of destructables checked when moving the camera
                                        //- lower resolution = less overhead to incrementing loop variables, but higher amounts of destructables checked when moving the camera
                                        //-> Recommended value: 8-12
    //==== END OF CONFIGURABLES ====
    
hashtable DestructableHider___hash= InitHashtable()
integer DestructableHider___columns= 0
integer DestructableHider___rows= 0
integer DestructableHider___lastrow= 0
integer DestructableHider___lastcolumn= 0
integer DestructableHider___lastid= 0
real DestructableHider___mapMinX= 0
real DestructableHider___mapMinY= 0
constant integer DestructableHider___TILESIZE= DestructableHider___DRAW_DISTANCE / DestructableHider___TILE_RESOLUTION
//endglobals from DestructableHider
//globals from GetMainSelectedUnit:
constant boolean LIBRARY_GetMainSelectedUnit=true
framehandle GetMainSelectedUnit___containerFrame
framehandle array GetMainSelectedUnit___frames
group GetMainSelectedUnit___Group= CreateGroup()
unit array GetMainSelectedUnit___units
integer GetMainSelectedUnit___unitsCount= 0
filterfunc GetMainSelectedUnit___filter
//endglobals from GetMainSelectedUnit
//globals from Indexer:
constant boolean LIBRARY_Indexer=true
//endglobals from Indexer
//globals from LineSegmentEnumeration:
constant boolean LIBRARY_LineSegmentEnumeration=true
//endglobals from LineSegmentEnumeration
//globals from MouseUtils:
constant boolean LIBRARY_MouseUtils=true
constant integer EVENT_MOUSE_UP= 1024
constant integer EVENT_MOUSE_DOWN= 2048
constant integer EVENT_MOUSE_MOVE= 3072
 
constant boolean MouseUtils___IMPL_LOCK= false
//endglobals from MouseUtils
//globals from RegisterPlayerUnitEvent:
constant boolean LIBRARY_RegisterPlayerUnitEvent=true
trigger array RegisterPlayerUnitEvent___t
//endglobals from RegisterPlayerUnitEvent
//globals from Table:
constant boolean LIBRARY_Table=true
integer Table___less= 0
integer Table___more= 8190
    //Configure it if you use more than 8190 "key" variables in your map (this will never happen though).
    
hashtable Table___ht= InitHashtable()
constant integer Table___sizeK=3
constant integer Table___listK=4
//endglobals from Table
//globals from TimerUtils:
constant boolean LIBRARY_TimerUtils=true
        //How to tweak timer utils:
        // USE_HASH_TABLE = true  (new blue)
        //  * SAFEST
        //  * SLOWEST (though hash tables are kind of fast)
        //
        // USE_HASH_TABLE = false, USE_FLEXIBLE_OFFSET = true  (orange)
        //  * kinda safe (except there is a limit in the number of timers)
        //  * ALMOST FAST
        //
        // USE_HASH_TABLE = false, USE_FLEXIBLE_OFFSET = false (red)
        //  * THE FASTEST (though is only  faster than the previous method
        //                  after using the optimizer on the map)
        //  * THE LEAST SAFE ( you may have to tweak OFSSET manually for it to
        //                     work)
        //
constant boolean TimerUtils___USE_HASH_TABLE= true
constant boolean TimerUtils___USE_FLEXIBLE_OFFSET= false

constant integer TimerUtils___OFFSET= 0x100000
integer TimerUtils___VOFFSET= TimerUtils___OFFSET
              
        //Timers to preload at map init:
constant integer TimerUtils___QUANTITY= 256
        
        //Changing this  to something big will allow you to keep recycling
        // timers even when there are already AN INCREDIBLE AMOUNT of timers in
        // the stack. But it will make things far slower so that's probably a bad idea...
constant integer TimerUtils___ARRAY_SIZE= 8190

// processed:         integer array TimerUtils___data[TimerUtils___ARRAY_SIZE]
hashtable TimerUtils___ht
// processed:         timer array TimerUtils___tT[TimerUtils___ARRAY_SIZE]
integer TimerUtils___tN= 0
constant integer TimerUtils___HELD=0x28829022
        //use a totally random number here, the more improbable someone uses it, the better.
        
boolean TimerUtils___didinit= false
//endglobals from TimerUtils
//globals from WorldBounds:
constant boolean LIBRARY_WorldBounds=true
//endglobals from WorldBounds
//globals from Components:
constant boolean LIBRARY_Components=true
constant real Components___TOOLTIP_SIZE= 0.2
constant real Components___DOUBLE_CLICK_DELAY= 0.25
constant string Components___HIGHLIGHT= "UI\\Widgets\\Glues\\GlueScreen-Button-KeyboardHighlight"
constant string Components___CHECKED_BUTTON= "UI\\Widgets\\EscMenu\\Human\\checkbox-check.blp"
constant string Components___UNAVAILABLE_BUTTON= "ui\\widgets\\battlenet\\chaticons\\bnet-squelch"

timer Components___DOUBLE= CreateTimer()
framehandle Components___CONSOLE
framehandle Components___WORLD
//endglobals from Components
//globals from CooldownReduction:
constant boolean LIBRARY_CooldownReduction=true
//endglobals from CooldownReduction
//globals from DamageInterface:
constant boolean LIBRARY_DamageInterface=true
        // Set to true to enable evasion system
constant boolean DamageInterface___USE_EVASION= true
        // If true will use armor and magic penetration. This makes armor type differentiation irrelevant
constant boolean DamageInterface___USE_PENETRATION= true
        // Armor effectiveness. overwrites the default when USE_PENETRATION is true
constant real DamageInterface___ARMOR_MULTIPLIER= 0.06
        // Magic resistance effectiveness. overwrites the default when USE_PENETRATION is true
constant real DamageInterface___MAGIC_MULTIPLIER= 0.06
        // Heroes base magic resistance, which with the current formula equates to aproximately 24% magic resistance
constant real DamageInterface___BASE_HERO_MAGIC_RESISTANCE= 5
//endglobals from DamageInterface
//globals from MissileEffect:
constant boolean LIBRARY_MissileEffect=true
//endglobals from MissileEffect
//globals from Periodic:
constant boolean LIBRARY_Periodic=true
//endglobals from Periodic
//globals from PluginSpellEffect:
constant boolean LIBRARY_PluginSpellEffect=true
//endglobals from PluginSpellEffect
//globals from SpellEffectEvent:
constant boolean LIBRARY_SpellEffectEvent=true
//endglobals from SpellEffectEvent
//globals from Tenacity:
constant boolean LIBRARY_Tenacity=true
//endglobals from Tenacity
//globals from TimedHandles:
constant boolean LIBRARY_TimedHandles=true
        // If you don't want a timer to be ran each instance
        // set this to true.
constant boolean TimedHandles___SINGLE_TIMER= true
        // If you chose a single timer then this will be the speed
        // at which the timer will update
constant real TimedHandles___UPDATE_PERIOD= 0.05
//endglobals from TimedHandles
//globals from Ability:
constant boolean LIBRARY_Ability=true
//endglobals from Ability
//globals from ArcingFloatingText:
constant boolean LIBRARY_ArcingFloatingText=true
constant real ArcingFloatingText___MIN_SIZE= 0.014
constant real ArcingFloatingText___BONUS_SIZE= 0.000
constant real ArcingFloatingText___LIFE_TIME= 1.0
constant real ArcingFloatingText___Z_OFFSET= 50
constant real ArcingFloatingText___Z_OFFSET_BONUS= 50
constant real ArcingFloatingText___VELOCITY= 2
//endglobals from ArcingFloatingText
//globals from CooldownReductionUtils:
constant boolean LIBRARY_CooldownReductionUtils=true
//endglobals from CooldownReductionUtils
//globals from Missiles:
constant boolean LIBRARY_Missiles=true
        // The update period of the system
constant real Missiles_PERIOD= 1. / 32.
        // The max amount of Missiles processed in a PERIOD
        // You can play around with both these values to find
        // your sweet spot. If equal to 0, the system will
        // process all missiles at once every period.
constant real Missiles_SWEET_SPOT= 100
        // the avarage collision size compensation when detecting collisions
constant real Missiles___COLLISION_SIZE= 128.
        // item size used in z collision
constant real Missiles___ITEM_SIZE= 16.
        // Raw code of the dummy unit used for vision
constant integer Missiles___DUMMY= 'dumi'
        // Needed, don't touch.
location Missiles___LOC= Location(0., 0.)
//endglobals from Missiles
//globals from NewBonus:
constant boolean LIBRARY_NewBonus=true
        // This is the maximum recursion limit allowed by the system.
        // It's value must be greater than or equal to 0. When equal to 0
        // no recursion is allowed. Values too big can cause screen freezes.
constant integer NewBonus___RECURSION_LIMIT= 8
//endglobals from NewBonus
//globals from TenacityUtils:
constant boolean LIBRARY_TenacityUtils=true
//endglobals from TenacityUtils
//globals from Utilities:
constant boolean LIBRARY_Utilities=true
        // The dummy caster unit id 
constant integer Utilities_DUMMY= 'dumi'
        // Update period
constant real Utilities___PERIOD= 0.031250000
        // location z
location Utilities___LOCZ= Location(0, 0)
        // One hashtable to rule them all
hashtable Utilities___table= InitHashtable()
        // Closest Unit
unit Utilities___bj_closestUnitGroup
//endglobals from Utilities
//globals from Afterburner:
constant boolean LIBRARY_Afterburner=true
        //The raw code of the Afternurner Ability
constant integer Afterburner___ABILITY= 'A003'
        //The raw code of the Afternurner Prox Ability
constant integer Afterburner___AFTERBURN_PROXY= 'A007'
        // The Attack type of the damage dealt (Spell)
constant attacktype Afterburner___ATTACK_TYPE= ATTACK_TYPE_NORMAL
        // The Damage type of the damage dealt
constant damagetype Afterburner___DAMAGE_TYPE= DAMAGE_TYPE_MAGIC
//endglobals from Afterburner
//globals from CrowdControl:
constant boolean LIBRARY_CrowdControl=true
        // The raw code of the silence ability
constant integer CrowdControl___SILENCE= 'U000'
        // The raw code of the stun ability
constant integer CrowdControl___STUN= 'U001'
        // The raw code of the attack slow ability
constant integer CrowdControl___ATTACK_SLOW= 'U002'
        // The raw code of the movement slow ability
constant integer CrowdControl___MOVEMENT_SLOW= 'U003'
        // The raw code of the banish ability
constant integer CrowdControl___BANISH= 'U004'
        // The raw code of the ensnare ability
constant integer CrowdControl___ENSNARE= 'U005'
        // The raw code of the purge ability
constant integer CrowdControl___PURGE= 'U006'
        // The raw code of the hex ability
constant integer CrowdControl___HEX= 'U007'
        // The raw code of the sleep ability
constant integer CrowdControl___SLEEP= 'U008'
        // The raw code of the cyclone ability
constant integer CrowdControl___CYCLONE= 'U009'
        // The raw code of the entangle ability
constant integer CrowdControl___ENTANGLE= 'U010'
        // The raw code of the disarm ability
constant integer CrowdControl___DISARM= 'U011'
        // The raw code of the fear ability
constant integer CrowdControl___FEAR= 'U012'
        // The raw code of the taunt ability
constant integer CrowdControl___TAUNT= 'U013'
        // The raw code of the true sight ability
constant integer CrowdControl___TRUE_SIGHT= 'U014'
        // The raw code of the silence buff
constant integer CrowdControl___SILENCE_BUFF= 'BU00'
        // The raw code of the stun buff
constant integer CrowdControl___STUN_BUFF= 'BU01'
        // The raw code of the attack slow buff
constant integer CrowdControl___ATTACK_SLOW_BUFF= 'BU02'
        // The raw code of the movement slow buff
constant integer CrowdControl___MOVEMENT_SLOW_BUFF= 'BU03'
        // The raw code of the banish buff
constant integer CrowdControl___BANISH_BUFF= 'BU04'
        // The raw code of the ensnare buff
constant integer CrowdControl___ENSNARE_BUFF= 'BU05'
        // The raw code of the purge buff
constant integer CrowdControl___PURGE_BUFF= 'BU06'
        // The raw code of the hex buff
constant integer CrowdControl___HEX_BUFF= 'BU07'
        // The raw code of the sleep buff
constant integer CrowdControl___SLEEP_BUFF= 'BU08'
        // The raw code of the cyclone buff
constant integer CrowdControl___CYCLONE_BUFF= 'BU09'
        // The raw code of the entangle buff
constant integer CrowdControl___ENTANGLE_BUFF= 'BU10'
        // The raw code of the disarm buff
constant integer CrowdControl___DISARM_BUFF= 'BU11'
        // The raw code of the fear buff
constant integer CrowdControl___FEAR_BUFF= 'BU12'
        // The raw code of the taunt buff
constant integer CrowdControl___TAUNT_BUFF= 'BU13'

        // This is the maximum recursion limit allowed by the system.
        // Its value must be greater than or equal to 0. When equal to 0
        // no recursion is allowed. Values too big can cause screen freezes.
constant integer CrowdControl___RECURSION_LIMIT= 8

        // The Crowd Control types
constant integer CROWD_CONTROL_SILENCE= 0
constant integer CROWD_CONTROL_STUN= 1
constant integer CROWD_CONTROL_SLOW= 2
constant integer CROWD_CONTROL_SLOW_ATTACK= 3
constant integer CROWD_CONTROL_BANISH= 4
constant integer CROWD_CONTROL_ENSNARE= 5
constant integer CROWD_CONTROL_PURGE= 6
constant integer CROWD_CONTROL_HEX= 7
constant integer CROWD_CONTROL_SLEEP= 8
constant integer CROWD_CONTROL_CYCLONE= 9
constant integer CROWD_CONTROL_ENTANGLE= 10
constant integer CROWD_CONTROL_DISARM= 11
constant integer CROWD_CONTROL_FEAR= 12
constant integer CROWD_CONTROL_TAUNT= 13
constant integer CROWD_CONTROL_KNOCKBACK= 14
constant integer CROWD_CONTROL_KNOCKUP= 15
//endglobals from CrowdControl
//globals from Item:
constant boolean LIBRARY_Item=true
        // Tooltip update period
constant real Item___PERIOD= 1.
//endglobals from Item
//globals from MissileUtils:
constant boolean LIBRARY_MissileUtils=true
//endglobals from MissileUtils
//globals from MoltenShield:
constant boolean LIBRARY_MoltenShield=true
        // The raw code of the Molten Shield Ability
constant integer MoltenShield___ABILITY= 'A006'
        // The raw code of the Ragnaros unit in the editor
constant integer MoltenShield___RAGNAROS_ID= 'H001'
        // The raw code of the buff used to link bonus
constant integer MoltenShield___BUFF_ID= 'B001'
        // The GAIN_AT_LEVEL is greater than 0
        // ragnaros will gain molten shield at this level 
constant integer MoltenShield___GAIN_AT_LEVEL= 20
        // The Explosion effect path
constant string MoltenShield___EXPLOSION_EFFECT= "Damnation Orange.mdl"
        // The Explosion effect attachment point
constant string MoltenShield___ATTACH_POINT= "origin"
        // The Attack type of the damage dealt (Spell)
constant attacktype MoltenShield___ATTACK_TYPE= ATTACK_TYPE_NORMAL
        // The Damage type of the damage dealt
constant damagetype MoltenShield___DAMAGE_TYPE= DAMAGE_TYPE_FIRE
//endglobals from MoltenShield
//globals from Sulfuras:
constant boolean LIBRARY_Sulfuras=true
        //The raw code of the Sufuras Ability
constant integer Sulfuras___ABILITY= 'A000'
//endglobals from Sulfuras
//globals from ExplosiveRune:
constant boolean LIBRARY_ExplosiveRune=true
        // The raw code of the Explosive Rune Ability
constant integer ExplosiveRune___ABILITY= 'A001'
        // The number of charges of the ability
constant integer ExplosiveRune___CHARGES_COUNT= 4
        // The number of charges of the ability
constant real ExplosiveRune___CHARGES_COOLDOWN= 15.0
        // The Explosion delay
constant real ExplosiveRune___EXPLOSION_DELAY= 1.5
        // The Explosion effect path
constant string ExplosiveRune___EXPLOSION_EFFECT= "Conflagrate.mdl"
        // The Attack type of the damage dealt (Spell)
constant attacktype ExplosiveRune___ATTACK_TYPE= ATTACK_TYPE_NORMAL
        // The Damage type of the damage dealt
constant damagetype ExplosiveRune___DAMAGE_TYPE= DAMAGE_TYPE_MAGIC
        // If true will damage structures
constant boolean ExplosiveRune___DAMAGE_STRUCTURES= false
        // If true will damage allies
constant boolean ExplosiveRune___DAMAGE_ALLIES= false
        // If true will damage magic immune unit if the
        // ATTACK_TYPE is not spell damage
constant boolean ExplosiveRune___DAMAGE_MAGIC_IMMUNE= false
//endglobals from ExplosiveRune
//globals from LavaElemental:
constant boolean LIBRARY_LavaElemental=true
        // The raw code of the Lava Elemental ability
constant integer LavaElemental___ABILITY= 'A004'
        // The raw code of the Lava Elemental unit
constant integer LavaElemental___LAVA_ELEMENTAL= 'o000'
        // This ability cooldown if targeted at a 
        // structure
constant real LavaElemental___STRUCTURE_COOLDOWN= 120.
        // This ability cooldown if targeted at the 
        // ground
constant real LavaElemental___NORMAL_COOLDOWN= 30.
        // The elemaental duration when targeted at 
        // the ground
constant real LavaElemental___ELEMENTAL_DURATION= 60.
        // The path for the effect that will be
        // added to the base of the Lava Elemental
constant string LavaElemental___FIRA_BASE= "fire_5.mdl"
        // Effect when spawning a lava elemental
constant string LavaElemental___SPAWN_EFFECT= "Pillar of Flame Orange.mdl"
//endglobals from LavaElemental
//globals from LivingMeteor:
constant boolean LIBRARY_LivingMeteor=true
        // The raw code of the Living Meteor ability
constant integer LivingMeteor___ABILITY= 'A002'
        // The landing time of the falling meteor
constant real LivingMeteor___LANDING_TIME= 2.5
        // The roll time of the rolling meteor
constant real LivingMeteor___ROLLING_TIME= 2.5
        // The damage interval of the rolling interval
constant real LivingMeteor___DAMAGE_INTERVAL= 0.25
        // The time the player has to move the mouse before the spell starts
constant real LivingMeteor___DRAG_AND_DROP_TIME= 0.05
        // The distance from the casting point from where the meteor spawns
constant real LivingMeteor___LAUNCH_OFFSET= 4500
        // The starting height fo the meteor
constant real LivingMeteor___START_HEIGHT= 3000
        // Meteor Model
constant string LivingMeteor___METEOR_MODEL= "LivingMeteor.mdl"
        // Meteor Impact effect model
constant string LivingMeteor___IMPACT_MODEL= "LivingMeteor.mdl"
        // Meteor size
constant real LivingMeteor___METEOR_SCALE= 0.75
        // The Attack type of the damage dealt (Spell)
constant attacktype LivingMeteor___ATTACK_TYPE= ATTACK_TYPE_NORMAL
        // The Damage type of the damage dealt
constant damagetype LivingMeteor___DAMAGE_TYPE= DAMAGE_TYPE_MAGIC
        // If true will damage structures
constant boolean LivingMeteor___DAMAGE_STRUCTURES= true
        // If true will damage allies
constant boolean LivingMeteor___DAMAGE_ALLIES= false
        // If true will damage magic immune unit if the
        // ATTACK_TYPE is not spell damage
constant boolean LivingMeteor___DAMAGE_MAGIC_IMMUNE= false
//endglobals from LivingMeteor
//globals from Shop:
constant boolean LIBRARY_Shop=true
        // Main window 
constant real Shop___X= 0.0
constant real Shop___Y= 0.56
constant real Shop___WIDTH= 0.8
constant real Shop___HEIGHT= 0.4
constant real Shop___TOOLBAR_BUTTON_SIZE= 0.02
constant integer Shop___ROWS= 5
constant integer Shop___COLUMNS= 13
constant integer Shop___DETAILED_ROWS= 5
constant integer Shop___DETAILED_COLUMNS= 8
constant string Shop___CLOSE_ICON= "ui\\widgets\\battlenet\\chaticons\\bnet-squelch"
constant string Shop___CLEAR_ICON= "ReplaceableTextures\\CommandButtons\\BTNCancel.blp"
constant string Shop___HELP_ICON= "UI\\Widgets\\EscMenu\\Human\\quest-unknown.blp"
constant string Shop___LOGIC_ICON= "ReplaceableTextures\\CommandButtons\\BTNMagicalSentry.blp"
constant string Shop___UNDO_ICON= "ReplaceableTextures\\CommandButtons\\BTNReplay-Loop.blp"
constant string Shop___DISMANTLE_ICON= "UI\\Feedback\\Resources\\ResourceUpkeep.blp"

        // Buyer Panel
constant real Shop___BUYER_WIDTH= Shop___WIDTH / 2
constant real Shop___BUYER_HEIGHT= 0.08
constant real Shop___BUYER_SIZE= 0.032
constant real Shop___BUYER_GAP= 0.04
constant real Shop___BUYER_SHIFT_BUTTON_SIZE= 0.012
constant integer Shop___BUYER_COUNT= 8
constant string Shop___BUYER_RIGHT= "ReplaceableTextures\\CommandButtons\\BTNReplay-SpeedDown.blp"
constant string Shop___BUYER_LEFT= "ReplaceableTextures\\CommandButtons\\BTNReplay-SpeedUp.blp"

        // Inventory Panel
constant real Shop___INVENTORY_WIDTH= 0.23780
constant real Shop___INVENTORY_HEIGHT= 0.03740
constant real Shop___INVENTORY_SIZE= 0.031
constant real Shop___INVENTORY_GAP= 0.04
constant integer Shop___INVENTORY_COUNT= 6
constant string Shop___INVENTORY_TEXTURE= "Inventory.blp"
        
        // Details window
constant real Shop___DETAIL_WIDTH= 0.3125
constant real Shop___DETAIL_HEIGHT= Shop___HEIGHT
constant integer Shop___DETAIL_USED_COUNT= 6
constant real Shop___DETAIL_BUTTON_SIZE= 0.035
constant real Shop___DETAIL_BUTTON_GAP= 0.044
constant real Shop___DETAIL_CLOSE_BUTTON_SIZE= 0.02
constant real Shop___DETAIL_SHIFT_BUTTON_SIZE= 0.012
constant string Shop___USED_RIGHT= "ReplaceableTextures\\CommandButtons\\BTNReplay-SpeedDown.blp"
constant string Shop___USED_LEFT= "ReplaceableTextures\\CommandButtons\\BTNReplay-SpeedUp.blp"

        // Side Panels
constant real Shop___SIDE_WIDTH= 0.075
constant real Shop___SIDE_HEIGHT= Shop___HEIGHT
constant real Shop___EDIT_WIDTH= 0.15
constant real Shop___EDIT_HEIGHT= 0.0285

        // Category and Favorite buttons
constant integer Shop___CATEGORY_COUNT= 13
constant real Shop___CATEGORY_SIZE= 0.02750
constant real Shop___CATEGORY_GAP= 0.0

        // ItemTable slots
constant real Shop___SLOT_WIDTH= 0.04
constant real Shop___SLOT_HEIGHT= 0.05
constant real Shop___ITEM_SIZE= 0.04
constant real Shop___GOLD_SIZE= 0.01
constant real Shop___COST_WIDTH= 0.045
constant real Shop___COST_HEIGHT= 0.01
constant real Shop___COST_SCALE= 0.8
constant real Shop___SLOT_GAP_X= 0.018
constant real Shop___SLOT_GAP_Y= 0.022
constant string Shop___GOLD_ICON= "UI\\Feedback\\Resources\\ResourceGold.blp"

        // Selected item highlight
constant string Shop___ITEM_HIGHLIGHT= "neon_sprite.mdx"
constant real Shop___HIGHLIGHT_SCALE= 0.75
constant real Shop___HIGHLIGHT_XOFFSET= - 0.0052
constant real Shop___HIGHLIGHT_YOFFSET= - 0.0048

        // Tagged item highlight
constant string Shop___TAG_MODEL= "crystallid_sprite.mdx"
constant real Shop___TAG_SCALE= 0.75
constant real Shop___TAG_XOFFSET= - 0.0052
constant real Shop___TAG_YOFFSET= - 0.0048

        // Scroll
constant real Shop___SCROLL_DELAY= 0.075

        // Update time
constant real Shop___UPDATE_PERIOD= 0.33

        // Buy / Sell sound, model and scale
constant string Shop___SPRITE_MODEL= "UI\\Feedback\\GoldCredit\\GoldCredit.mdl"
constant real Shop___SPRITE_SCALE= 0.0005
constant string Shop___SUCCESS_SOUND= "Abilities\\Spells\\Other\\Transmute\\AlchemistTransmuteDeath1.wav"
constant string Shop___ERROR_SOUND= "Sound\\Interface\\Error.wav"

        // Dont touch
integer Shop___table
//endglobals from Shop
//globals from SulfurasSmash:
constant boolean LIBRARY_SulfurasSmash=true
        // The raw code of the Sulfuras Smash ability
constant integer SulfurasSmash___ABILITY= 'A005'
        // The landing time of the falling sulfuras
constant real SulfurasSmash___LANDING_TIME= 1.25
        // The distance from the casting point from 
        // where the sulfuras spawns
constant real SulfurasSmash___LAUNCH_OFFSET= 4500
        // The starting height of sufuras
constant real SulfurasSmash___START_HEIGHT= 3000
        // Sufuras Model
constant string SulfurasSmash___SULFURAS_MODEL= "Sulfuras.mdl"
        // Sulfuras Impact effect model
constant string SulfurasSmash___IMPACT_MODEL= "Smash.mdl"
        // The stun model
constant string SulfurasSmash___STUN_MODEL= "Abilities\\Spells\\Human\\Thunderclap\\ThunderclapTarget.mdl"
        // the stun model attachment point
constant string SulfurasSmash___STUN_POINT= "overhead"
        // Sufuras size
constant real SulfurasSmash___SULFURAS_SCALE= 3.
        // Size of the impact model
constant real SulfurasSmash___IMPACT_SCALE= 2.
        // How long will the impact model lasts
constant real SulfurasSmash___IMPACT_DURATION= 10.
        // The Attack type of the damage dealt (Spell)
constant attacktype SulfurasSmash___ATTACK_TYPE= ATTACK_TYPE_NORMAL
        // The Damage type of the damage dealt
constant damagetype SulfurasSmash___DAMAGE_TYPE= DAMAGE_TYPE_MAGIC
//endglobals from SulfurasSmash
    // Generated
rect gg_rct_Human= null
rect gg_rct_Undead= null
rect gg_rct_NightElf= null
rect gg_rct_Orc= null
rect gg_rct_Attack= null
trigger gg_trg_Shop= null
trigger gg_trg_Components= null
trigger gg_trg_Alloc= null
trigger gg_trg_Table= null
trigger gg_trg_Utilities= null
trigger gg_trg_Indexer= null
trigger gg_trg_TimerUtils= null
trigger gg_trg_MouseUtils= null
trigger gg_trg_WorldBounds= null
trigger gg_trg_LineSegment= null
trigger gg_trg_TimedHandles= null
trigger gg_trg_SpellEffectPlugin= null
trigger gg_trg_SpellEffectEvent= null
trigger gg_trg_DestructableHider= null
trigger gg_trg_ArcingFloatingText= null
trigger gg_trg_GetMainSelectedUnit= null
trigger gg_trg_RegisterPlayerUnitEvent= null
trigger gg_trg_MissileEffect= null
trigger gg_trg_MissileUtils= null
trigger gg_trg_Missiles= null
trigger gg_trg_Tenacity= null
trigger gg_trg_TenacityUtils= null
trigger gg_trg_Interface= null
trigger gg_trg_CrowdControl= null
trigger gg_trg_CooldownReduction= null
trigger gg_trg_CooldownReductionUtils= null
trigger gg_trg_Sulfuras= null
trigger gg_trg_Explosive_Rune= null
trigger gg_trg_LivingMeteor= null
trigger gg_trg_Afterburner= null
trigger gg_trg_LavaElemental= null
trigger gg_trg_SulfurasSmash= null
trigger gg_trg_MoltenShield= null
trigger gg_trg_Initialization= null
trigger gg_trg_Revive= null
trigger gg_trg_Refresh= null
trigger gg_trg_Spawn= null
trigger gg_trg_OnDamage= null
integer BONUS_MISS_CHANCE
integer BONUS_ARMOR
integer BONUS_DAMAGE_BLOCK
        // When true the damage interface library is used
constant boolean Block___USE_DAMAGE_INTERFACE= true
integer BONUS_MANA
integer BONUS_AGILITY
integer BONUS_HEALTH
integer BONUS_EVASION_CHANCE
        // When true the damage interface library is used
constant boolean EvasionChance___USE_DAMAGE_INTERFACE= true
integer BONUS_DAMAGE
integer BONUS_STRENGTH
integer BONUS_TENACITY
integer BONUS_LIFE_STEAL
        // When true the damage interface library is used
constant boolean LifeSteal___USE_DAMAGE_INTERFACE= true
integer BONUS_SPELL_VAMP
integer BONUS_SPELL_POWER
integer BONUS_INTELLIGENCE
integer BONUS_SIGHT_RANGE
integer BONUS_TENACITY_FLAT
integer BONUS_ATTACK_SPEED
integer BONUS_CRITICAL_CHANCE
        // When true the damage interface library is used
constant boolean CriticalChance___USE_DAMAGE_INTERFACE= true
integer BONUS_CRITICAL_DAMAGE
        // When true the damage interface library is used
constant boolean CriticalDamage___USE_DAMAGE_INTERFACE= true
integer BONUS_TENACITY_OFFSET
integer BONUS_COOLDOWN_OFFSET
integer BONUS_ARMOR_PENETRATION
integer BONUS_MOVEMENT_SPEED
integer BONUS_MAGIC_RESISTANCE
        // When true the damage interface library is used
constant boolean MagicResistence___USE_DAMAGE_INTERFACE= true
integer BONUS_MAGIC_PENETRATION
integer BONUS_MANA_REGEN
integer BONUS_HEALTH_REGEN
integer BONUS_COOLDOWN_REDUCTION
integer BONUS_ARMOR_PENETRATION_FLAT
integer BONUS_MAGIC_PENETRATION_FLAT
integer BONUS_COOLDOWN_REDUCTION_FLAT

trigger l__library_init

//JASSHelper struct globals:
constant integer si__Indexer=1
integer si__Indexer_F=0
integer si__Indexer_I=0
integer array si__Indexer_V
integer s__Indexer_ability= 'Adef'
integer array s__Indexer_array
integer s__Indexer_key= - 1
integer s__Indexer_id= - 1
unit s__Indexer_unit
trigger s__Indexer_onIndex= CreateTrigger()
trigger s__Indexer_onDeindex= CreateTrigger()
constant integer si__LineSegment=2
constant real s__LineSegment_MAX_UNIT_COLLISION= 197.00
constant rect s__LineSegment_RECT= Rect(0, 0, 0, 0)
constant group s__LineSegment_GROUP= CreateGroup()
real s__LineSegment_ox
real s__LineSegment_oy
real s__LineSegment_dx
real s__LineSegment_dy
real s__LineSegment_da
real s__LineSegment_db
real s__LineSegment_ui
real s__LineSegment_uj
real s__LineSegment_wdx
real s__LineSegment_wdy
integer s__LineSegment_DestructableCounter= - 1
destructable array s__LineSegment_Destructable
integer s__LineSegment_ItemCounter= - 1
item array s__LineSegment_Item
constant integer si__UserMouse=3
integer s__UserMouse_currentEventType= 0
integer s__UserMouse_updateCount= 0
trigger s__UserMouse_stateDetector= null
trigger array s__UserMouse_evTrigger
integer array s__UserMouse_mouseButtonStack
integer array s__UserMouse_next
integer array s__UserMouse_prev
integer array s__UserMouse_resetNext
integer array s__UserMouse_resetPrev
trigger array s__UserMouse_posDetector
integer array s__UserMouse_mouseClickCount
real array s__UserMouse_mouseX
real array s__UserMouse_mouseY
constant integer si__Table___dex=4
constant integer si__Table___handles=5
constant integer si__Table___agents=6
constant integer si__Table___reals=7
constant integer si__Table___booleans=8
constant integer si__Table___strings=9
constant integer si__Table___integers=10
constant integer si__Table___players=11
constant integer si__Table___widgets=12
constant integer si__Table___destructables=13
constant integer si__Table___items=14
constant integer si__Table___units=15
constant integer si__Table___abilitys=16
constant integer si__Table___timers=17
constant integer si__Table___triggers=18
constant integer si__Table___triggerconditions=19
constant integer si__Table___triggeractions=20
constant integer si__Table___events=21
constant integer si__Table___forces=22
constant integer si__Table___groups=23
constant integer si__Table___locations=24
constant integer si__Table___rects=25
constant integer si__Table___boolexprs=26
constant integer si__Table___sounds=27
constant integer si__Table___effects=28
constant integer si__Table___unitpools=29
constant integer si__Table___itempools=30
constant integer si__Table___quests=31
constant integer si__Table___questitems=32
constant integer si__Table___defeatconditions=33
constant integer si__Table___timerdialogs=34
constant integer si__Table___leaderboards=35
constant integer si__Table___multiboards=36
constant integer si__Table___multiboarditems=37
constant integer si__Table___trackables=38
constant integer si__Table___dialogs=39
constant integer si__Table___buttons=40
constant integer si__Table___texttags=41
constant integer si__Table___lightnings=42
constant integer si__Table___images=43
constant integer si__Table___ubersplats=44
constant integer si__Table___regions=45
constant integer si__Table___fogstates=46
constant integer si__Table___fogmodifiers=47
constant integer si__Table___hashtables=48
constant integer si__Table=49
constant integer si__TableArray=50
integer s__TableArray_tempTable
integer s__TableArray_tempEnd
constant integer si__HashTable=51
constant integer si__WorldBounds=52
integer s__WorldBounds_maxX
integer s__WorldBounds_maxY
integer s__WorldBounds_minX
integer s__WorldBounds_minY
integer s__WorldBounds_centerX
integer s__WorldBounds_centerY
rect s__WorldBounds_world
region s__WorldBounds_worldRegion
real s__WorldBounds_playMaxX
real s__WorldBounds_playMaxY
real s__WorldBounds_playMinX
real s__WorldBounds_playMinY
constant integer si__Components___IComponent=53
integer si__Components___IComponent_F=0
integer si__Components___IComponent_I=0
integer array si__Components___IComponent_V
integer array si__Components___IComponent_type
trigger array st__Components___IComponent_onDestroy
trigger array st__Components___IComponent_onText
trigger array st__Components___IComponent_onCheck
trigger array st__Components___IComponent_onEnter
trigger array st__Components___IComponent_onLeave
trigger array st__Components___IComponent_onClick
trigger array st__Components___IComponent_onSlide
trigger array st__Components___IComponent_onScroll
trigger array st__Components___IComponent_onUncheck
trigger array st__Components___IComponent_onRightClick
trigger array st__Components___IComponent_onMiddleClick
trigger array st__Components___IComponent_onDoubleClick
constant integer si__Tooltip=54
integer si__Tooltip_F=0
integer si__Tooltip_I=0
integer array si__Tooltip_V
framehandle array s__Tooltip_box
framehandle array s__Tooltip_line
framehandle array s__Tooltip_tooltip
framehandle array s__Tooltip_iconFrame
framehandle array s__Tooltip_nameFrame
framehandle array s__Tooltip_parentFrame
framepointtype array s__Tooltip_pointType
real array s__Tooltip_widthSize
string array s__Tooltip_texture
boolean array s__Tooltip_isVisible
boolean array s__Tooltip_simple
framehandle array s__Tooltip_frame
constant integer si__Backdrop=55
integer si__Backdrop_F=0
integer si__Backdrop_I=0
integer array si__Backdrop_V
string array s__Backdrop_path
real array s__Backdrop_Components___Operators____x
real array s__Backdrop_Components___Operators____y
real array s__Backdrop_Components___Operators____scale
real array s__Backdrop_Components___Operators____width
real array s__Backdrop_Components___Operators____height
integer array s__Backdrop_Components___Operators____alpha
boolean array s__Backdrop_Components___Operators____enabled
boolean array s__Backdrop_Components___Operators____visible
framehandle array s__Backdrop_Components___Operators____frame
framepointtype array s__Backdrop_Components___Operators____point
framepointtype array s__Backdrop_Components___Operators____relative
framehandle array s__Backdrop_parent
constant integer si__Sprite=56
integer si__Sprite_F=0
integer si__Sprite_I=0
integer array si__Sprite_V
string array s__Sprite_path
integer array s__Sprite_index
integer array s__Sprite_animtype
real array s__Sprite_Components___Operators____x
real array s__Sprite_Components___Operators____y
real array s__Sprite_Components___Operators____scale
real array s__Sprite_Components___Operators____width
real array s__Sprite_Components___Operators____height
integer array s__Sprite_Components___Operators____alpha
boolean array s__Sprite_Components___Operators____enabled
boolean array s__Sprite_Components___Operators____visible
framehandle array s__Sprite_Components___Operators____frame
framepointtype array s__Sprite_Components___Operators____point
framepointtype array s__Sprite_Components___Operators____relative
framehandle array s__Sprite_parent
constant integer si__Text=57
integer si__Text_F=0
integer si__Text_I=0
integer array si__Text_V
string array s__Text_value
textaligntype array s__Text_vert
textaligntype array s__Text_horz
real array s__Text_Components___Operators____x
real array s__Text_Components___Operators____y
real array s__Text_Components___Operators____scale
real array s__Text_Components___Operators____width
real array s__Text_Components___Operators____height
integer array s__Text_Components___Operators____alpha
boolean array s__Text_Components___Operators____enabled
boolean array s__Text_Components___Operators____visible
framehandle array s__Text_Components___Operators____frame
framepointtype array s__Text_Components___Operators____point
framepointtype array s__Text_Components___Operators____relative
framehandle array s__Text_parent
constant integer si__TextArea=58
integer si__TextArea_F=0
integer si__TextArea_I=0
integer array si__TextArea_V
string array s__TextArea_value
real array s__TextArea_Components___Operators____x
real array s__TextArea_Components___Operators____y
real array s__TextArea_Components___Operators____scale
real array s__TextArea_Components___Operators____width
real array s__TextArea_Components___Operators____height
integer array s__TextArea_Components___Operators____alpha
boolean array s__TextArea_Components___Operators____enabled
boolean array s__TextArea_Components___Operators____visible
framehandle array s__TextArea_Components___Operators____frame
framepointtype array s__TextArea_Components___Operators____point
framepointtype array s__TextArea_Components___Operators____relative
framehandle array s__TextArea_parent
constant integer si__StatusBar=59
integer si__StatusBar_F=0
integer si__StatusBar_I=0
integer array si__StatusBar_V
string array s__StatusBar_path
real array s__StatusBar_Components___Operators____x
real array s__StatusBar_Components___Operators____y
real array s__StatusBar_Components___Operators____scale
real array s__StatusBar_Components___Operators____width
real array s__StatusBar_Components___Operators____height
integer array s__StatusBar_Components___Operators____alpha
boolean array s__StatusBar_Components___Operators____enabled
boolean array s__StatusBar_Components___Operators____visible
framehandle array s__StatusBar_Components___Operators____frame
framepointtype array s__StatusBar_Components___Operators____point
framepointtype array s__StatusBar_Components___Operators____relative
framehandle array s__StatusBar_parent
constant integer si__Component=60
trigger s__Component_click= CreateTrigger()
trigger s__Component_enter= CreateTrigger()
trigger s__Component_leave= CreateTrigger()
trigger s__Component_scroll= CreateTrigger()
integer s__Component_table
integer s__Component_time
integer s__Component_doubleTime
integer array s__Component_array
integer array s__Component_image
boolean array s__Component_isActive
trigger array s__Component_exited
trigger array s__Component_entered
trigger array s__Component_clicked
trigger array s__Component_scrolled
trigger array s__Component_rightClicked
trigger array s__Component_doubleClicked
trigger array s__Component_middleClicked
framehandle array s__Component_button
framehandle array s__Component_listener
real array s__Component_Components___Operators____x
real array s__Component_Components___Operators____y
real array s__Component_Components___Operators____scale
real array s__Component_Components___Operators____width
real array s__Component_Components___Operators____height
integer array s__Component_Components___Operators____alpha
boolean array s__Component_Components___Operators____enabled
boolean array s__Component_Components___Operators____visible
framehandle array s__Component_Components___Operators____frame
framepointtype array s__Component_Components___Operators____point
framepointtype array s__Component_Components___Operators____relative
framehandle array s__Component_parent
constant integer si__EditBox=61
trigger s__EditBox_typing= CreateTrigger()
trigger s__EditBox_enter= CreateTrigger()
integer s__EditBox_table
string array s__EditBox_value
integer array s__EditBox_length
trigger array s__EditBox_typed
trigger array s__EditBox_entered
real array s__EditBox_Components___Operators____x
real array s__EditBox_Components___Operators____y
real array s__EditBox_Components___Operators____scale
real array s__EditBox_Components___Operators____width
real array s__EditBox_Components___Operators____height
integer array s__EditBox_Components___Operators____alpha
boolean array s__EditBox_Components___Operators____enabled
boolean array s__EditBox_Components___Operators____visible
framehandle array s__EditBox_Components___Operators____frame
framepointtype array s__EditBox_Components___Operators____point
framepointtype array s__EditBox_Components___Operators____relative
framehandle array s__EditBox_parent
constant integer si__CheckBox=62
trigger s__CheckBox_event= CreateTrigger()
integer s__CheckBox_table
trigger array s__CheckBox_check
trigger array s__CheckBox_uncheck
boolean array s___CheckBox_isChecked
constant integer s___CheckBox_isChecked_size=28
integer array s__CheckBox_isChecked
integer si__CheckBox_arrI=0
integer si__CheckBox_arrN=0
integer array si__CheckBox_arr
integer array si__CheckBox_arrV
real array s__CheckBox_Components___Operators____x
real array s__CheckBox_Components___Operators____y
real array s__CheckBox_Components___Operators____scale
real array s__CheckBox_Components___Operators____width
real array s__CheckBox_Components___Operators____height
integer array s__CheckBox_Components___Operators____alpha
boolean array s__CheckBox_Components___Operators____enabled
boolean array s__CheckBox_Components___Operators____visible
framehandle array s__CheckBox_Components___Operators____frame
framepointtype array s__CheckBox_Components___Operators____point
framepointtype array s__CheckBox_Components___Operators____relative
framehandle array s__CheckBox_parent
constant integer si__Slider=64
trigger s__Slider_event= CreateTrigger()
integer s__Slider_table
real array s__Slider_minimum
real array s__Slider_maximum
real array s__Slider_stepping
trigger array s__Slider_slided
real array s__Slider_Components___Operators____x
real array s__Slider_Components___Operators____y
real array s__Slider_Components___Operators____scale
real array s__Slider_Components___Operators____width
real array s__Slider_Components___Operators____height
integer array s__Slider_Components___Operators____alpha
boolean array s__Slider_Components___Operators____enabled
boolean array s__Slider_Components___Operators____visible
framehandle array s__Slider_Components___Operators____frame
framepointtype array s__Slider_Components___Operators____point
framepointtype array s__Slider_Components___Operators____relative
framehandle array s__Slider_parent
constant integer si__Button=65
integer array s__Button_tagger
integer array s__Button_sprite
integer array s__Button_player
integer array s__Button_check
integer array s__Button_block
boolean array s__Button_isHighlighted
framehandle array s__Button_highlight
framehandle array s__Button_chargesFrame
integer array s__Button_tooltip
constant integer si__Panel=66
constant integer si__Line=67
constant integer si__CooldownReduction___AbilityList=68
integer s__CooldownReduction___AbilityList_Alloc___instanceCount= 0
integer array s__CooldownReduction___AbilityList_Alloc___recycle
integer array s__CooldownReduction___AbilityList_next
integer array s__CooldownReduction___AbilityList_prev
unit array s__CooldownReduction___AbilityList_unit
ability array s__CooldownReduction___AbilityList_ability
integer array s__CooldownReduction___AbilityList_defaults
integer array s__CooldownReduction___AbilityList_id
integer array s__CooldownReduction___AbilityList_levels
constant integer si__CDR=69
integer si__CDR_F=0
integer si__CDR_I=0
integer array si__CDR_V
hashtable s__CDR_hashtable= InitHashtable()
integer array s__CDR_n
integer array s__CDR_count
real array s__CDR_normal
real array s__CDR_flat
real array s__CDR_offset
constant integer si__DamageInterface___Unit=70
integer si__DamageInterface___Unit_F=0
integer si__DamageInterface___Unit_I=0
integer array si__DamageInterface___Unit_V
location s__DamageInterface___Unit_location= Location(0, 0)
unit array s__DamageInterface___Unit_unit
constant integer si__Damage=71
trigger s__Damage_damaged= CreateTrigger()
trigger s__Damage_damaging= CreateTrigger()
trigger s__Damage_anyAfter= CreateTrigger()
trigger s__Damage_anyBefore= CreateTrigger()
integer s__Damage_after
integer s__Damage_before
integer s__Damage_key= 0
integer array s__Damage_sources
integer array s__Damage_targets
real array s__Damage_damage
boolean array s__Damage_evade
unit array s__Damage_newSource
unit array s__Damage_newTarget
attacktype array s__Damage_attackType
damagetype array s__Damage_damageType
weapontype array s__Damage_weaponType
constant integer si__Evasion=72
integer si__Evasion_F=0
integer si__Evasion_I=0
integer array si__Evasion_V
integer s__Evasion_source
integer s__Evasion_target
real s__Evasion_damage
real array s__Evasion_miss
real array s__Evasion_evasion
integer array s__Evasion_pierce
trigger s__Evasion_trigger= CreateTrigger()
constant integer si__Critical=73
integer si__Critical_F=0
integer si__Critical_I=0
integer array si__Critical_V
integer s__Critical_source
integer s__Critical_target
real array s__Critical_chance
real array s__Critical_multiplier
trigger s__Critical_trigger= CreateTrigger()
real s__Critical_damage
constant integer si__ArmorPenetration=74
integer si__ArmorPenetration_F=0
integer si__ArmorPenetration_I=0
integer array si__ArmorPenetration_V
real array s__ArmorPenetration_flat
real array s__ArmorPenetration_percent
constant integer si__MagicPenetration=75
integer si__MagicPenetration_F=0
integer si__MagicPenetration_I=0
integer array si__MagicPenetration_V
real array s__MagicPenetration_flat
real array s__MagicPenetration_percent
constant integer si__MagicResistance=76
integer si__MagicResistance_F=0
integer si__MagicResistance_I=0
integer array si__MagicResistance_V
boolean array s__MagicResistance_check
real array s__MagicResistance_resistance
constant integer si__MissileEffect___Effect=77
integer array s__MissileEffect___Effect_next
integer array s__MissileEffect___Effect_prev
integer s__MissileEffect___Effect_Alloc___instanceCount= 0
integer array s__MissileEffect___Effect_Alloc___recycle
real array s__MissileEffect___Effect_x
real array s__MissileEffect___Effect_y
real array s__MissileEffect___Effect_z
real array s__MissileEffect___Effect_size
real array s__MissileEffect___Effect_yaw
real array s__MissileEffect___Effect_pitch
real array s__MissileEffect___Effect_roll
string array s__MissileEffect___Effect_path
effect array s__MissileEffect___Effect_effect
constant integer si__MissileEffect=78
integer si__MissileEffect_F=0
integer si__MissileEffect_I=0
integer array si__MissileEffect_V
real array s__MissileEffect_size
real array s__MissileEffect_yaw
real array s__MissileEffect_pitch
real array s__MissileEffect_roll
real array s__MissileEffect_time
integer array s__MissileEffect_transparency
integer array s__MissileEffect_animtype
integer array s__MissileEffect_playercolor
string array s__MissileEffect_path
effect array s__MissileEffect_effect
integer array s__MissileEffect_attachments
constant integer si__PluginSpellEffect___Unit=79
integer si__PluginSpellEffect___Unit_F=0
integer si__PluginSpellEffect___Unit_I=0
integer array si__PluginSpellEffect___Unit_V
location s__PluginSpellEffect___Unit_location= Location(0, 0)
unit array s__PluginSpellEffect___Unit_unit
constant integer si__Spell=80
location s__Spell_location= Location(0, 0)
integer s__Spell_source
integer s__Spell_target
constant integer si__SpellEffectEvent___S=81
integer s__SpellEffectEvent___S_tb
constant integer si__Tenacity___List=82
integer s__Tenacity___List_Alloc___instanceCount= 0
integer array s__Tenacity___List_Alloc___recycle
integer array s__Tenacity___List_next
integer array s__Tenacity___List_prev
real array s__Tenacity___List_tenacity
real array s__Tenacity___List_value
integer array s__Tenacity___List_size
constant integer si__Tenacity=83
integer si__Tenacity_F=0
integer si__Tenacity_I=0
integer array si__Tenacity_V
integer array s__Tenacity_struct
integer array s__Tenacity_list
real array s__Tenacity_flat
real array s__Tenacity_offset
constant integer si__effectTimed=84
integer si__effectTimed_F=0
integer si__effectTimed_I=0
integer array si__effectTimed_V
effect array s__effectTimed_effect_var
integer s__effectTimed_index= - 1
integer array s__effectTimed_instance
real s__effectTimed_REAL=TimedHandles___UPDATE_PERIOD
timer s__effectTimed_timer= CreateTimer()
real array s__effectTimed_duration
real array s__effectTimed_elapsed
constant integer si__lightningTimed=85
integer si__lightningTimed_F=0
integer si__lightningTimed_I=0
integer array si__lightningTimed_V
lightning array s__lightningTimed_lightning_var
integer s__lightningTimed_index= - 1
integer array s__lightningTimed_instance
real s__lightningTimed_REAL=TimedHandles___UPDATE_PERIOD
timer s__lightningTimed_timer= CreateTimer()
real array s__lightningTimed_duration
real array s__lightningTimed_elapsed
constant integer si__weathereffectTimed=86
integer si__weathereffectTimed_F=0
integer si__weathereffectTimed_I=0
integer array si__weathereffectTimed_V
weathereffect array s__weathereffectTimed_weathereffect_var
integer s__weathereffectTimed_index= - 1
integer array s__weathereffectTimed_instance
real s__weathereffectTimed_REAL=TimedHandles___UPDATE_PERIOD
timer s__weathereffectTimed_timer= CreateTimer()
real array s__weathereffectTimed_duration
real array s__weathereffectTimed_elapsed
constant integer si__itemTimed=87
integer si__itemTimed_F=0
integer si__itemTimed_I=0
integer array si__itemTimed_V
item array s__itemTimed_item_var
integer s__itemTimed_index= - 1
integer array s__itemTimed_instance
real s__itemTimed_REAL=TimedHandles___UPDATE_PERIOD
timer s__itemTimed_timer= CreateTimer()
real array s__itemTimed_duration
real array s__itemTimed_elapsed
constant integer si__unitTimed=88
integer si__unitTimed_F=0
integer si__unitTimed_I=0
integer array si__unitTimed_V
unit array s__unitTimed_unit_var
integer s__unitTimed_index= - 1
integer array s__unitTimed_instance
real s__unitTimed_REAL=TimedHandles___UPDATE_PERIOD
timer s__unitTimed_timer= CreateTimer()
real array s__unitTimed_duration
real array s__unitTimed_elapsed
constant integer si__ubersplatTimed=89
integer si__ubersplatTimed_F=0
integer si__ubersplatTimed_I=0
integer array si__ubersplatTimed_V
ubersplat array s__ubersplatTimed_ubersplat_var
integer s__ubersplatTimed_index= - 1
integer array s__ubersplatTimed_instance
real s__ubersplatTimed_REAL=TimedHandles___UPDATE_PERIOD
timer s__ubersplatTimed_timer= CreateTimer()
real array s__ubersplatTimed_duration
real array s__ubersplatTimed_elapsed
constant integer si__Ability___IAbility=90
integer si__Ability___IAbility_F=0
integer si__Ability___IAbility_I=0
integer array si__Ability___IAbility_V
integer array si__Ability___IAbility_type
trigger array st__Ability___IAbility_onDestroy
trigger array st__Ability___IAbility_onCast
trigger array st__Ability___IAbility_onLearn
trigger array st__Ability___IAbility_onTooltip
constant integer si__Ability=91
integer s__Ability_struct
integer s__Ability_learned
integer s__Ability_key= - 1
integer array s__Ability_array
timer s__Ability_timer= CreateTimer()
unit array s__Ability_unit
integer array s__Ability_id
integer array s__Ability_type
ability array s__Ability_ability
constant integer si__ArcingTextTag=92
integer si__ArcingTextTag_F=0
integer si__ArcingTextTag_I=0
integer array si__ArcingTextTag_V
integer s__ArcingTextTag_table
integer s__ArcingTextTag_key= 0
real array s__ArcingTextTag_x
real array s__ArcingTextTag_y
real array s__ArcingTextTag_sin
real array s__ArcingTextTag_cos
real array s__ArcingTextTag_duration
string array s__ArcingTextTag_text
texttag array s__ArcingTextTag_texttag
constant real s__ArcingTextTag_Periodic___PERIODIC_THRESHOLD= 5
integer s__ArcingTextTag_Periodic___key
integer s__ArcingTextTag_Periodic___table
integer s__ArcingTextTag_Periodic___struct
integer s__ArcingTextTag_Periodic___timers
timer array s__ArcingTextTag_Periodic____timer
integer array s__ArcingTextTag_Periodic____unique
boolean array s__ArcingTextTag_Periodic____allocated
constant integer si__CooldownReductionUtils___CDRUtils=93
timer s__CooldownReductionUtils___CDRUtils_t= CreateTimer()
integer s__CooldownReductionUtils___CDRUtils_didx= - 1
integer array s__CooldownReductionUtils___CDRUtils_data
unit array s__CooldownReductionUtils___CDRUtils_u
real array s__CooldownReductionUtils___CDRUtils_ticks
real array s__CooldownReductionUtils___CDRUtils_amount
integer array s__CooldownReductionUtils___CDRUtils_tipo
constant integer si__Missiles___MissileEvents=94
integer si__Missiles___MissileEvents_F=0
integer si__Missiles___MissileEvents_I=0
integer array si__Missiles___MissileEvents_V
integer array si__Missiles___MissileEvents_type
trigger array st__Missiles___MissileEvents_onDestroy
trigger array st__Missiles___MissileEvents_onHit
trigger array st__Missiles___MissileEvents_onMissile
trigger array st__Missiles___MissileEvents_onDestructable
trigger array st__Missiles___MissileEvents_onItem
trigger array st__Missiles___MissileEvents_onCliff
trigger array st__Missiles___MissileEvents_onTerrain
trigger array st__Missiles___MissileEvents_onTileset
trigger array st__Missiles___MissileEvents_onPeriod
trigger array st__Missiles___MissileEvents_onFinish
trigger array st__Missiles___MissileEvents_onBoundaries
trigger array st__Missiles___MissileEvents_onPause
trigger array st__Missiles___MissileEvents_onResume
trigger array st__Missiles___MissileEvents_onRemove
constant integer si__Missiles___Pool=95
integer si__Missiles___Pool_F=0
integer si__Missiles___Pool_I=0
integer array si__Missiles___Pool_V
player s__Missiles___Pool_player= Player(PLAYER_NEUTRAL_PASSIVE)
group s__Missiles___Pool_group= CreateGroup()
timer array s__Missiles___Pool_timer
unit array s__Missiles___Pool_unit
constant integer si__Missiles___Coordinates=96
integer si__Missiles___Coordinates_F=0
integer si__Missiles___Coordinates_I=0
integer array si__Missiles___Coordinates_V
real array s__Missiles___Coordinates_x
real array s__Missiles___Coordinates_y
real array s__Missiles___Coordinates_z
real array s__Missiles___Coordinates_angle
real array s__Missiles___Coordinates_distance
real array s__Missiles___Coordinates_square
real array s__Missiles___Coordinates_slope
real array s__Missiles___Coordinates_alpha
integer array s__Missiles___Coordinates_ref
constant integer si__Missiles=97
timer s__Missiles_timer= CreateTimer()
group s__Missiles_group= CreateGroup()
rect s__Missiles_rect= Rect(0., 0., 0., 0.)
hashtable s__Missiles_table= InitHashtable()
integer s__Missiles_last= 0
integer s__Missiles_temp= 0
integer s__Missiles_id= - 1
integer s__Missiles_pid= - 1
integer array s__Missiles_missiles
integer array s__Missiles_frozen
real s__Missiles_dilation= 1
integer array s__Missiles_collection
integer s__Missiles_count= - 1
real array s__Missiles_cA
real array s__Missiles_height
real array s__Missiles_open
real array s__Missiles_toZ
real array s__Missiles_time
real array s__Missiles_sight
unit array s__Missiles_dummy
integer array s__Missiles_pkey
integer array s__Missiles_index
integer array s__Missiles_impact
integer array s__Missiles_origin
integer array s__Missiles_effect
real array s__Missiles_x
real array s__Missiles_y
real array s__Missiles_z
real array s__Missiles_prevX
real array s__Missiles_prevY
real array s__Missiles_prevZ
real array s__Missiles_nextX
real array s__Missiles_nextY
real array s__Missiles_nextZ
real array s__Missiles_turn
real array s__Missiles_veloc
real array s__Missiles_travel
boolean array s__Missiles_launched
boolean array s__Missiles_allocated
boolean array s__Missiles_finished
boolean array s__Missiles_paused
integer array s__Missiles_tileset
unit array s__Missiles_source
unit array s__Missiles_target
player array s__Missiles_owner
boolean array s__Missiles_collideZ
real array s__Missiles_collision
real array s__Missiles_damage
real array s__Missiles_acceleration
integer array s__Missiles_data
integer array s__Missiles_type
boolean array s__Missiles_roll
constant integer si__NewBonus___IBonus=98
integer si__NewBonus___IBonus_F=0
integer si__NewBonus___IBonus_I=0
integer array si__NewBonus___IBonus_V
integer array si__NewBonus___IBonus_type
trigger array st__NewBonus___IBonus_onDestroy
trigger array st__NewBonus___IBonus_get
trigger array st__NewBonus___IBonus_Set
trigger array st__NewBonus___IBonus_add
constant integer si__Bonus=99
integer s__Bonus_table
integer s__Bonus_key= 0
integer s__Bonus_index= - 1
integer array s__Bonus_array
trigger array s__Bonus_event
integer array s__Bonus_struct
trigger s__Bonus_trigger= CreateTrigger()
item array s__Bonus_item
real array s__Bonus_value
unit array s__Bonus_source
integer array s__Bonus_buff
integer array s__Bonus_bonus
unit array s__Bonus_unit
real array s__Bonus_amount
integer array s__Bonus_type
constant real s__Bonus_Periodic___PERIODIC_THRESHOLD= 5
integer s__Bonus_Periodic___key
integer s__Bonus_Periodic___table
integer s__Bonus_Periodic___struct
integer s__Bonus_Periodic___timers
timer array s__Bonus_Periodic____timer
integer array s__Bonus_Periodic____unique
boolean array s__Bonus_Periodic____allocated
constant integer si__TenacityUtils=100
timer s__TenacityUtils_timer= CreateTimer()
integer array s__TenacityUtils_array
integer s__TenacityUtils_key= - 1
real s__TenacityUtils_period= 0.03125000
unit array s__TenacityUtils_unit
real array s__TenacityUtils_value
integer array s__TenacityUtils_type
real array s__TenacityUtils_duration
constant integer si__ResetCooldown=101
integer si__ResetCooldown_F=0
integer si__ResetCooldown_I=0
integer array si__ResetCooldown_V
timer array s__ResetCooldown_timer
unit array s__ResetCooldown_unit
integer array s__ResetCooldown_ability
constant integer si__TimedAbility=102
integer si__TimedAbility_F=0
integer si__TimedAbility_I=0
integer array si__TimedAbility_V
timer s__TimedAbility_timer= CreateTimer()
integer s__TimedAbility_key= - 1
integer array s__TimedAbility_array
unit array s__TimedAbility_unit
integer array s__TimedAbility_ability
real array s__TimedAbility_duration
constant integer si__EffectSpam=103
integer si__EffectSpam_F=0
integer si__EffectSpam_I=0
integer array si__EffectSpam_V
timer array s__EffectSpam_timer
unit array s__EffectSpam_unit
integer array s__EffectSpam_i
string array s__EffectSpam_effect
string array s__EffectSpam_point
real array s__EffectSpam_scale
real array s__EffectSpam_x
real array s__EffectSpam_y
real array s__EffectSpam_z
constant integer si__ChainLightning=104
integer si__ChainLightning_F=0
integer si__ChainLightning_I=0
integer array si__ChainLightning_V
timer array s__ChainLightning_timer
unit array s__ChainLightning_unit
unit array s__ChainLightning_prev
unit array s__ChainLightning_self
unit array s__ChainLightning_next
group array s__ChainLightning_group
group array s__ChainLightning_damaged
player array s__ChainLightning_player
real array s__ChainLightning_damage
real array s__ChainLightning_range
real array s__ChainLightning_duration
integer array s__ChainLightning_bounces
attacktype array s__ChainLightning_attacktype
damagetype array s__ChainLightning_damagetype
string array s__ChainLightning_lightning
string array s__ChainLightning_effect
string array s__ChainLightning_attach
boolean array s__ChainLightning_rebounce
constant integer si__DummyPool=105
integer si__DummyPool_F=0
integer si__DummyPool_I=0
integer array si__DummyPool_V
player s__DummyPool_player= Player(PLAYER_NEUTRAL_PASSIVE)
group s__DummyPool_group= CreateGroup()
timer array s__DummyPool_timer
unit array s__DummyPool_unit
constant integer si__EffectLink=106
integer si__EffectLink_F=0
integer si__EffectLink_I=0
integer array si__EffectLink_V
timer s__EffectLink_timer= CreateTimer()
integer s__EffectLink_didx= - 1
integer array s__EffectLink_data
integer s__EffectLink_ditem= - 1
integer array s__EffectLink_items
unit array s__EffectLink_unit
effect array s__EffectLink_effect
item array s__EffectLink_item
integer array s__EffectLink_buff
constant integer si__AbilityCooldown=107
integer si__AbilityCooldown_F=0
integer si__AbilityCooldown_I=0
integer array si__AbilityCooldown_V
timer array s__AbilityCooldown_timer
unit array s__AbilityCooldown_unit
integer array s__AbilityCooldown_ability
real array s__AbilityCooldown_newCd
constant integer si__TimedDestructable=108
integer si__TimedDestructable_F=0
integer si__TimedDestructable_I=0
integer array si__TimedDestructable_V
constant real s__TimedDestructable_period= 0.03125000
timer s__TimedDestructable_timer= CreateTimer()
integer s__TimedDestructable_id= - 1
integer array s__TimedDestructable_array
destructable array s__TimedDestructable_destructable
real array s__TimedDestructable_duration
constant integer si__TimedPause=109
integer si__TimedPause_F=0
integer si__TimedPause_I=0
integer array si__TimedPause_V
integer array s__TimedPause_array
timer array s__TimedPause_timer
unit array s__TimedPause_unit
integer array s__TimedPause_key
boolean array s__TimedPause_flag
constant integer si__Afterburner___Afterburner=110
integer array s__Afterburner___Afterburner_array
unit array s__Afterburner___Afterburner_unit
unit array s__Afterburner___Afterburner_dummy
integer array s__Afterburner___Afterburner_id
constant real s__Afterburner___Afterburner_Periodic___PERIODIC_THRESHOLD= 5
integer s__Afterburner___Afterburner_Periodic___key
integer s__Afterburner___Afterburner_Periodic___table
integer s__Afterburner___Afterburner_Periodic___struct
integer s__Afterburner___Afterburner_Periodic___timers
timer array s__Afterburner___Afterburner_Periodic____timer
integer array s__Afterburner___Afterburner_Periodic____unique
boolean array s__Afterburner___Afterburner_Periodic____allocated
constant integer si__Knockback=111
integer si__Knockback_F=0
integer si__Knockback_I=0
integer array si__Knockback_V
timer s__Knockback_timer= CreateTimer()
rect s__Knockback_rect= Rect(0., 0., 0., 0.)
constant real s__Knockback_period= 0.03125
integer array s__Knockback_array
integer array s__Knockback_struct
integer s__Knockback_key= - 1
integer s__Knockback_temp
unit array s__Knockback_unit
group array s__Knockback_group
real array s__Knockback_angle
real array s__Knockback_offset
real array s__Knockback_distance
real array s__Knockback_duration
real array s__Knockback_collision
integer array s__Knockback_id
effect array s__Knockback_effect
boolean array s__Knockback_onCliff
boolean array s__Knockback_onDest
boolean array s__Knockback_onUnit
constant integer si__Knockup=112
integer si__Knockup_F=0
integer si__Knockup_I=0
integer array si__Knockup_V
integer array s__Knockup_knocked
timer array s__Knockup_timer
unit array s__Knockup_unit
effect array s__Knockup_effect
integer array s__Knockup_key
boolean array s__Knockup_up
real array s__Knockup_rate
real array s__Knockup_airTime
constant integer si__Fear=113
integer si__Fear_F=0
integer si__Fear_I=0
integer array si__Fear_V
timer s__Fear_timer= CreateTimer()
constant integer s__Fear_DIRECTION_CHANGE= 5
constant real s__Fear_MAX_CHANGE= 200.
constant real s__Fear_PERIOD= 1. / 5.
integer s__Fear_key= - 1
integer array s__Fear_array
integer array s__Fear_struct
boolean array s__Fear_flag
real array s__Fear_x
real array s__Fear_y
ability s__Fear_ability
unit s__Fear_dummy
unit array s__Fear_unit
effect array s__Fear_effect
integer array s__Fear_id
integer array s__Fear_change
constant integer si__Taunt=114
integer si__Taunt_F=0
integer si__Taunt_I=0
integer array si__Taunt_V
constant real s__Taunt_PERIOD= 0.2
unit s__Taunt_dummy
integer s__Taunt_key= - 1
integer array s__Taunt_array
integer array s__Taunt_struct
timer s__Taunt_timer= CreateTimer()
ability s__Taunt_ability
unit array s__Taunt_source
unit array s__Taunt_unit
effect array s__Taunt_effect
integer array s__Taunt_id
boolean array s__Taunt_selected
constant integer si__CrowdControl=115
trigger s__CrowdControl_trigger= CreateTrigger()
hashtable s__CrowdControl_timer= InitHashtable()
trigger array s__CrowdControl_event
integer array s__CrowdControl_ability
integer array s__CrowdControl_buff
string array s__CrowdControl_order
integer s__CrowdControl_count= 0
unit s__CrowdControl_dummy
integer s__CrowdControl_key= - 1
unit array s__CrowdControl_unit
unit array s__CrowdControl_source
real array s__CrowdControl_amount
real array s__CrowdControl_duration
real array s__CrowdControl_angle
real array s__CrowdControl_distance
real array s__CrowdControl_height
string array s__CrowdControl_model
string array s__CrowdControl_point
boolean array s__CrowdControl_stack
boolean array s__CrowdControl_cliff
boolean array s__CrowdControl_destructable
boolean array s__CrowdControl_agent
integer array s__CrowdControl_type
constant integer si__Item___IItem=116
integer si__Item___IItem_F=0
integer si__Item___IItem_I=0
integer array si__Item___IItem_V
integer array si__Item___IItem_type
trigger array st__Item___IItem_onDestroy
real array s__Item___IItem_mana
real array s__Item___IItem_armor
real array s__Item___IItem_block
real array s__Item___IItem_damage
real array s__Item___IItem_health
real array s__Item___IItem_evasion
real array s__Item___IItem_agility
real array s__Item___IItem_strength
real array s__Item___IItem_tenacity
real array s__Item___IItem_lifeSteal
real array s__Item___IItem_spellVamp
real array s__Item___IItem_manaRegen
real array s__Item___IItem_sightRange
real array s__Item___IItem_missChance
real array s__Item___IItem_spellPower
real array s__Item___IItem_healthRegen
real array s__Item___IItem_attackSpeed
real array s__Item___IItem_intelligence
real array s__Item___IItem_tenacityFlat
real array s__Item___IItem_movementSpeed
real array s__Item___IItem_criticalDamage
real array s__Item___IItem_criticalChance
real array s__Item___IItem_cooldownOffset
real array s__Item___IItem_tenacityOffset
real array s__Item___IItem_magicResistance
real array s__Item___IItem_armorPenetration
real array s__Item___IItem_magicPenetration
real array s__Item___IItem_cooldownReduction
real array s__Item___IItem_armorPenetrationFlat
real array s__Item___IItem_magicPenetrationFlat
real array s__Item___IItem_cooldownReductionFlat
trigger array st__Item___IItem_onTooltip
trigger array st__Item___IItem_onPickup
trigger array st__Item___IItem_onDrop
constant integer si__Item=117
unit s__Item_shop
rect s__Item_rect
integer s__Item_key= - 1
integer s__Item_table
integer s__Item_itempool
integer s__Item_itemtype
integer s__Item_counters
integer s__Item_relations
integer array s__Item_array
timer s__Item_timer= CreateTimer()
trigger s__Item_trigger= CreateTrigger()
player s__Item_player= Player(bj_PLAYER_NEUTRAL_EXTRA)
unit array s__Item_unit
item array s__Item_item
integer array s__Item_index
integer array s__Item_type
integer array s__Item_id
constant integer si__MissileUtils___MGroup=118
integer array s__MissileUtils___MGroup_next
integer array s__MissileUtils___MGroup_prev
integer s__MissileUtils___MGroup_Alloc___instanceCount= 0
integer array s__MissileUtils___MGroup_Alloc___recycle
integer array s__MissileUtils___MGroup_missile
constant integer si__MissileGroup=119
integer si__MissileGroup_F=0
integer si__MissileGroup_I=0
integer array si__MissileGroup_V
integer array s__MissileGroup_group
integer array s__MissileGroup_size
constant integer si__MoltenShield___MoltenShield=120
real array s__MoltenShield___MoltenShield_stored
unit array s__MoltenShield___MoltenShield_unit
integer array s__MoltenShield___MoltenShield_id
integer array s__MoltenShield___MoltenShield_level
constant real s__MoltenShield___MoltenShield_Periodic___PERIODIC_THRESHOLD= 5
integer s__MoltenShield___MoltenShield_Periodic___key
integer s__MoltenShield___MoltenShield_Periodic___table
integer s__MoltenShield___MoltenShield_Periodic___struct
integer s__MoltenShield___MoltenShield_Periodic___timers
timer array s__MoltenShield___MoltenShield_Periodic____timer
integer array s__MoltenShield___MoltenShield_Periodic____unique
boolean array s__MoltenShield___MoltenShield_Periodic____allocated
constant integer si__Sulfuras=121
integer si__Sulfuras_F=0
integer si__Sulfuras_I=0
integer array si__Sulfuras_V
integer array s__Sulfuras_count
integer array s__Sulfuras_stacks
constant integer si__ExplosiveRune___ExplosiveRune=122
integer array s__ExplosiveRune___ExplosiveRune_charges
real array s__ExplosiveRune___ExplosiveRune_x
real array s__ExplosiveRune___ExplosiveRune_y
real array s__ExplosiveRune___ExplosiveRune_aoe
unit array s__ExplosiveRune___ExplosiveRune_unit
integer array s__ExplosiveRune___ExplosiveRune_id
real array s__ExplosiveRune___ExplosiveRune_damage
constant real s__ExplosiveRune___ExplosiveRune_Periodic___PERIODIC_THRESHOLD= 5
integer s__ExplosiveRune___ExplosiveRune_Periodic___key
integer s__ExplosiveRune___ExplosiveRune_Periodic___table
integer s__ExplosiveRune___ExplosiveRune_Periodic___struct
integer s__ExplosiveRune___ExplosiveRune_Periodic___timers
timer array s__ExplosiveRune___ExplosiveRune_Periodic____timer
integer array s__ExplosiveRune___ExplosiveRune_Periodic____unique
boolean array s__ExplosiveRune___ExplosiveRune_Periodic____allocated
constant integer si__LavaElemental___LavaElemental=123
integer array s__LavaElemental___LavaElemental_array
unit array s__LavaElemental___LavaElemental_unit
integer array s__LavaElemental___LavaElemental_id
effect array s__LavaElemental___LavaElemental_effect
constant integer si__LivingMeteor___Meteor=124
integer s__LivingMeteor___Meteor_ticks= R2I(LivingMeteor___DAMAGE_INTERVAL / Missiles_PERIOD)
real array s__LivingMeteor___Meteor_aoe
real array s__LivingMeteor___Meteor_angle
real array s__LivingMeteor___Meteor_distance
integer array s__LivingMeteor___Meteor_i
integer array s__LivingMeteor___Meteor_j
integer array s__LivingMeteor___Meteor_level
boolean array s__LivingMeteor___Meteor_rolling
constant integer si__LivingMeteor___LivingMeteor=125
real array s__LivingMeteor___LivingMeteor_x
real array s__LivingMeteor___LivingMeteor_y
unit array s__LivingMeteor___LivingMeteor_unit
player array s__LivingMeteor___LivingMeteor_player
integer array s__LivingMeteor___LivingMeteor_level
ability array s__LivingMeteor___LivingMeteor_ability
constant real s__LivingMeteor___LivingMeteor_Periodic___PERIODIC_THRESHOLD= 5
integer s__LivingMeteor___LivingMeteor_Periodic___key
integer s__LivingMeteor___LivingMeteor_Periodic___table
integer s__LivingMeteor___LivingMeteor_Periodic___struct
integer s__LivingMeteor___LivingMeteor_Periodic___timers
timer array s__LivingMeteor___LivingMeteor_Periodic____timer
integer array s__LivingMeteor___LivingMeteor_Periodic____unique
boolean array s__LivingMeteor___LivingMeteor_Periodic____allocated
constant integer si__Shop___Sound=126
integer si__Shop___Sound_F=0
integer si__Shop___Sound_I=0
integer array si__Shop___Sound_V
sound s__Shop___Sound_success_sound
sound s__Shop___Sound_error_sound
sound array s__Shop___Sound_noGold
constant integer si__Shop___Transaction=127
integer si__Shop___Transaction_F=0
integer si__Shop___Transaction_I=0
integer array si__Shop___Transaction_V
integer s__Shop___Transaction_counter
integer s__Shop___Transaction_transactions
integer array s__Shop___Transaction_index
integer array s__Shop___Transaction_shop
integer array s__Shop___Transaction_item
unit array s__Shop___Transaction_unit
string array s__Shop___Transaction_type
integer array s__Shop___Transaction_id
integer array s__Shop___Transaction_gold
player array s__Shop___Transaction_player
integer array s__Shop___Transaction_component
constant integer si__Shop___Inventory=128
integer si__Shop___Inventory_F=0
integer si__Shop___Inventory_I=0
integer array si__Shop___Inventory_V
boolean array s__Shop___Inventory_isVisible
integer array s__Shop___Inventory_shop
integer array s__Shop___Inventory_selected
integer array s__Shop___Inventory_item
integer array s__Shop___Inventory_button
framehandle array s__Shop___Inventory_frame
constant integer si__Shop___Slot=129
integer array s__Shop___Slot_shop
integer array s__Shop___Slot_item
integer array s__Shop___Slot_cost
integer array s__Shop___Slot_gold
integer array s__Shop___Slot_next
integer array s__Shop___Slot_prev
integer array s__Shop___Slot_left
integer array s__Shop___Slot_right
integer array s__Shop___Slot_current_row
integer array s__Shop___Slot_current_column
constant integer si__Shop___Detail=130
integer array s__Shop___Detail_shop
integer array s__Shop___Detail_uses
integer array s__Shop___Detail_left
integer array s__Shop___Detail_right
integer array s__Shop___Detail_close
integer array s__Shop___Detail_item
integer array s__Shop___Detail_main
integer array s__Shop___Detail_count
integer array s__Shop___Detail_usedText
integer array s__Shop___Detail_separator
integer array s__Shop___Detail_vertical
integer array s__Shop___Detail_horizontal
integer array s__Shop___Detail_used
integer array s__Shop___Detail_lines
integer array s__Shop___Detail_button
integer array s__Shop___Detail_components
integer array s___Shop___Detail_description
constant integer s___Shop___Detail_description_size=4
integer array s__Shop___Detail_description
integer si__Shop___Detail_arrI=0
integer si__Shop___Detail_arrN=0
integer array si__Shop___Detail_arr
integer array si__Shop___Detail_arrV
constant integer si__Shop___Buyer=132
integer s__Shop___Buyer_current
boolean array s__Shop___Buyer_isVisible
integer array s__Shop___Buyer_shop
integer array s__Shop___Buyer_left
integer array s__Shop___Buyer_right
integer array s__Shop___Buyer_inventory
integer array s__Shop___Buyer_last
integer array s__Shop___Buyer_index
integer array s__Shop___Buyer_size
integer array s__Shop___Buyer_selected
integer array s__Shop___Buyer_unit
integer array s__Shop___Buyer_button
constant integer si__Shop___Favorites=133
integer array s__Shop___Favorites_shop
integer array s__Shop___Favorites_clear
integer array s__Shop___Favorites_count
integer array s__Shop___Favorites_item
integer array s__Shop___Favorites_button
constant integer si__Shop___Category=134
integer array s__Shop___Category_shop
integer array s__Shop___Category_clear
integer array s__Shop___Category_logic
integer array s__Shop___Category_count
integer array s__Shop___Category_active
boolean array s__Shop___Category_andLogic
integer array s___Shop___Category_value
constant integer s___Shop___Category_value_size=13
integer array s__Shop___Category_value
integer si__Shop___Category_arrI=0
integer si__Shop___Category_arrN=0
integer array si__Shop___Category_arr
integer array si__Shop___Category_arrV
integer array s___Shop___Category_button
constant integer s___Shop___Category_button_size=13
integer array s__Shop___Category_button
constant integer si__Shop=137
integer s__Shop_count= - 1
integer s__Shop_itempool
unit array s__Shop_unit
group array s__Shop_group
boolean array s__Shop_isVisible
real array s__Shop_aoe
real array s__Shop_tax
integer array s__Shop_id
integer array s__Shop_size
integer array s__Shop_index
integer array s__Shop_rows
integer array s__Shop_columns
boolean array s__Shop_detailed
integer array s__Shop_first
integer array s__Shop_last
integer array s__Shop_head
integer array s__Shop_tail
integer array s__Shop_edit
integer array s__Shop_close
integer array s__Shop_break
integer array s__Shop_revert
integer array s__Shop_buyer
integer array s__Shop_details
integer array s__Shop_category
integer array s__Shop_favorites
integer array s__Shop_scrolls
constant integer si__SulfurasSmash___Hammer=138
real array s__SulfurasSmash___Hammer_aoe
real array s__SulfurasSmash___Hammer_stun
integer array s__SulfurasSmash___Hammer_level
constant integer si__SulfurasSmash___SulfurasSmash=139
constant integer si__MissChance___Miss=140
constant integer si__Armor___Armor=141
constant integer s__Armor___Armor_ability= 'Z002'
constant abilityintegerlevelfield s__Armor___Armor_field= ABILITY_ILF_DEFENSE_BONUS_IDEF
constant integer si__Block___Block=142
real array s__Block___Block_block
constant integer si__Mana___Mana=143
constant integer s__Mana___Mana_ability= 'Z005'
constant abilityintegerlevelfield s__Mana___Mana_field= ABILITY_ILF_MAX_MANA_GAINED
constant integer si__Agility___Agility=144
constant integer s__Agility___Agility_ability= 'Z003'
constant abilityintegerlevelfield s__Agility___Agility_field= ABILITY_ILF_AGILITY_BONUS
constant integer si__Health___Health=145
constant integer s__Health___Health_ability= 'Z004'
constant abilityintegerlevelfield s__Health___Health_field= ABILITY_ILF_MAX_LIFE_GAINED
constant integer si__EvasionChance___Evasion=146
constant integer s__EvasionChance___Evasion_ability= 'Z00D'
constant abilityreallevelfield s__EvasionChance___Evasion_field= ABILITY_RLF_CHANCE_TO_EVADE_EEV1
constant integer si__DamageBonus___Damage=147
constant integer s__DamageBonus___Damage_ability= 'Z001'
constant abilityintegerlevelfield s__DamageBonus___Damage_field= ABILITY_ILF_ATTACK_BONUS
constant integer si__Strength___Strength=148
constant integer s__Strength___Strength_ability= 'Z003'
constant abilityintegerlevelfield s__Strength___Strength_field= ABILITY_ILF_STRENGTH_BONUS_ISTR
constant integer si__TenacityBonus___Tenacity=149
constant integer si__LifeSteal___LifeSteal=150
real array s__LifeSteal___LifeSteal_steal
string s__LifeSteal___LifeSteal_effect= "Abilities\\Spells\\Undead\\VampiricAura\\VampiricAuraTarget.mdl"
constant integer si__SpellVamp___SpellVamp=151
real array s__SpellVamp___SpellVamp_vamp
constant integer si__SpellPower___SpellPower=152
real array s__SpellPower___SpellPower_power
constant integer si__Intelligence___Intelligence=153
constant integer s__Intelligence___Intelligence_ability= 'Z003'
constant abilityintegerlevelfield s__Intelligence___Intelligence_field= ABILITY_ILF_INTELLIGENCE_BONUS
constant integer si__SightRange___SightRange=154
constant integer s__SightRange___SightRange_ability= 'Z00A'
constant abilityintegerlevelfield s__SightRange___SightRange_field= ABILITY_ILF_SIGHT_RANGE_BONUS
constant integer si__TenacityFlat___TenacityFlat=155
constant integer si__AttackSpeed___AttackSpeed=156
constant integer s__AttackSpeed___AttackSpeed_ability= 'Z008'
constant abilityreallevelfield s__AttackSpeed___AttackSpeed_field= ABILITY_RLF_ATTACK_SPEED_INCREASE_ISX1
constant integer si__CriticalChance___CriticalChance=157
constant integer s__CriticalChance___CriticalChance_ability= 'Z00C'
constant abilityreallevelfield s__CriticalChance___CriticalChance_field= ABILITY_RLF_CHANCE_TO_CRITICAL_STRIKE
constant integer si__CriticalDamage___CriticalDamage=158
constant integer s__CriticalDamage___CriticalDamage_ability= 'Z00C'
constant abilityreallevelfield s__CriticalDamage___CriticalDamage_field= ABILITY_RLF_DAMAGE_MULTIPLIER_OCR2
constant integer si__TenacityOffset___TenacityOffset=159
constant integer si__CooldownOffset___CooldownOffset=160
constant integer si__ArmorPenetration___ArmorPenetration=161
constant integer si__MovementSpeed___MovementSpeed=162
constant integer s__MovementSpeed___MovementSpeed_ability= 'Z009'
constant abilityintegerlevelfield s__MovementSpeed___MovementSpeed_field= ABILITY_ILF_MOVEMENT_SPEED_BONUS
constant integer si__MagicResistence___MagicResistence=163
constant integer s__MagicResistence___MagicResistence_ability= 'Z00B'
constant abilityreallevelfield s__MagicResistence___MagicResistence_field= ABILITY_RLF_DAMAGE_REDUCTION_ISR2
constant integer si__MagicPenetration___MagicPenetration=164
constant integer si__ManaRegeneration___ManaRegeneration=165
constant integer s__ManaRegeneration___ManaRegeneration_ability= 'Z007'
constant abilityreallevelfield s__ManaRegeneration___ManaRegeneration_field= ABILITY_RLF_AMOUNT_REGENERATED
constant integer si__HealthRegeneration___HealthRegeneration=166
constant integer s__HealthRegeneration___HealthRegeneration_ability= 'Z006'
constant abilityreallevelfield s__HealthRegeneration___HealthRegeneration_field= ABILITY_RLF_AMOUNT_OF_HIT_POINTS_REGENERATED
constant integer si__CooldownReductionBonus___CooldownReduction=167
constant integer si__ArmorPenetrationFlat___ArmorPenetrationFlat=168
constant integer si__MagicPenetrationFlat___MagicPenetrationFlat=169
constant integer si__CooldownReductionFlat___CooldownReductionFlat=170
constant integer si__Revive___Revive=171
integer si__Revive___Revive_F=0
integer si__Revive___Revive_I=0
integer array si__Revive___Revive_V
constant integer si__Spawn___Revive=172
integer si__Spawn___Revive_F=0
integer si__Spawn___Revive_I=0
integer array si__Spawn___Revive_V
constant real s__Spawn___Revive_centerX= GetRectCenterX(gg_rct_Attack)
constant real s__Spawn___Revive_centerY= GetRectCenterY(gg_rct_Attack)
constant integer si__OnDamage___OnDamage=173
integer si__OnDamage___OnDamage_F=0
integer si__OnDamage___OnDamage_I=0
integer array si__OnDamage___OnDamage_V
integer array s__TimerUtils___data
timer array s__TimerUtils___tT
trigger array st__Backdrop__set_visible
trigger array st__Backdrop__get_visible
trigger array st__Component__set_visible
trigger array st__Component__get_visible
integer array si__Backdrop_type
trigger array st__Backdrop_onDestroy
integer array si__CDR_type
trigger array st__CDR_onDestroy
integer array si__Tenacity_type
trigger array st__Tenacity_onDestroy
trigger st__Backdrop__get_frame
trigger st__Backdrop_create
trigger st__Sprite__set_visible
trigger st__Sprite__get_visible
trigger st__Sprite__get_frame
trigger st__Text__set_visible
trigger st__Text__get_visible
trigger st__Text__get_frame
trigger st__TextArea__set_visible
trigger st__TextArea__get_visible
trigger st__TextArea__get_frame
trigger st__StatusBar__set_visible
trigger st__StatusBar__get_visible
trigger st__StatusBar__get_frame
trigger st__Component__get_frame
trigger st__Component_get
trigger st__Component_create
trigger st__EditBox__set_visible
trigger st__EditBox__get_visible
trigger st__EditBox__get_frame
trigger st__EditBox_get
trigger st__CheckBox__set_visible
trigger st__CheckBox__get_visible
trigger st__CheckBox__get_frame
trigger st__CheckBox_get
trigger st__Slider__set_visible
trigger st__Slider__get_visible
trigger st__Slider__get_frame
trigger st__Slider_get
trigger st__Button_create
trigger st__Panel_create
trigger st__Damage_register
trigger st__Evasion_getEvasionChance
trigger st__Evasion_getMissChance
trigger st__Evasion_setEvasionChance
trigger st__Evasion_setMissChance
trigger st__Evasion_register
trigger st__Evasion__get_evade
trigger st__Critical_getChance
trigger st__Critical_getMultiplier
trigger st__Critical_setChance
trigger st__Critical_setMultiplier
trigger st__Critical_add
trigger st__Critical_register
trigger st__ArmorPenetration_get
trigger st__ArmorPenetration_Set
trigger st__MagicPenetration_get
trigger st__MagicPenetration_Set
trigger st__MagicResistance_get
trigger st__MagicResistance_Set
trigger st__Tenacity___List_update
trigger st__Tenacity_get
trigger st__Tenacity_Set
trigger st__Tenacity_add
trigger st__Tenacity_remove
trigger st__Tenacity_calculate
trigger st__Tenacity_register
trigger st__Tenacity_print
trigger st__Ability_onCasting
trigger st__ArcingTextTag_StartTimer
trigger st__Missiles_terminate
trigger st__Missiles_reset
trigger st__Missiles_move
trigger st__Missiles_create
trigger st__Bonus_adder
trigger st__Bonus_onEvent
trigger st__Bonus_StartTimer
trigger st__TenacityUtils_addTimed
trigger st__ResetCooldown_reset
trigger st__TimedAbility_add
trigger st__EffectSpam_spam
trigger st__ChainLightning_create
trigger st__DummyPool_recycle
trigger st__DummyPool_retrieve
trigger st__DummyPool_recycleTimed
trigger st__EffectLink_BuffLink
trigger st__EffectLink_ItemLink
trigger st__AbilityCooldown_start
trigger st__TimedDestructable_create
trigger st__TimedPause_create
trigger st__Afterburner___Afterburner_StartTimer
trigger st__CrowdControl_silence
trigger st__CrowdControl_silenced
trigger st__CrowdControl_stun
trigger st__CrowdControl_stunned
trigger st__CrowdControl_slow
trigger st__CrowdControl_slowed
trigger st__CrowdControl_slowAttack
trigger st__CrowdControl_attackSlowed
trigger st__CrowdControl_banish
trigger st__CrowdControl_banished
trigger st__CrowdControl_ensnare
trigger st__CrowdControl_ensnared
trigger st__CrowdControl_purge
trigger st__CrowdControl_purged
trigger st__CrowdControl_hex
trigger st__CrowdControl_hexed
trigger st__CrowdControl_sleep
trigger st__CrowdControl_sleeping
trigger st__CrowdControl_cyclone
trigger st__CrowdControl_cycloned
trigger st__CrowdControl_entangle
trigger st__CrowdControl_entangled
trigger st__CrowdControl_knockback
trigger st__CrowdControl_knockedback
trigger st__CrowdControl_knockup
trigger st__CrowdControl_knockedup
trigger st__CrowdControl_fear
trigger st__CrowdControl_feared
trigger st__CrowdControl_disarm
trigger st__CrowdControl_disarmed
trigger st__CrowdControl_taunt
trigger st__CrowdControl_taunted
trigger st__CrowdControl_dispel
trigger st__CrowdControl_dispelAll
trigger st__CrowdControl_remaining
trigger st__CrowdControl_register
trigger st__Item_calculate
trigger st__Item_get
trigger st__Item_create
trigger st__Item_save
trigger st__Item_clear
trigger st__MissileGroup_destroy
trigger st__MissileGroup_missileAt
trigger st__MissileGroup_remove
trigger st__MissileGroup_insert
trigger st__MissileGroup_clear
trigger st__MissileGroup_contains
trigger st__MissileGroup_addGroup
trigger st__MissileGroup_removeGroup
trigger st__MissileGroup_create
trigger st__MoltenShield___MoltenShield_StartTimer
trigger st__ExplosiveRune___ExplosiveRune_HasStartedTimer
trigger st__ExplosiveRune___ExplosiveRune_GetTimerInstance
trigger st__ExplosiveRune___ExplosiveRune_GetRemainingTime
trigger st__ExplosiveRune___ExplosiveRune_StartTimer
trigger st__LivingMeteor___LivingMeteor_StartTimer
trigger st__Shop___Transaction_count
trigger st__Shop___Inventory_onClick
trigger st__Shop___Inventory_onDoubleClick
trigger st__Shop___Inventory_onRightClick
trigger st__Shop___Slot_update
trigger st__Shop___Detail_show
trigger st__Shop___Detail_onClicked
trigger st__Shop___Detail_onScrolled
trigger st__Shop___Detail_onMiddleClicked
trigger st__Shop___Detail_onRightClicked
trigger st__Shop___Buyer__getindex
trigger st__Shop___Buyer_onScrolled
trigger st__Shop___Buyer_onClicked
trigger st__Shop___Favorites_has
trigger st__Shop___Favorites_remove
trigger st__Shop___Favorites_add
trigger st__Shop___Favorites_onClear
trigger st__Shop___Favorites_onClicked
trigger st__Shop___Favorites_onMiddleClicked
trigger st__Shop___Favorites_onDoubleClicked
trigger st__Shop___Favorites_onRightClicked
trigger st__Shop___Category_onClicked
trigger st__Shop___Category_onClear
trigger st__Shop___Category_onLogic
trigger st__Shop_buy
trigger st__Shop_sell
trigger st__Shop_filter
trigger st__Shop_detail
trigger st__Shop_has
trigger st__Shop_find
trigger st__Shop_addCategory
trigger st__Shop_addItem
trigger st__Shop_create
trigger st__Shop_onSearch
trigger st__Shop_onClose
trigger st__Shop_onDismantle
trigger st__Shop_onUndo
trigger array st___prototype3
boolean f__arg_boolean1
boolean f__arg_boolean2
boolean f__arg_boolean3
boolean f__arg_boolean4
real f__arg_real1
real f__arg_real2
real f__arg_real3
real f__arg_real4
real f__arg_real5
real f__arg_real6
framehandle f__arg_framehandle1
string f__arg_string1
string f__arg_string2
string f__arg_string3
attacktype f__arg_attacktype1
damagetype f__arg_damagetype1
code f__arg_code1
unit f__arg_unit1
unit f__arg_unit2
integer f__arg_integer1
integer f__arg_integer2
integer f__arg_integer3
destructable f__arg_destructable1
item f__arg_item1
player f__arg_player1
integer f__arg_this
boolean f__result_boolean
framehandle f__result_framehandle
integer f__result_integer
real f__result_real
string f__result_string
unit f__result_unit

endglobals
    native UnitAlive takes unit id returns boolean


//Generated allocator of Indexer
function s__Indexer__allocate takes nothing returns integer
 local integer this=si__Indexer_F
    if (this!=0) then
        set si__Indexer_F=si__Indexer_V[this]
    else
        set si__Indexer_I=si__Indexer_I+1
        set this=si__Indexer_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Indexer_V[this]=-1
 return this
endfunction

//Generated destructor of Indexer
function s__Indexer_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Indexer_V[this]!=-1) then
        return
    endif
    set si__Indexer_V[this]=si__Indexer_F
    set si__Indexer_F=this
endfunction

//Generated allocator of OnDamage___OnDamage
function s__OnDamage___OnDamage__allocate takes nothing returns integer
 local integer this=si__OnDamage___OnDamage_F
    if (this!=0) then
        set si__OnDamage___OnDamage_F=si__OnDamage___OnDamage_V[this]
    else
        set si__OnDamage___OnDamage_I=si__OnDamage___OnDamage_I+1
        set this=si__OnDamage___OnDamage_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__OnDamage___OnDamage_V[this]=-1
 return this
endfunction

//Generated destructor of OnDamage___OnDamage
function s__OnDamage___OnDamage_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__OnDamage___OnDamage_V[this]!=-1) then
        return
    endif
    set si__OnDamage___OnDamage_V[this]=si__OnDamage___OnDamage_F
    set si__OnDamage___OnDamage_F=this
endfunction

//Generated allocator of Spawn___Revive
function s__Spawn___Revive__allocate takes nothing returns integer
 local integer this=si__Spawn___Revive_F
    if (this!=0) then
        set si__Spawn___Revive_F=si__Spawn___Revive_V[this]
    else
        set si__Spawn___Revive_I=si__Spawn___Revive_I+1
        set this=si__Spawn___Revive_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Spawn___Revive_V[this]=-1
 return this
endfunction

//Generated destructor of Spawn___Revive
function s__Spawn___Revive_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Spawn___Revive_V[this]!=-1) then
        return
    endif
    set si__Spawn___Revive_V[this]=si__Spawn___Revive_F
    set si__Spawn___Revive_F=this
endfunction

//Generated allocator of Revive___Revive
function s__Revive___Revive__allocate takes nothing returns integer
 local integer this=si__Revive___Revive_F
    if (this!=0) then
        set si__Revive___Revive_F=si__Revive___Revive_V[this]
    else
        set si__Revive___Revive_I=si__Revive___Revive_I+1
        set this=si__Revive___Revive_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Revive___Revive_V[this]=-1
 return this
endfunction

//Generated destructor of Revive___Revive
function s__Revive___Revive_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Revive___Revive_V[this]!=-1) then
        return
    endif
    set si__Revive___Revive_V[this]=si__Revive___Revive_F
    set si__Revive___Revive_F=this
endfunction

//Generated method caller for Shop___Inventory.onClick
function sc__Shop___Inventory_onClick takes nothing returns nothing
    call TriggerEvaluate(st__Shop___Inventory_onClick)
endfunction

//Generated method caller for Shop___Inventory.onDoubleClick
function sc__Shop___Inventory_onDoubleClick takes nothing returns nothing
    call TriggerEvaluate(st__Shop___Inventory_onDoubleClick)
endfunction

//Generated method caller for Shop___Inventory.onRightClick
function sc__Shop___Inventory_onRightClick takes nothing returns nothing
    call TriggerEvaluate(st__Shop___Inventory_onRightClick)
endfunction

//Generated allocator of Shop___Inventory
function s__Shop___Inventory__allocate takes nothing returns integer
 local integer this=si__Shop___Inventory_F
    if (this!=0) then
        set si__Shop___Inventory_F=si__Shop___Inventory_V[this]
    else
        set si__Shop___Inventory_I=si__Shop___Inventory_I+1
        set this=si__Shop___Inventory_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Shop___Inventory_V[this]=-1
 return this
endfunction

//Generated destructor of Shop___Inventory
function s__Shop___Inventory_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Shop___Inventory_V[this]!=-1) then
        return
    endif
    set si__Shop___Inventory_V[this]=si__Shop___Inventory_F
    set si__Shop___Inventory_F=this
endfunction

//Generated method caller for Shop___Transaction.count
function sc__Shop___Transaction_count takes integer shop,integer id returns integer
    set f__arg_integer1=shop
    set f__arg_integer2=id
    call TriggerEvaluate(st__Shop___Transaction_count)
 return f__result_integer
endfunction

//Generated allocator of Shop___Transaction
function s__Shop___Transaction__allocate takes nothing returns integer
 local integer this=si__Shop___Transaction_F
    if (this!=0) then
        set si__Shop___Transaction_F=si__Shop___Transaction_V[this]
    else
        set si__Shop___Transaction_I=si__Shop___Transaction_I+1
        set this=si__Shop___Transaction_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Shop___Transaction_V[this]=-1
 return this
endfunction

//Generated destructor of Shop___Transaction
function s__Shop___Transaction_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Shop___Transaction_V[this]!=-1) then
        return
    endif
    set si__Shop___Transaction_V[this]=si__Shop___Transaction_F
    set si__Shop___Transaction_F=this
endfunction

//Generated allocator of Shop___Sound
function s__Shop___Sound__allocate takes nothing returns integer
 local integer this=si__Shop___Sound_F
    if (this!=0) then
        set si__Shop___Sound_F=si__Shop___Sound_V[this]
    else
        set si__Shop___Sound_I=si__Shop___Sound_I+1
        set this=si__Shop___Sound_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Shop___Sound_V[this]=-1
 return this
endfunction

//Generated destructor of Shop___Sound
function s__Shop___Sound_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Shop___Sound_V[this]!=-1) then
        return
    endif
    set si__Shop___Sound_V[this]=si__Shop___Sound_F
    set si__Shop___Sound_F=this
endfunction

//Generated allocator of Sulfuras
function s__Sulfuras__allocate takes nothing returns integer
 local integer this=si__Sulfuras_F
    if (this!=0) then
        set si__Sulfuras_F=si__Sulfuras_V[this]
    else
        set si__Sulfuras_I=si__Sulfuras_I+1
        set this=si__Sulfuras_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Sulfuras_V[this]=-1
 return this
endfunction

//Generated destructor of Sulfuras
function s__Sulfuras_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Sulfuras_V[this]!=-1) then
        return
    endif
    set si__Sulfuras_V[this]=si__Sulfuras_F
    set si__Sulfuras_F=this
endfunction

//Generated method caller for MissileGroup.destroy
function sc__MissileGroup_destroy takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__MissileGroup_destroy)
endfunction

//Generated method caller for MissileGroup.missileAt
function sc__MissileGroup_missileAt takes integer this,integer i returns integer
            local integer node= s__MissileUtils___MGroup_next[s__MissileGroup_group[this]]
            local integer j= 0
        
            if s__MissileGroup_size[this] > 0 and i <= s__MissileGroup_size[this] - 1 then
                loop
                    exitwhen j == i
                        set node=s__MissileUtils___MGroup_next[node]
                    set j=j + 1
                endloop
                
                return s__MissileUtils___MGroup_missile[node]
            else
                return 0
            endif
endfunction

//Generated method caller for MissileGroup.remove
function sc__MissileGroup_remove takes integer this,integer missile returns nothing
    set f__arg_this=this
    set f__arg_integer1=missile
    call TriggerEvaluate(st__MissileGroup_remove)
endfunction

//Generated method caller for MissileGroup.insert
function sc__MissileGroup_insert takes integer this,integer missile returns nothing
    set f__arg_this=this
    set f__arg_integer1=missile
    call TriggerEvaluate(st__MissileGroup_insert)
endfunction

//Generated method caller for MissileGroup.clear
function sc__MissileGroup_clear takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__MissileGroup_clear)
endfunction

//Generated method caller for MissileGroup.contains
function sc__MissileGroup_contains takes integer this,integer missile returns boolean
            local integer node= s__MissileUtils___MGroup_next[s__MissileGroup_group[this]]
            local boolean found= false
        
            loop
                exitwhen node == s__MissileGroup_group[this]
                    if s__MissileUtils___MGroup_missile[node] == missile then
                        set found=true
                        exitwhen true
                    endif
                set node=s__MissileUtils___MGroup_next[node]
            endloop
            
            return found
endfunction

//Generated method caller for MissileGroup.addGroup
function sc__MissileGroup_addGroup takes integer this,integer source returns nothing
    set f__arg_this=this
    set f__arg_integer1=source
    call TriggerEvaluate(st__MissileGroup_addGroup)
endfunction

//Generated method caller for MissileGroup.removeGroup
function sc__MissileGroup_removeGroup takes integer this,integer source returns nothing
    set f__arg_this=this
    set f__arg_integer1=source
    call TriggerEvaluate(st__MissileGroup_removeGroup)
endfunction

//Generated method caller for MissileGroup.create
function sc__MissileGroup_create takes nothing returns integer
    call TriggerEvaluate(st__MissileGroup_create)
 return f__result_integer
endfunction

//Generated allocator of MissileGroup
function s__MissileGroup__allocate takes nothing returns integer
 local integer this=si__MissileGroup_F
    if (this!=0) then
        set si__MissileGroup_F=si__MissileGroup_V[this]
    else
        set si__MissileGroup_I=si__MissileGroup_I+1
        set this=si__MissileGroup_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__MissileGroup_V[this]=-1
 return this
endfunction

//Generated destructor of MissileGroup
function s__MissileGroup_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__MissileGroup_V[this]!=-1) then
        return
    endif
    set si__MissileGroup_V[this]=si__MissileGroup_F
    set si__MissileGroup_F=this
endfunction

//Generated method caller for Item___IItem.onTooltip
function sc__Item___IItem_onTooltip takes integer this,unit u,item i,integer id returns string
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_item1=i
    set f__arg_integer1=id
    //An error in the next line would mean declaration for Item___IItem.onTooltip had a wrong default (null)
    set f__result_string=null
    call TriggerEvaluate(st__Item___IItem_onTooltip[si__Item___IItem_type[this]])
 return f__result_string
endfunction

//Generated method executor for Item___IItem.onTooltip
function sx__Item___IItem_onTooltip takes integer this,unit u,item i,integer id returns nothing
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_item1=i
    set f__arg_integer1=id
    call TriggerExecute(st__Item___IItem_onTooltip[si__Item___IItem_type[this]])
endfunction

//Generated method caller for Item___IItem.onPickup
function sc__Item___IItem_onPickup takes integer this,unit u,item i returns nothing
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_item1=i
    call TriggerEvaluate(st__Item___IItem_onPickup[si__Item___IItem_type[this]])
endfunction

//Generated method executor for Item___IItem.onPickup
function sx__Item___IItem_onPickup takes integer this,unit u,item i returns nothing
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_item1=i
    call TriggerExecute(st__Item___IItem_onPickup[si__Item___IItem_type[this]])
endfunction

//Generated method caller for Item___IItem.onDrop
function sc__Item___IItem_onDrop takes integer this,unit u,item i returns nothing
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_item1=i
    call TriggerEvaluate(st__Item___IItem_onDrop[si__Item___IItem_type[this]])
endfunction

//Generated method executor for Item___IItem.onDrop
function sx__Item___IItem_onDrop takes integer this,unit u,item i returns nothing
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_item1=i
    call TriggerExecute(st__Item___IItem_onDrop[si__Item___IItem_type[this]])
endfunction
//Generated destructor of Item___IItem
function sc__Item___IItem_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Item___IItem_V[this]!=-1) then
        return
    endif
    set f__arg_this=this
    call TriggerEvaluate(st__Item___IItem_onDestroy[si__Item___IItem_type[this]])
    set si__Item___IItem_V[this]=si__Item___IItem_F
    set si__Item___IItem_F=this
endfunction

//Generated method caller for CrowdControl.silence
function sc__CrowdControl_silence takes unit target,real duration,string model,string point,boolean stack returns nothing
    set f__arg_unit1=target
    set f__arg_real1=duration
    set f__arg_string1=model
    set f__arg_string2=point
    set f__arg_boolean1=stack
    call TriggerEvaluate(st__CrowdControl_silence)
endfunction

//Generated method caller for CrowdControl.silenced
function sc__CrowdControl_silenced takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___SILENCE_BUFF) > 0
endfunction

//Generated method caller for CrowdControl.stun
function sc__CrowdControl_stun takes unit target,real duration,string model,string point,boolean stack returns nothing
    set f__arg_unit1=target
    set f__arg_real1=duration
    set f__arg_string1=model
    set f__arg_string2=point
    set f__arg_boolean1=stack
    call TriggerEvaluate(st__CrowdControl_stun)
endfunction

//Generated method caller for CrowdControl.stunned
function sc__CrowdControl_stunned takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___STUN_BUFF) > 0
endfunction

//Generated method caller for CrowdControl.slow
function sc__CrowdControl_slow takes unit target,real amount,real duration,string model,string point,boolean stack returns nothing
    set f__arg_unit1=target
    set f__arg_real1=amount
    set f__arg_real2=duration
    set f__arg_string1=model
    set f__arg_string2=point
    set f__arg_boolean1=stack
    call TriggerEvaluate(st__CrowdControl_slow)
endfunction

//Generated method caller for CrowdControl.slowed
function sc__CrowdControl_slowed takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___MOVEMENT_SLOW_BUFF) > 0
endfunction

//Generated method caller for CrowdControl.slowAttack
function sc__CrowdControl_slowAttack takes unit target,real amount,real duration,string model,string point,boolean stack returns nothing
    set f__arg_unit1=target
    set f__arg_real1=amount
    set f__arg_real2=duration
    set f__arg_string1=model
    set f__arg_string2=point
    set f__arg_boolean1=stack
    call TriggerEvaluate(st__CrowdControl_slowAttack)
endfunction

//Generated method caller for CrowdControl.attackSlowed
function sc__CrowdControl_attackSlowed takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___ATTACK_SLOW_BUFF) > 0
endfunction

//Generated method caller for CrowdControl.banish
function sc__CrowdControl_banish takes unit target,real duration,string model,string point,boolean stack returns nothing
    set f__arg_unit1=target
    set f__arg_real1=duration
    set f__arg_string1=model
    set f__arg_string2=point
    set f__arg_boolean1=stack
    call TriggerEvaluate(st__CrowdControl_banish)
endfunction

//Generated method caller for CrowdControl.banished
function sc__CrowdControl_banished takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___BANISH_BUFF) > 0
endfunction

//Generated method caller for CrowdControl.ensnare
function sc__CrowdControl_ensnare takes unit target,real duration,string model,string point,boolean stack returns nothing
    set f__arg_unit1=target
    set f__arg_real1=duration
    set f__arg_string1=model
    set f__arg_string2=point
    set f__arg_boolean1=stack
    call TriggerEvaluate(st__CrowdControl_ensnare)
endfunction

//Generated method caller for CrowdControl.ensnared
function sc__CrowdControl_ensnared takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___ENSNARE_BUFF) > 0
endfunction

//Generated method caller for CrowdControl.purge
function sc__CrowdControl_purge takes unit target,real duration,string model,string point,boolean stack returns nothing
    set f__arg_unit1=target
    set f__arg_real1=duration
    set f__arg_string1=model
    set f__arg_string2=point
    set f__arg_boolean1=stack
    call TriggerEvaluate(st__CrowdControl_purge)
endfunction

//Generated method caller for CrowdControl.purged
function sc__CrowdControl_purged takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___PURGE_BUFF) > 0
endfunction

//Generated method caller for CrowdControl.hex
function sc__CrowdControl_hex takes unit target,real duration,string model,string point,boolean stack returns nothing
    set f__arg_unit1=target
    set f__arg_real1=duration
    set f__arg_string1=model
    set f__arg_string2=point
    set f__arg_boolean1=stack
    call TriggerEvaluate(st__CrowdControl_hex)
endfunction

//Generated method caller for CrowdControl.hexed
function sc__CrowdControl_hexed takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___HEX_BUFF) > 0
endfunction

//Generated method caller for CrowdControl.sleep
function sc__CrowdControl_sleep takes unit target,real duration,string model,string point,boolean stack returns nothing
    set f__arg_unit1=target
    set f__arg_real1=duration
    set f__arg_string1=model
    set f__arg_string2=point
    set f__arg_boolean1=stack
    call TriggerEvaluate(st__CrowdControl_sleep)
endfunction

//Generated method caller for CrowdControl.sleeping
function sc__CrowdControl_sleeping takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___SLEEP_BUFF) > 0
endfunction

//Generated method caller for CrowdControl.cyclone
function sc__CrowdControl_cyclone takes unit target,real duration,string model,string point,boolean stack returns nothing
    set f__arg_unit1=target
    set f__arg_real1=duration
    set f__arg_string1=model
    set f__arg_string2=point
    set f__arg_boolean1=stack
    call TriggerEvaluate(st__CrowdControl_cyclone)
endfunction

//Generated method caller for CrowdControl.cycloned
function sc__CrowdControl_cycloned takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___CYCLONE_BUFF) > 0
endfunction

//Generated method caller for CrowdControl.entangle
function sc__CrowdControl_entangle takes unit target,real duration,string model,string point,boolean stack returns nothing
    set f__arg_unit1=target
    set f__arg_real1=duration
    set f__arg_string1=model
    set f__arg_string2=point
    set f__arg_boolean1=stack
    call TriggerEvaluate(st__CrowdControl_entangle)
endfunction

//Generated method caller for CrowdControl.entangled
function sc__CrowdControl_entangled takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___ENTANGLE_BUFF) > 0
endfunction

//Generated method caller for CrowdControl.knockback
function sc__CrowdControl_knockback takes unit target,real angle,real distance,real duration,string model,string point,boolean onCliff,boolean onDestructable,boolean onUnit,boolean stack returns nothing
    set f__arg_unit1=target
    set f__arg_real1=angle
    set f__arg_real2=distance
    set f__arg_real3=duration
    set f__arg_string1=model
    set f__arg_string2=point
    set f__arg_boolean1=onCliff
    set f__arg_boolean2=onDestructable
    set f__arg_boolean3=onUnit
    set f__arg_boolean4=stack
    call TriggerEvaluate(st__CrowdControl_knockback)
endfunction

//Generated method caller for CrowdControl.knockedback
function sc__CrowdControl_knockedback takes unit target returns boolean
    set f__arg_unit1=target
    call TriggerEvaluate(st__CrowdControl_knockedback)
 return f__result_boolean
endfunction

//Generated method caller for CrowdControl.knockup
function sc__CrowdControl_knockup takes unit target,real maxHeight,real duration,string model,string point,boolean stack returns nothing
    set f__arg_unit1=target
    set f__arg_real1=maxHeight
    set f__arg_real2=duration
    set f__arg_string1=model
    set f__arg_string2=point
    set f__arg_boolean1=stack
    call TriggerEvaluate(st__CrowdControl_knockup)
endfunction

//Generated method caller for CrowdControl.knockedup
function sc__CrowdControl_knockedup takes unit target returns boolean
    set f__arg_unit1=target
    call TriggerEvaluate(st__CrowdControl_knockedup)
 return f__result_boolean
endfunction

//Generated method caller for CrowdControl.fear
function sc__CrowdControl_fear takes unit target,real duration,string model,string point,boolean stack returns nothing
    set f__arg_unit1=target
    set f__arg_real1=duration
    set f__arg_string1=model
    set f__arg_string2=point
    set f__arg_boolean1=stack
    call TriggerEvaluate(st__CrowdControl_fear)
endfunction

//Generated method caller for CrowdControl.feared
function sc__CrowdControl_feared takes unit target returns boolean
    set f__arg_unit1=target
    call TriggerEvaluate(st__CrowdControl_feared)
 return f__result_boolean
endfunction

//Generated method caller for CrowdControl.disarm
function sc__CrowdControl_disarm takes unit target,real duration,string model,string point,boolean stack returns nothing
    set f__arg_unit1=target
    set f__arg_real1=duration
    set f__arg_string1=model
    set f__arg_string2=point
    set f__arg_boolean1=stack
    call TriggerEvaluate(st__CrowdControl_disarm)
endfunction

//Generated method caller for CrowdControl.disarmed
function sc__CrowdControl_disarmed takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___DISARM_BUFF) > 0
endfunction

//Generated method caller for CrowdControl.taunt
function sc__CrowdControl_taunt takes unit source,unit target,real duration,string model,string point,boolean stack returns nothing
    set f__arg_unit1=source
    set f__arg_unit2=target
    set f__arg_real1=duration
    set f__arg_string1=model
    set f__arg_string2=point
    set f__arg_boolean1=stack
    call TriggerEvaluate(st__CrowdControl_taunt)
endfunction

//Generated method caller for CrowdControl.taunted
function sc__CrowdControl_taunted takes unit target returns boolean
    set f__arg_unit1=target
    call TriggerEvaluate(st__CrowdControl_taunted)
 return f__result_boolean
endfunction

//Generated method caller for CrowdControl.dispel
function sc__CrowdControl_dispel takes unit target,integer id returns nothing
    set f__arg_unit1=target
    set f__arg_integer1=id
    call TriggerEvaluate(st__CrowdControl_dispel)
endfunction

//Generated method caller for CrowdControl.dispelAll
function sc__CrowdControl_dispelAll takes unit target returns nothing
    set f__arg_unit1=target
    call TriggerEvaluate(st__CrowdControl_dispelAll)
endfunction

//Generated method caller for CrowdControl.remaining
function sc__CrowdControl_remaining takes unit target,integer id returns real
            return TimerGetRemaining(LoadTimerHandle(s__CrowdControl_timer, GetHandleId(target), id))
endfunction

//Generated method caller for CrowdControl.register
function sc__CrowdControl_register takes integer id,code c returns nothing
            if id >= CROWD_CONTROL_SILENCE and id <= CROWD_CONTROL_KNOCKUP then
                if s__CrowdControl_event[id] == null then
                    set s__CrowdControl_event[id]=CreateTrigger()
                endif
                call TriggerAddCondition(s__CrowdControl_event[id], Filter(c))
            else
                call TriggerAddCondition(s__CrowdControl_trigger, Filter(c))
            endif
endfunction

//Generated allocator of Taunt
function s__Taunt__allocate takes nothing returns integer
 local integer this=si__Taunt_F
    if (this!=0) then
        set si__Taunt_F=si__Taunt_V[this]
    else
        set si__Taunt_I=si__Taunt_I+1
        set this=si__Taunt_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Taunt_V[this]=-1
 return this
endfunction

//Generated destructor of Taunt
function s__Taunt_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Taunt_V[this]!=-1) then
        return
    endif
    set si__Taunt_V[this]=si__Taunt_F
    set si__Taunt_F=this
endfunction

//Generated allocator of Fear
function s__Fear__allocate takes nothing returns integer
 local integer this=si__Fear_F
    if (this!=0) then
        set si__Fear_F=si__Fear_V[this]
    else
        set si__Fear_I=si__Fear_I+1
        set this=si__Fear_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Fear_V[this]=-1
 return this
endfunction

//Generated destructor of Fear
function s__Fear_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Fear_V[this]!=-1) then
        return
    endif
    set si__Fear_V[this]=si__Fear_F
    set si__Fear_F=this
endfunction

//Generated allocator of Knockup
function s__Knockup__allocate takes nothing returns integer
 local integer this=si__Knockup_F
    if (this!=0) then
        set si__Knockup_F=si__Knockup_V[this]
    else
        set si__Knockup_I=si__Knockup_I+1
        set this=si__Knockup_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Knockup_V[this]=-1
 return this
endfunction

//Generated destructor of Knockup
function s__Knockup_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Knockup_V[this]!=-1) then
        return
    endif
    set si__Knockup_V[this]=si__Knockup_F
    set si__Knockup_F=this
endfunction

//Generated allocator of Knockback
function s__Knockback__allocate takes nothing returns integer
 local integer this=si__Knockback_F
    if (this!=0) then
        set si__Knockback_F=si__Knockback_V[this]
    else
        set si__Knockback_I=si__Knockback_I+1
        set this=si__Knockback_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Knockback_V[this]=-1
 return this
endfunction

//Generated destructor of Knockback
function s__Knockback_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Knockback_V[this]!=-1) then
        return
    endif
    set si__Knockback_V[this]=si__Knockback_F
    set si__Knockback_F=this
endfunction

//Generated method caller for TimedPause.create
function sc__TimedPause_create takes unit u,real duration,boolean pause returns integer
    set f__arg_unit1=u
    set f__arg_real1=duration
    set f__arg_boolean1=pause
    call TriggerEvaluate(st__TimedPause_create)
 return f__result_integer
endfunction

//Generated allocator of TimedPause
function s__TimedPause__allocate takes nothing returns integer
 local integer this=si__TimedPause_F
    if (this!=0) then
        set si__TimedPause_F=si__TimedPause_V[this]
    else
        set si__TimedPause_I=si__TimedPause_I+1
        set this=si__TimedPause_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__TimedPause_V[this]=-1
 return this
endfunction

//Generated destructor of TimedPause
function s__TimedPause_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__TimedPause_V[this]!=-1) then
        return
    endif
    set si__TimedPause_V[this]=si__TimedPause_F
    set si__TimedPause_F=this
endfunction

//Generated method caller for TimedDestructable.create
function sc__TimedDestructable_create takes destructable dest,real timeout returns integer
    set f__arg_destructable1=dest
    set f__arg_real1=timeout
    call TriggerEvaluate(st__TimedDestructable_create)
 return f__result_integer
endfunction

//Generated allocator of TimedDestructable
function s__TimedDestructable__allocate takes nothing returns integer
 local integer this=si__TimedDestructable_F
    if (this!=0) then
        set si__TimedDestructable_F=si__TimedDestructable_V[this]
    else
        set si__TimedDestructable_I=si__TimedDestructable_I+1
        set this=si__TimedDestructable_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__TimedDestructable_V[this]=-1
 return this
endfunction

//Generated destructor of TimedDestructable
function s__TimedDestructable_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__TimedDestructable_V[this]!=-1) then
        return
    endif
    set si__TimedDestructable_V[this]=si__TimedDestructable_F
    set si__TimedDestructable_F=this
endfunction

//Generated method caller for AbilityCooldown.start
function sc__AbilityCooldown_start takes unit source,integer abilCode,real cooldown returns nothing
    set f__arg_unit1=source
    set f__arg_integer1=abilCode
    set f__arg_real1=cooldown
    call TriggerEvaluate(st__AbilityCooldown_start)
endfunction

//Generated allocator of AbilityCooldown
function s__AbilityCooldown__allocate takes nothing returns integer
 local integer this=si__AbilityCooldown_F
    if (this!=0) then
        set si__AbilityCooldown_F=si__AbilityCooldown_V[this]
    else
        set si__AbilityCooldown_I=si__AbilityCooldown_I+1
        set this=si__AbilityCooldown_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__AbilityCooldown_V[this]=-1
 return this
endfunction

//Generated destructor of AbilityCooldown
function s__AbilityCooldown_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__AbilityCooldown_V[this]!=-1) then
        return
    endif
    set si__AbilityCooldown_V[this]=si__AbilityCooldown_F
    set si__AbilityCooldown_F=this
endfunction

//Generated method caller for EffectLink.BuffLink
function sc__EffectLink_BuffLink takes unit target,integer id,string model,string attach returns nothing
    set f__arg_unit1=target
    set f__arg_integer1=id
    set f__arg_string1=model
    set f__arg_string2=attach
    call TriggerEvaluate(st__EffectLink_BuffLink)
endfunction

//Generated method caller for EffectLink.ItemLink
function sc__EffectLink_ItemLink takes unit target,item i,string model,string attach returns nothing
    set f__arg_unit1=target
    set f__arg_item1=i
    set f__arg_string1=model
    set f__arg_string2=attach
    call TriggerEvaluate(st__EffectLink_ItemLink)
endfunction

//Generated allocator of EffectLink
function s__EffectLink__allocate takes nothing returns integer
 local integer this=si__EffectLink_F
    if (this!=0) then
        set si__EffectLink_F=si__EffectLink_V[this]
    else
        set si__EffectLink_I=si__EffectLink_I+1
        set this=si__EffectLink_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__EffectLink_V[this]=-1
 return this
endfunction

//Generated destructor of EffectLink
function s__EffectLink_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__EffectLink_V[this]!=-1) then
        return
    endif
    set si__EffectLink_V[this]=si__EffectLink_F
    set si__EffectLink_F=this
endfunction

//Generated method caller for DummyPool.recycle
function sc__DummyPool_recycle takes unit dummy returns nothing
            if GetUnitTypeId(dummy) != Utilities_DUMMY then
            else
                call GroupAddUnit(s__DummyPool_group, dummy)
                call SetUnitX(dummy, s__WorldBounds_maxX)
                call SetUnitY(dummy, s__WorldBounds_maxY)
                call SetUnitOwner(dummy, s__DummyPool_player, false)
                call ShowUnit(dummy, false)
                call BlzPauseUnitEx(dummy, true)
            endif
endfunction

//Generated method caller for DummyPool.retrieve
function sc__DummyPool_retrieve takes player owner,real x,real y,real z,real face returns unit
    set f__arg_player1=owner
    set f__arg_real1=x
    set f__arg_real2=y
    set f__arg_real3=z
    set f__arg_real4=face
    call TriggerEvaluate(st__DummyPool_retrieve)
 return f__result_unit
endfunction

//Generated method caller for DummyPool.recycleTimed
function sc__DummyPool_recycleTimed takes unit dummy,real delay returns nothing
    set f__arg_unit1=dummy
    set f__arg_real1=delay
    call TriggerEvaluate(st__DummyPool_recycleTimed)
endfunction

//Generated allocator of DummyPool
function s__DummyPool__allocate takes nothing returns integer
 local integer this=si__DummyPool_F
    if (this!=0) then
        set si__DummyPool_F=si__DummyPool_V[this]
    else
        set si__DummyPool_I=si__DummyPool_I+1
        set this=si__DummyPool_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__DummyPool_V[this]=-1
 return this
endfunction

//Generated destructor of DummyPool
function s__DummyPool_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__DummyPool_V[this]!=-1) then
        return
    endif
    set si__DummyPool_V[this]=si__DummyPool_F
    set si__DummyPool_F=this
endfunction

//Generated method caller for ChainLightning.create
function sc__ChainLightning_create takes unit source,unit target,real dmg,real aoe,real dur,real interval,integer bounceCount,attacktype attackType,damagetype damageType,string lightningType,string sfx,string attachPoint,boolean canRebounce returns integer
    set f__arg_unit1=source
    set f__arg_unit2=target
    set f__arg_real1=dmg
    set f__arg_real2=aoe
    set f__arg_real3=dur
    set f__arg_real4=interval
    set f__arg_integer1=bounceCount
    set f__arg_attacktype1=attackType
    set f__arg_damagetype1=damageType
    set f__arg_string1=lightningType
    set f__arg_string2=sfx
    set f__arg_string3=attachPoint
    set f__arg_boolean1=canRebounce
    call TriggerEvaluate(st__ChainLightning_create)
 return f__result_integer
endfunction

//Generated allocator of ChainLightning
function s__ChainLightning__allocate takes nothing returns integer
 local integer this=si__ChainLightning_F
    if (this!=0) then
        set si__ChainLightning_F=si__ChainLightning_V[this]
    else
        set si__ChainLightning_I=si__ChainLightning_I+1
        set this=si__ChainLightning_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__ChainLightning_V[this]=-1
 return this
endfunction

//Generated destructor of ChainLightning
function s__ChainLightning_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__ChainLightning_V[this]!=-1) then
        return
    endif
    set si__ChainLightning_V[this]=si__ChainLightning_F
    set si__ChainLightning_F=this
endfunction

//Generated method caller for EffectSpam.spam
function sc__EffectSpam_spam takes unit target,string model,string attach,real x,real y,real z,real scale,real interval,integer count returns nothing
    set f__arg_unit1=target
    set f__arg_string1=model
    set f__arg_string2=attach
    set f__arg_real1=x
    set f__arg_real2=y
    set f__arg_real3=z
    set f__arg_real4=scale
    set f__arg_real5=interval
    set f__arg_integer1=count
    call TriggerEvaluate(st__EffectSpam_spam)
endfunction

//Generated allocator of EffectSpam
function s__EffectSpam__allocate takes nothing returns integer
 local integer this=si__EffectSpam_F
    if (this!=0) then
        set si__EffectSpam_F=si__EffectSpam_V[this]
    else
        set si__EffectSpam_I=si__EffectSpam_I+1
        set this=si__EffectSpam_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__EffectSpam_V[this]=-1
 return this
endfunction

//Generated destructor of EffectSpam
function s__EffectSpam_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__EffectSpam_V[this]!=-1) then
        return
    endif
    set si__EffectSpam_V[this]=si__EffectSpam_F
    set si__EffectSpam_F=this
endfunction

//Generated method caller for TimedAbility.add
function sc__TimedAbility_add takes unit u,integer id,real duration,integer level,boolean hide returns nothing
    set f__arg_unit1=u
    set f__arg_integer1=id
    set f__arg_real1=duration
    set f__arg_integer2=level
    set f__arg_boolean1=hide
    call TriggerEvaluate(st__TimedAbility_add)
endfunction

//Generated allocator of TimedAbility
function s__TimedAbility__allocate takes nothing returns integer
 local integer this=si__TimedAbility_F
    if (this!=0) then
        set si__TimedAbility_F=si__TimedAbility_V[this]
    else
        set si__TimedAbility_I=si__TimedAbility_I+1
        set this=si__TimedAbility_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__TimedAbility_V[this]=-1
 return this
endfunction

//Generated destructor of TimedAbility
function s__TimedAbility_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__TimedAbility_V[this]!=-1) then
        return
    endif
    set si__TimedAbility_V[this]=si__TimedAbility_F
    set si__TimedAbility_F=this
endfunction

//Generated method caller for ResetCooldown.reset
function sc__ResetCooldown_reset takes unit u,integer id returns nothing
    set f__arg_unit1=u
    set f__arg_integer1=id
    call TriggerEvaluate(st__ResetCooldown_reset)
endfunction

//Generated allocator of ResetCooldown
function s__ResetCooldown__allocate takes nothing returns integer
 local integer this=si__ResetCooldown_F
    if (this!=0) then
        set si__ResetCooldown_F=si__ResetCooldown_V[this]
    else
        set si__ResetCooldown_I=si__ResetCooldown_I+1
        set this=si__ResetCooldown_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__ResetCooldown_V[this]=-1
 return this
endfunction

//Generated destructor of ResetCooldown
function s__ResetCooldown_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__ResetCooldown_V[this]!=-1) then
        return
    endif
    set si__ResetCooldown_V[this]=si__ResetCooldown_F
    set si__ResetCooldown_F=this
endfunction

//Generated method caller for NewBonus___IBonus.get
function sc__NewBonus___IBonus_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    //An error in the next line would mean declaration for NewBonus___IBonus.get had a wrong default (0)
    set f__result_real=0
    call TriggerEvaluate(st__NewBonus___IBonus_get[si__NewBonus___IBonus_type[this]])
 return f__result_real
endfunction

//Generated method executor for NewBonus___IBonus.get
function sx__NewBonus___IBonus_get takes integer this,unit u returns nothing
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerExecute(st__NewBonus___IBonus_get[si__NewBonus___IBonus_type[this]])
endfunction

//Generated method caller for NewBonus___IBonus.Set
function sc__NewBonus___IBonus_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    //An error in the next line would mean declaration for NewBonus___IBonus.Set had a wrong default (0)
    set f__result_real=0
    call TriggerEvaluate(st__NewBonus___IBonus_Set[si__NewBonus___IBonus_type[this]])
 return f__result_real
endfunction

//Generated method executor for NewBonus___IBonus.Set
function sx__NewBonus___IBonus_Set takes integer this,unit u,real value returns nothing
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerExecute(st__NewBonus___IBonus_Set[si__NewBonus___IBonus_type[this]])
endfunction

//Generated method caller for NewBonus___IBonus.add
function sc__NewBonus___IBonus_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    //An error in the next line would mean declaration for NewBonus___IBonus.add had a wrong default (0)
    set f__result_real=0
    call TriggerEvaluate(st__NewBonus___IBonus_add[si__NewBonus___IBonus_type[this]])
 return f__result_real
endfunction

//Generated method executor for NewBonus___IBonus.add
function sx__NewBonus___IBonus_add takes integer this,unit u,real value returns nothing
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerExecute(st__NewBonus___IBonus_add[si__NewBonus___IBonus_type[this]])
endfunction
//Generated destructor of NewBonus___IBonus
function sc__NewBonus___IBonus_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__NewBonus___IBonus_V[this]!=-1) then
        return
    endif
    set f__arg_this=this
    call TriggerEvaluate(st__NewBonus___IBonus_onDestroy[si__NewBonus___IBonus_type[this]])
    set si__NewBonus___IBonus_V[this]=si__NewBonus___IBonus_F
    set si__NewBonus___IBonus_F=this
endfunction

//Generated allocator of Missiles___Coordinates
function s__Missiles___Coordinates__allocate takes nothing returns integer
 local integer this=si__Missiles___Coordinates_F
    if (this!=0) then
        set si__Missiles___Coordinates_F=si__Missiles___Coordinates_V[this]
    else
        set si__Missiles___Coordinates_I=si__Missiles___Coordinates_I+1
        set this=si__Missiles___Coordinates_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Missiles___Coordinates_V[this]=-1
 return this
endfunction

//Generated destructor of Missiles___Coordinates
function s__Missiles___Coordinates_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Missiles___Coordinates_V[this]!=-1) then
        return
    endif
    set si__Missiles___Coordinates_V[this]=si__Missiles___Coordinates_F
    set si__Missiles___Coordinates_F=this
endfunction

//Generated allocator of Missiles___Pool
function s__Missiles___Pool__allocate takes nothing returns integer
 local integer this=si__Missiles___Pool_F
    if (this!=0) then
        set si__Missiles___Pool_F=si__Missiles___Pool_V[this]
    else
        set si__Missiles___Pool_I=si__Missiles___Pool_I+1
        set this=si__Missiles___Pool_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Missiles___Pool_V[this]=-1
 return this
endfunction

//Generated destructor of Missiles___Pool
function s__Missiles___Pool_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Missiles___Pool_V[this]!=-1) then
        return
    endif
    set si__Missiles___Pool_V[this]=si__Missiles___Pool_F
    set si__Missiles___Pool_F=this
endfunction

//Generated method caller for Missiles___MissileEvents.onHit
function sc__Missiles___MissileEvents_onHit takes integer this,unit hit returns boolean
    set f__arg_this=this
    set f__arg_unit1=hit
    //An error in the next line would mean declaration for Missiles___MissileEvents.onHit had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles___MissileEvents_onHit[si__Missiles___MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles___MissileEvents.onHit
function sx__Missiles___MissileEvents_onHit takes integer this,unit hit returns nothing
    set f__arg_this=this
    set f__arg_unit1=hit
    call TriggerExecute(st__Missiles___MissileEvents_onHit[si__Missiles___MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles___MissileEvents.onMissile
function sc__Missiles___MissileEvents_onMissile takes integer this,integer missile returns boolean
    set f__arg_this=this
    set f__arg_integer1=missile
    //An error in the next line would mean declaration for Missiles___MissileEvents.onMissile had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles___MissileEvents_onMissile[si__Missiles___MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles___MissileEvents.onMissile
function sx__Missiles___MissileEvents_onMissile takes integer this,integer missile returns nothing
    set f__arg_this=this
    set f__arg_integer1=missile
    call TriggerExecute(st__Missiles___MissileEvents_onMissile[si__Missiles___MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles___MissileEvents.onDestructable
function sc__Missiles___MissileEvents_onDestructable takes integer this,destructable dest returns boolean
    set f__arg_this=this
    set f__arg_destructable1=dest
    //An error in the next line would mean declaration for Missiles___MissileEvents.onDestructable had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles___MissileEvents_onDestructable[si__Missiles___MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles___MissileEvents.onDestructable
function sx__Missiles___MissileEvents_onDestructable takes integer this,destructable dest returns nothing
    set f__arg_this=this
    set f__arg_destructable1=dest
    call TriggerExecute(st__Missiles___MissileEvents_onDestructable[si__Missiles___MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles___MissileEvents.onItem
function sc__Missiles___MissileEvents_onItem takes integer this,item i returns boolean
    set f__arg_this=this
    set f__arg_item1=i
    //An error in the next line would mean declaration for Missiles___MissileEvents.onItem had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles___MissileEvents_onItem[si__Missiles___MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles___MissileEvents.onItem
function sx__Missiles___MissileEvents_onItem takes integer this,item i returns nothing
    set f__arg_this=this
    set f__arg_item1=i
    call TriggerExecute(st__Missiles___MissileEvents_onItem[si__Missiles___MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles___MissileEvents.onCliff
function sc__Missiles___MissileEvents_onCliff takes integer this returns boolean
    set f__arg_this=this
    //An error in the next line would mean declaration for Missiles___MissileEvents.onCliff had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles___MissileEvents_onCliff[si__Missiles___MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles___MissileEvents.onCliff
function sx__Missiles___MissileEvents_onCliff takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Missiles___MissileEvents_onCliff[si__Missiles___MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles___MissileEvents.onTerrain
function sc__Missiles___MissileEvents_onTerrain takes integer this returns boolean
    set f__arg_this=this
    //An error in the next line would mean declaration for Missiles___MissileEvents.onTerrain had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles___MissileEvents_onTerrain[si__Missiles___MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles___MissileEvents.onTerrain
function sx__Missiles___MissileEvents_onTerrain takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Missiles___MissileEvents_onTerrain[si__Missiles___MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles___MissileEvents.onTileset
function sc__Missiles___MissileEvents_onTileset takes integer this,integer tileset returns boolean
    set f__arg_this=this
    set f__arg_integer1=tileset
    //An error in the next line would mean declaration for Missiles___MissileEvents.onTileset had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles___MissileEvents_onTileset[si__Missiles___MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles___MissileEvents.onTileset
function sx__Missiles___MissileEvents_onTileset takes integer this,integer tileset returns nothing
    set f__arg_this=this
    set f__arg_integer1=tileset
    call TriggerExecute(st__Missiles___MissileEvents_onTileset[si__Missiles___MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles___MissileEvents.onPeriod
function sc__Missiles___MissileEvents_onPeriod takes integer this returns boolean
    set f__arg_this=this
    //An error in the next line would mean declaration for Missiles___MissileEvents.onPeriod had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles___MissileEvents_onPeriod[si__Missiles___MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles___MissileEvents.onPeriod
function sx__Missiles___MissileEvents_onPeriod takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Missiles___MissileEvents_onPeriod[si__Missiles___MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles___MissileEvents.onFinish
function sc__Missiles___MissileEvents_onFinish takes integer this returns boolean
    set f__arg_this=this
    //An error in the next line would mean declaration for Missiles___MissileEvents.onFinish had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles___MissileEvents_onFinish[si__Missiles___MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles___MissileEvents.onFinish
function sx__Missiles___MissileEvents_onFinish takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Missiles___MissileEvents_onFinish[si__Missiles___MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles___MissileEvents.onBoundaries
function sc__Missiles___MissileEvents_onBoundaries takes integer this returns boolean
    set f__arg_this=this
    //An error in the next line would mean declaration for Missiles___MissileEvents.onBoundaries had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles___MissileEvents_onBoundaries[si__Missiles___MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles___MissileEvents.onBoundaries
function sx__Missiles___MissileEvents_onBoundaries takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Missiles___MissileEvents_onBoundaries[si__Missiles___MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles___MissileEvents.onPause
function sc__Missiles___MissileEvents_onPause takes integer this returns boolean
    set f__arg_this=this
    //An error in the next line would mean declaration for Missiles___MissileEvents.onPause had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles___MissileEvents_onPause[si__Missiles___MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles___MissileEvents.onPause
function sx__Missiles___MissileEvents_onPause takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Missiles___MissileEvents_onPause[si__Missiles___MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles___MissileEvents.onResume
function sc__Missiles___MissileEvents_onResume takes integer this returns boolean
    set f__arg_this=this
    //An error in the next line would mean declaration for Missiles___MissileEvents.onResume had a wrong default (false)
    set f__result_boolean=false
    call TriggerEvaluate(st__Missiles___MissileEvents_onResume[si__Missiles___MissileEvents_type[this]])
 return f__result_boolean
endfunction

//Generated method executor for Missiles___MissileEvents.onResume
function sx__Missiles___MissileEvents_onResume takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Missiles___MissileEvents_onResume[si__Missiles___MissileEvents_type[this]])
endfunction

//Generated method caller for Missiles___MissileEvents.onRemove
function sc__Missiles___MissileEvents_onRemove takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Missiles___MissileEvents_onRemove[si__Missiles___MissileEvents_type[this]])
endfunction

//Generated method executor for Missiles___MissileEvents.onRemove
function sx__Missiles___MissileEvents_onRemove takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Missiles___MissileEvents_onRemove[si__Missiles___MissileEvents_type[this]])
endfunction
//Generated destructor of Missiles___MissileEvents
function sc__Missiles___MissileEvents_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Missiles___MissileEvents_V[this]!=-1) then
        return
    endif
    set f__arg_this=this
    call TriggerEvaluate(st__Missiles___MissileEvents_onDestroy[si__Missiles___MissileEvents_type[this]])
    set si__Missiles___MissileEvents_V[this]=si__Missiles___MissileEvents_F
    set si__Missiles___MissileEvents_F=this
endfunction

//Generated method caller for ArcingTextTag.StartTimer
function sc__ArcingTextTag_StartTimer takes real timeout,boolean periodic,integer this,integer uniqueId returns nothing
    set f__arg_real1=timeout
    set f__arg_boolean1=periodic
    set f__arg_integer1=this
    set f__arg_integer2=uniqueId
    call TriggerEvaluate(st__ArcingTextTag_StartTimer)
endfunction

//Generated allocator of ArcingTextTag
function s__ArcingTextTag__allocate takes nothing returns integer
 local integer this=si__ArcingTextTag_F
    if (this!=0) then
        set si__ArcingTextTag_F=si__ArcingTextTag_V[this]
    else
        set si__ArcingTextTag_I=si__ArcingTextTag_I+1
        set this=si__ArcingTextTag_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__ArcingTextTag_V[this]=-1
 return this
endfunction

//Generated destructor of ArcingTextTag
function s__ArcingTextTag_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__ArcingTextTag_V[this]!=-1) then
        return
    endif
    set si__ArcingTextTag_V[this]=si__ArcingTextTag_F
    set si__ArcingTextTag_F=this
endfunction

//Generated method caller for Ability___IAbility.onCast
function sc__Ability___IAbility_onCast takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Ability___IAbility_onCast[si__Ability___IAbility_type[this]])
endfunction

//Generated method executor for Ability___IAbility.onCast
function sx__Ability___IAbility_onCast takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Ability___IAbility_onCast[si__Ability___IAbility_type[this]])
endfunction

//Generated method caller for Ability___IAbility.onLearn
function sc__Ability___IAbility_onLearn takes integer this,unit source,integer skill,integer level returns nothing
    set f__arg_this=this
    set f__arg_unit1=source
    set f__arg_integer1=skill
    set f__arg_integer2=level
    call TriggerEvaluate(st__Ability___IAbility_onLearn[si__Ability___IAbility_type[this]])
endfunction

//Generated method executor for Ability___IAbility.onLearn
function sx__Ability___IAbility_onLearn takes integer this,unit source,integer skill,integer level returns nothing
    set f__arg_this=this
    set f__arg_unit1=source
    set f__arg_integer1=skill
    set f__arg_integer2=level
    call TriggerExecute(st__Ability___IAbility_onLearn[si__Ability___IAbility_type[this]])
endfunction

//Generated method caller for Ability___IAbility.onTooltip
function sc__Ability___IAbility_onTooltip takes integer this,unit source,integer level returns string
    set f__arg_this=this
    set f__arg_unit1=source
    set f__arg_integer1=level
    //An error in the next line would mean declaration for Ability___IAbility.onTooltip had a wrong default (null)
    set f__result_string=null
    call TriggerEvaluate(st__Ability___IAbility_onTooltip[si__Ability___IAbility_type[this]])
 return f__result_string
endfunction

//Generated method executor for Ability___IAbility.onTooltip
function sx__Ability___IAbility_onTooltip takes integer this,unit source,integer level returns nothing
    set f__arg_this=this
    set f__arg_unit1=source
    set f__arg_integer1=level
    call TriggerExecute(st__Ability___IAbility_onTooltip[si__Ability___IAbility_type[this]])
endfunction
//Generated destructor of Ability___IAbility
function sc__Ability___IAbility_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Ability___IAbility_V[this]!=-1) then
        return
    endif
    set f__arg_this=this
    call TriggerEvaluate(st__Ability___IAbility_onDestroy[si__Ability___IAbility_type[this]])
    set si__Ability___IAbility_V[this]=si__Ability___IAbility_F
    set si__Ability___IAbility_F=this
endfunction

//Generated allocator of ubersplatTimed
function s__ubersplatTimed__allocate takes nothing returns integer
 local integer this=si__ubersplatTimed_F
    if (this!=0) then
        set si__ubersplatTimed_F=si__ubersplatTimed_V[this]
    else
        set si__ubersplatTimed_I=si__ubersplatTimed_I+1
        set this=si__ubersplatTimed_I
    endif
    if (this>8190) then
        return 0
    endif

   set s__ubersplatTimed_elapsed[this]= 0
    set si__ubersplatTimed_V[this]=-1
 return this
endfunction

//Generated destructor of ubersplatTimed
function s__ubersplatTimed_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__ubersplatTimed_V[this]!=-1) then
        return
    endif
    set si__ubersplatTimed_V[this]=si__ubersplatTimed_F
    set si__ubersplatTimed_F=this
endfunction

//Generated allocator of unitTimed
function s__unitTimed__allocate takes nothing returns integer
 local integer this=si__unitTimed_F
    if (this!=0) then
        set si__unitTimed_F=si__unitTimed_V[this]
    else
        set si__unitTimed_I=si__unitTimed_I+1
        set this=si__unitTimed_I
    endif
    if (this>8190) then
        return 0
    endif

   set s__unitTimed_elapsed[this]= 0
    set si__unitTimed_V[this]=-1
 return this
endfunction

//Generated destructor of unitTimed
function s__unitTimed_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__unitTimed_V[this]!=-1) then
        return
    endif
    set si__unitTimed_V[this]=si__unitTimed_F
    set si__unitTimed_F=this
endfunction

//Generated allocator of itemTimed
function s__itemTimed__allocate takes nothing returns integer
 local integer this=si__itemTimed_F
    if (this!=0) then
        set si__itemTimed_F=si__itemTimed_V[this]
    else
        set si__itemTimed_I=si__itemTimed_I+1
        set this=si__itemTimed_I
    endif
    if (this>8190) then
        return 0
    endif

   set s__itemTimed_elapsed[this]= 0
    set si__itemTimed_V[this]=-1
 return this
endfunction

//Generated destructor of itemTimed
function s__itemTimed_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__itemTimed_V[this]!=-1) then
        return
    endif
    set si__itemTimed_V[this]=si__itemTimed_F
    set si__itemTimed_F=this
endfunction

//Generated allocator of weathereffectTimed
function s__weathereffectTimed__allocate takes nothing returns integer
 local integer this=si__weathereffectTimed_F
    if (this!=0) then
        set si__weathereffectTimed_F=si__weathereffectTimed_V[this]
    else
        set si__weathereffectTimed_I=si__weathereffectTimed_I+1
        set this=si__weathereffectTimed_I
    endif
    if (this>8190) then
        return 0
    endif

   set s__weathereffectTimed_elapsed[this]= 0
    set si__weathereffectTimed_V[this]=-1
 return this
endfunction

//Generated destructor of weathereffectTimed
function s__weathereffectTimed_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__weathereffectTimed_V[this]!=-1) then
        return
    endif
    set si__weathereffectTimed_V[this]=si__weathereffectTimed_F
    set si__weathereffectTimed_F=this
endfunction

//Generated allocator of lightningTimed
function s__lightningTimed__allocate takes nothing returns integer
 local integer this=si__lightningTimed_F
    if (this!=0) then
        set si__lightningTimed_F=si__lightningTimed_V[this]
    else
        set si__lightningTimed_I=si__lightningTimed_I+1
        set this=si__lightningTimed_I
    endif
    if (this>8190) then
        return 0
    endif

   set s__lightningTimed_elapsed[this]= 0
    set si__lightningTimed_V[this]=-1
 return this
endfunction

//Generated destructor of lightningTimed
function s__lightningTimed_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__lightningTimed_V[this]!=-1) then
        return
    endif
    set si__lightningTimed_V[this]=si__lightningTimed_F
    set si__lightningTimed_F=this
endfunction

//Generated allocator of effectTimed
function s__effectTimed__allocate takes nothing returns integer
 local integer this=si__effectTimed_F
    if (this!=0) then
        set si__effectTimed_F=si__effectTimed_V[this]
    else
        set si__effectTimed_I=si__effectTimed_I+1
        set this=si__effectTimed_I
    endif
    if (this>8190) then
        return 0
    endif

   set s__effectTimed_elapsed[this]= 0
    set si__effectTimed_V[this]=-1
 return this
endfunction

//Generated destructor of effectTimed
function s__effectTimed_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__effectTimed_V[this]!=-1) then
        return
    endif
    set si__effectTimed_V[this]=si__effectTimed_F
    set si__effectTimed_F=this
endfunction

//Generated method caller for Tenacity.get
function sc__Tenacity_get takes unit source,integer types returns real
    set f__arg_unit1=source
    set f__arg_integer1=types
    call TriggerEvaluate(st__Tenacity_get)
 return f__result_real
endfunction

//Generated method caller for Tenacity.Set
function sc__Tenacity_Set takes unit source,real value,integer types returns nothing
    set f__arg_unit1=source
    set f__arg_real1=value
    set f__arg_integer1=types
    call TriggerEvaluate(st__Tenacity_Set)
endfunction

//Generated method caller for Tenacity.add
function sc__Tenacity_add takes unit source,real value,integer types returns nothing
    set f__arg_unit1=source
    set f__arg_real1=value
    set f__arg_integer1=types
    call TriggerEvaluate(st__Tenacity_add)
endfunction

//Generated method caller for Tenacity.remove
function sc__Tenacity_remove takes unit source,real value returns boolean
    set f__arg_unit1=source
    set f__arg_real1=value
    call TriggerEvaluate(st__Tenacity_remove)
 return f__result_boolean
endfunction

//Generated method caller for Tenacity.calculate
function sc__Tenacity_calculate takes unit source,real duration returns real
    set f__arg_unit1=source
    set f__arg_real1=duration
    call TriggerEvaluate(st__Tenacity_calculate)
 return f__result_real
endfunction

//Generated method caller for Tenacity.register
function sc__Tenacity_register takes unit source returns integer
    set f__arg_unit1=source
    call TriggerEvaluate(st__Tenacity_register)
 return f__result_integer
endfunction

//Generated method caller for Tenacity.print
function sc__Tenacity_print takes unit source returns nothing
    set f__arg_unit1=source
    call TriggerEvaluate(st__Tenacity_print)
endfunction

//Generated allocator of Tenacity
function s__Tenacity__allocate takes nothing returns integer
 local integer this=si__Tenacity_F
    if (this!=0) then
        set si__Tenacity_F=si__Tenacity_V[this]
    else
        set si__Tenacity_I=si__Tenacity_I+1
        set this=si__Tenacity_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Tenacity_type[this]=83
    set si__Tenacity_V[this]=-1
 return this
endfunction

//Generated destructor of Tenacity
function sc__Tenacity_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Tenacity_V[this]!=-1) then
        return
    endif
    set f__arg_this=this
    call TriggerEvaluate(st__Tenacity_onDestroy[si__Tenacity_type[this]])
    set si__Tenacity_V[this]=si__Tenacity_F
    set si__Tenacity_F=this
endfunction

//Generated method caller for Tenacity___List.update
function sc__Tenacity___List_update takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Tenacity___List_update)
endfunction

//Generated allocator of PluginSpellEffect___Unit
function s__PluginSpellEffect___Unit__allocate takes nothing returns integer
 local integer this=si__PluginSpellEffect___Unit_F
    if (this!=0) then
        set si__PluginSpellEffect___Unit_F=si__PluginSpellEffect___Unit_V[this]
    else
        set si__PluginSpellEffect___Unit_I=si__PluginSpellEffect___Unit_I+1
        set this=si__PluginSpellEffect___Unit_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__PluginSpellEffect___Unit_V[this]=-1
 return this
endfunction

//Generated destructor of PluginSpellEffect___Unit
function s__PluginSpellEffect___Unit_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__PluginSpellEffect___Unit_V[this]!=-1) then
        return
    endif
    set si__PluginSpellEffect___Unit_V[this]=si__PluginSpellEffect___Unit_F
    set si__PluginSpellEffect___Unit_F=this
endfunction

//Generated allocator of MissileEffect
function s__MissileEffect__allocate takes nothing returns integer
 local integer this=si__MissileEffect_F
    if (this!=0) then
        set si__MissileEffect_F=si__MissileEffect_V[this]
    else
        set si__MissileEffect_I=si__MissileEffect_I+1
        set this=si__MissileEffect_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__MissileEffect_V[this]=-1
 return this
endfunction

//Generated destructor of MissileEffect
function s__MissileEffect_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__MissileEffect_V[this]!=-1) then
        return
    endif
    set si__MissileEffect_V[this]=si__MissileEffect_F
    set si__MissileEffect_F=this
endfunction

//Generated method caller for MagicResistance.get
function sc__MagicResistance_get takes unit u returns real
    set f__arg_unit1=u
    call TriggerEvaluate(st__MagicResistance_get)
 return f__result_real
endfunction

//Generated method caller for MagicResistance.Set
function sc__MagicResistance_Set takes unit u,real value returns real
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__MagicResistance_Set)
 return f__result_real
endfunction

//Generated allocator of MagicResistance
function s__MagicResistance__allocate takes nothing returns integer
 local integer this=si__MagicResistance_F
    if (this!=0) then
        set si__MagicResistance_F=si__MagicResistance_V[this]
    else
        set si__MagicResistance_I=si__MagicResistance_I+1
        set this=si__MagicResistance_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__MagicResistance_V[this]=-1
 return this
endfunction

//Generated destructor of MagicResistance
function s__MagicResistance_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__MagicResistance_V[this]!=-1) then
        return
    endif
    set si__MagicResistance_V[this]=si__MagicResistance_F
    set si__MagicResistance_F=this
endfunction

//Generated method caller for MagicPenetration.get
function sc__MagicPenetration_get takes unit u,boolean isFlat returns real
            if isFlat then
                return s__MagicPenetration_flat[GetUnitUserData(u)]
            else
                return s__MagicPenetration_percent[GetUnitUserData(u)]
            endif
endfunction

//Generated method caller for MagicPenetration.Set
function sc__MagicPenetration_Set takes unit u,real value,boolean isFlat returns real
    set f__arg_unit1=u
    set f__arg_real1=value
    set f__arg_boolean1=isFlat
    call TriggerEvaluate(st__MagicPenetration_Set)
 return f__result_real
endfunction

//Generated allocator of MagicPenetration
function s__MagicPenetration__allocate takes nothing returns integer
 local integer this=si__MagicPenetration_F
    if (this!=0) then
        set si__MagicPenetration_F=si__MagicPenetration_V[this]
    else
        set si__MagicPenetration_I=si__MagicPenetration_I+1
        set this=si__MagicPenetration_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__MagicPenetration_V[this]=-1
 return this
endfunction

//Generated destructor of MagicPenetration
function s__MagicPenetration_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__MagicPenetration_V[this]!=-1) then
        return
    endif
    set si__MagicPenetration_V[this]=si__MagicPenetration_F
    set si__MagicPenetration_F=this
endfunction

//Generated method caller for ArmorPenetration.get
function sc__ArmorPenetration_get takes unit u,boolean isFlat returns real
            if isFlat then
                return s__ArmorPenetration_flat[GetUnitUserData(u)]
            else
                return s__ArmorPenetration_percent[GetUnitUserData(u)]
            endif
endfunction

//Generated method caller for ArmorPenetration.Set
function sc__ArmorPenetration_Set takes unit u,real value,boolean isFlat returns real
    set f__arg_unit1=u
    set f__arg_real1=value
    set f__arg_boolean1=isFlat
    call TriggerEvaluate(st__ArmorPenetration_Set)
 return f__result_real
endfunction

//Generated allocator of ArmorPenetration
function s__ArmorPenetration__allocate takes nothing returns integer
 local integer this=si__ArmorPenetration_F
    if (this!=0) then
        set si__ArmorPenetration_F=si__ArmorPenetration_V[this]
    else
        set si__ArmorPenetration_I=si__ArmorPenetration_I+1
        set this=si__ArmorPenetration_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__ArmorPenetration_V[this]=-1
 return this
endfunction

//Generated destructor of ArmorPenetration
function s__ArmorPenetration_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__ArmorPenetration_V[this]!=-1) then
        return
    endif
    set si__ArmorPenetration_V[this]=si__ArmorPenetration_F
    set si__ArmorPenetration_F=this
endfunction

//Generated method caller for Critical.getChance
function sc__Critical_getChance takes unit u returns real
            return s__Critical_chance[GetUnitUserData(u)]
endfunction

//Generated method caller for Critical.getMultiplier
function sc__Critical_getMultiplier takes unit u returns real
            return s__Critical_multiplier[GetUnitUserData(u)]
endfunction

//Generated method caller for Critical.setChance
function sc__Critical_setChance takes unit u,real value returns real
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__Critical_setChance)
 return f__result_real
endfunction

//Generated method caller for Critical.setMultiplier
function sc__Critical_setMultiplier takes unit u,real value returns real
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__Critical_setMultiplier)
 return f__result_real
endfunction

//Generated method caller for Critical.add
function sc__Critical_add takes unit u,real chance,real multuplier returns nothing
    set f__arg_unit1=u
    set f__arg_real1=chance
    set f__arg_real2=multuplier
    call TriggerEvaluate(st__Critical_add)
endfunction

//Generated method caller for Critical.register
function sc__Critical_register takes code c returns nothing
            call TriggerAddCondition(s__Critical_trigger, Filter(c))
endfunction

//Generated allocator of Critical
function s__Critical__allocate takes nothing returns integer
 local integer this=si__Critical_F
    if (this!=0) then
        set si__Critical_F=si__Critical_V[this]
    else
        set si__Critical_I=si__Critical_I+1
        set this=si__Critical_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Critical_V[this]=-1
 return this
endfunction

//Generated destructor of Critical
function s__Critical_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Critical_V[this]!=-1) then
        return
    endif
    set si__Critical_V[this]=si__Critical_F
    set si__Critical_F=this
endfunction

//Generated method caller for Evasion.getEvasionChance
function sc__Evasion_getEvasionChance takes unit u returns real
            return s__Evasion_evasion[GetUnitUserData(u)]
endfunction

//Generated method caller for Evasion.getMissChance
function sc__Evasion_getMissChance takes unit u returns real
            return s__Evasion_miss[GetUnitUserData(u)]
endfunction

//Generated method caller for Evasion.setEvasionChance
function sc__Evasion_setEvasionChance takes unit u,real value returns real
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__Evasion_setEvasionChance)
 return f__result_real
endfunction

//Generated method caller for Evasion.setMissChance
function sc__Evasion_setMissChance takes unit u,real value returns real
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__Evasion_setMissChance)
 return f__result_real
endfunction

//Generated method caller for Evasion.register
function sc__Evasion_register takes code c returns nothing
            call TriggerAddCondition(s__Evasion_trigger, Filter(c))
endfunction

//Generated method caller for Evasion._get_evade
function sc__Evasion__get_evade takes nothing returns boolean
    call TriggerEvaluate(st__Evasion__get_evade)
 return f__result_boolean
endfunction

//Generated allocator of Evasion
function s__Evasion__allocate takes nothing returns integer
 local integer this=si__Evasion_F
    if (this!=0) then
        set si__Evasion_F=si__Evasion_V[this]
    else
        set si__Evasion_I=si__Evasion_I+1
        set this=si__Evasion_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Evasion_V[this]=-1
 return this
endfunction

//Generated destructor of Evasion
function s__Evasion_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Evasion_V[this]!=-1) then
        return
    endif
    set si__Evasion_V[this]=si__Evasion_F
    set si__Evasion_F=this
endfunction

//Generated method caller for Damage.register
function sc__Damage_register takes attacktype attack,damagetype damage,code c,boolean posmitigation returns nothing
    set f__arg_attacktype1=attack
    set f__arg_damagetype1=damage
    set f__arg_code1=c
    set f__arg_boolean1=posmitigation
    call TriggerEvaluate(st__Damage_register)
endfunction

//Generated allocator of DamageInterface___Unit
function s__DamageInterface___Unit__allocate takes nothing returns integer
 local integer this=si__DamageInterface___Unit_F
    if (this!=0) then
        set si__DamageInterface___Unit_F=si__DamageInterface___Unit_V[this]
    else
        set si__DamageInterface___Unit_I=si__DamageInterface___Unit_I+1
        set this=si__DamageInterface___Unit_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__DamageInterface___Unit_V[this]=-1
 return this
endfunction

//Generated destructor of DamageInterface___Unit
function s__DamageInterface___Unit_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__DamageInterface___Unit_V[this]!=-1) then
        return
    endif
    set si__DamageInterface___Unit_V[this]=si__DamageInterface___Unit_F
    set si__DamageInterface___Unit_F=this
endfunction

//Generated allocator of CDR
function s__CDR__allocate takes nothing returns integer
 local integer this=si__CDR_F
    if (this!=0) then
        set si__CDR_F=si__CDR_V[this]
    else
        set si__CDR_I=si__CDR_I+1
        set this=si__CDR_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__CDR_type[this]=69
    set si__CDR_V[this]=-1
 return this
endfunction

//Generated destructor of CDR
function sc__CDR_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__CDR_V[this]!=-1) then
        return
    endif
    set f__arg_this=this
    call TriggerEvaluate(st__CDR_onDestroy[si__CDR_type[this]])
    set si__CDR_V[this]=si__CDR_F
    set si__CDR_F=this
endfunction

//Generated method caller for Components___IComponent.onText
function sc__Components___IComponent_onText takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Components___IComponent_onText[si__Components___IComponent_type[this]])
endfunction

//Generated method executor for Components___IComponent.onText
function sx__Components___IComponent_onText takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Components___IComponent_onText[si__Components___IComponent_type[this]])
endfunction

//Generated method caller for Components___IComponent.onCheck
function sc__Components___IComponent_onCheck takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Components___IComponent_onCheck[si__Components___IComponent_type[this]])
endfunction

//Generated method executor for Components___IComponent.onCheck
function sx__Components___IComponent_onCheck takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Components___IComponent_onCheck[si__Components___IComponent_type[this]])
endfunction

//Generated method caller for Components___IComponent.onEnter
function sc__Components___IComponent_onEnter takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Components___IComponent_onEnter[si__Components___IComponent_type[this]])
endfunction

//Generated method executor for Components___IComponent.onEnter
function sx__Components___IComponent_onEnter takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Components___IComponent_onEnter[si__Components___IComponent_type[this]])
endfunction

//Generated method caller for Components___IComponent.onLeave
function sc__Components___IComponent_onLeave takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Components___IComponent_onLeave[si__Components___IComponent_type[this]])
endfunction

//Generated method executor for Components___IComponent.onLeave
function sx__Components___IComponent_onLeave takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Components___IComponent_onLeave[si__Components___IComponent_type[this]])
endfunction

//Generated method caller for Components___IComponent.onClick
function sc__Components___IComponent_onClick takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Components___IComponent_onClick[si__Components___IComponent_type[this]])
endfunction

//Generated method executor for Components___IComponent.onClick
function sx__Components___IComponent_onClick takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Components___IComponent_onClick[si__Components___IComponent_type[this]])
endfunction

//Generated method caller for Components___IComponent.onSlide
function sc__Components___IComponent_onSlide takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Components___IComponent_onSlide[si__Components___IComponent_type[this]])
endfunction

//Generated method executor for Components___IComponent.onSlide
function sx__Components___IComponent_onSlide takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Components___IComponent_onSlide[si__Components___IComponent_type[this]])
endfunction

//Generated method caller for Components___IComponent.onScroll
function sc__Components___IComponent_onScroll takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Components___IComponent_onScroll[si__Components___IComponent_type[this]])
endfunction

//Generated method executor for Components___IComponent.onScroll
function sx__Components___IComponent_onScroll takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Components___IComponent_onScroll[si__Components___IComponent_type[this]])
endfunction

//Generated method caller for Components___IComponent.onUncheck
function sc__Components___IComponent_onUncheck takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Components___IComponent_onUncheck[si__Components___IComponent_type[this]])
endfunction

//Generated method executor for Components___IComponent.onUncheck
function sx__Components___IComponent_onUncheck takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Components___IComponent_onUncheck[si__Components___IComponent_type[this]])
endfunction

//Generated method caller for Components___IComponent.onRightClick
function sc__Components___IComponent_onRightClick takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Components___IComponent_onRightClick[si__Components___IComponent_type[this]])
endfunction

//Generated method executor for Components___IComponent.onRightClick
function sx__Components___IComponent_onRightClick takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Components___IComponent_onRightClick[si__Components___IComponent_type[this]])
endfunction

//Generated method caller for Components___IComponent.onMiddleClick
function sc__Components___IComponent_onMiddleClick takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Components___IComponent_onMiddleClick[si__Components___IComponent_type[this]])
endfunction

//Generated method executor for Components___IComponent.onMiddleClick
function sx__Components___IComponent_onMiddleClick takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Components___IComponent_onMiddleClick[si__Components___IComponent_type[this]])
endfunction

//Generated method caller for Components___IComponent.onDoubleClick
function sc__Components___IComponent_onDoubleClick takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Components___IComponent_onDoubleClick[si__Components___IComponent_type[this]])
endfunction

//Generated method executor for Components___IComponent.onDoubleClick
function sx__Components___IComponent_onDoubleClick takes integer this returns nothing
    set f__arg_this=this
    call TriggerExecute(st__Components___IComponent_onDoubleClick[si__Components___IComponent_type[this]])
endfunction
//Generated destructor of Components___IComponent
function sc__Components___IComponent_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Components___IComponent_V[this]!=-1) then
        return
    endif
    set f__arg_this=this
    call TriggerEvaluate(st__Components___IComponent_onDestroy[si__Components___IComponent_type[this]])
    set si__Components___IComponent_V[this]=si__Components___IComponent_F
    set si__Components___IComponent_F=this
endfunction

//Generated allocator of Tooltip
function s__Tooltip__allocate takes nothing returns integer
 local integer this=si__Tooltip_F
    if (this!=0) then
        set si__Tooltip_F=si__Tooltip_V[this]
    else
        set si__Tooltip_I=si__Tooltip_I+1
        set this=si__Tooltip_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Tooltip_V[this]=-1
 return this
endfunction

//Generated destructor of Tooltip
function s__Tooltip_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Tooltip_V[this]!=-1) then
        return
    endif
    set si__Tooltip_V[this]=si__Tooltip_F
    set si__Tooltip_F=this
endfunction

//Generated method caller for Backdrop._set_visible
function sc__Backdrop__set_visible takes integer this,boolean visibility returns nothing
    set f__arg_this=this
    set f__arg_boolean1=visibility
    call TriggerEvaluate(st__Backdrop__set_visible[si__Backdrop_type[this]])
endfunction

//Generated method caller for Backdrop._get_visible
function sc__Backdrop__get_visible takes integer this returns boolean
    set f__arg_this=this
    call TriggerEvaluate(st__Backdrop__get_visible[si__Backdrop_type[this]])
 return f__result_boolean
endfunction

//Generated method caller for Backdrop._get_frame
function sc__Backdrop__get_frame takes integer this returns framehandle
            return s__Backdrop_Components___Operators____frame[this]
endfunction

//Generated method caller for Backdrop.create
function sc__Backdrop_create takes real x,real y,real width,real height,framehandle parent,string texture returns integer
    set f__arg_real1=x
    set f__arg_real2=y
    set f__arg_real3=width
    set f__arg_real4=height
    set f__arg_framehandle1=parent
    set f__arg_string1=texture
    call TriggerEvaluate(st__Backdrop_create)
 return f__result_integer
endfunction

//Generated allocator of Backdrop
function s__Backdrop__allocate takes nothing returns integer
 local integer this=si__Backdrop_F
    if (this!=0) then
        set si__Backdrop_F=si__Backdrop_V[this]
    else
        set si__Backdrop_I=si__Backdrop_I+1
        set this=si__Backdrop_I
    endif
    if (this>8190) then
        return 0
    endif

   set s__Backdrop_Components___Operators____enabled[this]= true
   set s__Backdrop_Components___Operators____visible[this]= true
   set s__Backdrop_Components___Operators____point[this]= FRAMEPOINT_TOPLEFT
   set s__Backdrop_Components___Operators____relative[this]= FRAMEPOINT_TOPLEFT
    set si__Backdrop_type[this]=55
    set si__Backdrop_V[this]=-1
 return this
endfunction

//Generated destructor of Backdrop
function sc__Backdrop_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Backdrop_V[this]!=-1) then
        return
    endif
    set f__arg_this=this
    call TriggerEvaluate(st__Backdrop_onDestroy[si__Backdrop_type[this]])
    set si__Backdrop_V[this]=si__Backdrop_F
    set si__Backdrop_F=this
endfunction

//Generated method caller for Slider._set_visible
function sc__Slider__set_visible takes integer this,boolean visibility returns nothing
    set f__arg_this=this
    set f__arg_boolean1=visibility
    call TriggerEvaluate(st__Slider__set_visible)
endfunction

//Generated method caller for Slider._get_visible
function sc__Slider__get_visible takes integer this returns boolean
            return s__Slider_Components___Operators____visible[this]
endfunction

//Generated method caller for Slider._get_frame
function sc__Slider__get_frame takes integer this returns framehandle
            return s__Slider_Components___Operators____frame[this]
endfunction

//Generated method caller for Slider.get
function sc__Slider_get takes nothing returns integer
    call TriggerEvaluate(st__Slider_get)
 return f__result_integer
endfunction

//Generated allocator of Slider
function s__Slider__allocate takes nothing returns integer
 local integer kthis
 local integer this=si__Components___IComponent_F
    if (this!=0) then
        set si__Components___IComponent_F=si__Components___IComponent_V[this]
    else
        set si__Components___IComponent_I=si__Components___IComponent_I+1
        set this=si__Components___IComponent_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Components___IComponent_type[this]=64
    set kthis=this

   set s__Slider_minimum[this]= 0
   set s__Slider_maximum[this]= 100
   set s__Slider_stepping[this]= 1
   set s__Slider_Components___Operators____enabled[this]= true
   set s__Slider_Components___Operators____visible[this]= true
   set s__Slider_Components___Operators____point[this]= FRAMEPOINT_TOPLEFT
   set s__Slider_Components___Operators____relative[this]= FRAMEPOINT_TOPLEFT
    set si__Components___IComponent_V[this]=-1
 return this
endfunction


//Generated method caller for CheckBox._set_visible
function sc__CheckBox__set_visible takes integer this,boolean visibility returns nothing
    set f__arg_this=this
    set f__arg_boolean1=visibility
    call TriggerEvaluate(st__CheckBox__set_visible)
endfunction

//Generated method caller for CheckBox._get_visible
function sc__CheckBox__get_visible takes integer this returns boolean
            return s__CheckBox_Components___Operators____visible[this]
endfunction

//Generated method caller for CheckBox._get_frame
function sc__CheckBox__get_frame takes integer this returns framehandle
            return s__CheckBox_Components___Operators____frame[this]
endfunction

//Generated method caller for CheckBox.get
function sc__CheckBox_get takes nothing returns integer
    call TriggerEvaluate(st__CheckBox_get)
 return f__result_integer
endfunction

//Generated allocator of CheckBox
function s__CheckBox__allocate takes nothing returns integer
 local integer kthis
 local integer this=si__Components___IComponent_F
    if (this!=0) then
        set si__Components___IComponent_F=si__Components___IComponent_V[this]
    else
        set si__Components___IComponent_I=si__Components___IComponent_I+1
        set this=si__Components___IComponent_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Components___IComponent_type[this]=62
    if (si__CheckBox_arrN==0) then
        set si__CheckBox_arrI=si__CheckBox_arrI+1
        set kthis=si__CheckBox_arrI
        if (kthis>291) then
            set si__Components___IComponent_V[this]=si__Components___IComponent_F
            set si__Components___IComponent_F=this
            return 0
        endif
    else
        set kthis=si__CheckBox_arrV[si__CheckBox_arrN]
        set si__CheckBox_arrN=si__CheckBox_arrN-1
    endif
    set si__CheckBox_arr[this]=kthis
    set s__CheckBox_isChecked[this]=(kthis-1)*28
   set s__CheckBox_Components___Operators____enabled[this]= true
   set s__CheckBox_Components___Operators____visible[this]= true
   set s__CheckBox_Components___Operators____point[this]= FRAMEPOINT_TOPLEFT
   set s__CheckBox_Components___Operators____relative[this]= FRAMEPOINT_TOPLEFT
    set si__Components___IComponent_V[this]=-1
 return this
endfunction


//Generated method caller for EditBox._set_visible
function sc__EditBox__set_visible takes integer this,boolean visibility returns nothing
    set f__arg_this=this
    set f__arg_boolean1=visibility
    call TriggerEvaluate(st__EditBox__set_visible)
endfunction

//Generated method caller for EditBox._get_visible
function sc__EditBox__get_visible takes integer this returns boolean
            return s__EditBox_Components___Operators____visible[this]
endfunction

//Generated method caller for EditBox._get_frame
function sc__EditBox__get_frame takes integer this returns framehandle
            return s__EditBox_Components___Operators____frame[this]
endfunction

//Generated method caller for EditBox.get
function sc__EditBox_get takes nothing returns integer
    call TriggerEvaluate(st__EditBox_get)
 return f__result_integer
endfunction

//Generated allocator of EditBox
function s__EditBox__allocate takes nothing returns integer
 local integer kthis
 local integer this=si__Components___IComponent_F
    if (this!=0) then
        set si__Components___IComponent_F=si__Components___IComponent_V[this]
    else
        set si__Components___IComponent_I=si__Components___IComponent_I+1
        set this=si__Components___IComponent_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Components___IComponent_type[this]=61
    set kthis=this

   set s__EditBox_Components___Operators____enabled[this]= true
   set s__EditBox_Components___Operators____visible[this]= true
   set s__EditBox_Components___Operators____point[this]= FRAMEPOINT_TOPLEFT
   set s__EditBox_Components___Operators____relative[this]= FRAMEPOINT_TOPLEFT
    set si__Components___IComponent_V[this]=-1
 return this
endfunction


//Generated method caller for Component._set_visible
function sc__Component__set_visible takes integer this,boolean visibility returns nothing
    set f__arg_this=this
    set f__arg_boolean1=visibility
    call TriggerEvaluate(st__Component__set_visible[si__Components___IComponent_type[this]])
endfunction

//Generated method caller for Component._get_visible
function sc__Component__get_visible takes integer this returns boolean
    set f__arg_this=this
    call TriggerEvaluate(st__Component__get_visible[si__Components___IComponent_type[this]])
 return f__result_boolean
endfunction

//Generated method caller for Component._get_frame
function sc__Component__get_frame takes integer this returns framehandle
            return s__Component_Components___Operators____frame[this]
endfunction

//Generated method caller for Component.get
function sc__Component_get takes nothing returns integer
            return s__Component_array[GetPlayerId(GetTriggerPlayer())]
endfunction

//Generated method caller for Component.create
function sc__Component_create takes real x,real y,real width,real height,framehandle parent,string frameType,string template returns integer
    set f__arg_real1=x
    set f__arg_real2=y
    set f__arg_real3=width
    set f__arg_real4=height
    set f__arg_framehandle1=parent
    set f__arg_string1=frameType
    set f__arg_string2=template
    call TriggerEvaluate(st__Component_create)
 return f__result_integer
endfunction

//Generated allocator of Component
function s__Component__allocate takes nothing returns integer
 local integer kthis
 local integer this=si__Components___IComponent_F
    if (this!=0) then
        set si__Components___IComponent_F=si__Components___IComponent_V[this]
    else
        set si__Components___IComponent_I=si__Components___IComponent_I+1
        set this=si__Components___IComponent_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Components___IComponent_type[this]=60
    set kthis=this

   set s__Component_isActive[this]= true
   set s__Component_Components___Operators____enabled[this]= true
   set s__Component_Components___Operators____visible[this]= true
   set s__Component_Components___Operators____point[this]= FRAMEPOINT_TOPLEFT
   set s__Component_Components___Operators____relative[this]= FRAMEPOINT_TOPLEFT
    set si__Components___IComponent_V[this]=-1
 return this
endfunction


//Generated method caller for StatusBar._set_visible
function sc__StatusBar__set_visible takes integer this,boolean visibility returns nothing
    set f__arg_this=this
    set f__arg_boolean1=visibility
    call TriggerEvaluate(st__StatusBar__set_visible)
endfunction

//Generated method caller for StatusBar._get_visible
function sc__StatusBar__get_visible takes integer this returns boolean
            return s__StatusBar_Components___Operators____visible[this]
endfunction

//Generated method caller for StatusBar._get_frame
function sc__StatusBar__get_frame takes integer this returns framehandle
            return s__StatusBar_Components___Operators____frame[this]
endfunction

//Generated allocator of StatusBar
function s__StatusBar__allocate takes nothing returns integer
 local integer this=si__StatusBar_F
    if (this!=0) then
        set si__StatusBar_F=si__StatusBar_V[this]
    else
        set si__StatusBar_I=si__StatusBar_I+1
        set this=si__StatusBar_I
    endif
    if (this>8190) then
        return 0
    endif

   set s__StatusBar_Components___Operators____enabled[this]= true
   set s__StatusBar_Components___Operators____visible[this]= true
   set s__StatusBar_Components___Operators____point[this]= FRAMEPOINT_TOPLEFT
   set s__StatusBar_Components___Operators____relative[this]= FRAMEPOINT_TOPLEFT
    set si__StatusBar_V[this]=-1
 return this
endfunction

//Generated destructor of StatusBar
function s__StatusBar_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__StatusBar_V[this]!=-1) then
        return
    endif
    set si__StatusBar_V[this]=si__StatusBar_F
    set si__StatusBar_F=this
endfunction

//Generated method caller for TextArea._set_visible
function sc__TextArea__set_visible takes integer this,boolean visibility returns nothing
    set f__arg_this=this
    set f__arg_boolean1=visibility
    call TriggerEvaluate(st__TextArea__set_visible)
endfunction

//Generated method caller for TextArea._get_visible
function sc__TextArea__get_visible takes integer this returns boolean
            return s__TextArea_Components___Operators____visible[this]
endfunction

//Generated method caller for TextArea._get_frame
function sc__TextArea__get_frame takes integer this returns framehandle
            return s__TextArea_Components___Operators____frame[this]
endfunction

//Generated allocator of TextArea
function s__TextArea__allocate takes nothing returns integer
 local integer this=si__TextArea_F
    if (this!=0) then
        set si__TextArea_F=si__TextArea_V[this]
    else
        set si__TextArea_I=si__TextArea_I+1
        set this=si__TextArea_I
    endif
    if (this>8190) then
        return 0
    endif

   set s__TextArea_Components___Operators____enabled[this]= true
   set s__TextArea_Components___Operators____visible[this]= true
   set s__TextArea_Components___Operators____point[this]= FRAMEPOINT_TOPLEFT
   set s__TextArea_Components___Operators____relative[this]= FRAMEPOINT_TOPLEFT
    set si__TextArea_V[this]=-1
 return this
endfunction

//Generated destructor of TextArea
function s__TextArea_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__TextArea_V[this]!=-1) then
        return
    endif
    set si__TextArea_V[this]=si__TextArea_F
    set si__TextArea_F=this
endfunction

//Generated method caller for Text._set_visible
function sc__Text__set_visible takes integer this,boolean visibility returns nothing
    set f__arg_this=this
    set f__arg_boolean1=visibility
    call TriggerEvaluate(st__Text__set_visible)
endfunction

//Generated method caller for Text._get_visible
function sc__Text__get_visible takes integer this returns boolean
            return s__Text_Components___Operators____visible[this]
endfunction

//Generated method caller for Text._get_frame
function sc__Text__get_frame takes integer this returns framehandle
            return s__Text_Components___Operators____frame[this]
endfunction

//Generated allocator of Text
function s__Text__allocate takes nothing returns integer
 local integer this=si__Text_F
    if (this!=0) then
        set si__Text_F=si__Text_V[this]
    else
        set si__Text_I=si__Text_I+1
        set this=si__Text_I
    endif
    if (this>8190) then
        return 0
    endif

   set s__Text_Components___Operators____enabled[this]= true
   set s__Text_Components___Operators____visible[this]= true
   set s__Text_Components___Operators____point[this]= FRAMEPOINT_TOPLEFT
   set s__Text_Components___Operators____relative[this]= FRAMEPOINT_TOPLEFT
    set si__Text_V[this]=-1
 return this
endfunction

//Generated destructor of Text
function s__Text_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Text_V[this]!=-1) then
        return
    endif
    set si__Text_V[this]=si__Text_F
    set si__Text_F=this
endfunction

//Generated method caller for Sprite._set_visible
function sc__Sprite__set_visible takes integer this,boolean visibility returns nothing
    set f__arg_this=this
    set f__arg_boolean1=visibility
    call TriggerEvaluate(st__Sprite__set_visible)
endfunction

//Generated method caller for Sprite._get_visible
function sc__Sprite__get_visible takes integer this returns boolean
            return s__Sprite_Components___Operators____visible[this]
endfunction

//Generated method caller for Sprite._get_frame
function sc__Sprite__get_frame takes integer this returns framehandle
            return s__Sprite_Components___Operators____frame[this]
endfunction

//Generated allocator of Sprite
function s__Sprite__allocate takes nothing returns integer
 local integer this=si__Sprite_F
    if (this!=0) then
        set si__Sprite_F=si__Sprite_V[this]
    else
        set si__Sprite_I=si__Sprite_I+1
        set this=si__Sprite_I
    endif
    if (this>8190) then
        return 0
    endif

   set s__Sprite_Components___Operators____enabled[this]= true
   set s__Sprite_Components___Operators____visible[this]= true
   set s__Sprite_Components___Operators____point[this]= FRAMEPOINT_TOPLEFT
   set s__Sprite_Components___Operators____relative[this]= FRAMEPOINT_TOPLEFT
    set si__Sprite_V[this]=-1
 return this
endfunction

//Generated destructor of Sprite
function s__Sprite_deallocate takes integer this returns nothing
    if this==null then
        return
    elseif (si__Sprite_V[this]!=-1) then
        return
    endif
    set si__Sprite_V[this]=si__Sprite_F
    set si__Sprite_F=this
endfunction

//Generated method caller for Item.calculate
function sc__Item_calculate takes integer this,integer owned returns integer
    set f__arg_this=this
    set f__arg_integer1=owned
    call TriggerEvaluate(st__Item_calculate)
 return f__result_integer
endfunction

//Generated method caller for Item.get
function sc__Item_get takes integer id returns integer
    set f__arg_integer1=id
    call TriggerEvaluate(st__Item_get)
 return f__result_integer
endfunction

//Generated method caller for Item.create
function sc__Item_create takes integer id returns integer
    set f__arg_integer1=id
    call TriggerEvaluate(st__Item_create)
 return f__result_integer
endfunction

//Generated method caller for Item.save
function sc__Item_save takes integer id,integer comp returns nothing
    set f__arg_integer1=id
    set f__arg_integer2=comp
    call TriggerEvaluate(st__Item_save)
endfunction

//Generated method caller for Item.clear
function sc__Item_clear takes nothing returns nothing
            call RemoveItem(GetEnumItem())
endfunction

//Generated allocator of Item
function s__Item__allocate takes nothing returns integer
 local integer kthis
 local integer this=si__Item___IItem_F
    if (this!=0) then
        set si__Item___IItem_F=si__Item___IItem_V[this]
    else
        set si__Item___IItem_I=si__Item___IItem_I+1
        set this=si__Item___IItem_I
    endif
    if (this>8190) then
        return 0
    endif

   set s__Item___IItem_mana[this]= 0
   set s__Item___IItem_armor[this]= 0
   set s__Item___IItem_block[this]= 0
   set s__Item___IItem_damage[this]= 0
   set s__Item___IItem_health[this]= 0
   set s__Item___IItem_evasion[this]= 0
   set s__Item___IItem_agility[this]= 0
   set s__Item___IItem_strength[this]= 0
   set s__Item___IItem_tenacity[this]= 0
   set s__Item___IItem_lifeSteal[this]= 0
   set s__Item___IItem_spellVamp[this]= 0
   set s__Item___IItem_manaRegen[this]= 0
   set s__Item___IItem_sightRange[this]= 0
   set s__Item___IItem_missChance[this]= 0
   set s__Item___IItem_spellPower[this]= 0
   set s__Item___IItem_healthRegen[this]= 0
   set s__Item___IItem_attackSpeed[this]= 0
   set s__Item___IItem_intelligence[this]= 0
   set s__Item___IItem_tenacityFlat[this]= 0
   set s__Item___IItem_movementSpeed[this]= 0
   set s__Item___IItem_criticalDamage[this]= 0
   set s__Item___IItem_criticalChance[this]= 0
   set s__Item___IItem_cooldownOffset[this]= 0
   set s__Item___IItem_tenacityOffset[this]= 0
   set s__Item___IItem_magicResistance[this]= 0
   set s__Item___IItem_armorPenetration[this]= 0
   set s__Item___IItem_magicPenetration[this]= 0
   set s__Item___IItem_cooldownReduction[this]= 0
   set s__Item___IItem_armorPenetrationFlat[this]= 0
   set s__Item___IItem_magicPenetrationFlat[this]= 0
   set s__Item___IItem_cooldownReductionFlat[this]= 0
    set si__Item___IItem_type[this]=117
    set kthis=this

    set si__Item___IItem_V[this]=-1
 return this
endfunction


//Generated method caller for Button.create
function sc__Button_create takes real x,real y,real width,real height,framehandle parent,boolean simpleTooltip returns integer
    set f__arg_real1=x
    set f__arg_real2=y
    set f__arg_real3=width
    set f__arg_real4=height
    set f__arg_framehandle1=parent
    set f__arg_boolean1=simpleTooltip
    call TriggerEvaluate(st__Button_create)
 return f__result_integer
endfunction

//Generated allocator of Button
function s__Button__allocate takes real x ,real y ,real width ,real height ,framehandle parent ,string frameType ,string template returns integer
 local integer this=sc__Component_create(x,y,width,height,parent,frameType,template)
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Components___IComponent_type[this]=65
    set kthis=this

 return this
endfunction


//Generated method caller for Panel.create
function sc__Panel_create takes real x,real y,real width,real height,framehandle parent,string template returns integer
    set f__arg_real1=x
    set f__arg_real2=y
    set f__arg_real3=width
    set f__arg_real4=height
    set f__arg_framehandle1=parent
    set f__arg_string1=template
    call TriggerEvaluate(st__Panel_create)
 return f__result_integer
endfunction

//Generated allocator of Panel
function s__Panel__allocate takes real x ,real y ,real width ,real height ,framehandle parent ,string frameType ,string template returns integer
 local integer this=sc__Component_create(x,y,width,height,parent,frameType,template)
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Components___IComponent_type[this]=66
    set kthis=this

 return this
endfunction


//Generated allocator of Line
function s__Line__allocate takes real x ,real y ,real width ,real height ,framehandle parent ,string texture returns integer
 local integer this=sc__Backdrop_create(x,y,width,height,parent,texture)
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Backdrop_type[this]=67
    set kthis=this

 return this
endfunction


//Generated method caller for Ability.onCasting
function sc__Ability_onCasting takes nothing returns nothing
    call TriggerEvaluate(st__Ability_onCasting)
endfunction

//Generated allocator of Ability
function s__Ability__allocate takes nothing returns integer
 local integer kthis
 local integer this=si__Ability___IAbility_F
    if (this!=0) then
        set si__Ability___IAbility_F=si__Ability___IAbility_V[this]
    else
        set si__Ability___IAbility_I=si__Ability___IAbility_I+1
        set this=si__Ability___IAbility_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Ability___IAbility_type[this]=91
    set kthis=this

    set si__Ability___IAbility_V[this]=-1
 return this
endfunction


//Generated allocator of CooldownReductionUtils___CDRUtils
function s__CooldownReductionUtils___CDRUtils__allocate takes nothing returns integer
 local integer this=s__CDR__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__CDR_type[this]=93
    set kthis=this

 return this
endfunction


//Generated method caller for Missiles.terminate
function sc__Missiles_terminate takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Missiles_terminate)
endfunction

//Generated method caller for Missiles.reset
function sc__Missiles_reset takes integer this returns nothing
            set s__Missiles_launched[this]=false
            set s__Missiles_finished[this]=false
            set s__Missiles_collideZ[this]=false
            set s__Missiles_paused[this]=false
            set s__Missiles_roll[this]=false
            set s__Missiles_source[this]=null
            set s__Missiles_target[this]=null
            set s__Missiles_owner[this]=null
            set s__Missiles_dummy[this]=null
            set s__Missiles_open[this]=0.
            set s__Missiles_height[this]=0.
            set s__Missiles_veloc[this]=0.
            set s__Missiles_acceleration[this]=0.
            set s__Missiles_collision[this]=0.
            set s__Missiles_damage[this]=0.
            set s__Missiles_travel[this]=0.
            set s__Missiles_turn[this]=0.
            set s__Missiles_time[this]=0.
            set s__Missiles_sight[this]=0.
            set s__Missiles_data[this]=0
            set s__Missiles_type[this]=0
            set s__Missiles_tileset[this]=0
            set s__Missiles_pkey[this]=- 1
            set s__Missiles_index[this]=- 1
endfunction

//Generated method caller for Missiles.move
function sc__Missiles_move takes nothing returns nothing
    call TriggerEvaluate(st__Missiles_move)
endfunction

//Generated method caller for Missiles.create
function sc__Missiles_create takes real x,real y,real z,real toX,real toY,real toZ returns integer
    set f__arg_real1=x
    set f__arg_real2=y
    set f__arg_real3=z
    set f__arg_real4=toX
    set f__arg_real5=toY
    set f__arg_real6=toZ
    call TriggerEvaluate(st__Missiles_create)
 return f__result_integer
endfunction

//Generated allocator of Missiles
function s__Missiles__allocate takes nothing returns integer
 local integer kthis
 local integer this=si__Missiles___MissileEvents_F
    if (this!=0) then
        set si__Missiles___MissileEvents_F=si__Missiles___MissileEvents_V[this]
    else
        set si__Missiles___MissileEvents_I=si__Missiles___MissileEvents_I+1
        set this=si__Missiles___MissileEvents_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__Missiles___MissileEvents_type[this]=97
    set kthis=this

    set si__Missiles___MissileEvents_V[this]=-1
 return this
endfunction


//Generated method caller for Bonus.adder
function sc__Bonus_adder takes unit source,integer bonus,real value returns real
    set f__arg_unit1=source
    set f__arg_integer1=bonus
    set f__arg_real1=value
    call TriggerEvaluate(st__Bonus_adder)
 return f__result_real
endfunction

//Generated method caller for Bonus.onEvent
function sc__Bonus_onEvent takes integer key returns nothing
    set f__arg_integer1=key
    call TriggerEvaluate(st__Bonus_onEvent)
endfunction

//Generated method caller for Bonus.StartTimer
function sc__Bonus_StartTimer takes real timeout,boolean periodic,integer this,integer uniqueId returns nothing
    set f__arg_real1=timeout
    set f__arg_boolean1=periodic
    set f__arg_integer1=this
    set f__arg_integer2=uniqueId
    call TriggerEvaluate(st__Bonus_StartTimer)
endfunction

//Generated allocator of Bonus
function s__Bonus__allocate takes nothing returns integer
 local integer kthis
 local integer this=si__NewBonus___IBonus_F
    if (this!=0) then
        set si__NewBonus___IBonus_F=si__NewBonus___IBonus_V[this]
    else
        set si__NewBonus___IBonus_I=si__NewBonus___IBonus_I+1
        set this=si__NewBonus___IBonus_I
    endif
    if (this>8190) then
        return 0
    endif

    set si__NewBonus___IBonus_type[this]=99
    set kthis=this

    set si__NewBonus___IBonus_V[this]=-1
 return this
endfunction


//Generated method caller for TenacityUtils.addTimed
function sc__TenacityUtils_addTimed takes unit u,real amount,real duration,integer types returns nothing
    set f__arg_unit1=u
    set f__arg_real1=amount
    set f__arg_real2=duration
    set f__arg_integer1=types
    call TriggerEvaluate(st__TenacityUtils_addTimed)
endfunction

//Generated allocator of TenacityUtils
function s__TenacityUtils__allocate takes nothing returns integer
 local integer this=s__Tenacity__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Tenacity_type[this]=100
    set kthis=this

 return this
endfunction


//Generated method caller for Afterburner___Afterburner.onTooltip
function sc__Afterburner___Afterburner_onTooltip takes integer this,unit source,integer level returns string
    set f__arg_this=this
    set f__arg_unit1=source
    set f__arg_integer1=level
    call TriggerEvaluate(st__Ability___IAbility_onTooltip[110])
 return f__result_string
endfunction

//Generated method caller for Afterburner___Afterburner.StartTimer
function sc__Afterburner___Afterburner_StartTimer takes real timeout,boolean periodic,integer this,integer uniqueId returns nothing
    set f__arg_real1=timeout
    set f__arg_boolean1=periodic
    set f__arg_integer1=this
    set f__arg_integer2=uniqueId
    call TriggerEvaluate(st__Afterburner___Afterburner_StartTimer)
endfunction

//Generated allocator of Afterburner___Afterburner
function s__Afterburner___Afterburner__allocate takes nothing returns integer
 local integer this=s__Ability__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Ability___IAbility_type[this]=110
    set kthis=this

 return this
endfunction


//Generated method caller for CooldownReductionFlat___CooldownReductionFlat.get
function sc__CooldownReductionFlat___CooldownReductionFlat_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[170])
 return f__result_real
endfunction

//Generated method caller for CooldownReductionFlat___CooldownReductionFlat.Set
function sc__CooldownReductionFlat___CooldownReductionFlat_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_Set[170])
 return f__result_real
endfunction

//Generated method caller for CooldownReductionFlat___CooldownReductionFlat.add
function sc__CooldownReductionFlat___CooldownReductionFlat_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[170])
 return f__result_real
endfunction

//Generated allocator of CooldownReductionFlat___CooldownReductionFlat
function s__CooldownReductionFlat___CooldownReductionFlat__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=170
    set kthis=this

 return this
endfunction


//Generated method caller for MoltenShield___MoltenShield.onTooltip
function sc__MoltenShield___MoltenShield_onTooltip takes integer this,unit source,integer level returns string
    set f__arg_this=this
    set f__arg_unit1=source
    set f__arg_integer1=level
    call TriggerEvaluate(st__Ability___IAbility_onTooltip[120])
 return f__result_string
endfunction

//Generated method caller for MoltenShield___MoltenShield.onCast
function sc__MoltenShield___MoltenShield_onCast takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Ability___IAbility_onCast[120])
endfunction

//Generated method caller for MoltenShield___MoltenShield.StartTimer
function sc__MoltenShield___MoltenShield_StartTimer takes real timeout,boolean periodic,integer this,integer uniqueId returns nothing
    set f__arg_real1=timeout
    set f__arg_boolean1=periodic
    set f__arg_integer1=this
    set f__arg_integer2=uniqueId
    call TriggerEvaluate(st__MoltenShield___MoltenShield_StartTimer)
endfunction

//Generated allocator of MoltenShield___MoltenShield
function s__MoltenShield___MoltenShield__allocate takes nothing returns integer
 local integer this=s__Ability__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Ability___IAbility_type[this]=120
    set kthis=this

 return this
endfunction


//Generated method caller for ExplosiveRune___ExplosiveRune.onTooltip
function sc__ExplosiveRune___ExplosiveRune_onTooltip takes integer this,unit source,integer level returns string
    set f__arg_this=this
    set f__arg_unit1=source
    set f__arg_integer1=level
    call TriggerEvaluate(st__Ability___IAbility_onTooltip[122])
 return f__result_string
endfunction

//Generated method caller for ExplosiveRune___ExplosiveRune.onCast
function sc__ExplosiveRune___ExplosiveRune_onCast takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Ability___IAbility_onCast[122])
endfunction

//Generated method caller for ExplosiveRune___ExplosiveRune.onLearn
function sc__ExplosiveRune___ExplosiveRune_onLearn takes integer this,unit source,integer skill,integer level returns nothing
    set f__arg_this=this
    set f__arg_unit1=source
    set f__arg_integer1=skill
    set f__arg_integer2=level
    call TriggerEvaluate(st__Ability___IAbility_onLearn[122])
endfunction

//Generated method caller for ExplosiveRune___ExplosiveRune.HasStartedTimer
function sc__ExplosiveRune___ExplosiveRune_HasStartedTimer takes integer id returns boolean
    set f__arg_integer1=id
    call TriggerEvaluate(st__ExplosiveRune___ExplosiveRune_HasStartedTimer)
 return f__result_boolean
endfunction

//Generated method caller for ExplosiveRune___ExplosiveRune.GetTimerInstance
function sc__ExplosiveRune___ExplosiveRune_GetTimerInstance takes integer id returns integer
    set f__arg_integer1=id
    call TriggerEvaluate(st__ExplosiveRune___ExplosiveRune_GetTimerInstance)
 return f__result_integer
endfunction

//Generated method caller for ExplosiveRune___ExplosiveRune.GetRemainingTime
function sc__ExplosiveRune___ExplosiveRune_GetRemainingTime takes integer this returns real
            return TimerGetRemaining(s__ExplosiveRune___ExplosiveRune_Periodic____timer[this])
endfunction

//Generated method caller for ExplosiveRune___ExplosiveRune.StartTimer
function sc__ExplosiveRune___ExplosiveRune_StartTimer takes real timeout,boolean periodic,integer this,integer uniqueId returns nothing
    set f__arg_real1=timeout
    set f__arg_boolean1=periodic
    set f__arg_integer1=this
    set f__arg_integer2=uniqueId
    call TriggerEvaluate(st__ExplosiveRune___ExplosiveRune_StartTimer)
endfunction

//Generated allocator of ExplosiveRune___ExplosiveRune
function s__ExplosiveRune___ExplosiveRune__allocate takes nothing returns integer
 local integer this=s__Ability__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Ability___IAbility_type[this]=122
    set kthis=this

 return this
endfunction


//Generated method caller for LavaElemental___LavaElemental.onCast
function sc__LavaElemental___LavaElemental_onCast takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Ability___IAbility_onCast[123])
endfunction

//Generated allocator of LavaElemental___LavaElemental
function s__LavaElemental___LavaElemental__allocate takes nothing returns integer
 local integer this=s__Ability__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Ability___IAbility_type[this]=123
    set kthis=this

 return this
endfunction


//Generated method caller for LivingMeteor___Meteor.onPeriod
function sc__LivingMeteor___Meteor_onPeriod takes integer this returns boolean
    set f__arg_this=this
    call TriggerEvaluate(st__Missiles___MissileEvents_onPeriod[124])
 return f__result_boolean
endfunction

//Generated method caller for LivingMeteor___Meteor.onFinish
function sc__LivingMeteor___Meteor_onFinish takes integer this returns boolean
    set f__arg_this=this
    call TriggerEvaluate(st__Missiles___MissileEvents_onFinish[124])
 return f__result_boolean
endfunction

//Generated allocator of LivingMeteor___Meteor
function s__LivingMeteor___Meteor__allocate takes real x ,real y ,real z ,real toX ,real toY ,real toZ returns integer
 local integer this=sc__Missiles_create(x,y,z,toX,toY,toZ)
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Missiles___MissileEvents_type[this]=124
    set kthis=this

   set s__LivingMeteor___Meteor_i[this]= 0
   set s__LivingMeteor___Meteor_j[this]= 0
 return this
endfunction


//Generated method caller for LivingMeteor___LivingMeteor.onTooltip
function sc__LivingMeteor___LivingMeteor_onTooltip takes integer this,unit source,integer level returns string
    set f__arg_this=this
    set f__arg_unit1=source
    set f__arg_integer1=level
    call TriggerEvaluate(st__Ability___IAbility_onTooltip[125])
 return f__result_string
endfunction

//Generated method caller for LivingMeteor___LivingMeteor.onCast
function sc__LivingMeteor___LivingMeteor_onCast takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Ability___IAbility_onCast[125])
endfunction

//Generated method caller for LivingMeteor___LivingMeteor.StartTimer
function sc__LivingMeteor___LivingMeteor_StartTimer takes real timeout,boolean periodic,integer this,integer uniqueId returns nothing
    set f__arg_real1=timeout
    set f__arg_boolean1=periodic
    set f__arg_integer1=this
    set f__arg_integer2=uniqueId
    call TriggerEvaluate(st__LivingMeteor___LivingMeteor_StartTimer)
endfunction

//Generated allocator of LivingMeteor___LivingMeteor
function s__LivingMeteor___LivingMeteor__allocate takes nothing returns integer
 local integer this=s__Ability__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Ability___IAbility_type[this]=125
    set kthis=this

 return this
endfunction


//Generated method caller for Shop___Slot.update
function sc__Shop___Slot_update takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Shop___Slot_update)
endfunction

//Generated method caller for Shop___Slot.onScroll
function sc__Shop___Slot_onScroll takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Components___IComponent_onScroll[129])
endfunction

//Generated method caller for Shop___Slot.onClick
function sc__Shop___Slot_onClick takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Components___IComponent_onClick[129])
endfunction

//Generated method caller for Shop___Slot.onMiddleClick
function sc__Shop___Slot_onMiddleClick takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Components___IComponent_onMiddleClick[129])
endfunction

//Generated method caller for Shop___Slot.onDoubleClick
function sc__Shop___Slot_onDoubleClick takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Components___IComponent_onDoubleClick[129])
endfunction

//Generated method caller for Shop___Slot.onRightClick
function sc__Shop___Slot_onRightClick takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Components___IComponent_onRightClick[129])
endfunction

//Generated allocator of Shop___Slot
function s__Shop___Slot__allocate takes real x ,real y ,real width ,real height ,framehandle parent ,boolean simpleTooltip returns integer
 local integer this=sc__Button_create(x,y,width,height,parent,simpleTooltip)
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Components___IComponent_type[this]=129
    set kthis=this

 return this
endfunction


//Generated method caller for Shop___Detail.show
function sc__Shop___Detail_show takes integer this,integer i,player p returns nothing
    set f__arg_this=this
    set f__arg_integer1=i
    set f__arg_player1=p
    call TriggerEvaluate(st__Shop___Detail_show)
endfunction

//Generated method caller for Shop___Detail.onScroll
function sc__Shop___Detail_onScroll takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Components___IComponent_onScroll[130])
endfunction

//Generated method caller for Shop___Detail.onClicked
function sc__Shop___Detail_onClicked takes nothing returns nothing
    call TriggerEvaluate(st__Shop___Detail_onClicked)
endfunction

//Generated method caller for Shop___Detail.onScrolled
function sc__Shop___Detail_onScrolled takes nothing returns nothing
    call TriggerEvaluate(st__Shop___Detail_onScrolled)
endfunction

//Generated method caller for Shop___Detail.onMiddleClicked
function sc__Shop___Detail_onMiddleClicked takes nothing returns nothing
    call TriggerEvaluate(st__Shop___Detail_onMiddleClicked)
endfunction

//Generated method caller for Shop___Detail.onRightClicked
function sc__Shop___Detail_onRightClicked takes nothing returns nothing
    call TriggerEvaluate(st__Shop___Detail_onRightClicked)
endfunction

//Generated allocator of Shop___Detail
function s__Shop___Detail__allocate takes real x ,real y ,real width ,real height ,framehandle parent ,string template returns integer
 local integer this=sc__Panel_create(x,y,width,height,parent,template)
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Components___IComponent_type[this]=130
    if (si__Shop___Detail_arrN==0) then
        set si__Shop___Detail_arrI=si__Shop___Detail_arrI+1
        set kthis=si__Shop___Detail_arrI
        if (kthis>2046) then
            set si__Components___IComponent_type[this]=66
            call sc__Components___IComponent_deallocate(this)
            return 0
        endif
    else
        set kthis=si__Shop___Detail_arrV[si__Shop___Detail_arrN]
        set si__Shop___Detail_arrN=si__Shop___Detail_arrN-1
    endif
    set si__Shop___Detail_arr[this]=kthis
    set s__Shop___Detail_description[this]=(kthis-1)*4
 return this
endfunction


//Generated method caller for Shop___Buyer._set_visible
function sc__Shop___Buyer__set_visible takes integer this,boolean visibility returns nothing
    set f__arg_this=this
    set f__arg_boolean1=visibility
    call TriggerEvaluate(st__Component__set_visible[132])
endfunction

//Generated method caller for Shop___Buyer._get_visible
function sc__Shop___Buyer__get_visible takes integer this returns boolean
            return s__Shop___Buyer_isVisible[this]
endfunction

//Generated method caller for Shop___Buyer._getindex
function sc__Shop___Buyer__getindex takes integer this,integer id returns unit
    set f__arg_this=this
    set f__arg_integer1=id
    call TriggerEvaluate(st__Shop___Buyer__getindex)
 return f__result_unit
endfunction

//Generated method caller for Shop___Buyer.onScroll
function sc__Shop___Buyer_onScroll takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Components___IComponent_onScroll[132])
endfunction

//Generated method caller for Shop___Buyer.onScrolled
function sc__Shop___Buyer_onScrolled takes nothing returns nothing
    call TriggerEvaluate(st__Shop___Buyer_onScrolled)
endfunction

//Generated method caller for Shop___Buyer.onClicked
function sc__Shop___Buyer_onClicked takes nothing returns nothing
    call TriggerEvaluate(st__Shop___Buyer_onClicked)
endfunction

//Generated allocator of Shop___Buyer
function s__Shop___Buyer__allocate takes real x ,real y ,real width ,real height ,framehandle parent ,string template returns integer
 local integer this=sc__Panel_create(x,y,width,height,parent,template)
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Components___IComponent_type[this]=132
    set kthis=this

 return this
endfunction


//Generated method caller for Shop___Favorites.has
function sc__Shop___Favorites_has takes integer this,integer id,player p returns boolean
    set f__arg_this=this
    set f__arg_integer1=id
    set f__arg_player1=p
    call TriggerEvaluate(st__Shop___Favorites_has)
 return f__result_boolean
endfunction

//Generated method caller for Shop___Favorites.remove
function sc__Shop___Favorites_remove takes integer this,integer i,player p returns nothing
    set f__arg_this=this
    set f__arg_integer1=i
    set f__arg_player1=p
    call TriggerEvaluate(st__Shop___Favorites_remove)
endfunction

//Generated method caller for Shop___Favorites.add
function sc__Shop___Favorites_add takes integer this,integer i,player p returns nothing
    set f__arg_this=this
    set f__arg_integer1=i
    set f__arg_player1=p
    call TriggerEvaluate(st__Shop___Favorites_add)
endfunction

//Generated method caller for Shop___Favorites.onClear
function sc__Shop___Favorites_onClear takes nothing returns nothing
    call TriggerEvaluate(st__Shop___Favorites_onClear)
endfunction

//Generated method caller for Shop___Favorites.onClicked
function sc__Shop___Favorites_onClicked takes nothing returns nothing
    call TriggerEvaluate(st__Shop___Favorites_onClicked)
endfunction

//Generated method caller for Shop___Favorites.onMiddleClicked
function sc__Shop___Favorites_onMiddleClicked takes nothing returns nothing
    call TriggerEvaluate(st__Shop___Favorites_onMiddleClicked)
endfunction

//Generated method caller for Shop___Favorites.onDoubleClicked
function sc__Shop___Favorites_onDoubleClicked takes nothing returns nothing
    call TriggerEvaluate(st__Shop___Favorites_onDoubleClicked)
endfunction

//Generated method caller for Shop___Favorites.onRightClicked
function sc__Shop___Favorites_onRightClicked takes nothing returns nothing
    call TriggerEvaluate(st__Shop___Favorites_onRightClicked)
endfunction

//Generated allocator of Shop___Favorites
function s__Shop___Favorites__allocate takes real x ,real y ,real width ,real height ,framehandle parent ,string template returns integer
 local integer this=sc__Panel_create(x,y,width,height,parent,template)
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Components___IComponent_type[this]=133
    set kthis=this

 return this
endfunction


//Generated method caller for Shop___Category.onClicked
function sc__Shop___Category_onClicked takes nothing returns nothing
    call TriggerEvaluate(st__Shop___Category_onClicked)
endfunction

//Generated method caller for Shop___Category.onClear
function sc__Shop___Category_onClear takes nothing returns nothing
    call TriggerEvaluate(st__Shop___Category_onClear)
endfunction

//Generated method caller for Shop___Category.onLogic
function sc__Shop___Category_onLogic takes nothing returns nothing
    call TriggerEvaluate(st__Shop___Category_onLogic)
endfunction

//Generated allocator of Shop___Category
function s__Shop___Category__allocate takes real x ,real y ,real width ,real height ,framehandle parent ,string template returns integer
 local integer this=sc__Panel_create(x,y,width,height,parent,template)
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Components___IComponent_type[this]=134
    if (si__Shop___Category_arrN==0) then
        set si__Shop___Category_arrI=si__Shop___Category_arrI+1
        set kthis=si__Shop___Category_arrI
        if (kthis>629) then
            set si__Components___IComponent_type[this]=66
            call sc__Components___IComponent_deallocate(this)
            return 0
        endif
    else
        set kthis=si__Shop___Category_arrV[si__Shop___Category_arrN]
        set si__Shop___Category_arrN=si__Shop___Category_arrN-1
    endif
    set si__Shop___Category_arr[this]=kthis
    set s__Shop___Category_value[this]=(kthis-1)*13
    set s__Shop___Category_button[this]=(kthis-1)*13
 return this
endfunction


//Generated method caller for Shop._set_visible
function sc__Shop__set_visible takes integer this,boolean visibility returns nothing
    set f__arg_this=this
    set f__arg_boolean1=visibility
    call TriggerEvaluate(st__Component__set_visible[137])
endfunction

//Generated method caller for Shop._get_visible
function sc__Shop__get_visible takes integer this returns boolean
            return s__Shop_isVisible[this]
endfunction

//Generated method caller for Shop.buy
function sc__Shop_buy takes integer this,integer i,player p returns boolean
    set f__arg_this=this
    set f__arg_integer1=i
    set f__arg_player1=p
    call TriggerEvaluate(st__Shop_buy)
 return f__result_boolean
endfunction

//Generated method caller for Shop.sell
function sc__Shop_sell takes integer this,integer i,player p,integer slot returns boolean
    set f__arg_this=this
    set f__arg_integer1=i
    set f__arg_player1=p
    set f__arg_integer2=slot
    call TriggerEvaluate(st__Shop_sell)
 return f__result_boolean
endfunction

//Generated method caller for Shop.filter
function sc__Shop_filter takes integer this,integer categories,boolean andLogic returns nothing
    set f__arg_this=this
    set f__arg_integer1=categories
    set f__arg_boolean1=andLogic
    call TriggerEvaluate(st__Shop_filter)
endfunction

//Generated method caller for Shop.detail
function sc__Shop_detail takes integer this,integer i,player p returns nothing
    set f__arg_this=this
    set f__arg_integer1=i
    set f__arg_player1=p
    call TriggerEvaluate(st__Shop_detail)
endfunction

//Generated method caller for Shop.has
function sc__Shop_has takes integer this,integer id returns boolean
    set f__arg_this=this
    set f__arg_integer1=id
    call TriggerEvaluate(st__Shop_has)
 return f__result_boolean
endfunction

//Generated method caller for Shop.find
function sc__Shop_find takes integer this,string source,string target returns boolean
    set f__arg_this=this
    set f__arg_string1=source
    set f__arg_string2=target
    call TriggerEvaluate(st__Shop_find)
 return f__result_boolean
endfunction

//Generated method caller for Shop.addCategory
function sc__Shop_addCategory takes integer id,string icon,string description returns integer
    set f__arg_integer1=id
    set f__arg_string1=icon
    set f__arg_string2=description
    call TriggerEvaluate(st__Shop_addCategory)
 return f__result_integer
endfunction

//Generated method caller for Shop.addItem
function sc__Shop_addItem takes integer id,integer itemId,integer categories returns nothing
    set f__arg_integer1=id
    set f__arg_integer2=itemId
    set f__arg_integer3=categories
    call TriggerEvaluate(st__Shop_addItem)
endfunction

//Generated method caller for Shop.create
function sc__Shop_create takes integer id,real aoe,real tax returns integer
    set f__arg_integer1=id
    set f__arg_real1=aoe
    set f__arg_real2=tax
    call TriggerEvaluate(st__Shop_create)
 return f__result_integer
endfunction

//Generated method caller for Shop.onScroll
function sc__Shop_onScroll takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Components___IComponent_onScroll[137])
endfunction

//Generated method caller for Shop.onSearch
function sc__Shop_onSearch takes nothing returns nothing
    call TriggerEvaluate(st__Shop_onSearch)
endfunction

//Generated method caller for Shop.onClose
function sc__Shop_onClose takes nothing returns nothing
    call TriggerEvaluate(st__Shop_onClose)
endfunction

//Generated method caller for Shop.onDismantle
function sc__Shop_onDismantle takes nothing returns nothing
    call TriggerEvaluate(st__Shop_onDismantle)
endfunction

//Generated method caller for Shop.onUndo
function sc__Shop_onUndo takes nothing returns nothing
    call TriggerEvaluate(st__Shop_onUndo)
endfunction

//Generated allocator of Shop
function s__Shop__allocate takes real x ,real y ,real width ,real height ,framehandle parent ,string template returns integer
 local integer this=sc__Panel_create(x,y,width,height,parent,template)
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Components___IComponent_type[this]=137
    set kthis=this

 return this
endfunction


//Generated method caller for SulfurasSmash___Hammer.onFinish
function sc__SulfurasSmash___Hammer_onFinish takes integer this returns boolean
    set f__arg_this=this
    call TriggerEvaluate(st__Missiles___MissileEvents_onFinish[138])
 return f__result_boolean
endfunction

//Generated allocator of SulfurasSmash___Hammer
function s__SulfurasSmash___Hammer__allocate takes real x ,real y ,real z ,real toX ,real toY ,real toZ returns integer
 local integer this=sc__Missiles_create(x,y,z,toX,toY,toZ)
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Missiles___MissileEvents_type[this]=138
    set kthis=this

 return this
endfunction


//Generated method caller for SulfurasSmash___SulfurasSmash.onTooltip
function sc__SulfurasSmash___SulfurasSmash_onTooltip takes integer this,unit source,integer level returns string
    set f__arg_this=this
    set f__arg_unit1=source
    set f__arg_integer1=level
    call TriggerEvaluate(st__Ability___IAbility_onTooltip[139])
 return f__result_string
endfunction

//Generated method caller for SulfurasSmash___SulfurasSmash.onCast
function sc__SulfurasSmash___SulfurasSmash_onCast takes integer this returns nothing
    set f__arg_this=this
    call TriggerEvaluate(st__Ability___IAbility_onCast[139])
endfunction

//Generated allocator of SulfurasSmash___SulfurasSmash
function s__SulfurasSmash___SulfurasSmash__allocate takes nothing returns integer
 local integer this=s__Ability__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__Ability___IAbility_type[this]=139
    set kthis=this

 return this
endfunction


//Generated method caller for MissChance___Miss.get
function sc__MissChance___Miss_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[140])
 return f__result_real
endfunction

//Generated method caller for MissChance___Miss.Set
function sc__MissChance___Miss_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_Set[140])
 return f__result_real
endfunction

//Generated method caller for MissChance___Miss.add
function sc__MissChance___Miss_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[140])
 return f__result_real
endfunction

//Generated allocator of MissChance___Miss
function s__MissChance___Miss__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=140
    set kthis=this

 return this
endfunction


//Generated method caller for Armor___Armor.get
function sc__Armor___Armor_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[141])
 return f__result_real
endfunction

//Generated method caller for Armor___Armor.Set
function sc__Armor___Armor_Set takes integer this,unit u,real value returns real
            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Armor___Armor_ability), s__Armor___Armor_field, 0, R2I(value)) then
                call IncUnitAbilityLevel(u, s__Armor___Armor_ability)
                call DecUnitAbilityLevel(u, s__Armor___Armor_ability)
            endif
        
            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Armor___Armor_ability), s__Armor___Armor_field, 0))
endfunction

//Generated method caller for Armor___Armor.add
function sc__Armor___Armor_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[141])
 return f__result_real
endfunction

//Generated allocator of Armor___Armor
function s__Armor___Armor__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=141
    set kthis=this

 return this
endfunction


//Generated method caller for Block___Block.get
function sc__Block___Block_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[142])
 return f__result_real
endfunction

//Generated method caller for Block___Block.Set
function sc__Block___Block_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_Set[142])
 return f__result_real
endfunction

//Generated method caller for Block___Block.add
function sc__Block___Block_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[142])
 return f__result_real
endfunction

//Generated allocator of Block___Block
function s__Block___Block__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=142
    set kthis=this

 return this
endfunction


//Generated method caller for Mana___Mana.get
function sc__Mana___Mana_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[143])
 return f__result_real
endfunction

//Generated method caller for Mana___Mana.Set
function sc__Mana___Mana_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_Set[143])
 return f__result_real
endfunction

//Generated method caller for Mana___Mana.add
function sc__Mana___Mana_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[143])
 return f__result_real
endfunction

//Generated allocator of Mana___Mana
function s__Mana___Mana__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=143
    set kthis=this

 return this
endfunction


//Generated method caller for Agility___Agility.get
function sc__Agility___Agility_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[144])
 return f__result_real
endfunction

//Generated method caller for Agility___Agility.Set
function sc__Agility___Agility_Set takes integer this,unit u,real value returns real
            if GetUnitAbilityLevel(u, s__Agility___Agility_ability) == 0 then
                call UnitAddAbility(u, s__Agility___Agility_ability)
                call UnitMakeAbilityPermanent(u, true, s__Agility___Agility_ability)
            endif
            
            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Agility___Agility_ability), s__Agility___Agility_field, 0, R2I(value)) then
                call IncUnitAbilityLevel(u, s__Agility___Agility_ability)
                call DecUnitAbilityLevel(u, s__Agility___Agility_ability)
            endif
        
            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Agility___Agility_ability), s__Agility___Agility_field, 0))
endfunction

//Generated method caller for Agility___Agility.add
function sc__Agility___Agility_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[144])
 return f__result_real
endfunction

//Generated allocator of Agility___Agility
function s__Agility___Agility__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=144
    set kthis=this

 return this
endfunction


//Generated method caller for Health___Health.get
function sc__Health___Health_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[145])
 return f__result_real
endfunction

//Generated method caller for Health___Health.Set
function sc__Health___Health_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_Set[145])
 return f__result_real
endfunction

//Generated method caller for Health___Health.add
function sc__Health___Health_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[145])
 return f__result_real
endfunction

//Generated allocator of Health___Health
function s__Health___Health__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=145
    set kthis=this

 return this
endfunction


//Generated method caller for EvasionChance___Evasion.get
function sc__EvasionChance___Evasion_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[146])
 return f__result_real
endfunction

//Generated method caller for EvasionChance___Evasion.Set
function sc__EvasionChance___Evasion_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_Set[146])
 return f__result_real
endfunction

//Generated method caller for EvasionChance___Evasion.add
function sc__EvasionChance___Evasion_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[146])
 return f__result_real
endfunction

//Generated allocator of EvasionChance___Evasion
function s__EvasionChance___Evasion__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=146
    set kthis=this

 return this
endfunction


//Generated method caller for DamageBonus___Damage.get
function sc__DamageBonus___Damage_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[147])
 return f__result_real
endfunction

//Generated method caller for DamageBonus___Damage.Set
function sc__DamageBonus___Damage_Set takes integer this,unit u,real value returns real
            if GetUnitAbilityLevel(u, s__DamageBonus___Damage_ability) == 0 then
                call UnitAddAbility(u, s__DamageBonus___Damage_ability)
                call UnitMakeAbilityPermanent(u, true, s__DamageBonus___Damage_ability)
            endif
            
            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__DamageBonus___Damage_ability), s__DamageBonus___Damage_field, 0, R2I(value)) then
                call IncUnitAbilityLevel(u, s__DamageBonus___Damage_ability)
                call DecUnitAbilityLevel(u, s__DamageBonus___Damage_ability)
            endif
        
            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__DamageBonus___Damage_ability), s__DamageBonus___Damage_field, 0))
endfunction

//Generated method caller for DamageBonus___Damage.add
function sc__DamageBonus___Damage_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[147])
 return f__result_real
endfunction

//Generated allocator of DamageBonus___Damage
function s__DamageBonus___Damage__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=147
    set kthis=this

 return this
endfunction


//Generated method caller for Strength___Strength.get
function sc__Strength___Strength_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[148])
 return f__result_real
endfunction

//Generated method caller for Strength___Strength.Set
function sc__Strength___Strength_Set takes integer this,unit u,real value returns real
            if GetUnitAbilityLevel(u, s__Strength___Strength_ability) == 0 then
                call UnitAddAbility(u, s__Strength___Strength_ability)
                call UnitMakeAbilityPermanent(u, true, s__Strength___Strength_ability)
            endif
            
            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Strength___Strength_ability), s__Strength___Strength_field, 0, R2I(value)) then
                call IncUnitAbilityLevel(u, s__Strength___Strength_ability)
                call DecUnitAbilityLevel(u, s__Strength___Strength_ability)
            endif
        
            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Strength___Strength_ability), s__Strength___Strength_field, 0))
endfunction

//Generated method caller for Strength___Strength.add
function sc__Strength___Strength_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[148])
 return f__result_real
endfunction

//Generated allocator of Strength___Strength
function s__Strength___Strength__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=148
    set kthis=this

 return this
endfunction


//Generated method caller for TenacityBonus___Tenacity.get
function sc__TenacityBonus___Tenacity_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[149])
 return f__result_real
endfunction

//Generated method caller for TenacityBonus___Tenacity.Set
function sc__TenacityBonus___Tenacity_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_Set[149])
 return f__result_real
endfunction

//Generated method caller for TenacityBonus___Tenacity.add
function sc__TenacityBonus___Tenacity_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[149])
 return f__result_real
endfunction

//Generated allocator of TenacityBonus___Tenacity
function s__TenacityBonus___Tenacity__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=149
    set kthis=this

 return this
endfunction


//Generated method caller for LifeSteal___LifeSteal.get
function sc__LifeSteal___LifeSteal_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[150])
 return f__result_real
endfunction

//Generated method caller for LifeSteal___LifeSteal.Set
function sc__LifeSteal___LifeSteal_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_Set[150])
 return f__result_real
endfunction

//Generated method caller for LifeSteal___LifeSteal.add
function sc__LifeSteal___LifeSteal_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[150])
 return f__result_real
endfunction

//Generated allocator of LifeSteal___LifeSteal
function s__LifeSteal___LifeSteal__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=150
    set kthis=this

 return this
endfunction


//Generated method caller for SpellVamp___SpellVamp.get
function sc__SpellVamp___SpellVamp_get takes integer this,unit u returns real
            return s__SpellVamp___SpellVamp_vamp[GetUnitUserData(u)]
endfunction

//Generated method caller for SpellVamp___SpellVamp.Set
function sc__SpellVamp___SpellVamp_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_Set[151])
 return f__result_real
endfunction

//Generated method caller for SpellVamp___SpellVamp.add
function sc__SpellVamp___SpellVamp_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[151])
 return f__result_real
endfunction

//Generated allocator of SpellVamp___SpellVamp
function s__SpellVamp___SpellVamp__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=151
    set kthis=this

 return this
endfunction


//Generated method caller for SpellPower___SpellPower.get
function sc__SpellPower___SpellPower_get takes integer this,unit u returns real
            return s__SpellPower___SpellPower_power[GetUnitUserData(u)]
endfunction

//Generated method caller for SpellPower___SpellPower.Set
function sc__SpellPower___SpellPower_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_Set[152])
 return f__result_real
endfunction

//Generated method caller for SpellPower___SpellPower.add
function sc__SpellPower___SpellPower_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[152])
 return f__result_real
endfunction

//Generated allocator of SpellPower___SpellPower
function s__SpellPower___SpellPower__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=152
    set kthis=this

 return this
endfunction


//Generated method caller for Intelligence___Intelligence.get
function sc__Intelligence___Intelligence_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[153])
 return f__result_real
endfunction

//Generated method caller for Intelligence___Intelligence.Set
function sc__Intelligence___Intelligence_Set takes integer this,unit u,real value returns real
            if GetUnitAbilityLevel(u, s__Intelligence___Intelligence_ability) == 0 then
                call UnitAddAbility(u, s__Intelligence___Intelligence_ability)
                call UnitMakeAbilityPermanent(u, true, s__Intelligence___Intelligence_ability)
            endif
            
            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Intelligence___Intelligence_ability), s__Intelligence___Intelligence_field, 0, R2I(value)) then
                call IncUnitAbilityLevel(u, s__Intelligence___Intelligence_ability)
                call DecUnitAbilityLevel(u, s__Intelligence___Intelligence_ability)
            endif
        
            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Intelligence___Intelligence_ability), s__Intelligence___Intelligence_field, 0))
endfunction

//Generated method caller for Intelligence___Intelligence.add
function sc__Intelligence___Intelligence_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[153])
 return f__result_real
endfunction

//Generated allocator of Intelligence___Intelligence
function s__Intelligence___Intelligence__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=153
    set kthis=this

 return this
endfunction


//Generated method caller for SightRange___SightRange.get
function sc__SightRange___SightRange_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[154])
 return f__result_real
endfunction

//Generated method caller for SightRange___SightRange.Set
function sc__SightRange___SightRange_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_Set[154])
 return f__result_real
endfunction

//Generated method caller for SightRange___SightRange.add
function sc__SightRange___SightRange_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[154])
 return f__result_real
endfunction

//Generated allocator of SightRange___SightRange
function s__SightRange___SightRange__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=154
    set kthis=this

 return this
endfunction


//Generated method caller for TenacityFlat___TenacityFlat.get
function sc__TenacityFlat___TenacityFlat_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[155])
 return f__result_real
endfunction

//Generated method caller for TenacityFlat___TenacityFlat.Set
function sc__TenacityFlat___TenacityFlat_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_Set[155])
 return f__result_real
endfunction

//Generated method caller for TenacityFlat___TenacityFlat.add
function sc__TenacityFlat___TenacityFlat_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[155])
 return f__result_real
endfunction

//Generated allocator of TenacityFlat___TenacityFlat
function s__TenacityFlat___TenacityFlat__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=155
    set kthis=this

 return this
endfunction


//Generated method caller for AttackSpeed___AttackSpeed.get
function sc__AttackSpeed___AttackSpeed_get takes integer this,unit u returns real
            return BlzGetAbilityRealLevelField(BlzGetUnitAbility(u, s__AttackSpeed___AttackSpeed_ability), s__AttackSpeed___AttackSpeed_field, 0)
endfunction

//Generated method caller for AttackSpeed___AttackSpeed.Set
function sc__AttackSpeed___AttackSpeed_Set takes integer this,unit u,real value returns real
            if GetUnitAbilityLevel(u, s__AttackSpeed___AttackSpeed_ability) == 0 then
                call UnitAddAbility(u, s__AttackSpeed___AttackSpeed_ability)
                call UnitMakeAbilityPermanent(u, true, s__AttackSpeed___AttackSpeed_ability)
            endif
            
            if BlzSetAbilityRealLevelField(BlzGetUnitAbility(u, s__AttackSpeed___AttackSpeed_ability), s__AttackSpeed___AttackSpeed_field, 0, R2I(value)) then
                call IncUnitAbilityLevel(u, s__AttackSpeed___AttackSpeed_ability)
                call DecUnitAbilityLevel(u, s__AttackSpeed___AttackSpeed_ability)
            endif
        
            return BlzGetAbilityRealLevelField(BlzGetUnitAbility(u, s__AttackSpeed___AttackSpeed_ability), s__AttackSpeed___AttackSpeed_field, 0)
endfunction

//Generated method caller for AttackSpeed___AttackSpeed.add
function sc__AttackSpeed___AttackSpeed_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[156])
 return f__result_real
endfunction

//Generated allocator of AttackSpeed___AttackSpeed
function s__AttackSpeed___AttackSpeed__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=156
    set kthis=this

 return this
endfunction


//Generated method caller for CriticalChance___CriticalChance.get
function sc__CriticalChance___CriticalChance_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[157])
 return f__result_real
endfunction

//Generated method caller for CriticalChance___CriticalChance.Set
function sc__CriticalChance___CriticalChance_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_Set[157])
 return f__result_real
endfunction

//Generated method caller for CriticalChance___CriticalChance.add
function sc__CriticalChance___CriticalChance_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[157])
 return f__result_real
endfunction

//Generated allocator of CriticalChance___CriticalChance
function s__CriticalChance___CriticalChance__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=157
    set kthis=this

 return this
endfunction


//Generated method caller for CriticalDamage___CriticalDamage.get
function sc__CriticalDamage___CriticalDamage_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[158])
 return f__result_real
endfunction

//Generated method caller for CriticalDamage___CriticalDamage.Set
function sc__CriticalDamage___CriticalDamage_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_Set[158])
 return f__result_real
endfunction

//Generated method caller for CriticalDamage___CriticalDamage.add
function sc__CriticalDamage___CriticalDamage_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[158])
 return f__result_real
endfunction

//Generated allocator of CriticalDamage___CriticalDamage
function s__CriticalDamage___CriticalDamage__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=158
    set kthis=this

 return this
endfunction


//Generated method caller for TenacityOffset___TenacityOffset.get
function sc__TenacityOffset___TenacityOffset_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[159])
 return f__result_real
endfunction

//Generated method caller for TenacityOffset___TenacityOffset.Set
function sc__TenacityOffset___TenacityOffset_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_Set[159])
 return f__result_real
endfunction

//Generated method caller for TenacityOffset___TenacityOffset.add
function sc__TenacityOffset___TenacityOffset_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[159])
 return f__result_real
endfunction

//Generated allocator of TenacityOffset___TenacityOffset
function s__TenacityOffset___TenacityOffset__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=159
    set kthis=this

 return this
endfunction


//Generated method caller for CooldownOffset___CooldownOffset.get
function sc__CooldownOffset___CooldownOffset_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[160])
 return f__result_real
endfunction

//Generated method caller for CooldownOffset___CooldownOffset.Set
function sc__CooldownOffset___CooldownOffset_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_Set[160])
 return f__result_real
endfunction

//Generated method caller for CooldownOffset___CooldownOffset.add
function sc__CooldownOffset___CooldownOffset_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[160])
 return f__result_real
endfunction

//Generated allocator of CooldownOffset___CooldownOffset
function s__CooldownOffset___CooldownOffset__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=160
    set kthis=this

 return this
endfunction


//Generated method caller for ArmorPenetration___ArmorPenetration.get
function sc__ArmorPenetration___ArmorPenetration_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[161])
 return f__result_real
endfunction

//Generated method caller for ArmorPenetration___ArmorPenetration.Set
function sc__ArmorPenetration___ArmorPenetration_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_Set[161])
 return f__result_real
endfunction

//Generated method caller for ArmorPenetration___ArmorPenetration.add
function sc__ArmorPenetration___ArmorPenetration_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[161])
 return f__result_real
endfunction

//Generated allocator of ArmorPenetration___ArmorPenetration
function s__ArmorPenetration___ArmorPenetration__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=161
    set kthis=this

 return this
endfunction


//Generated method caller for MovementSpeed___MovementSpeed.get
function sc__MovementSpeed___MovementSpeed_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[162])
 return f__result_real
endfunction

//Generated method caller for MovementSpeed___MovementSpeed.Set
function sc__MovementSpeed___MovementSpeed_Set takes integer this,unit u,real value returns real
            if GetUnitAbilityLevel(u, s__MovementSpeed___MovementSpeed_ability) == 0 then
                call UnitAddAbility(u, s__MovementSpeed___MovementSpeed_ability)
                call UnitMakeAbilityPermanent(u, true, s__MovementSpeed___MovementSpeed_ability)
            endif
            
            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__MovementSpeed___MovementSpeed_ability), s__MovementSpeed___MovementSpeed_field, 0, R2I(value)) then
                call IncUnitAbilityLevel(u, s__MovementSpeed___MovementSpeed_ability)
                call DecUnitAbilityLevel(u, s__MovementSpeed___MovementSpeed_ability)
            endif
        
            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__MovementSpeed___MovementSpeed_ability), s__MovementSpeed___MovementSpeed_field, 0))
endfunction

//Generated method caller for MovementSpeed___MovementSpeed.add
function sc__MovementSpeed___MovementSpeed_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[162])
 return f__result_real
endfunction

//Generated allocator of MovementSpeed___MovementSpeed
function s__MovementSpeed___MovementSpeed__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=162
    set kthis=this

 return this
endfunction


//Generated method caller for MagicResistence___MagicResistence.get
function sc__MagicResistence___MagicResistence_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[163])
 return f__result_real
endfunction

//Generated method caller for MagicResistence___MagicResistence.Set
function sc__MagicResistence___MagicResistence_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_Set[163])
 return f__result_real
endfunction

//Generated method caller for MagicResistence___MagicResistence.add
function sc__MagicResistence___MagicResistence_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[163])
 return f__result_real
endfunction

//Generated allocator of MagicResistence___MagicResistence
function s__MagicResistence___MagicResistence__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=163
    set kthis=this

 return this
endfunction


//Generated method caller for MagicPenetration___MagicPenetration.get
function sc__MagicPenetration___MagicPenetration_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[164])
 return f__result_real
endfunction

//Generated method caller for MagicPenetration___MagicPenetration.Set
function sc__MagicPenetration___MagicPenetration_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_Set[164])
 return f__result_real
endfunction

//Generated method caller for MagicPenetration___MagicPenetration.add
function sc__MagicPenetration___MagicPenetration_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[164])
 return f__result_real
endfunction

//Generated allocator of MagicPenetration___MagicPenetration
function s__MagicPenetration___MagicPenetration__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=164
    set kthis=this

 return this
endfunction


//Generated method caller for ManaRegeneration___ManaRegeneration.get
function sc__ManaRegeneration___ManaRegeneration_get takes integer this,unit u returns real
            return BlzGetAbilityRealLevelField(BlzGetUnitAbility(u, s__ManaRegeneration___ManaRegeneration_ability), s__ManaRegeneration___ManaRegeneration_field, 0)
endfunction

//Generated method caller for ManaRegeneration___ManaRegeneration.Set
function sc__ManaRegeneration___ManaRegeneration_Set takes integer this,unit u,real value returns real
            if GetUnitAbilityLevel(u, s__ManaRegeneration___ManaRegeneration_ability) == 0 then
                call UnitAddAbility(u, s__ManaRegeneration___ManaRegeneration_ability)
                call UnitMakeAbilityPermanent(u, true, s__ManaRegeneration___ManaRegeneration_ability)
            endif
            
            if BlzSetAbilityRealLevelField(BlzGetUnitAbility(u, s__ManaRegeneration___ManaRegeneration_ability), s__ManaRegeneration___ManaRegeneration_field, 0, R2I(value)) then
                call IncUnitAbilityLevel(u, s__ManaRegeneration___ManaRegeneration_ability)
                call DecUnitAbilityLevel(u, s__ManaRegeneration___ManaRegeneration_ability)
            endif
        
            return BlzGetAbilityRealLevelField(BlzGetUnitAbility(u, s__ManaRegeneration___ManaRegeneration_ability), s__ManaRegeneration___ManaRegeneration_field, 0)
endfunction

//Generated method caller for ManaRegeneration___ManaRegeneration.add
function sc__ManaRegeneration___ManaRegeneration_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[165])
 return f__result_real
endfunction

//Generated allocator of ManaRegeneration___ManaRegeneration
function s__ManaRegeneration___ManaRegeneration__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=165
    set kthis=this

 return this
endfunction


//Generated method caller for HealthRegeneration___HealthRegeneration.get
function sc__HealthRegeneration___HealthRegeneration_get takes integer this,unit u returns real
            return BlzGetAbilityRealLevelField(BlzGetUnitAbility(u, s__HealthRegeneration___HealthRegeneration_ability), s__HealthRegeneration___HealthRegeneration_field, 0)
endfunction

//Generated method caller for HealthRegeneration___HealthRegeneration.Set
function sc__HealthRegeneration___HealthRegeneration_Set takes integer this,unit u,real value returns real
            if GetUnitAbilityLevel(u, s__HealthRegeneration___HealthRegeneration_ability) == 0 then
                call UnitAddAbility(u, s__HealthRegeneration___HealthRegeneration_ability)
                call UnitMakeAbilityPermanent(u, true, s__HealthRegeneration___HealthRegeneration_ability)
            endif
            
            if BlzSetAbilityRealLevelField(BlzGetUnitAbility(u, s__HealthRegeneration___HealthRegeneration_ability), s__HealthRegeneration___HealthRegeneration_field, 0, R2I(value)) then
                call IncUnitAbilityLevel(u, s__HealthRegeneration___HealthRegeneration_ability)
                call DecUnitAbilityLevel(u, s__HealthRegeneration___HealthRegeneration_ability)
            endif
        
            return BlzGetAbilityRealLevelField(BlzGetUnitAbility(u, s__HealthRegeneration___HealthRegeneration_ability), s__HealthRegeneration___HealthRegeneration_field, 0)
endfunction

//Generated method caller for HealthRegeneration___HealthRegeneration.add
function sc__HealthRegeneration___HealthRegeneration_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[166])
 return f__result_real
endfunction

//Generated allocator of HealthRegeneration___HealthRegeneration
function s__HealthRegeneration___HealthRegeneration__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=166
    set kthis=this

 return this
endfunction


//Generated method caller for CooldownReductionBonus___CooldownReduction.get
function sc__CooldownReductionBonus___CooldownReduction_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[167])
 return f__result_real
endfunction

//Generated method caller for CooldownReductionBonus___CooldownReduction.Set
function sc__CooldownReductionBonus___CooldownReduction_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_Set[167])
 return f__result_real
endfunction

//Generated method caller for CooldownReductionBonus___CooldownReduction.add
function sc__CooldownReductionBonus___CooldownReduction_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[167])
 return f__result_real
endfunction

//Generated allocator of CooldownReductionBonus___CooldownReduction
function s__CooldownReductionBonus___CooldownReduction__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=167
    set kthis=this

 return this
endfunction


//Generated method caller for ArmorPenetrationFlat___ArmorPenetrationFlat.get
function sc__ArmorPenetrationFlat___ArmorPenetrationFlat_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[168])
 return f__result_real
endfunction

//Generated method caller for ArmorPenetrationFlat___ArmorPenetrationFlat.Set
function sc__ArmorPenetrationFlat___ArmorPenetrationFlat_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_Set[168])
 return f__result_real
endfunction

//Generated method caller for ArmorPenetrationFlat___ArmorPenetrationFlat.add
function sc__ArmorPenetrationFlat___ArmorPenetrationFlat_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[168])
 return f__result_real
endfunction

//Generated allocator of ArmorPenetrationFlat___ArmorPenetrationFlat
function s__ArmorPenetrationFlat___ArmorPenetrationFlat__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=168
    set kthis=this

 return this
endfunction


//Generated method caller for MagicPenetrationFlat___MagicPenetrationFlat.get
function sc__MagicPenetrationFlat___MagicPenetrationFlat_get takes integer this,unit u returns real
    set f__arg_this=this
    set f__arg_unit1=u
    call TriggerEvaluate(st__NewBonus___IBonus_get[169])
 return f__result_real
endfunction

//Generated method caller for MagicPenetrationFlat___MagicPenetrationFlat.Set
function sc__MagicPenetrationFlat___MagicPenetrationFlat_Set takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_Set[169])
 return f__result_real
endfunction

//Generated method caller for MagicPenetrationFlat___MagicPenetrationFlat.add
function sc__MagicPenetrationFlat___MagicPenetrationFlat_add takes integer this,unit u,real value returns real
    set f__arg_this=this
    set f__arg_unit1=u
    set f__arg_real1=value
    call TriggerEvaluate(st__NewBonus___IBonus_add[169])
 return f__result_real
endfunction

//Generated allocator of MagicPenetrationFlat___MagicPenetrationFlat
function s__MagicPenetrationFlat___MagicPenetrationFlat__allocate takes nothing returns integer
 local integer this=s__Bonus__allocate()
 local integer kthis
    if(this==0) then
        return 0
    endif
    set si__NewBonus___IBonus_type[this]=169
    set kthis=this

 return this
endfunction

function sc___prototype3_execute takes integer i returns nothing

    call TriggerExecute(st___prototype3[i])
endfunction
function sc___prototype3_evaluate takes integer i returns nothing

    call TriggerEvaluate(st___prototype3[i])

endfunction

//library Alloc:

//library Alloc ends
//library DestructableHider:

    
    

function DestructableHider___filt takes nothing returns boolean
    //Add code for the enum filter of the automatic registration of destructables on map init
    
    //example:
    //return GetDestructableMaxLife(GetFilterDestructable()) == 1
    //-> automaticly adds all destructables on the map with a maximum life of 1 on map init to the system
    return true
endfunction

function DestructableHider_register takes destructable d returns nothing
    local integer id= R2I(( GetDestructableY(d) - DestructableHider___mapMinY ) / DestructableHider___TILESIZE) * DestructableHider___columns + R2I(( GetDestructableX(d) - DestructableHider___mapMinX ) / DestructableHider___TILESIZE)
    local integer count= LoadInteger(DestructableHider___hash, id, 0) + 1
    call SaveInteger(DestructableHider___hash, id, 0, count)
    call SaveDestructableHandle(DestructableHider___hash, id, count, d)
    call ShowDestructable(d, LoadBoolean(DestructableHider___hash, id, - 1)) //match visibility state
    call SaveInteger(DestructableHider___hash, GetHandleId(d), 0, count) //store the list position for fast lookup
endfunction

function DestructableHider_unregister takes destructable d returns nothing
    local integer id= R2I(( GetDestructableY(d) - DestructableHider___mapMinY ) / DestructableHider___TILESIZE) * DestructableHider___columns + R2I(( GetDestructableX(d) - DestructableHider___mapMinX ) / DestructableHider___TILESIZE)
    local integer count= LoadInteger(DestructableHider___hash, id, 0)
    local integer a= LoadInteger(DestructableHider___hash, GetHandleId(d), 0)
    local destructable temp
    if a < count then //move the last in list up to this slot
        set temp=LoadDestructableHandle(DestructableHider___hash, id, count)
        call SaveDestructableHandle(DestructableHider___hash, id, a, temp)
        call SaveInteger(DestructableHider___hash, GetHandleId(temp), 0, a) //update list position
        set temp=null
    endif
    call RemoveSavedHandle(DestructableHider___hash, id, count) //clean up the deserted slot
    call SaveInteger(DestructableHider___hash, id, 0, count - 1)
    call FlushChildHashtable(DestructableHider___hash, GetHandleId(d)) //clean up list position
    call ShowDestructable(d, true) //make sure its shown again in case it was hidden
endfunction

function DestructableHider___autoregister takes nothing returns nothing
    local destructable d= GetEnumDestructable()
    local integer id= R2I(( GetDestructableY(d) - DestructableHider___mapMinY ) / DestructableHider___TILESIZE) * DestructableHider___columns + R2I(( GetDestructableX(d) - DestructableHider___mapMinX ) / DestructableHider___TILESIZE)
    local integer count= LoadInteger(DestructableHider___hash, id, 0) + 1
    call SaveInteger(DestructableHider___hash, id, 0, count)
    call SaveDestructableHandle(DestructableHider___hash, id, count, d)
    call ShowDestructable(d, false) //initially hide everything
    call SaveInteger(DestructableHider___hash, GetHandleId(d), 0, count) //store the list position for fast lookup
    set d=null
endfunction

function DestructableHider___EnumGrid takes integer x1,integer x2,integer y1,integer y2,boolean show returns nothing
    local integer a= x1
    local integer b
    local integer j
    local integer id
    local integer count
    loop
        set b=y1
        exitwhen a > x2
        loop
            exitwhen b > y2
            set id=b * DestructableHider___columns + a
            call SaveBoolean(DestructableHider___hash, id, - 1, show)
            set count=LoadInteger(DestructableHider___hash, id, 0)
            set j=0
            loop
                exitwhen j >= count
                set j=j + 1
                call ShowDestructable(LoadDestructableHandle(DestructableHider___hash, id, j), show)
            endloop
            set b=b + 1
        endloop
        set a=a + 1
    endloop
endfunction

function DestructableHider___ChangeTiles takes integer r,integer c,integer lr,integer lc returns nothing
    local integer AminX= c - DestructableHider___TILE_RESOLUTION
    local integer AmaxX= c + DestructableHider___TILE_RESOLUTION
    local integer AminY= r - DestructableHider___TILE_RESOLUTION
    local integer AmaxY= r + DestructableHider___TILE_RESOLUTION
    local integer BminX= lc - DestructableHider___TILE_RESOLUTION
    local integer BmaxX= lc + DestructableHider___TILE_RESOLUTION
    local integer BminY= lr - DestructableHider___TILE_RESOLUTION
    local integer BmaxY= lr + DestructableHider___TILE_RESOLUTION
    //border safety:
    if AminX < 0 then
        set AminX=0
    endif
    if AminY < 0 then
        set AminY=0
    endif
    if BminX < 0 then
        set BminX=0
    endif
    if BminY < 0 then
        set BminY=0
    endif
    if AmaxX >= DestructableHider___columns then
        set AmaxX=DestructableHider___columns - 1
    endif
    if AmaxY >= DestructableHider___rows then
        set AmaxX=DestructableHider___rows - 1
    endif
    if BmaxX >= DestructableHider___columns then
        set BmaxX=DestructableHider___columns - 1
    endif
    if BmaxY >= DestructableHider___rows then
        set BmaxX=DestructableHider___rows - 1
    endif
    
    if BmaxX < AminX or AmaxX < BminX or BmaxY < AminY or AmaxY < BminY then
        call DestructableHider___EnumGrid(AminX , AmaxX , AminY , AmaxY , true)
        call DestructableHider___EnumGrid(BminX , BmaxX , BminY , BmaxY , false)
    else
        if c >= lc then
            if c != lc then
                call DestructableHider___EnumGrid(BmaxX + 1 , AmaxX , AminY , AmaxY , true)
                call DestructableHider___EnumGrid(BminX , AminX - 1 , BminY , BmaxY , false)
            endif
            if AminY < BminY then
                call DestructableHider___EnumGrid(AminX , BmaxX , AmaxY + 1 , BmaxY , false)
                call DestructableHider___EnumGrid(AminX , BmaxX , AminY , BminY - 1 , true)
            elseif BminY < AminY then
                call DestructableHider___EnumGrid(AminX , BmaxX , BmaxY + 1 , AmaxY , true)
                call DestructableHider___EnumGrid(AminX , BmaxX , BminY , AminY - 1 , false)
            endif
        else
            call DestructableHider___EnumGrid(AminX , BminX - 1 , AminY , AmaxY , true)
            call DestructableHider___EnumGrid(AmaxX + 1 , BmaxX , BminY , BmaxY , false)
            if AminY < BminY then
                call DestructableHider___EnumGrid(BminX , AmaxX , AminY , BminY - 1 , true)
                call DestructableHider___EnumGrid(BminX , AmaxX , AmaxY + 1 , BmaxY , false)
            elseif BminY < AminY then
                call DestructableHider___EnumGrid(BminX , AmaxX , BminY , AminY - 1 , false)
                call DestructableHider___EnumGrid(BminX , AmaxX , BmaxY + 1 , AmaxY , true)
            endif
        endif
    endif
endfunction

function DestructableHider___periodic takes nothing returns nothing
    local integer row= R2I(( GetCameraTargetPositionY() - DestructableHider___mapMinY ) / DestructableHider___TILESIZE)
    local integer column= R2I(( GetCameraTargetPositionX() - DestructableHider___mapMinX ) / DestructableHider___TILESIZE)
    local integer id= row * DestructableHider___columns + column
    if id == DestructableHider___lastid then //only check for tiles if the camera has left the last tile
        return
    endif
    call DestructableHider___ChangeTiles(row , column , DestructableHider___lastrow , DestructableHider___lastcolumn)
    set DestructableHider___lastrow=row
    set DestructableHider___lastcolumn=column
    set DestructableHider___lastid=id
endfunction

function DestructableHider___init takes nothing returns nothing
    set DestructableHider___mapMinX=GetRectMinX(bj_mapInitialPlayableArea)
    set DestructableHider___mapMinY=GetRectMinY(bj_mapInitialPlayableArea)
    set DestructableHider___lastrow=R2I(( GetCameraTargetPositionY() - DestructableHider___mapMinY ) / DestructableHider___TILESIZE)
    set DestructableHider___lastcolumn=R2I(( GetCameraTargetPositionX() - DestructableHider___mapMinX ) / DestructableHider___TILESIZE)
    set DestructableHider___rows=R2I(( GetRectMaxY(bj_mapInitialPlayableArea) - DestructableHider___mapMinY ) / DestructableHider___TILESIZE) + 1
    set DestructableHider___columns=R2I(( GetRectMaxX(bj_mapInitialPlayableArea) - DestructableHider___mapMinX ) / DestructableHider___TILESIZE) + 1
    if DestructableHider___lastcolumn <= DestructableHider___columns / 2 then //to make sure the game starts with a full make-visible enum of all destructables on screen
        set DestructableHider___lastcolumn=DestructableHider___columns - 1
    else
        set DestructableHider___lastcolumn=0
    endif
    if DestructableHider___lastrow <= DestructableHider___rows / 2 then
        set DestructableHider___lastrow=DestructableHider___rows - 1
    else
        set DestructableHider___lastrow=0
    endif
    set DestructableHider___lastid=DestructableHider___lastrow * DestructableHider___columns + DestructableHider___lastcolumn
    call EnumDestructablesInRect(bj_mapInitialPlayableArea, Filter(function DestructableHider___filt), function DestructableHider___autoregister)
    call TimerStart(CreateTimer(), DestructableHider___INTERVAL, true, function DestructableHider___periodic)
    call DestructableHider___periodic() //to make sure the destructables on screen after the map loading process finishes are initially shown
endfunction


//library DestructableHider ends
//library GetMainSelectedUnit:

    
    function GetUnitOrderValue takes unit u returns integer
        //heroes use the handleId
        if IsUnitType(u, UNIT_TYPE_HERO) then
            return GetHandleId(u)
        else
        //units use unitCode
            return GetUnitTypeId(u)
        endif
    endfunction
    
    function GetMainSelectedUnit___FilterFunction takes nothing returns boolean
        local unit u= GetFilterUnit()
        local real prio= BlzGetUnitRealField(u, UNIT_RF_PRIORITY)
        local boolean found= false
        local integer loopA= 1
        local integer loopB= 0
        // compare the current u with allready found, to place it in the right slot
        loop
            exitwhen loopA > GetMainSelectedUnit___unitsCount
            if BlzGetUnitRealField(GetMainSelectedUnit___units[loopA], UNIT_RF_PRIORITY) < prio then
                set GetMainSelectedUnit___unitsCount=GetMainSelectedUnit___unitsCount + 1
                set loopB=GetMainSelectedUnit___unitsCount
                loop
                    exitwhen loopB <= loopA
                    set GetMainSelectedUnit___units[loopB]=GetMainSelectedUnit___units[loopB - 1]
                    set loopB=loopB - 1
                endloop
                set GetMainSelectedUnit___units[loopA]=u
                set found=true
                exitwhen true
            // equal prio and better colisions Value
            elseif BlzGetUnitRealField(GetMainSelectedUnit___units[loopA], UNIT_RF_PRIORITY) == prio and GetUnitOrderValue(GetMainSelectedUnit___units[loopA]) > GetUnitOrderValue(u) then
                set GetMainSelectedUnit___unitsCount=GetMainSelectedUnit___unitsCount + 1
                set loopB=GetMainSelectedUnit___unitsCount
                loop
                    exitwhen loopB <= loopA
                    set GetMainSelectedUnit___units[loopB]=GetMainSelectedUnit___units[loopB - 1]
                    set loopB=loopB - 1
                endloop
                set GetMainSelectedUnit___units[loopA]=u
                set found=true
                exitwhen true
            endif
            set loopA=loopA + 1
        endloop
       
        // not found add it at the end
        if not found then
            set GetMainSelectedUnit___unitsCount=GetMainSelectedUnit___unitsCount + 1
            set GetMainSelectedUnit___units[GetMainSelectedUnit___unitsCount]=u
        endif
    
        set u=null
        return false
    endfunction
    
        function GetSelectedUnitIndex takes nothing returns integer
            local integer i= 0
            // local player is in group selection?
            if BlzFrameIsVisible(GetMainSelectedUnit___containerFrame) then
                // find the first visible yellow Background Frame
                loop
                    exitwhen i > 11
                    if BlzFrameIsVisible(GetMainSelectedUnit___frames[i]) then
                        return i
                    endif
                    set i=i + 1
                endloop
            endif
            return - 1
        endfunction  
    
        function GetMainSelectedUnit takes integer index returns unit
            if index >= 0 then
                call GroupEnumUnitsSelected(GetMainSelectedUnit___Group, GetLocalPlayer(), GetMainSelectedUnit___filter)
                set bj_groupRandomCurrentPick=GetMainSelectedUnit___units[index + 1]
                //clear table
                loop
                    exitwhen GetMainSelectedUnit___unitsCount <= 0
                    set GetMainSelectedUnit___units[GetMainSelectedUnit___unitsCount]=null
                    set GetMainSelectedUnit___unitsCount=GetMainSelectedUnit___unitsCount - 1
                endloop
                return bj_groupRandomCurrentPick
            else
                call GroupEnumUnitsSelected(GetMainSelectedUnit___Group, GetLocalPlayer(), null)
                return FirstOfGroup(GetMainSelectedUnit___Group)
            endif
        endfunction
    
        // returns the local current main selected unit, using it in a sync gamestate relevant manner breaks the game.
        function GetMainSelectedUnitEx takes nothing returns unit
            return GetMainSelectedUnit(GetSelectedUnitIndex())
        endfunction
    
        function GetMainSelectedUnit___init_functionAt0s takes nothing returns nothing
            local integer i= 0
            local framehandle console= BlzGetFrameByName("ConsoleUI", 0)
            local framehandle bottomUI= BlzFrameGetParent(BlzGetFrameByName("SimpleInfoPanelUnitDetail", 0))
            local framehandle groupframe= BlzFrameGetChild(bottomUI, 5)
            local framehandle buttonContainer
            //globals
            set GetMainSelectedUnit___containerFrame=BlzFrameGetChild(groupframe, 0)
            set GetMainSelectedUnit___Group=CreateGroup()
            // give this frames a handleId
            loop
                exitwhen i >= BlzFrameGetChildrenCount(GetMainSelectedUnit___containerFrame) - 1
                set buttonContainer=BlzFrameGetChild(GetMainSelectedUnit___containerFrame, i)
                set GetMainSelectedUnit___frames[i]=BlzFrameGetChild(buttonContainer, 0)
                set i=i + 1
            endloop
            call DestroyTimer(GetExpiredTimer())
        endfunction
    
        function GetMainSelectedUnit___init_function takes nothing returns nothing
            set GetMainSelectedUnit___filter=Filter(function GetMainSelectedUnit___FilterFunction)
            call TimerStart(CreateTimer(), 0, false, function GetMainSelectedUnit___init_functionAt0s)
        endfunction

//library GetMainSelectedUnit ends
//library Indexer:
    
    // Simple unit indexer for version 1.31+
    // Simply copy and paste to import
    
    
    
    
    
        
        function s__Indexer_index takes unit source returns nothing
            if GetUnitUserData(source) == 0 then
                set s__Indexer_unit=source
                
                if s__Indexer_key > - 1 then
                    set s__Indexer_id=s__Indexer_array[s__Indexer_key]
                    set s__Indexer_array[s__Indexer_key]=0
                    set s__Indexer_key=s__Indexer_key - 1
                else
                    set s__Indexer_id=s__Indexer_id + 1
                endif
                
                if GetUnitAbilityLevel(s__Indexer_unit, s__Indexer_ability) == 0 then
                    call UnitAddAbility(s__Indexer_unit, s__Indexer_ability)
                    call UnitMakeAbilityPermanent(s__Indexer_unit, true, s__Indexer_ability)
                    call BlzUnitDisableAbility(s__Indexer_unit, s__Indexer_ability, true, true)
                endif
                call SetUnitUserData(s__Indexer_unit, s__Indexer_id)
                call TriggerEvaluate(s__Indexer_onIndex)
                
                set s__Indexer_unit=null
            endif
        endfunction
    
        function s__Indexer_onOrder takes nothing returns nothing
            if GetIssuedOrderId() == 852056 then
                if GetUnitAbilityLevel(GetTriggerUnit(), s__Indexer_ability) == 0 then
                    set s__Indexer_unit=GetTriggerUnit()
                    call TriggerEvaluate(s__Indexer_onDeindex)
                    set s__Indexer_key=s__Indexer_key + 1
                    set s__Indexer_array[s__Indexer_key]=GetUnitUserData(s__Indexer_unit)
                    set s__Indexer_unit=null
                endif
            endif
        endfunction
    
        function s__Indexer_onEnter takes nothing returns nothing
            call s__Indexer_index(GetFilterUnit())
        endfunction
    
        function s__Indexer_onInit takes nothing returns nothing
            local trigger t= CreateTrigger()
            local region r= CreateRegion()
            local rect map= GetWorldBounds()
            local integer i= 0
            
            call RegionAddRect(r, map)
            call RemoveRect(map)
            call TriggerRegisterEnterRegion(CreateTrigger(), r, Filter(function s__Indexer_onEnter))
            loop
                exitwhen i == bj_MAX_PLAYER_SLOTS
                    call GroupEnumUnitsOfPlayer(bj_lastCreatedGroup, Player(i), null)
                    loop
                        set s__Indexer_unit=FirstOfGroup(bj_lastCreatedGroup)
                        exitwhen s__Indexer_unit == null
                            call s__Indexer_index(s__Indexer_unit)
                        call GroupRemoveUnit(bj_lastCreatedGroup, s__Indexer_unit)
                    endloop
                    call TriggerRegisterPlayerUnitEvent(t, Player(i), EVENT_PLAYER_UNIT_ISSUED_ORDER, null)
                set i=i + 1
            endloop
            call TriggerAddCondition(t, Filter(function s__Indexer_onOrder))
            
            set r=null
            set map=null
        endfunction
    
    
    
    
    function RegisterUnitIndexEvent takes code c returns nothing
        call TriggerAddCondition(s__Indexer_onIndex, Filter(c))
    endfunction
    
    function RegisterUnitDeindexEvent takes code c returns nothing
        call TriggerAddCondition(s__Indexer_onDeindex, Filter(c))
    endfunction
    
    function GetIndexUnit takes nothing returns unit
        return s__Indexer_unit
    endfunction

//library Indexer ends
//library LineSegmentEnumeration:
//  --- API ---
// ==== End API ====






        function s__LineSegment_PrepareRect takes real ax,real ay,real bx,real by,real offset,real offsetCollision returns nothing
            local real maxX
            local real maxY
            local real minX
            local real minY

            // get center coordinates of rectangle
            set s__LineSegment_ox=0.5 * ( ax + bx )
            set s__LineSegment_oy=0.5 * ( ay + by )

            // get rectangle major axis as vector
            set s__LineSegment_dx=0.5 * ( bx - ax )
            set s__LineSegment_dy=0.5 * ( by - ay )

            // get half of rectangle length (da) and height (db)
            set s__LineSegment_da=SquareRoot(s__LineSegment_dx * s__LineSegment_dx + s__LineSegment_dy * s__LineSegment_dy)
            set s__LineSegment_db=offset

            // get unit vector of the major axis
            set s__LineSegment_ui=s__LineSegment_dx / s__LineSegment_da
            set s__LineSegment_uj=s__LineSegment_dy / s__LineSegment_da

            // Prepare the bounding Jass Rect
            set offset=offset + offsetCollision

            if ax > bx then
                set maxX=ax + offset
                set minX=bx - offset
            else
                set maxX=bx + offset
                set minX=ax - offset
            endif

            if ay > by then
                set maxY=ay + offset
                set minY=by - offset
            else
                set maxY=by + offset
                set minY=ay - offset
            endif

            call SetRect(s__LineSegment_RECT, minX, minY, maxX, maxY)
        endfunction

        function s__LineSegment_RotateWidgetCoordinates takes widget w returns nothing
            // distance of widget from rectangle center in vector form
            set s__LineSegment_wdx=GetWidgetX(w) - s__LineSegment_ox
            set s__LineSegment_wdy=GetWidgetY(w) - s__LineSegment_oy

            set s__LineSegment_dx=s__LineSegment_wdx * s__LineSegment_ui + s__LineSegment_wdy * s__LineSegment_uj // get the component of above vector in the rect's major axis
            set s__LineSegment_dy=s__LineSegment_wdx * ( - s__LineSegment_uj ) + s__LineSegment_wdy * s__LineSegment_ui // get the component of above vector in the rect's transverse axis
        endfunction

        function s__LineSegment_IsWidgetInRect takes widget w returns boolean
            call s__LineSegment_RotateWidgetCoordinates(w)

            // Check if the components above are less than half the length and height of the rectangle
            // (Square them to compare absolute values)
            return s__LineSegment_dx * s__LineSegment_dx <= s__LineSegment_da * s__LineSegment_da and s__LineSegment_dy * s__LineSegment_dy <= s__LineSegment_db * s__LineSegment_db
        endfunction

        function s__LineSegment_IsUnitInRect takes unit u,boolean checkCollision returns boolean
            if checkCollision then
                call s__LineSegment_RotateWidgetCoordinates(u)

                // Check if the perpendicular distances of the unit from both axes of the rect are less than
                // da and db
                return IsUnitInRangeXY(u, s__LineSegment_ox - s__LineSegment_dy * s__LineSegment_uj, s__LineSegment_oy + s__LineSegment_dy * s__LineSegment_ui, RAbsBJ(s__LineSegment_da)) and IsUnitInRangeXY(u, s__LineSegment_ox + s__LineSegment_dx * s__LineSegment_ui, s__LineSegment_oy + s__LineSegment_dx * s__LineSegment_uj, RAbsBJ(s__LineSegment_db))
            endif

            return s__LineSegment_IsWidgetInRect(u)
        endfunction

        function s__LineSegment_EnumUnitsEx takes group whichgroup,real ax,real ay,real bx,real by,real offset,boolean checkCollision returns nothing
            local unit u

            if checkCollision then
                call s__LineSegment_PrepareRect(ax , ay , bx , by , offset , s__LineSegment_MAX_UNIT_COLLISION)
            else
                call s__LineSegment_PrepareRect(ax , ay , bx , by , offset , 0.00)
            endif

            call GroupEnumUnitsInRect(s__LineSegment_GROUP, s__LineSegment_RECT, null)

            // enum through all tracked units, and check if it's inside bounds
            call GroupClear(whichgroup)
            loop
                set u=FirstOfGroup(s__LineSegment_GROUP)
                exitwhen u == null

                if s__LineSegment_IsUnitInRect(u , checkCollision) then
                    call GroupAddUnit(whichgroup, u)
                endif

                call GroupRemoveUnit(s__LineSegment_GROUP, u)
            endloop
        endfunction

        function s__LineSegment_EnumUnits takes group whichgroup,real ax,real ay,real bx,real by,real offset returns nothing
            call s__LineSegment_EnumUnitsEx(whichgroup , ax , ay , bx , by , offset , false)
        endfunction


//textmacro instance: LSE_WIDGET("destructable", "Destructable")
     
        function s__LineSegment_onDestructableFilter takes nothing returns nothing
            local destructable t= GetFilterDestructable()

            if s__LineSegment_IsWidgetInRect(t) then
                set s__LineSegment_DestructableCounter=s__LineSegment_DestructableCounter + 1
                set s__LineSegment_Destructable[s__LineSegment_DestructableCounter]=t
            endif

            set t=null
        endfunction
     
        function s__LineSegment_EnumDestructables takes real ax,real ay,real bx,real by,real offset returns nothing
            call s__LineSegment_PrepareRect(ax , ay , bx , by , offset , 0.00)

            set s__LineSegment_DestructableCounter=- 1
            call EnumDestructablesInRect(s__LineSegment_RECT, Filter(function s__LineSegment_onDestructableFilter), null)
        endfunction
//end of: LSE_WIDGET("destructable", "Destructable")
//textmacro instance: LSE_WIDGET("item", "Item")
     
        function s__LineSegment_onItemFilter takes nothing returns nothing
            local item t= GetFilterItem()

            if s__LineSegment_IsWidgetInRect(t) then
                set s__LineSegment_ItemCounter=s__LineSegment_ItemCounter + 1
                set s__LineSegment_Item[s__LineSegment_ItemCounter]=t
            endif

            set t=null
        endfunction
     
        function s__LineSegment_EnumItems takes real ax,real ay,real bx,real by,real offset returns nothing
            call s__LineSegment_PrepareRect(ax , ay , bx , by , offset , 0.00)

            set s__LineSegment_ItemCounter=- 1
            call EnumItemsInRect(s__LineSegment_RECT, Filter(function s__LineSegment_onItemFilter), null)
        endfunction
//end of: LSE_WIDGET("item", "Item")
     

//library LineSegmentEnumeration ends
//library MouseUtils:

//  Arbitrary constants



















   
 




   
   
   
    //  Converts the enum type mousebuttontype into an integer
    function s__UserMouse_toIndex takes mousebuttontype mouseButton returns integer
        return GetHandleId(mouseButton)
    endfunction
   
    function s__UserMouse_getCurEventType takes nothing returns integer
        return s__UserMouse_currentEventType
    endfunction
   
    function s__UserMouse__staticgetindex takes player p returns integer
        if s__UserMouse_posDetector[(GetPlayerId(p) + 1)] != null then
            return GetPlayerId(p) + 1
        endif
        return 0
    endfunction
       
    function s__UserMouse__get_player takes integer this returns player
        return Player(this - 1)
    endfunction
    function s__UserMouse__get_isMouseClicked takes integer this returns boolean
        return s__UserMouse_mouseClickCount[this] > 0
    endfunction
    function s__UserMouse_isMouseButtonClicked takes integer this,mousebuttontype mouseButton returns boolean
        return s__UserMouse_mouseButtonStack[( this - 1 ) * 3 + (GetHandleId((mouseButton)))] > 0 // INLINED!!
 endfunction
    function s__UserMouse_setMousePos takes integer this,integer x,integer y returns nothing
        if GetLocalPlayer() == (Player((this) - 1)) then // INLINED!!
            call BlzSetMousePos(x, y)
        endif
    endfunction


















































    function s__UserMouse_onMouseUpOrDown takes nothing returns nothing
        local integer this= s__UserMouse__staticgetindex(GetTriggerPlayer())
        local integer index= ( this - 1 ) * 3 + (GetHandleId((BlzGetTriggerPlayerMouseButton()))) // INLINED!!
        local boolean releaseFlag= false
       
        if GetTriggerEventId() == EVENT_PLAYER_MOUSE_DOWN then
            set s__UserMouse_mouseClickCount[this]=IMinBJ(s__UserMouse_mouseClickCount[this] + 1, 3)
            set releaseFlag=s__UserMouse_mouseButtonStack[index] <= 0
            set s__UserMouse_mouseButtonStack[index]=IMinBJ(s__UserMouse_mouseButtonStack[index] + 1, 1)
           
            if releaseFlag then
                set s__UserMouse_currentEventType=EVENT_MOUSE_DOWN
                call TriggerEvaluate(s__UserMouse_evTrigger[EVENT_MOUSE_DOWN])
            endif
        else
            set s__UserMouse_mouseClickCount[this]=IMaxBJ(s__UserMouse_mouseClickCount[this] - 1, 0)
            set releaseFlag=s__UserMouse_mouseButtonStack[index] > 0
            set s__UserMouse_mouseButtonStack[index]=IMaxBJ(s__UserMouse_mouseButtonStack[index] - 1, 0)
           
            if releaseFlag then
                set s__UserMouse_currentEventType=EVENT_MOUSE_UP
                call TriggerEvaluate(s__UserMouse_evTrigger[EVENT_MOUSE_UP])
            endif
        endif
    endfunction
   
    function s__UserMouse_onMouseMove takes nothing returns nothing
  local integer this= s__UserMouse__staticgetindex(GetTriggerPlayer())
  local boolean started= false
               
        set s__UserMouse_mouseX[this]=BlzGetTriggerPlayerMouseX()
        set s__UserMouse_mouseY[this]=BlzGetTriggerPlayerMouseY()
 






  set s__UserMouse_currentEventType=EVENT_MOUSE_MOVE
  call TriggerEvaluate(s__UserMouse_evTrigger[EVENT_MOUSE_MOVE])
























    endfunction
       
    function s__UserMouse_init takes nothing returns nothing
        local integer this= 1
        local player p= (Player((this) - 1)) // INLINED!!
 



        set s__UserMouse_stateDetector=CreateTrigger()
       
        set s__UserMouse_evTrigger[EVENT_MOUSE_UP]=CreateTrigger()
        set s__UserMouse_evTrigger[EVENT_MOUSE_DOWN]=CreateTrigger()
        set s__UserMouse_evTrigger[EVENT_MOUSE_MOVE]=CreateTrigger()
       
        call TriggerAddCondition(s__UserMouse_stateDetector, Condition(function s__UserMouse_onMouseUpOrDown))
        loop
            exitwhen (this) > bj_MAX_PLAYER_SLOTS
           
            if GetPlayerController(p) == MAP_CONTROL_USER and GetPlayerSlotState(p) == PLAYER_SLOT_STATE_PLAYING then
                set s__UserMouse_next[this]=0
                set s__UserMouse_prev[this]=s__UserMouse_prev[(0)]
                set s__UserMouse_next[s__UserMouse_prev[(0)]]=this
                set s__UserMouse_prev[(0)]=this
               
                set s__UserMouse_posDetector[this]=CreateTrigger()



                call TriggerRegisterPlayerEvent(s__UserMouse_posDetector[this], p, EVENT_PLAYER_MOUSE_MOVE)
                call TriggerAddCondition(s__UserMouse_posDetector[this], Condition(function s__UserMouse_onMouseMove))
               
                call TriggerRegisterPlayerEvent(s__UserMouse_stateDetector, p, EVENT_PLAYER_MOUSE_UP)
                call TriggerRegisterPlayerEvent(s__UserMouse_stateDetector, p, EVENT_PLAYER_MOUSE_DOWN)
            endif
           
            set this=this + 1
            set p=(Player((this) - 1)) // INLINED!!
        endloop
    endfunction
   
    function s__UserMouse_registerCode takes code handlerFunc,integer eventId returns triggercondition
        return TriggerAddCondition(s__UserMouse_evTrigger[eventId], Condition(handlerFunc))
    endfunction
   
    function s__UserMouse_unregisterCallback takes triggercondition whichHandler,integer eventId returns nothing
        call TriggerRemoveCondition(s__UserMouse_evTrigger[eventId], whichHandler)
    endfunction
   
//Implemented from module MouseUtils___Init:
    function s__UserMouse_MouseUtils___Init___onInit takes nothing returns nothing
        call s__UserMouse_init()
    endfunction
function GetPlayerMouseX takes player p returns real
    return s__UserMouse_mouseX[s__UserMouse__staticgetindex(p)]
endfunction
function GetPlayerMouseY takes player p returns real
    return s__UserMouse_mouseY[s__UserMouse__staticgetindex(p)]
endfunction
function OnMouseEvent takes code func,integer eventId returns triggercondition
    return s__UserMouse_registerCode(func , eventId)
endfunction
function GetMouseEventType takes nothing returns integer
    return (s__UserMouse_currentEventType) // INLINED!!
endfunction
function UnregisterMouseCallback takes triggercondition whichHandler,integer eventId returns nothing
    call s__UserMouse_unregisterCallback(whichHandler , eventId)
endfunction
function SetUserMousePos takes player p,integer x,integer y returns nothing
    call s__UserMouse_setMousePos(s__UserMouse__staticgetindex(p),x , y)
endfunction

//library MouseUtils ends
//library RegisterPlayerUnitEvent:
    
    function RegisterPlayerUnitEvent takes playerunitevent p,code c returns nothing
        local integer i= GetHandleId(p)
        local integer k= 15
        if RegisterPlayerUnitEvent___t[i] == null then
            set RegisterPlayerUnitEvent___t[i]=CreateTrigger()
            loop
                call TriggerRegisterPlayerUnitEvent(RegisterPlayerUnitEvent___t[i], Player(k), p, null)
                exitwhen k == 0
                set k=k - 1
            endloop
        endif
        call TriggerAddCondition(RegisterPlayerUnitEvent___t[i], Filter(c))
    endfunction
    
    function RegisterPlayerUnitEventForPlayer takes playerunitevent p,code c,player pl returns nothing
        local integer i= 16 * GetHandleId(p) + GetPlayerId(pl)
        if RegisterPlayerUnitEvent___t[i] == null then
            set RegisterPlayerUnitEvent___t[i]=CreateTrigger()
            call TriggerRegisterPlayerUnitEvent(RegisterPlayerUnitEvent___t[i], pl, p, null)
        endif
        call TriggerAddCondition(RegisterPlayerUnitEvent___t[i], Filter(c))
    endfunction
    
    function GetPlayerUnitEventTrigger takes playerunitevent p returns trigger
        return RegisterPlayerUnitEvent___t[GetHandleId(p)]
    endfunction

//library RegisterPlayerUnitEvent ends
//library Table:
    

    function s__Table___dex__get_size takes nothing returns integer
        return Table___sizeK
    endfunction
    function s__Table___dex__get_list takes nothing returns integer
        return Table___listK
    endfunction

    function s__Table___handles_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___handles_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction

    function s__Table___agents__setindex takes integer this,integer key,agent value returns nothing
        call SaveAgentHandle(Table___ht, this, key, value)
    endfunction

    

//Run these textmacros to include the entire hashtable API as wrappers.
//Don't be intimidated by the number of macros - Vexorian's map optimizer is
//supposed to kill functions which inline (all of these functions inline).
//textmacro instance: NEW_ARRAY_BASIC("Real", "Real", "real")
    function s__Table___reals__getindex takes integer this,integer key returns real
        return LoadReal(Table___ht, this, key)
    endfunction
    function s__Table___reals__setindex takes integer this,integer key,real value returns nothing
        call SaveReal(Table___ht, this, key, value)
    endfunction
    function s__Table___reals_has takes integer this,integer key returns boolean
        return HaveSavedReal(Table___ht, this, key)
    endfunction
    function s__Table___reals_remove takes integer this,integer key returns nothing
        call RemoveSavedReal(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY_BASIC("Real", "Real", "real")
//textmacro instance: NEW_ARRAY_BASIC("Boolean", "Boolean", "boolean")
    function s__Table___booleans__getindex takes integer this,integer key returns boolean
        return LoadBoolean(Table___ht, this, key)
    endfunction
    function s__Table___booleans__setindex takes integer this,integer key,boolean value returns nothing
        call SaveBoolean(Table___ht, this, key, value)
    endfunction
    function s__Table___booleans_has takes integer this,integer key returns boolean
        return HaveSavedBoolean(Table___ht, this, key)
    endfunction
    function s__Table___booleans_remove takes integer this,integer key returns nothing
        call RemoveSavedBoolean(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY_BASIC("Boolean", "Boolean", "boolean")
//textmacro instance: NEW_ARRAY_BASIC("String", "Str", "string")
    function s__Table___strings__getindex takes integer this,integer key returns string
        return LoadStr(Table___ht, this, key)
    endfunction
    function s__Table___strings__setindex takes integer this,integer key,string value returns nothing
        call SaveStr(Table___ht, this, key, value)
    endfunction
    function s__Table___strings_has takes integer this,integer key returns boolean
        return HaveSavedString(Table___ht, this, key)
    endfunction
    function s__Table___strings_remove takes integer this,integer key returns nothing
        call RemoveSavedString(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY_BASIC("String", "Str", "string")
//New textmacro to allow table.integer[] syntax for compatibility with textmacros that might desire it.
//textmacro instance: NEW_ARRAY_BASIC("Integer", "Integer", "integer")
    function s__Table___integers__getindex takes integer this,integer key returns integer
        return LoadInteger(Table___ht, this, key)
    endfunction
    function s__Table___integers__setindex takes integer this,integer key,integer value returns nothing
        call SaveInteger(Table___ht, this, key, value)
    endfunction
    function s__Table___integers_has takes integer this,integer key returns boolean
        return HaveSavedInteger(Table___ht, this, key)
    endfunction
    function s__Table___integers_remove takes integer this,integer key returns nothing
        call RemoveSavedInteger(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY_BASIC("Integer", "Integer", "integer")

//textmacro instance: NEW_ARRAY("Player", "player")
    function s__Table___players__getindex takes integer this,integer key returns player
        return LoadPlayerHandle(Table___ht, this, key)
    endfunction
    function s__Table___players__setindex takes integer this,integer key,player value returns nothing
        call SavePlayerHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___players_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___players_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Player", "player")
//textmacro instance: NEW_ARRAY("Widget", "widget")
    function s__Table___widgets__getindex takes integer this,integer key returns widget
        return LoadWidgetHandle(Table___ht, this, key)
    endfunction
    function s__Table___widgets__setindex takes integer this,integer key,widget value returns nothing
        call SaveWidgetHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___widgets_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___widgets_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Widget", "widget")
//textmacro instance: NEW_ARRAY("Destructable", "destructable")
    function s__Table___destructables__getindex takes integer this,integer key returns destructable
        return LoadDestructableHandle(Table___ht, this, key)
    endfunction
    function s__Table___destructables__setindex takes integer this,integer key,destructable value returns nothing
        call SaveDestructableHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___destructables_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___destructables_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Destructable", "destructable")
//textmacro instance: NEW_ARRAY("Item", "item")
    function s__Table___items__getindex takes integer this,integer key returns item
        return LoadItemHandle(Table___ht, this, key)
    endfunction
    function s__Table___items__setindex takes integer this,integer key,item value returns nothing
        call SaveItemHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___items_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___items_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Item", "item")
//textmacro instance: NEW_ARRAY("Unit", "unit")
    function s__Table___units__getindex takes integer this,integer key returns unit
        return LoadUnitHandle(Table___ht, this, key)
    endfunction
    function s__Table___units__setindex takes integer this,integer key,unit value returns nothing
        call SaveUnitHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___units_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___units_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Unit", "unit")
//textmacro instance: NEW_ARRAY("Ability", "ability")
    function s__Table___abilitys__getindex takes integer this,integer key returns ability
        return LoadAbilityHandle(Table___ht, this, key)
    endfunction
    function s__Table___abilitys__setindex takes integer this,integer key,ability value returns nothing
        call SaveAbilityHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___abilitys_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___abilitys_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Ability", "ability")
//textmacro instance: NEW_ARRAY("Timer", "timer")
    function s__Table___timers__getindex takes integer this,integer key returns timer
        return LoadTimerHandle(Table___ht, this, key)
    endfunction
    function s__Table___timers__setindex takes integer this,integer key,timer value returns nothing
        call SaveTimerHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___timers_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___timers_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Timer", "timer")
//textmacro instance: NEW_ARRAY("Trigger", "trigger")
    function s__Table___triggers__getindex takes integer this,integer key returns trigger
        return LoadTriggerHandle(Table___ht, this, key)
    endfunction
    function s__Table___triggers__setindex takes integer this,integer key,trigger value returns nothing
        call SaveTriggerHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___triggers_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___triggers_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Trigger", "trigger")
//textmacro instance: NEW_ARRAY("TriggerCondition", "triggercondition")
    function s__Table___triggerconditions__getindex takes integer this,integer key returns triggercondition
        return LoadTriggerConditionHandle(Table___ht, this, key)
    endfunction
    function s__Table___triggerconditions__setindex takes integer this,integer key,triggercondition value returns nothing
        call SaveTriggerConditionHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___triggerconditions_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___triggerconditions_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("TriggerCondition", "triggercondition")
//textmacro instance: NEW_ARRAY("TriggerAction", "triggeraction")
    function s__Table___triggeractions__getindex takes integer this,integer key returns triggeraction
        return LoadTriggerActionHandle(Table___ht, this, key)
    endfunction
    function s__Table___triggeractions__setindex takes integer this,integer key,triggeraction value returns nothing
        call SaveTriggerActionHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___triggeractions_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___triggeractions_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("TriggerAction", "triggeraction")
//textmacro instance: NEW_ARRAY("TriggerEvent", "event")
    function s__Table___events__getindex takes integer this,integer key returns event
        return LoadTriggerEventHandle(Table___ht, this, key)
    endfunction
    function s__Table___events__setindex takes integer this,integer key,event value returns nothing
        call SaveTriggerEventHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___events_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___events_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("TriggerEvent", "event")
//textmacro instance: NEW_ARRAY("Force", "force")
    function s__Table___forces__getindex takes integer this,integer key returns force
        return LoadForceHandle(Table___ht, this, key)
    endfunction
    function s__Table___forces__setindex takes integer this,integer key,force value returns nothing
        call SaveForceHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___forces_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___forces_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Force", "force")
//textmacro instance: NEW_ARRAY("Group", "group")
    function s__Table___groups__getindex takes integer this,integer key returns group
        return LoadGroupHandle(Table___ht, this, key)
    endfunction
    function s__Table___groups__setindex takes integer this,integer key,group value returns nothing
        call SaveGroupHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___groups_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___groups_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Group", "group")
//textmacro instance: NEW_ARRAY("Location", "location")
    function s__Table___locations__getindex takes integer this,integer key returns location
        return LoadLocationHandle(Table___ht, this, key)
    endfunction
    function s__Table___locations__setindex takes integer this,integer key,location value returns nothing
        call SaveLocationHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___locations_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___locations_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Location", "location")
//textmacro instance: NEW_ARRAY("Rect", "rect")
    function s__Table___rects__getindex takes integer this,integer key returns rect
        return LoadRectHandle(Table___ht, this, key)
    endfunction
    function s__Table___rects__setindex takes integer this,integer key,rect value returns nothing
        call SaveRectHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___rects_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___rects_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Rect", "rect")
//textmacro instance: NEW_ARRAY("BooleanExpr", "boolexpr")
    function s__Table___boolexprs__getindex takes integer this,integer key returns boolexpr
        return LoadBooleanExprHandle(Table___ht, this, key)
    endfunction
    function s__Table___boolexprs__setindex takes integer this,integer key,boolexpr value returns nothing
        call SaveBooleanExprHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___boolexprs_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___boolexprs_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("BooleanExpr", "boolexpr")
//textmacro instance: NEW_ARRAY("Sound", "sound")
    function s__Table___sounds__getindex takes integer this,integer key returns sound
        return LoadSoundHandle(Table___ht, this, key)
    endfunction
    function s__Table___sounds__setindex takes integer this,integer key,sound value returns nothing
        call SaveSoundHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___sounds_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___sounds_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Sound", "sound")
//textmacro instance: NEW_ARRAY("Effect", "effect")
    function s__Table___effects__getindex takes integer this,integer key returns effect
        return LoadEffectHandle(Table___ht, this, key)
    endfunction
    function s__Table___effects__setindex takes integer this,integer key,effect value returns nothing
        call SaveEffectHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___effects_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___effects_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Effect", "effect")
//textmacro instance: NEW_ARRAY("UnitPool", "unitpool")
    function s__Table___unitpools__getindex takes integer this,integer key returns unitpool
        return LoadUnitPoolHandle(Table___ht, this, key)
    endfunction
    function s__Table___unitpools__setindex takes integer this,integer key,unitpool value returns nothing
        call SaveUnitPoolHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___unitpools_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___unitpools_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("UnitPool", "unitpool")
//textmacro instance: NEW_ARRAY("ItemPool", "itempool")
    function s__Table___itempools__getindex takes integer this,integer key returns itempool
        return LoadItemPoolHandle(Table___ht, this, key)
    endfunction
    function s__Table___itempools__setindex takes integer this,integer key,itempool value returns nothing
        call SaveItemPoolHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___itempools_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___itempools_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("ItemPool", "itempool")
//textmacro instance: NEW_ARRAY("Quest", "quest")
    function s__Table___quests__getindex takes integer this,integer key returns quest
        return LoadQuestHandle(Table___ht, this, key)
    endfunction
    function s__Table___quests__setindex takes integer this,integer key,quest value returns nothing
        call SaveQuestHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___quests_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___quests_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Quest", "quest")
//textmacro instance: NEW_ARRAY("QuestItem", "questitem")
    function s__Table___questitems__getindex takes integer this,integer key returns questitem
        return LoadQuestItemHandle(Table___ht, this, key)
    endfunction
    function s__Table___questitems__setindex takes integer this,integer key,questitem value returns nothing
        call SaveQuestItemHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___questitems_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___questitems_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("QuestItem", "questitem")
//textmacro instance: NEW_ARRAY("DefeatCondition", "defeatcondition")
    function s__Table___defeatconditions__getindex takes integer this,integer key returns defeatcondition
        return LoadDefeatConditionHandle(Table___ht, this, key)
    endfunction
    function s__Table___defeatconditions__setindex takes integer this,integer key,defeatcondition value returns nothing
        call SaveDefeatConditionHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___defeatconditions_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___defeatconditions_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("DefeatCondition", "defeatcondition")
//textmacro instance: NEW_ARRAY("TimerDialog", "timerdialog")
    function s__Table___timerdialogs__getindex takes integer this,integer key returns timerdialog
        return LoadTimerDialogHandle(Table___ht, this, key)
    endfunction
    function s__Table___timerdialogs__setindex takes integer this,integer key,timerdialog value returns nothing
        call SaveTimerDialogHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___timerdialogs_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___timerdialogs_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("TimerDialog", "timerdialog")
//textmacro instance: NEW_ARRAY("Leaderboard", "leaderboard")
    function s__Table___leaderboards__getindex takes integer this,integer key returns leaderboard
        return LoadLeaderboardHandle(Table___ht, this, key)
    endfunction
    function s__Table___leaderboards__setindex takes integer this,integer key,leaderboard value returns nothing
        call SaveLeaderboardHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___leaderboards_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___leaderboards_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Leaderboard", "leaderboard")
//textmacro instance: NEW_ARRAY("Multiboard", "multiboard")
    function s__Table___multiboards__getindex takes integer this,integer key returns multiboard
        return LoadMultiboardHandle(Table___ht, this, key)
    endfunction
    function s__Table___multiboards__setindex takes integer this,integer key,multiboard value returns nothing
        call SaveMultiboardHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___multiboards_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___multiboards_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Multiboard", "multiboard")
//textmacro instance: NEW_ARRAY("MultiboardItem", "multiboarditem")
    function s__Table___multiboarditems__getindex takes integer this,integer key returns multiboarditem
        return LoadMultiboardItemHandle(Table___ht, this, key)
    endfunction
    function s__Table___multiboarditems__setindex takes integer this,integer key,multiboarditem value returns nothing
        call SaveMultiboardItemHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___multiboarditems_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___multiboarditems_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("MultiboardItem", "multiboarditem")
//textmacro instance: NEW_ARRAY("Trackable", "trackable")
    function s__Table___trackables__getindex takes integer this,integer key returns trackable
        return LoadTrackableHandle(Table___ht, this, key)
    endfunction
    function s__Table___trackables__setindex takes integer this,integer key,trackable value returns nothing
        call SaveTrackableHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___trackables_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___trackables_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Trackable", "trackable")
//textmacro instance: NEW_ARRAY("Dialog", "dialog")
    function s__Table___dialogs__getindex takes integer this,integer key returns dialog
        return LoadDialogHandle(Table___ht, this, key)
    endfunction
    function s__Table___dialogs__setindex takes integer this,integer key,dialog value returns nothing
        call SaveDialogHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___dialogs_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___dialogs_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Dialog", "dialog")
//textmacro instance: NEW_ARRAY("Button", "button")
    function s__Table___buttons__getindex takes integer this,integer key returns button
        return LoadButtonHandle(Table___ht, this, key)
    endfunction
    function s__Table___buttons__setindex takes integer this,integer key,button value returns nothing
        call SaveButtonHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___buttons_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___buttons_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Button", "button")
//textmacro instance: NEW_ARRAY("TextTag", "texttag")
    function s__Table___texttags__getindex takes integer this,integer key returns texttag
        return LoadTextTagHandle(Table___ht, this, key)
    endfunction
    function s__Table___texttags__setindex takes integer this,integer key,texttag value returns nothing
        call SaveTextTagHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___texttags_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___texttags_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("TextTag", "texttag")
//textmacro instance: NEW_ARRAY("Lightning", "lightning")
    function s__Table___lightnings__getindex takes integer this,integer key returns lightning
        return LoadLightningHandle(Table___ht, this, key)
    endfunction
    function s__Table___lightnings__setindex takes integer this,integer key,lightning value returns nothing
        call SaveLightningHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___lightnings_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___lightnings_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Lightning", "lightning")
//textmacro instance: NEW_ARRAY("Image", "image")
    function s__Table___images__getindex takes integer this,integer key returns image
        return LoadImageHandle(Table___ht, this, key)
    endfunction
    function s__Table___images__setindex takes integer this,integer key,image value returns nothing
        call SaveImageHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___images_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___images_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Image", "image")
//textmacro instance: NEW_ARRAY("Ubersplat", "ubersplat")
    function s__Table___ubersplats__getindex takes integer this,integer key returns ubersplat
        return LoadUbersplatHandle(Table___ht, this, key)
    endfunction
    function s__Table___ubersplats__setindex takes integer this,integer key,ubersplat value returns nothing
        call SaveUbersplatHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___ubersplats_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___ubersplats_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Ubersplat", "ubersplat")
//textmacro instance: NEW_ARRAY("Region", "region")
    function s__Table___regions__getindex takes integer this,integer key returns region
        return LoadRegionHandle(Table___ht, this, key)
    endfunction
    function s__Table___regions__setindex takes integer this,integer key,region value returns nothing
        call SaveRegionHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___regions_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___regions_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Region", "region")
//textmacro instance: NEW_ARRAY("FogState", "fogstate")
    function s__Table___fogstates__getindex takes integer this,integer key returns fogstate
        return LoadFogStateHandle(Table___ht, this, key)
    endfunction
    function s__Table___fogstates__setindex takes integer this,integer key,fogstate value returns nothing
        call SaveFogStateHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___fogstates_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___fogstates_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("FogState", "fogstate")
//textmacro instance: NEW_ARRAY("FogModifier", "fogmodifier")
    function s__Table___fogmodifiers__getindex takes integer this,integer key returns fogmodifier
        return LoadFogModifierHandle(Table___ht, this, key)
    endfunction
    function s__Table___fogmodifiers__setindex takes integer this,integer key,fogmodifier value returns nothing
        call SaveFogModifierHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___fogmodifiers_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___fogmodifiers_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("FogModifier", "fogmodifier")
//textmacro instance: NEW_ARRAY("Hashtable", "hashtable")
    function s__Table___hashtables__getindex takes integer this,integer key returns hashtable
        return LoadHashtableHandle(Table___ht, this, key)
    endfunction
    function s__Table___hashtables__setindex takes integer this,integer key,hashtable value returns nothing
        call SaveHashtableHandle(Table___ht, this, key, value)
    endfunction
    function s__Table___hashtables_has takes integer this,integer key returns boolean
        return HaveSavedHandle(Table___ht, this, key)
    endfunction
    function s__Table___hashtables_remove takes integer this,integer key returns nothing
        call RemoveSavedHandle(Table___ht, this, key)
    endfunction
//end of: NEW_ARRAY("Hashtable", "hashtable")


    // Implement modules for intuitive syntax (tb.handle; tb.unit; etc.)
//Implemented from module Table___realm:
    function s__Table__get_real takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___integerm:
    function s__Table__get_integer takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___booleanm:
    function s__Table__get_boolean takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___stringm:
    function s__Table__get_string takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___playerm:
    function s__Table__get_player takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___widgetm:
    function s__Table__get_widget takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___destructablem:
    function s__Table__get_destructable takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___itemm:
    function s__Table__get_item takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___unitm:
    function s__Table__get_unit takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___abilitym:
    function s__Table__get_ability takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___timerm:
    function s__Table__get_timer takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___triggerm:
    function s__Table__get_trigger takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___triggerconditionm:
    function s__Table__get_triggercondition takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___triggeractionm:
    function s__Table__get_triggeraction takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___eventm:
    function s__Table__get_event takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___forcem:
    function s__Table__get_force takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___groupm:
    function s__Table__get_group takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___locationm:
    function s__Table__get_location takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___rectm:
    function s__Table__get_rect takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___boolexprm:
    function s__Table__get_boolexpr takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___soundm:
    function s__Table__get_sound takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___effectm:
    function s__Table__get_effect takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___unitpoolm:
    function s__Table__get_unitpool takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___itempoolm:
    function s__Table__get_itempool takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___questm:
    function s__Table__get_quest takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___questitemm:
    function s__Table__get_questitem takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___defeatconditionm:
    function s__Table__get_defeatcondition takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___timerdialogm:
    function s__Table__get_timerdialog takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___leaderboardm:
    function s__Table__get_leaderboard takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___multiboardm:
    function s__Table__get_multiboard takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___multiboarditemm:
    function s__Table__get_multiboarditem takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___trackablem:
    function s__Table__get_trackable takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___dialogm:
    function s__Table__get_dialog takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___buttonm:
    function s__Table__get_button takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___texttagm:
    function s__Table__get_texttag takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___lightningm:
    function s__Table__get_lightning takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___imagem:
    function s__Table__get_image takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___ubersplatm:
    function s__Table__get_ubersplat takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___regionm:
    function s__Table__get_region takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___fogstatem:
    function s__Table__get_fogstate takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___fogmodifierm:
    function s__Table__get_fogmodifier takes integer this returns integer
        return this
    endfunction
//Implemented from module Table___hashtablem:
    function s__Table__get_hashtable takes integer this returns integer
        return this
    endfunction

    function s__Table__get_handle takes integer this returns integer
        return this
    endfunction

    function s__Table__get_agent takes integer this returns integer
        return this
    endfunction

    //set this = tb[GetSpellAbilityId()]
    function s__Table__getindex takes integer this,integer key returns integer
        return LoadInteger(Table___ht, this, key) //return this.integer[key]
    endfunction

    //set tb[389034] = 8192
    function s__Table__setindex takes integer this,integer key,integer tb returns nothing
        call SaveInteger(Table___ht, this, key, tb) //set this.integer[key] = tb
    endfunction

    //set b = tb.has(2493223)
    function s__Table_has takes integer this,integer key returns boolean
        return HaveSavedInteger(Table___ht, this, key) //return this.integer.has(key)
    endfunction

    //call tb.remove(294080)
    function s__Table_remove takes integer this,integer key returns nothing
        call RemoveSavedInteger(Table___ht, this, key) //call this.integer.remove(key)
    endfunction

    //Remove all data from a Table instance
    function s__Table_flush takes integer this returns nothing
        call FlushChildHashtable(Table___ht, this)
    endfunction

    //local Table tb = Table.create()
    function s__Table_create takes nothing returns integer
        local integer this= (LoadInteger(Table___ht, ((Table___listK)), (0))) // INLINED!!
        
        if this == 0 then
            set this=Table___more + 1
            set Table___more=this
        else
            call SaveInteger(Table___ht, ((Table___listK)), (0), ( (LoadInteger(Table___ht, ((Table___listK)), (this))))) // INLINED!!
            call RemoveSavedInteger(Table___ht, ((Table___listK)), (this)) //Clear hashed memory // INLINED!!
        endif
        
        return this
    endfunction

    // Removes all data from a Table instance and recycles its index.
    //
    //     call tb.destroy()
    //
    function s__Table_destroy takes integer this returns nothing
        call FlushChildHashtable(Table___ht, (this)) // INLINED!!

        call SaveInteger(Table___ht, ((Table___listK)), (this), ( (LoadInteger(Table___ht, ((Table___listK)), (0))))) // INLINED!!
        call SaveInteger(Table___ht, ((Table___listK)), (0), ( this)) // INLINED!!
    endfunction

//ignored textmacro command: TABLE_BC_METHODS()
    
//ignored textmacro command: TABLE_BC_STRUCTS()
    
    
    //Returns a new TableArray to do your bidding. Simply use:
    //
    //    local TableArray ta = TableArray[array_size]
    //
    function s__TableArray__staticgetindex takes integer array_size returns integer
        local integer tb= (LoadInteger(Table___ht, ((Table___sizeK)), (array_size))) // INLINED!!
        local integer this= (LoadInteger(Table___ht, (tb), (0))) // INLINED!!
        
        
        if this == 0 then
            set this=Table___less - array_size
            set Table___less=this
        else
            call SaveInteger(Table___ht, (tb), (0), ( (LoadInteger(Table___ht, (tb), (this))))) //Set the last destroyed to the last-last destroyed // INLINED!!
            call RemoveSavedInteger(Table___ht, (tb), (this)) //Clear hashed memory // INLINED!!
        endif
        
        call SaveInteger(Table___ht, ((Table___sizeK)), (this), ( array_size)) //This remembers the array size // INLINED!!
        return this
    endfunction
    
    //Returns the size of the TableArray
    function s__TableArray__get_size takes integer this returns integer
        return (LoadInteger(Table___ht, ((Table___sizeK)), (this))) // INLINED!!
    endfunction
    
    //This magic method enables two-dimensional[array][syntax] for Tables,
    //similar to the two-dimensional utility provided by hashtables them-
    //selves.
    //
    //ta[integer a].unit[integer b] = unit u
    //ta[integer a][integer c] = integer d
    //
    //Inline-friendly when not running in debug mode
    //
    function s__TableArray__getindex takes integer this,integer key returns integer










        return this + key
    endfunction
    
    //Destroys a TableArray without flushing it; I assume you call .flush()
    //if you want it flushed too. This is a public method so that you don't
    //have to loop through all TableArray indices to flush them if you don't
    //need to (ie. if you were flushing all child-keys as you used them).
    //
    function s__TableArray_destroy takes integer this returns nothing
        local integer tb= (LoadInteger(Table___ht, ((Table___sizeK)), ((LoadInteger(Table___ht, ((Table___sizeK)), ((this))))))) // INLINED!!
        
        
        if tb == 0 then
            //Create a Table to index recycled instances with their array size
            set tb=s__Table_create()
            call SaveInteger(Table___ht, ((Table___sizeK)), ((LoadInteger(Table___ht, ((Table___sizeK)), ((this))))), ( tb)) // INLINED!!
        endif
        
        call RemoveSavedInteger(Table___ht, ((Table___sizeK)), (this)) //Clear the array size from hash memory // INLINED!!
        
        call SaveInteger(Table___ht, (tb), (this), ( (LoadInteger(Table___ht, (tb), (0))))) // INLINED!!
        call SaveInteger(Table___ht, (tb), (0), ( this)) // INLINED!!
    endfunction
    
    
    //Avoids hitting the op limit
    function s__TableArray_clean takes nothing returns nothing
        local integer tb= s__TableArray_tempTable
        local integer end= tb + 0x1000
        if end < s__TableArray_tempEnd then
            set s__TableArray_tempTable=end
            call ForForce(bj_FORCE_PLAYER[0], function s__TableArray_clean)
        else
            set end=s__TableArray_tempEnd
        endif
        loop
            call FlushChildHashtable(Table___ht, (tb)) // INLINED!!
            set tb=tb + 1
            exitwhen tb == end
        endloop
    endfunction
    
    //Flushes the TableArray and also destroys it. Doesn't get any more
    //similar to the FlushParentHashtable native than this.
    //
    function s__TableArray_flush takes integer this returns nothing
        set s__TableArray_tempTable=this
        set s__TableArray_tempEnd=this + (LoadInteger(Table___ht, ((Table___sizeK)), ((this)))) // INLINED!!
        call ForForce(bj_FORCE_PLAYER[0], function s__TableArray_clean)
        call s__TableArray_destroy(this)
    endfunction
    
    
//NEW: Added in Table 4.0. A fairly simple struct but allows you to do more
//than that which was previously possible.

    //Enables myHash[parentKey][childKey] syntax.
    //Basically, it creates a Table in the place of the parent key if
    //it didn't already get created earlier.
    function s__HashTable__getindex takes integer this,integer index returns integer
        local integer t= (LoadInteger(Table___ht, ((this)), (index))) // INLINED!!
        if t == 0 then
            set t=s__Table_create()
            call SaveInteger(Table___ht, ((this)), (index), ( t)) //whoops! Forgot that line. I'm out of practice! // INLINED!!
        endif
        return t
    endfunction

    //You need to call this on each parent key that you used if you
    //intend to destroy the HashTable or simply no longer need that key.
    function s__HashTable_remove takes integer this,integer index returns nothing
        local integer t= (LoadInteger(Table___ht, ((this)), (index))) // INLINED!!
        if t != 0 then
            call s__Table_destroy(t)
            call RemoveSavedInteger(Table___ht, ((this)), (index)) // INLINED!!
        endif
    endfunction

    //Added in version 4.1
    function s__HashTable_has takes integer this,integer index returns boolean
        return (HaveSavedInteger(Table___ht, ((this)), (index))) // INLINED!!
    endfunction

    //HashTables are just fancy Table indices.
    function s__HashTable_destroy takes integer this returns nothing
        call s__Table_destroy((this))
    endfunction

    //Like I said above...
    function s__HashTable_create takes nothing returns integer
        return s__Table_create()
    endfunction



//library Table ends
//library TimerUtils:
//*********************************************************************
//* TimerUtils (red+blue+orange flavors for 1.24b+) 2.0
//* ----------
//*
//*  To implement it , create a custom text trigger called TimerUtils
//* and paste the contents of this script there.
//*
//*  To copy from a map to another, copy the trigger holding this
//* library to your map.
//*
//* (requires vJass)   More scripts: htt://www.wc3c.net
//*
//* For your timer needs:
//*  * Attaching
//*  * Recycling (with double-free protection)
//*
//* set t=NewTimer()      : Get a timer (alternative to CreateTimer)
//* set t=NewTimerEx(x)   : Get a timer (alternative to CreateTimer), call
//*                            Initialize timer data as x, instead of 0.
//*
//* ReleaseTimer(t)       : Relese a timer (alt to DestroyTimer)
//* SetTimerData(t,2)     : Attach value 2 to timer
//* GetTimerData(t)       : Get the timer's value.
//*                         You can assume a timer's value is 0
//*                         after NewTimer.
//*
//* Multi-flavor:
//*    Set USE_HASH_TABLE to true if you don't want to complicate your life.
//*
//* If you like speed and giberish try learning about the other flavors.
//*
//********************************************************************

//================================================================

    //==================================================================================================
    
    

    //It is dependent on jasshelper's recent inlining optimization in order to perform correctly.
    function SetTimerData takes timer t,integer value returns nothing

            // new blue
            call SaveInteger(TimerUtils___ht, 0, GetHandleId(t), value)
            

















    endfunction

    function GetTimerData takes timer t returns integer

            // new blue
            return LoadInteger(TimerUtils___ht, 0, GetHandleId(t))
            

















    endfunction

    //==========================================================================================

    //==========================================================================================
    // I needed to decide between duplicating code ignoring the "Once and only once" rule
    // and using the ugly textmacros. I guess textmacros won.
    //

    function NewTimerEx takes integer value returns timer
        if ( TimerUtils___tN == 0 ) then
            if ( not TimerUtils___didinit ) then
                //This extra if shouldn't represent a major performance drawback
                //because QUANTITY rule is not supposed to be broken every day. 
                call TriggerEvaluate(st___prototype3[(1)]) // INLINED!!
                set TimerUtils___tN=TimerUtils___tN - 1
            else
                //If this happens then the QUANTITY rule has already been broken, try to fix the
                // issue, else fail.
                set s__TimerUtils___tT[0]= CreateTimer()















            endif
        else
            set TimerUtils___tN=TimerUtils___tN - 1
        endif
        call SaveInteger(TimerUtils___ht, 0, GetHandleId((s__TimerUtils___tT[TimerUtils___tN] )), ( value)) // INLINED!!
     return s__TimerUtils___tT[TimerUtils___tN]
    endfunction
    
    function NewTimer takes nothing returns timer
        return NewTimerEx(0)
    endfunction


    //==========================================================================================
    function ReleaseTimer takes timer t returns nothing
        if ( t == null ) then
            return
        endif
        if ( TimerUtils___tN == TimerUtils___ARRAY_SIZE ) then
            //stack is full, the map already has much more troubles than the chance of bug
            call DestroyTimer(t)
        else
            call PauseTimer(t)
            if ( (LoadInteger(TimerUtils___ht, 0, GetHandleId((t)))) == TimerUtils___HELD ) then // INLINED!!
                return
            endif
            call SaveInteger(TimerUtils___ht, 0, GetHandleId((t )), ( TimerUtils___HELD)) // INLINED!!
            set s__TimerUtils___tT[TimerUtils___tN]= t
            set TimerUtils___tN=TimerUtils___tN + 1
        endif
    endfunction

    function TimerUtils___init takes nothing returns nothing
     local integer i=0
     local integer o=- 1
     local boolean oops= false
        if ( TimerUtils___didinit ) then
            return
        else
            set TimerUtils___didinit=true
        endif
     

            set TimerUtils___ht=InitHashtable()
            loop
                exitwhen ( i == TimerUtils___QUANTITY )
                set s__TimerUtils___tT[i]= CreateTimer()
                call SaveInteger(TimerUtils___ht, 0, GetHandleId((s__TimerUtils___tT[i] )), ( TimerUtils___HELD)) // INLINED!!
                set i=i + 1
            endloop
            set TimerUtils___tN=TimerUtils___QUANTITY










































    endfunction


//library TimerUtils ends
//library WorldBounds:
    
//Implemented from module WorldBounds___WorldBoundInit:

    function s__WorldBounds_WorldBounds___WorldBoundInit___onInit takes nothing returns nothing
        set s__WorldBounds_world=GetWorldBounds()
        set s__WorldBounds_maxX=R2I(GetRectMaxX(s__WorldBounds_world))
        set s__WorldBounds_maxY=R2I(GetRectMaxY(s__WorldBounds_world))
        set s__WorldBounds_minX=R2I(GetRectMinX(s__WorldBounds_world))
        set s__WorldBounds_minY=R2I(GetRectMinY(s__WorldBounds_world))
        set s__WorldBounds_centerX=R2I(( s__WorldBounds_maxX + s__WorldBounds_minX ) / 2)
        set s__WorldBounds_centerY=R2I(( s__WorldBounds_minY + s__WorldBounds_maxY ) / 2)
        set s__WorldBounds_playMaxX=GetRectMaxX(bj_mapInitialPlayableArea)
        set s__WorldBounds_playMaxY=GetRectMaxY(bj_mapInitialPlayableArea)
        set s__WorldBounds_playMinX=GetRectMinX(bj_mapInitialPlayableArea)
        set s__WorldBounds_playMinY=GetRectMinY(bj_mapInitialPlayableArea)
        set s__WorldBounds_worldRegion=CreateRegion()
        call RegionAddRect(s__WorldBounds_worldRegion, s__WorldBounds_world)
        endfunction
    

//library WorldBounds ends
//library Components:
    
    // Credits:
    //      Taysen: FDF file
    //      Bribe: Table library
    

    
    
    

    
    
    
    function GetTriggerComponent takes nothing returns integer
        return (s__Component_array[GetPlayerId(GetTriggerPlayer())]) // INLINED!!
    endfunction

    function GetTriggerEditBox takes nothing returns integer
        return sc__EditBox_get()
    endfunction

    function GetTriggerCheckBox takes nothing returns integer
        return sc__CheckBox_get()
    endfunction

    function GetTriggerSlider takes nothing returns integer
        return sc__Slider_get()
    endfunction

    
    
    




        function s__Tooltip__get_parent takes integer this returns framehandle
            return s__Tooltip_parentFrame[this]
        endfunction

        function s__Tooltip__set_text takes integer this,string description returns nothing
            call BlzFrameSetText(s__Tooltip_tooltip[this], description)
        endfunction

        function s__Tooltip__get_text takes integer this returns string
            return BlzFrameGetText(s__Tooltip_tooltip[this])
        endfunction

        function s__Tooltip__set_name takes integer this,string newName returns nothing
            call BlzFrameSetText(s__Tooltip_nameFrame[this], newName)
        endfunction

        function s__Tooltip__get_name takes integer this returns string
            return BlzFrameGetText(s__Tooltip_nameFrame[this])
        endfunction

        function s__Tooltip__set_icon takes integer this,string texture returns nothing
            set s__Tooltip_texture[this]=texture
            call BlzFrameSetTexture(s__Tooltip_iconFrame[this], texture, 0, false)
        endfunction

        function s__Tooltip__get_icon takes integer this returns string
            return s__Tooltip_texture[this]
        endfunction

        function s__Tooltip__set_width takes integer this,real newWidth returns nothing
            set s__Tooltip_widthSize[this]=newWidth

            if not s__Tooltip_simple[this] then
                call BlzFrameSetSize(s__Tooltip_tooltip[this], newWidth, 0)
            endif
        endfunction

        function s__Tooltip__get_width takes integer this returns real
            return s__Tooltip_widthSize[this]
        endfunction

        function s__Tooltip__set_point takes integer this,framepointtype newPoint returns nothing
            set s__Tooltip_pointType[this]=newPoint

            call BlzFrameClearAllPoints(s__Tooltip_tooltip[this])
                
            if newPoint == FRAMEPOINT_TOPLEFT then
                call BlzFrameSetPoint(s__Tooltip_tooltip[this], newPoint, (s__Tooltip_parentFrame[(this)]), FRAMEPOINT_TOPRIGHT, 0.005, - 0.05) // INLINED!!
            elseif newPoint == FRAMEPOINT_TOPRIGHT then
                call BlzFrameSetPoint(s__Tooltip_tooltip[this], newPoint, (s__Tooltip_parentFrame[(this)]), FRAMEPOINT_TOPLEFT, - 0.005, - 0.05) // INLINED!!
            elseif newPoint == FRAMEPOINT_BOTTOMLEFT then
                call BlzFrameSetPoint(s__Tooltip_tooltip[this], newPoint, (s__Tooltip_parentFrame[(this)]), FRAMEPOINT_BOTTOMRIGHT, 0.005, 0.0) // INLINED!!
            elseif newPoint == FRAMEPOINT_BOTTOM then
                call BlzFrameSetPoint(s__Tooltip_tooltip[this], newPoint, (s__Tooltip_parentFrame[(this)]), FRAMEPOINT_TOP, 0.0, 0.005) // INLINED!!
            elseif newPoint == FRAMEPOINT_TOP then
                call BlzFrameSetPoint(s__Tooltip_tooltip[this], newPoint, (s__Tooltip_parentFrame[(this)]), FRAMEPOINT_BOTTOM, 0.0, - 0.05) // INLINED!!
            else
                call BlzFrameSetPoint(s__Tooltip_tooltip[this], newPoint, (s__Tooltip_parentFrame[(this)]), FRAMEPOINT_BOTTOMLEFT, - 0.005, 0.0) // INLINED!!
            endif
        endfunction

        function s__Tooltip__get_point takes integer this returns framepointtype
            return s__Tooltip_pointType[this]
        endfunction

        function s__Tooltip__set_visible takes integer this,boolean visibility returns nothing
            set s__Tooltip_isVisible[this]=visibility
            call BlzFrameSetVisible(s__Tooltip_box[this], visibility)
        endfunction

        function s__Tooltip__get_visible takes integer this returns boolean
            return s__Tooltip_isVisible[this]
        endfunction

        function s__Tooltip_setPoint takes integer this,framepointtype point,framepointtype relative,real x,real y returns nothing
            call BlzFrameClearAllPoints(s__Tooltip_tooltip[this])
            call BlzFrameSetPoint(s__Tooltip_tooltip[this], point, (s__Tooltip_parentFrame[(this)]), relative, x, y) // INLINED!!
        endfunction

        function s__Tooltip_destroy takes integer this returns nothing
            call BlzDestroyFrame(s__Tooltip_nameFrame[this])
            call BlzDestroyFrame(s__Tooltip_iconFrame[this])
            call BlzDestroyFrame(s__Tooltip_tooltip[this])
            call BlzDestroyFrame(s__Tooltip_line[this])
            call BlzDestroyFrame(s__Tooltip_box[this])
            call BlzDestroyFrame(s__Tooltip_frame[this])
            call s__Tooltip_deallocate(this)

            set s__Tooltip_frame[this]=null
            set s__Tooltip_box[this]=null
            set s__Tooltip_line[this]=null
            set s__Tooltip_tooltip[this]=null
            set s__Tooltip_iconFrame[this]=null
            set s__Tooltip_nameFrame[this]=null
            set s__Tooltip_pointType[this]=null
            set s__Tooltip_parentFrame[this]=null
        endfunction

        function s__Tooltip_create takes framehandle owner,real width,framepointtype point,boolean simpleTooltip returns integer
            local integer this= s__Tooltip__allocate()

            set s__Tooltip_parentFrame[this]=owner
            set s__Tooltip_simple[this]=simpleTooltip
            set s__Tooltip_widthSize[this]=width
            set s__Tooltip_pointType[this]=point
            set s__Tooltip_isVisible[this]=true

            if simpleTooltip then
                set s__Tooltip_frame[this]=BlzCreateFrameByType("FRAME", "", owner, "", 0)
                set s__Tooltip_box[this]=BlzCreateFrame("Leaderboard", s__Tooltip_frame[this], 0, 0)
                set s__Tooltip_tooltip[this]=BlzCreateFrameByType("TEXT", "", s__Tooltip_box[this], "", 0)

                call BlzFrameSetPoint(s__Tooltip_tooltip[this], FRAMEPOINT_BOTTOM, owner, FRAMEPOINT_TOP, 0, 0.008)
                call BlzFrameSetPoint(s__Tooltip_box[this], FRAMEPOINT_TOPLEFT, s__Tooltip_tooltip[this], FRAMEPOINT_TOPLEFT, - 0.008, 0.008)
                call BlzFrameSetPoint(s__Tooltip_box[this], FRAMEPOINT_BOTTOMRIGHT, s__Tooltip_tooltip[this], FRAMEPOINT_BOTTOMRIGHT, 0.008, - 0.008)
            else
                set s__Tooltip_frame[this]=BlzCreateFrame("TooltipBoxFrame", owner, 0, 0)
                set s__Tooltip_box[this]=BlzGetFrameByName("TooltipBox", 0)
                set s__Tooltip_line[this]=BlzGetFrameByName("TooltipSeperator", 0)
                set s__Tooltip_tooltip[this]=BlzGetFrameByName("TooltipText", 0)
                set s__Tooltip_iconFrame[this]=BlzGetFrameByName("TooltipIcon", 0)
                set s__Tooltip_nameFrame[this]=BlzGetFrameByName("TooltipName", 0)

                if point == FRAMEPOINT_TOPLEFT then
                    call BlzFrameSetPoint(s__Tooltip_tooltip[this], point, owner, FRAMEPOINT_TOPRIGHT, 0.005, - 0.05)
                elseif point == FRAMEPOINT_TOPRIGHT then
                    call BlzFrameSetPoint(s__Tooltip_tooltip[this], point, owner, FRAMEPOINT_TOPLEFT, - 0.005, - 0.05)
                elseif point == FRAMEPOINT_BOTTOMLEFT then
                    call BlzFrameSetPoint(s__Tooltip_tooltip[this], point, owner, FRAMEPOINT_BOTTOMRIGHT, 0.005, 0.0)
                else
                    call BlzFrameSetPoint(s__Tooltip_tooltip[this], point, owner, FRAMEPOINT_BOTTOMLEFT, - 0.005, 0.0)
                endif

                call BlzFrameSetPoint(s__Tooltip_box[this], FRAMEPOINT_TOPLEFT, s__Tooltip_iconFrame[this], FRAMEPOINT_TOPLEFT, - 0.005, 0.005)
                call BlzFrameSetPoint(s__Tooltip_box[this], FRAMEPOINT_BOTTOMRIGHT, s__Tooltip_tooltip[this], FRAMEPOINT_BOTTOMRIGHT, 0.005, - 0.005)
                call BlzFrameSetSize(s__Tooltip_tooltip[this], width, 0)
            endif

            return this
        endfunction


//Implemented from module Components___Operators:


        function s__Backdrop__set_x takes integer this,real newX returns nothing
            set s__Backdrop_Components___Operators____x[this]=newX

            if s__Backdrop_parent[this] == Components___CONSOLE or s__Backdrop_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Backdrop_Components___Operators____frame[(this)]), s__Backdrop_Components___Operators____point[this], s__Backdrop_Components___Operators____x[this], s__Backdrop_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__Backdrop_Components___Operators____frame[(this)]), s__Backdrop_Components___Operators____point[this], s__Backdrop_parent[this], s__Backdrop_Components___Operators____relative[this], s__Backdrop_Components___Operators____x[this], s__Backdrop_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__Backdrop__get_x takes integer this returns real
            return s__Backdrop_Components___Operators____x[this]
        endfunction

        function s__Backdrop__set_y takes integer this,real newY returns nothing
            set s__Backdrop_Components___Operators____y[this]=newY

            if s__Backdrop_parent[this] == Components___CONSOLE or s__Backdrop_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Backdrop_Components___Operators____frame[(this)]), s__Backdrop_Components___Operators____point[this], s__Backdrop_Components___Operators____x[this], s__Backdrop_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__Backdrop_Components___Operators____frame[(this)]), s__Backdrop_Components___Operators____point[this], s__Backdrop_parent[this], s__Backdrop_Components___Operators____relative[this], s__Backdrop_Components___Operators____x[this], s__Backdrop_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__Backdrop__get_y takes integer this returns real
            return s__Backdrop_Components___Operators____y[this]
        endfunction

        function s__Backdrop__set_point takes integer this,framepointtype newPoint returns nothing
            set s__Backdrop_Components___Operators____point[this]=newPoint

            call BlzFrameClearAllPoints((s__Backdrop_Components___Operators____frame[(this)])) // INLINED!!

            if s__Backdrop_parent[this] == Components___CONSOLE or s__Backdrop_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Backdrop_Components___Operators____frame[(this)]), s__Backdrop_Components___Operators____point[this], s__Backdrop_Components___Operators____x[this], s__Backdrop_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__Backdrop_Components___Operators____frame[(this)]), s__Backdrop_Components___Operators____point[this], s__Backdrop_parent[this], s__Backdrop_Components___Operators____relative[this], s__Backdrop_Components___Operators____x[this], s__Backdrop_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__Backdrop__get_point takes integer this returns framepointtype
            return s__Backdrop_Components___Operators____point[this]
        endfunction

        function s__Backdrop__set_relative takes integer this,framepointtype newPoint returns nothing
            set s__Backdrop_Components___Operators____relative[this]=newPoint

            call BlzFrameClearAllPoints((s__Backdrop_Components___Operators____frame[(this)])) // INLINED!!

            if s__Backdrop_parent[this] == Components___CONSOLE or s__Backdrop_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Backdrop_Components___Operators____frame[(this)]), s__Backdrop_Components___Operators____point[this], s__Backdrop_Components___Operators____x[this], s__Backdrop_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__Backdrop_Components___Operators____frame[(this)]), s__Backdrop_Components___Operators____point[this], s__Backdrop_parent[this], s__Backdrop_Components___Operators____relative[this], s__Backdrop_Components___Operators____x[this], s__Backdrop_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__Backdrop__get_relative takes integer this returns framepointtype
            return s__Backdrop_Components___Operators____relative[this]
        endfunction

        function s__Backdrop__set_alpha takes integer this,integer newAlpha returns nothing
            set s__Backdrop_Components___Operators____alpha[this]=newAlpha

            call BlzFrameSetAlpha((s__Backdrop_Components___Operators____frame[(this)]), newAlpha) // INLINED!!
        endfunction

        function s__Backdrop__get_alpha takes integer this returns integer
            return s__Backdrop_Components___Operators____alpha[this]
        endfunction

        function s__Backdrop__set_scale takes integer this,real newScale returns nothing
            set s__Backdrop_Components___Operators____scale[this]=newScale
            call BlzFrameSetScale((s__Backdrop_Components___Operators____frame[(this)]), newScale) // INLINED!!
        endfunction

        function s__Backdrop__get_scale takes integer this returns real
            return s__Backdrop_Components___Operators____scale[this]
        endfunction

        function s__Backdrop__set_width takes integer this,real newWidth returns nothing
            set s__Backdrop_Components___Operators____width[this]=newWidth

            call BlzFrameSetSize((s__Backdrop_Components___Operators____frame[(this)]), newWidth, s__Backdrop_Components___Operators____height[this]) // INLINED!!
        endfunction

        function s__Backdrop__get_width takes integer this returns real
            return s__Backdrop_Components___Operators____width[this]
        endfunction

        function s__Backdrop__set_height takes integer this,real newHeight returns nothing
            set s__Backdrop_Components___Operators____height[this]=newHeight

            call BlzFrameSetSize((s__Backdrop_Components___Operators____frame[(this)]), s__Backdrop_Components___Operators____width[this], newHeight) // INLINED!!
        endfunction

        function s__Backdrop__get_height takes integer this returns real
            return s__Backdrop_Components___Operators____height[this]
        endfunction

        function s__Backdrop__set_enabled takes integer this,boolean flag returns nothing
            set s__Backdrop_Components___Operators____enabled[this]=flag

            call BlzFrameSetEnable((s__Backdrop_Components___Operators____frame[(this)]), flag) // INLINED!!
        endfunction

        function s__Backdrop__get_enabled takes integer this returns boolean
            return s__Backdrop_Components___Operators____enabled[this]
        endfunction

        function s__Backdrop__set_visible takes integer this,boolean visibility returns nothing
            set s__Backdrop_Components___Operators____visible[this]=visibility
            call BlzFrameSetVisible((s__Backdrop_Components___Operators____frame[(this)]), visibility) // INLINED!!
        endfunction

        function s__Backdrop__get_visible takes integer this returns boolean
            return s__Backdrop_Components___Operators____visible[this]
        endfunction

        function s__Backdrop__set_frame takes integer this,framehandle newFrame returns nothing
            set s__Backdrop_Components___Operators____frame[this]=newFrame
        endfunction

        function s__Backdrop__get_frame takes integer this returns framehandle
            return s__Backdrop_Components___Operators____frame[this]
        endfunction

        function s__Backdrop__set_set takes integer this,framehandle target returns nothing
            call BlzFrameSetAllPoints((s__Backdrop_Components___Operators____frame[(this)]), target) // INLINED!!
        endfunction

        function s__Backdrop_setPoint takes integer this,framepointtype point,framepointtype relative,real x,real y returns nothing
            set s__Backdrop_Components___Operators____x[this]=x
            set s__Backdrop_Components___Operators____y[this]=y
            set s__Backdrop_Components___Operators____point[this]=point
            set s__Backdrop_Components___Operators____relative[this]=relative

            call BlzFrameClearAllPoints((s__Backdrop_Components___Operators____frame[(this)])) // INLINED!!

            if s__Backdrop_parent[this] == Components___CONSOLE or s__Backdrop_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Backdrop_Components___Operators____frame[(this)]), point, x, y) // INLINED!!
            else
                call BlzFrameSetPoint((s__Backdrop_Components___Operators____frame[(this)]), point, s__Backdrop_parent[this], relative, x, y) // INLINED!!
            endif
        endfunction

        function s__Backdrop_Components___Operators___onInit takes nothing returns nothing
            set Components___CONSOLE=BlzGetFrameByName("ConsoleUIBackdrop", 0)
            set Components___WORLD=BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0)

            call BlzLoadTOCFile("Components.toc")
            call TimerStart(Components___DOUBLE, 9999999999, false, null)
        endfunction

        function s__Backdrop__set_texture takes integer this,string path returns nothing
            set s__Backdrop_path[this]=path

            if path != "" and path != null then
                call BlzFrameSetTexture((s__Backdrop_Components___Operators____frame[(this)]), path, 0, true) // INLINED!!
                call BlzFrameSetVisible((s__Backdrop_Components___Operators____frame[(this)]), true) // INLINED!!
            else
                call BlzFrameSetVisible((s__Backdrop_Components___Operators____frame[(this)]), false) // INLINED!!
            endif
        endfunction

        function s__Backdrop__get_texture takes integer this returns string
            return s__Backdrop_path[this]
        endfunction

        function s__Backdrop_destroy takes integer this returns nothing
            call BlzDestroyFrame((s__Backdrop_Components___Operators____frame[(this)])) // INLINED!!

            set s__Backdrop_Components___Operators____frame[(this)]=(null) // INLINED!!
            set s__Backdrop_parent[this]=null
        endfunction

        function s__Backdrop_create takes real x,real y,real width,real height,framehandle parent,string texture returns integer
            local integer this= s__Backdrop__allocate()

            if parent == null then
                set parent=Components___CONSOLE
            endif

            call s__Backdrop__set_x(this,x)
            call s__Backdrop__set_y(this,y)
            call s__Backdrop__set_width(this,width)
            call s__Backdrop__set_height(this,height)
            set s__Backdrop_parent[this]=parent
            call s__Backdrop__set_texture(this,texture)
            set s__Backdrop_Components___Operators____frame[(this)]=(BlzCreateFrameByType("BACKDROP", "", parent, "", 0)) // INLINED!!

            if parent == Components___CONSOLE or parent == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Backdrop_Components___Operators____frame[(this)]), (s__Backdrop_Components___Operators____point[(this)]), x, y) // INLINED!!
            else
                call BlzFrameSetPoint((s__Backdrop_Components___Operators____frame[(this)]), (s__Backdrop_Components___Operators____point[(this)]), parent, (s__Backdrop_Components___Operators____relative[(this)]), x, y) // INLINED!!
            endif

            call BlzFrameSetSize((s__Backdrop_Components___Operators____frame[(this)]), width, height) // INLINED!!
            call BlzFrameSetTexture((s__Backdrop_Components___Operators____frame[(this)]), texture, 0, true) // INLINED!!

            return this
        endfunction


//Implemented from module Components___Operators:


        function s__Sprite__set_x takes integer this,real newX returns nothing
            set s__Sprite_Components___Operators____x[this]=newX

            if s__Sprite_parent[this] == Components___CONSOLE or s__Sprite_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Sprite_Components___Operators____frame[(this)]), s__Sprite_Components___Operators____point[this], s__Sprite_Components___Operators____x[this], s__Sprite_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__Sprite_Components___Operators____frame[(this)]), s__Sprite_Components___Operators____point[this], s__Sprite_parent[this], s__Sprite_Components___Operators____relative[this], s__Sprite_Components___Operators____x[this], s__Sprite_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__Sprite__get_x takes integer this returns real
            return s__Sprite_Components___Operators____x[this]
        endfunction

        function s__Sprite__set_y takes integer this,real newY returns nothing
            set s__Sprite_Components___Operators____y[this]=newY

            if s__Sprite_parent[this] == Components___CONSOLE or s__Sprite_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Sprite_Components___Operators____frame[(this)]), s__Sprite_Components___Operators____point[this], s__Sprite_Components___Operators____x[this], s__Sprite_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__Sprite_Components___Operators____frame[(this)]), s__Sprite_Components___Operators____point[this], s__Sprite_parent[this], s__Sprite_Components___Operators____relative[this], s__Sprite_Components___Operators____x[this], s__Sprite_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__Sprite__get_y takes integer this returns real
            return s__Sprite_Components___Operators____y[this]
        endfunction

        function s__Sprite__set_point takes integer this,framepointtype newPoint returns nothing
            set s__Sprite_Components___Operators____point[this]=newPoint

            call BlzFrameClearAllPoints((s__Sprite_Components___Operators____frame[(this)])) // INLINED!!

            if s__Sprite_parent[this] == Components___CONSOLE or s__Sprite_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Sprite_Components___Operators____frame[(this)]), s__Sprite_Components___Operators____point[this], s__Sprite_Components___Operators____x[this], s__Sprite_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__Sprite_Components___Operators____frame[(this)]), s__Sprite_Components___Operators____point[this], s__Sprite_parent[this], s__Sprite_Components___Operators____relative[this], s__Sprite_Components___Operators____x[this], s__Sprite_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__Sprite__get_point takes integer this returns framepointtype
            return s__Sprite_Components___Operators____point[this]
        endfunction

        function s__Sprite__set_relative takes integer this,framepointtype newPoint returns nothing
            set s__Sprite_Components___Operators____relative[this]=newPoint

            call BlzFrameClearAllPoints((s__Sprite_Components___Operators____frame[(this)])) // INLINED!!

            if s__Sprite_parent[this] == Components___CONSOLE or s__Sprite_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Sprite_Components___Operators____frame[(this)]), s__Sprite_Components___Operators____point[this], s__Sprite_Components___Operators____x[this], s__Sprite_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__Sprite_Components___Operators____frame[(this)]), s__Sprite_Components___Operators____point[this], s__Sprite_parent[this], s__Sprite_Components___Operators____relative[this], s__Sprite_Components___Operators____x[this], s__Sprite_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__Sprite__get_relative takes integer this returns framepointtype
            return s__Sprite_Components___Operators____relative[this]
        endfunction

        function s__Sprite__set_alpha takes integer this,integer newAlpha returns nothing
            set s__Sprite_Components___Operators____alpha[this]=newAlpha

            call BlzFrameSetAlpha((s__Sprite_Components___Operators____frame[(this)]), newAlpha) // INLINED!!
        endfunction

        function s__Sprite__get_alpha takes integer this returns integer
            return s__Sprite_Components___Operators____alpha[this]
        endfunction

        function s__Sprite__set_scale takes integer this,real newScale returns nothing
            set s__Sprite_Components___Operators____scale[this]=newScale
            call BlzFrameSetScale((s__Sprite_Components___Operators____frame[(this)]), newScale) // INLINED!!
        endfunction

        function s__Sprite__get_scale takes integer this returns real
            return s__Sprite_Components___Operators____scale[this]
        endfunction

        function s__Sprite__set_width takes integer this,real newWidth returns nothing
            set s__Sprite_Components___Operators____width[this]=newWidth

            call BlzFrameSetSize((s__Sprite_Components___Operators____frame[(this)]), newWidth, s__Sprite_Components___Operators____height[this]) // INLINED!!
        endfunction

        function s__Sprite__get_width takes integer this returns real
            return s__Sprite_Components___Operators____width[this]
        endfunction

        function s__Sprite__set_height takes integer this,real newHeight returns nothing
            set s__Sprite_Components___Operators____height[this]=newHeight

            call BlzFrameSetSize((s__Sprite_Components___Operators____frame[(this)]), s__Sprite_Components___Operators____width[this], newHeight) // INLINED!!
        endfunction

        function s__Sprite__get_height takes integer this returns real
            return s__Sprite_Components___Operators____height[this]
        endfunction

        function s__Sprite__set_enabled takes integer this,boolean flag returns nothing
            set s__Sprite_Components___Operators____enabled[this]=flag

            call BlzFrameSetEnable((s__Sprite_Components___Operators____frame[(this)]), flag) // INLINED!!
        endfunction

        function s__Sprite__get_enabled takes integer this returns boolean
            return s__Sprite_Components___Operators____enabled[this]
        endfunction

        function s__Sprite__set_visible takes integer this,boolean visibility returns nothing
            set s__Sprite_Components___Operators____visible[this]=visibility
            call BlzFrameSetVisible((s__Sprite_Components___Operators____frame[(this)]), visibility) // INLINED!!
        endfunction

        function s__Sprite__get_visible takes integer this returns boolean
            return s__Sprite_Components___Operators____visible[this]
        endfunction

        function s__Sprite__set_frame takes integer this,framehandle newFrame returns nothing
            set s__Sprite_Components___Operators____frame[this]=newFrame
        endfunction

        function s__Sprite__get_frame takes integer this returns framehandle
            return s__Sprite_Components___Operators____frame[this]
        endfunction

        function s__Sprite__set_set takes integer this,framehandle target returns nothing
            call BlzFrameSetAllPoints((s__Sprite_Components___Operators____frame[(this)]), target) // INLINED!!
        endfunction

        function s__Sprite_setPoint takes integer this,framepointtype point,framepointtype relative,real x,real y returns nothing
            set s__Sprite_Components___Operators____x[this]=x
            set s__Sprite_Components___Operators____y[this]=y
            set s__Sprite_Components___Operators____point[this]=point
            set s__Sprite_Components___Operators____relative[this]=relative

            call BlzFrameClearAllPoints((s__Sprite_Components___Operators____frame[(this)])) // INLINED!!

            if s__Sprite_parent[this] == Components___CONSOLE or s__Sprite_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Sprite_Components___Operators____frame[(this)]), point, x, y) // INLINED!!
            else
                call BlzFrameSetPoint((s__Sprite_Components___Operators____frame[(this)]), point, s__Sprite_parent[this], relative, x, y) // INLINED!!
            endif
        endfunction

        function s__Sprite_Components___Operators___onInit takes nothing returns nothing
            set Components___CONSOLE=BlzGetFrameByName("ConsoleUIBackdrop", 0)
            set Components___WORLD=BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0)

            call BlzLoadTOCFile("Components.toc")
            call TimerStart(Components___DOUBLE, 9999999999, false, null)
        endfunction

        function s__Sprite__set_model takes integer this,string path returns nothing
            set s__Sprite_path[this]=path

            call BlzFrameSetModel((s__Sprite_Components___Operators____frame[(this)]), path, s__Sprite_index[this]) // INLINED!!
        endfunction

        function s__Sprite__get_model takes integer this returns string
            return s__Sprite_path[this]
        endfunction

        function s__Sprite__set_camera takes integer this,integer index returns nothing
            set s__Sprite_index[this]=index

            call BlzFrameSetModel((s__Sprite_Components___Operators____frame[(this)]), s__Sprite_path[this], index) // INLINED!!
        endfunction

        function s__Sprite__get_camera takes integer this returns integer
            return s__Sprite_index[this]
        endfunction

        function s__Sprite__set_animation takes integer this,integer i returns nothing
            set s__Sprite_animtype[this]=i

            call BlzFrameSetSpriteAnimate((s__Sprite_Components___Operators____frame[(this)]), i, 0) // INLINED!!
        endfunction

        function s__Sprite__get_animation takes integer this returns integer
            return s__Sprite_animtype[this]
        endfunction

        function s__Sprite_destroy takes integer this returns nothing
            call BlzDestroyFrame((s__Sprite_Components___Operators____frame[(this)])) // INLINED!!

            set s__Sprite_Components___Operators____frame[(this)]=(null) // INLINED!!
            set s__Sprite_parent[this]=null
        endfunction

        function s__Sprite_create takes real x,real y,real width,real height,framehandle parent,framepointtype point,framepointtype relative returns integer
            local integer this= s__Sprite__allocate()
            
            if parent == null then
                set parent=Components___CONSOLE
            endif
            
            call s__Sprite__set_x(this,x)
            call s__Sprite__set_y(this,y)
            call s__Sprite__set_point(this,point)
            call s__Sprite__set_relative(this,relative)
            call s__Sprite__set_width(this,width)
            call s__Sprite__set_height(this,height)
            set s__Sprite_parent[this]=parent
            set s__Sprite_Components___Operators____frame[(this)]=(BlzCreateFrameByType("SPRITE", "", parent, "", 0)) // INLINED!!

            if parent == Components___CONSOLE or parent == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Sprite_Components___Operators____frame[(this)]), point, x, y) // INLINED!!
            else
                call BlzFrameSetPoint((s__Sprite_Components___Operators____frame[(this)]), point, parent, relative, x, y) // INLINED!!
            endif

            call BlzFrameSetSize((s__Sprite_Components___Operators____frame[(this)]), width, height) // INLINED!!

            return this
        endfunction


//Implemented from module Components___Operators:


        function s__Text__set_x takes integer this,real newX returns nothing
            set s__Text_Components___Operators____x[this]=newX

            if s__Text_parent[this] == Components___CONSOLE or s__Text_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Text_Components___Operators____frame[(this)]), s__Text_Components___Operators____point[this], s__Text_Components___Operators____x[this], s__Text_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__Text_Components___Operators____frame[(this)]), s__Text_Components___Operators____point[this], s__Text_parent[this], s__Text_Components___Operators____relative[this], s__Text_Components___Operators____x[this], s__Text_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__Text__get_x takes integer this returns real
            return s__Text_Components___Operators____x[this]
        endfunction

        function s__Text__set_y takes integer this,real newY returns nothing
            set s__Text_Components___Operators____y[this]=newY

            if s__Text_parent[this] == Components___CONSOLE or s__Text_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Text_Components___Operators____frame[(this)]), s__Text_Components___Operators____point[this], s__Text_Components___Operators____x[this], s__Text_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__Text_Components___Operators____frame[(this)]), s__Text_Components___Operators____point[this], s__Text_parent[this], s__Text_Components___Operators____relative[this], s__Text_Components___Operators____x[this], s__Text_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__Text__get_y takes integer this returns real
            return s__Text_Components___Operators____y[this]
        endfunction

        function s__Text__set_point takes integer this,framepointtype newPoint returns nothing
            set s__Text_Components___Operators____point[this]=newPoint

            call BlzFrameClearAllPoints((s__Text_Components___Operators____frame[(this)])) // INLINED!!

            if s__Text_parent[this] == Components___CONSOLE or s__Text_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Text_Components___Operators____frame[(this)]), s__Text_Components___Operators____point[this], s__Text_Components___Operators____x[this], s__Text_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__Text_Components___Operators____frame[(this)]), s__Text_Components___Operators____point[this], s__Text_parent[this], s__Text_Components___Operators____relative[this], s__Text_Components___Operators____x[this], s__Text_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__Text__get_point takes integer this returns framepointtype
            return s__Text_Components___Operators____point[this]
        endfunction

        function s__Text__set_relative takes integer this,framepointtype newPoint returns nothing
            set s__Text_Components___Operators____relative[this]=newPoint

            call BlzFrameClearAllPoints((s__Text_Components___Operators____frame[(this)])) // INLINED!!

            if s__Text_parent[this] == Components___CONSOLE or s__Text_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Text_Components___Operators____frame[(this)]), s__Text_Components___Operators____point[this], s__Text_Components___Operators____x[this], s__Text_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__Text_Components___Operators____frame[(this)]), s__Text_Components___Operators____point[this], s__Text_parent[this], s__Text_Components___Operators____relative[this], s__Text_Components___Operators____x[this], s__Text_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__Text__get_relative takes integer this returns framepointtype
            return s__Text_Components___Operators____relative[this]
        endfunction

        function s__Text__set_alpha takes integer this,integer newAlpha returns nothing
            set s__Text_Components___Operators____alpha[this]=newAlpha

            call BlzFrameSetAlpha((s__Text_Components___Operators____frame[(this)]), newAlpha) // INLINED!!
        endfunction

        function s__Text__get_alpha takes integer this returns integer
            return s__Text_Components___Operators____alpha[this]
        endfunction

        function s__Text__set_scale takes integer this,real newScale returns nothing
            set s__Text_Components___Operators____scale[this]=newScale
            call BlzFrameSetScale((s__Text_Components___Operators____frame[(this)]), newScale) // INLINED!!
        endfunction

        function s__Text__get_scale takes integer this returns real
            return s__Text_Components___Operators____scale[this]
        endfunction

        function s__Text__set_width takes integer this,real newWidth returns nothing
            set s__Text_Components___Operators____width[this]=newWidth

            call BlzFrameSetSize((s__Text_Components___Operators____frame[(this)]), newWidth, s__Text_Components___Operators____height[this]) // INLINED!!
        endfunction

        function s__Text__get_width takes integer this returns real
            return s__Text_Components___Operators____width[this]
        endfunction

        function s__Text__set_height takes integer this,real newHeight returns nothing
            set s__Text_Components___Operators____height[this]=newHeight

            call BlzFrameSetSize((s__Text_Components___Operators____frame[(this)]), s__Text_Components___Operators____width[this], newHeight) // INLINED!!
        endfunction

        function s__Text__get_height takes integer this returns real
            return s__Text_Components___Operators____height[this]
        endfunction

        function s__Text__set_enabled takes integer this,boolean flag returns nothing
            set s__Text_Components___Operators____enabled[this]=flag

            call BlzFrameSetEnable((s__Text_Components___Operators____frame[(this)]), flag) // INLINED!!
        endfunction

        function s__Text__get_enabled takes integer this returns boolean
            return s__Text_Components___Operators____enabled[this]
        endfunction

        function s__Text__set_visible takes integer this,boolean visibility returns nothing
            set s__Text_Components___Operators____visible[this]=visibility
            call BlzFrameSetVisible((s__Text_Components___Operators____frame[(this)]), visibility) // INLINED!!
        endfunction

        function s__Text__get_visible takes integer this returns boolean
            return s__Text_Components___Operators____visible[this]
        endfunction

        function s__Text__set_frame takes integer this,framehandle newFrame returns nothing
            set s__Text_Components___Operators____frame[this]=newFrame
        endfunction

        function s__Text__get_frame takes integer this returns framehandle
            return s__Text_Components___Operators____frame[this]
        endfunction

        function s__Text__set_set takes integer this,framehandle target returns nothing
            call BlzFrameSetAllPoints((s__Text_Components___Operators____frame[(this)]), target) // INLINED!!
        endfunction

        function s__Text_setPoint takes integer this,framepointtype point,framepointtype relative,real x,real y returns nothing
            set s__Text_Components___Operators____x[this]=x
            set s__Text_Components___Operators____y[this]=y
            set s__Text_Components___Operators____point[this]=point
            set s__Text_Components___Operators____relative[this]=relative

            call BlzFrameClearAllPoints((s__Text_Components___Operators____frame[(this)])) // INLINED!!

            if s__Text_parent[this] == Components___CONSOLE or s__Text_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Text_Components___Operators____frame[(this)]), point, x, y) // INLINED!!
            else
                call BlzFrameSetPoint((s__Text_Components___Operators____frame[(this)]), point, s__Text_parent[this], relative, x, y) // INLINED!!
            endif
        endfunction

        function s__Text_Components___Operators___onInit takes nothing returns nothing
            set Components___CONSOLE=BlzGetFrameByName("ConsoleUIBackdrop", 0)
            set Components___WORLD=BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0)

            call BlzLoadTOCFile("Components.toc")
            call TimerStart(Components___DOUBLE, 9999999999, false, null)
        endfunction

        function s__Text__set_text takes integer this,string value returns nothing
            set s__Text_value[this]=value

            call BlzFrameSetText((s__Text_Components___Operators____frame[(this)]), value) // INLINED!!
        endfunction

        function s__Text__get_text takes integer this returns string
            return s__Text_value[this]
        endfunction

        function s__Text__set_vertical takes integer this,textaligntype alignment returns nothing
            set s__Text_vert[this]=alignment
            call BlzFrameSetTextAlignment((s__Text_Components___Operators____frame[(this)]), alignment, s__Text_horz[this]) // INLINED!!
        endfunction

        function s__Text__get_vertical takes integer this returns textaligntype
            return s__Text_vert[this]
        endfunction

        function s__Text__set_horizontal takes integer this,textaligntype alignment returns nothing
            set s__Text_horz[this]=alignment
            call BlzFrameSetTextAlignment((s__Text_Components___Operators____frame[(this)]), s__Text_vert[this], alignment) // INLINED!!
        endfunction

        function s__Text__get_horizontal takes integer this returns textaligntype
            return s__Text_horz[this]
        endfunction

        function s__Text_destroy takes integer this returns nothing
            call BlzDestroyFrame((s__Text_Components___Operators____frame[(this)])) // INLINED!!

            set s__Text_Components___Operators____frame[(this)]=(null) // INLINED!!
            set s__Text_parent[this]=null
        endfunction

        function s__Text_create takes real x,real y,real width,real height,real scale,boolean enabled,framehandle parent,string value,textaligntype vert,textaligntype horz returns integer
            local integer this= s__Text__allocate()

            if parent == null then
                set parent=Components___CONSOLE
            endif

            if vert == null then
                set vert=TEXT_JUSTIFY_CENTER
            endif

            if horz == null then
                set horz=TEXT_JUSTIFY_CENTER
            endif

            call s__Text__set_x(this,x)
            call s__Text__set_y(this,y)
            call s__Text__set_text(this,value)
            call s__Text__set_scale(this,scale)
            call s__Text__set_width(this,width)
            call s__Text__set_height(this,height)
            call s__Text__set_enabled(this,enabled)
            set s__Text_parent[this]=parent
            call s__Text__set_vertical(this,vert)
            call s__Text__set_horizontal(this,horz)
            set s__Text_Components___Operators____frame[(this)]=(BlzCreateFrameByType("TEXT", "", parent, "", 0)) // INLINED!!

            if parent == Components___CONSOLE or parent == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Text_Components___Operators____frame[(this)]), (s__Text_Components___Operators____point[(this)]), x, y) // INLINED!!
            else
                call BlzFrameSetPoint((s__Text_Components___Operators____frame[(this)]), (s__Text_Components___Operators____point[(this)]), parent, (s__Text_Components___Operators____relative[(this)]), x, y) // INLINED!!
            endif

            call BlzFrameSetSize((s__Text_Components___Operators____frame[(this)]), width, height) // INLINED!!
            call BlzFrameSetText((s__Text_Components___Operators____frame[(this)]), value) // INLINED!!
            call BlzFrameSetEnable((s__Text_Components___Operators____frame[(this)]), enabled) // INLINED!!
            call BlzFrameSetScale((s__Text_Components___Operators____frame[(this)]), scale) // INLINED!!
            call BlzFrameSetTextAlignment((s__Text_Components___Operators____frame[(this)]), vert, horz) // INLINED!!

            return this
        endfunction


//Implemented from module Components___Operators:


        function s__TextArea__set_x takes integer this,real newX returns nothing
            set s__TextArea_Components___Operators____x[this]=newX

            if s__TextArea_parent[this] == Components___CONSOLE or s__TextArea_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__TextArea_Components___Operators____frame[(this)]), s__TextArea_Components___Operators____point[this], s__TextArea_Components___Operators____x[this], s__TextArea_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__TextArea_Components___Operators____frame[(this)]), s__TextArea_Components___Operators____point[this], s__TextArea_parent[this], s__TextArea_Components___Operators____relative[this], s__TextArea_Components___Operators____x[this], s__TextArea_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__TextArea__get_x takes integer this returns real
            return s__TextArea_Components___Operators____x[this]
        endfunction

        function s__TextArea__set_y takes integer this,real newY returns nothing
            set s__TextArea_Components___Operators____y[this]=newY

            if s__TextArea_parent[this] == Components___CONSOLE or s__TextArea_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__TextArea_Components___Operators____frame[(this)]), s__TextArea_Components___Operators____point[this], s__TextArea_Components___Operators____x[this], s__TextArea_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__TextArea_Components___Operators____frame[(this)]), s__TextArea_Components___Operators____point[this], s__TextArea_parent[this], s__TextArea_Components___Operators____relative[this], s__TextArea_Components___Operators____x[this], s__TextArea_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__TextArea__get_y takes integer this returns real
            return s__TextArea_Components___Operators____y[this]
        endfunction

        function s__TextArea__set_point takes integer this,framepointtype newPoint returns nothing
            set s__TextArea_Components___Operators____point[this]=newPoint

            call BlzFrameClearAllPoints((s__TextArea_Components___Operators____frame[(this)])) // INLINED!!

            if s__TextArea_parent[this] == Components___CONSOLE or s__TextArea_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__TextArea_Components___Operators____frame[(this)]), s__TextArea_Components___Operators____point[this], s__TextArea_Components___Operators____x[this], s__TextArea_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__TextArea_Components___Operators____frame[(this)]), s__TextArea_Components___Operators____point[this], s__TextArea_parent[this], s__TextArea_Components___Operators____relative[this], s__TextArea_Components___Operators____x[this], s__TextArea_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__TextArea__get_point takes integer this returns framepointtype
            return s__TextArea_Components___Operators____point[this]
        endfunction

        function s__TextArea__set_relative takes integer this,framepointtype newPoint returns nothing
            set s__TextArea_Components___Operators____relative[this]=newPoint

            call BlzFrameClearAllPoints((s__TextArea_Components___Operators____frame[(this)])) // INLINED!!

            if s__TextArea_parent[this] == Components___CONSOLE or s__TextArea_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__TextArea_Components___Operators____frame[(this)]), s__TextArea_Components___Operators____point[this], s__TextArea_Components___Operators____x[this], s__TextArea_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__TextArea_Components___Operators____frame[(this)]), s__TextArea_Components___Operators____point[this], s__TextArea_parent[this], s__TextArea_Components___Operators____relative[this], s__TextArea_Components___Operators____x[this], s__TextArea_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__TextArea__get_relative takes integer this returns framepointtype
            return s__TextArea_Components___Operators____relative[this]
        endfunction

        function s__TextArea__set_alpha takes integer this,integer newAlpha returns nothing
            set s__TextArea_Components___Operators____alpha[this]=newAlpha

            call BlzFrameSetAlpha((s__TextArea_Components___Operators____frame[(this)]), newAlpha) // INLINED!!
        endfunction

        function s__TextArea__get_alpha takes integer this returns integer
            return s__TextArea_Components___Operators____alpha[this]
        endfunction

        function s__TextArea__set_scale takes integer this,real newScale returns nothing
            set s__TextArea_Components___Operators____scale[this]=newScale
            call BlzFrameSetScale((s__TextArea_Components___Operators____frame[(this)]), newScale) // INLINED!!
        endfunction

        function s__TextArea__get_scale takes integer this returns real
            return s__TextArea_Components___Operators____scale[this]
        endfunction

        function s__TextArea__set_width takes integer this,real newWidth returns nothing
            set s__TextArea_Components___Operators____width[this]=newWidth

            call BlzFrameSetSize((s__TextArea_Components___Operators____frame[(this)]), newWidth, s__TextArea_Components___Operators____height[this]) // INLINED!!
        endfunction

        function s__TextArea__get_width takes integer this returns real
            return s__TextArea_Components___Operators____width[this]
        endfunction

        function s__TextArea__set_height takes integer this,real newHeight returns nothing
            set s__TextArea_Components___Operators____height[this]=newHeight

            call BlzFrameSetSize((s__TextArea_Components___Operators____frame[(this)]), s__TextArea_Components___Operators____width[this], newHeight) // INLINED!!
        endfunction

        function s__TextArea__get_height takes integer this returns real
            return s__TextArea_Components___Operators____height[this]
        endfunction

        function s__TextArea__set_enabled takes integer this,boolean flag returns nothing
            set s__TextArea_Components___Operators____enabled[this]=flag

            call BlzFrameSetEnable((s__TextArea_Components___Operators____frame[(this)]), flag) // INLINED!!
        endfunction

        function s__TextArea__get_enabled takes integer this returns boolean
            return s__TextArea_Components___Operators____enabled[this]
        endfunction

        function s__TextArea__set_visible takes integer this,boolean visibility returns nothing
            set s__TextArea_Components___Operators____visible[this]=visibility
            call BlzFrameSetVisible((s__TextArea_Components___Operators____frame[(this)]), visibility) // INLINED!!
        endfunction

        function s__TextArea__get_visible takes integer this returns boolean
            return s__TextArea_Components___Operators____visible[this]
        endfunction

        function s__TextArea__set_frame takes integer this,framehandle newFrame returns nothing
            set s__TextArea_Components___Operators____frame[this]=newFrame
        endfunction

        function s__TextArea__get_frame takes integer this returns framehandle
            return s__TextArea_Components___Operators____frame[this]
        endfunction

        function s__TextArea__set_set takes integer this,framehandle target returns nothing
            call BlzFrameSetAllPoints((s__TextArea_Components___Operators____frame[(this)]), target) // INLINED!!
        endfunction

        function s__TextArea_setPoint takes integer this,framepointtype point,framepointtype relative,real x,real y returns nothing
            set s__TextArea_Components___Operators____x[this]=x
            set s__TextArea_Components___Operators____y[this]=y
            set s__TextArea_Components___Operators____point[this]=point
            set s__TextArea_Components___Operators____relative[this]=relative

            call BlzFrameClearAllPoints((s__TextArea_Components___Operators____frame[(this)])) // INLINED!!

            if s__TextArea_parent[this] == Components___CONSOLE or s__TextArea_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__TextArea_Components___Operators____frame[(this)]), point, x, y) // INLINED!!
            else
                call BlzFrameSetPoint((s__TextArea_Components___Operators____frame[(this)]), point, s__TextArea_parent[this], relative, x, y) // INLINED!!
            endif
        endfunction

        function s__TextArea_Components___Operators___onInit takes nothing returns nothing
            set Components___CONSOLE=BlzGetFrameByName("ConsoleUIBackdrop", 0)
            set Components___WORLD=BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0)

            call BlzLoadTOCFile("Components.toc")
            call TimerStart(Components___DOUBLE, 9999999999, false, null)
        endfunction

        function s__TextArea__set_text takes integer this,string value returns nothing
            set s__TextArea_value[this]=value

            call BlzFrameSetText((s__TextArea_Components___Operators____frame[(this)]), value) // INLINED!!
        endfunction

        function s__TextArea__get_text takes integer this returns string
            return s__TextArea_value[this]
        endfunction

        function s__TextArea_destroy takes integer this returns nothing
            call BlzDestroyFrame((s__TextArea_Components___Operators____frame[(this)])) // INLINED!!

            set s__TextArea_Components___Operators____frame[(this)]=(null) // INLINED!!
            set s__TextArea_parent[this]=null
        endfunction

        function s__TextArea_create takes real x,real y,real width,real height,framehandle parent,string template returns integer
            local integer this= s__TextArea__allocate()

            if parent == null then
                set parent=Components___CONSOLE
            endif

            if template == "" or template == null then
                set template="DescriptionArea"
            endif

            call s__TextArea__set_x(this,x)
            call s__TextArea__set_y(this,y)
            call s__TextArea__set_width(this,width)
            call s__TextArea__set_height(this,height)
            set s__TextArea_parent[this]=parent
            set s__TextArea_Components___Operators____frame[(this)]=(BlzCreateFrame(template, parent, 0, 0)) // INLINED!!

            if parent == Components___CONSOLE or parent == Components___WORLD then
                call BlzFrameSetAbsPoint((s__TextArea_Components___Operators____frame[(this)]), (s__TextArea_Components___Operators____point[(this)]), x, y) // INLINED!!
            else
                call BlzFrameSetPoint((s__TextArea_Components___Operators____frame[(this)]), (s__TextArea_Components___Operators____point[(this)]), parent, (s__TextArea_Components___Operators____relative[(this)]), x, y) // INLINED!!
            endif

            call BlzFrameSetSize((s__TextArea_Components___Operators____frame[(this)]), width, height) // INLINED!!

            return this
        endfunction


//Implemented from module Components___Operators:


        function s__StatusBar__set_x takes integer this,real newX returns nothing
            set s__StatusBar_Components___Operators____x[this]=newX

            if s__StatusBar_parent[this] == Components___CONSOLE or s__StatusBar_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__StatusBar_Components___Operators____frame[(this)]), s__StatusBar_Components___Operators____point[this], s__StatusBar_Components___Operators____x[this], s__StatusBar_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__StatusBar_Components___Operators____frame[(this)]), s__StatusBar_Components___Operators____point[this], s__StatusBar_parent[this], s__StatusBar_Components___Operators____relative[this], s__StatusBar_Components___Operators____x[this], s__StatusBar_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__StatusBar__get_x takes integer this returns real
            return s__StatusBar_Components___Operators____x[this]
        endfunction

        function s__StatusBar__set_y takes integer this,real newY returns nothing
            set s__StatusBar_Components___Operators____y[this]=newY

            if s__StatusBar_parent[this] == Components___CONSOLE or s__StatusBar_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__StatusBar_Components___Operators____frame[(this)]), s__StatusBar_Components___Operators____point[this], s__StatusBar_Components___Operators____x[this], s__StatusBar_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__StatusBar_Components___Operators____frame[(this)]), s__StatusBar_Components___Operators____point[this], s__StatusBar_parent[this], s__StatusBar_Components___Operators____relative[this], s__StatusBar_Components___Operators____x[this], s__StatusBar_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__StatusBar__get_y takes integer this returns real
            return s__StatusBar_Components___Operators____y[this]
        endfunction

        function s__StatusBar__set_point takes integer this,framepointtype newPoint returns nothing
            set s__StatusBar_Components___Operators____point[this]=newPoint

            call BlzFrameClearAllPoints((s__StatusBar_Components___Operators____frame[(this)])) // INLINED!!

            if s__StatusBar_parent[this] == Components___CONSOLE or s__StatusBar_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__StatusBar_Components___Operators____frame[(this)]), s__StatusBar_Components___Operators____point[this], s__StatusBar_Components___Operators____x[this], s__StatusBar_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__StatusBar_Components___Operators____frame[(this)]), s__StatusBar_Components___Operators____point[this], s__StatusBar_parent[this], s__StatusBar_Components___Operators____relative[this], s__StatusBar_Components___Operators____x[this], s__StatusBar_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__StatusBar__get_point takes integer this returns framepointtype
            return s__StatusBar_Components___Operators____point[this]
        endfunction

        function s__StatusBar__set_relative takes integer this,framepointtype newPoint returns nothing
            set s__StatusBar_Components___Operators____relative[this]=newPoint

            call BlzFrameClearAllPoints((s__StatusBar_Components___Operators____frame[(this)])) // INLINED!!

            if s__StatusBar_parent[this] == Components___CONSOLE or s__StatusBar_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__StatusBar_Components___Operators____frame[(this)]), s__StatusBar_Components___Operators____point[this], s__StatusBar_Components___Operators____x[this], s__StatusBar_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__StatusBar_Components___Operators____frame[(this)]), s__StatusBar_Components___Operators____point[this], s__StatusBar_parent[this], s__StatusBar_Components___Operators____relative[this], s__StatusBar_Components___Operators____x[this], s__StatusBar_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__StatusBar__get_relative takes integer this returns framepointtype
            return s__StatusBar_Components___Operators____relative[this]
        endfunction

        function s__StatusBar__set_alpha takes integer this,integer newAlpha returns nothing
            set s__StatusBar_Components___Operators____alpha[this]=newAlpha

            call BlzFrameSetAlpha((s__StatusBar_Components___Operators____frame[(this)]), newAlpha) // INLINED!!
        endfunction

        function s__StatusBar__get_alpha takes integer this returns integer
            return s__StatusBar_Components___Operators____alpha[this]
        endfunction

        function s__StatusBar__set_scale takes integer this,real newScale returns nothing
            set s__StatusBar_Components___Operators____scale[this]=newScale
            call BlzFrameSetScale((s__StatusBar_Components___Operators____frame[(this)]), newScale) // INLINED!!
        endfunction

        function s__StatusBar__get_scale takes integer this returns real
            return s__StatusBar_Components___Operators____scale[this]
        endfunction

        function s__StatusBar__set_width takes integer this,real newWidth returns nothing
            set s__StatusBar_Components___Operators____width[this]=newWidth

            call BlzFrameSetSize((s__StatusBar_Components___Operators____frame[(this)]), newWidth, s__StatusBar_Components___Operators____height[this]) // INLINED!!
        endfunction

        function s__StatusBar__get_width takes integer this returns real
            return s__StatusBar_Components___Operators____width[this]
        endfunction

        function s__StatusBar__set_height takes integer this,real newHeight returns nothing
            set s__StatusBar_Components___Operators____height[this]=newHeight

            call BlzFrameSetSize((s__StatusBar_Components___Operators____frame[(this)]), s__StatusBar_Components___Operators____width[this], newHeight) // INLINED!!
        endfunction

        function s__StatusBar__get_height takes integer this returns real
            return s__StatusBar_Components___Operators____height[this]
        endfunction

        function s__StatusBar__set_enabled takes integer this,boolean flag returns nothing
            set s__StatusBar_Components___Operators____enabled[this]=flag

            call BlzFrameSetEnable((s__StatusBar_Components___Operators____frame[(this)]), flag) // INLINED!!
        endfunction

        function s__StatusBar__get_enabled takes integer this returns boolean
            return s__StatusBar_Components___Operators____enabled[this]
        endfunction

        function s__StatusBar__set_visible takes integer this,boolean visibility returns nothing
            set s__StatusBar_Components___Operators____visible[this]=visibility
            call BlzFrameSetVisible((s__StatusBar_Components___Operators____frame[(this)]), visibility) // INLINED!!
        endfunction

        function s__StatusBar__get_visible takes integer this returns boolean
            return s__StatusBar_Components___Operators____visible[this]
        endfunction

        function s__StatusBar__set_frame takes integer this,framehandle newFrame returns nothing
            set s__StatusBar_Components___Operators____frame[this]=newFrame
        endfunction

        function s__StatusBar__get_frame takes integer this returns framehandle
            return s__StatusBar_Components___Operators____frame[this]
        endfunction

        function s__StatusBar__set_set takes integer this,framehandle target returns nothing
            call BlzFrameSetAllPoints((s__StatusBar_Components___Operators____frame[(this)]), target) // INLINED!!
        endfunction

        function s__StatusBar_setPoint takes integer this,framepointtype point,framepointtype relative,real x,real y returns nothing
            set s__StatusBar_Components___Operators____x[this]=x
            set s__StatusBar_Components___Operators____y[this]=y
            set s__StatusBar_Components___Operators____point[this]=point
            set s__StatusBar_Components___Operators____relative[this]=relative

            call BlzFrameClearAllPoints((s__StatusBar_Components___Operators____frame[(this)])) // INLINED!!

            if s__StatusBar_parent[this] == Components___CONSOLE or s__StatusBar_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__StatusBar_Components___Operators____frame[(this)]), point, x, y) // INLINED!!
            else
                call BlzFrameSetPoint((s__StatusBar_Components___Operators____frame[(this)]), point, s__StatusBar_parent[this], relative, x, y) // INLINED!!
            endif
        endfunction

        function s__StatusBar_Components___Operators___onInit takes nothing returns nothing
            set Components___CONSOLE=BlzGetFrameByName("ConsoleUIBackdrop", 0)
            set Components___WORLD=BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0)

            call BlzLoadTOCFile("Components.toc")
            call TimerStart(Components___DOUBLE, 9999999999, false, null)
        endfunction

        function s__StatusBar__set_value takes integer this,real val returns nothing
            call BlzFrameSetValue((s__StatusBar_Components___Operators____frame[(this)]), val) // INLINED!!
        endfunction

        function s__StatusBar__get_value takes integer this returns real
            return BlzFrameGetValue((s__StatusBar_Components___Operators____frame[(this)])) // INLINED!!
        endfunction

        function s__StatusBar__set_texture takes integer this,string path returns nothing
            set s__StatusBar_path[this]=path

            if path != "" and path != null then
                call BlzFrameSetTexture((s__StatusBar_Components___Operators____frame[(this)]), path, 0, true) // INLINED!!
                call BlzFrameSetVisible((s__StatusBar_Components___Operators____frame[(this)]), true) // INLINED!!
            else
                call BlzFrameSetVisible((s__StatusBar_Components___Operators____frame[(this)]), false) // INLINED!!
            endif
        endfunction

        function s__StatusBar__get_texture takes integer this returns string
            return s__StatusBar_path[this]
        endfunction

        function s__StatusBar_destroy takes integer this returns nothing
            call BlzDestroyFrame((s__StatusBar_Components___Operators____frame[(this)])) // INLINED!!

            set s__StatusBar_Components___Operators____frame[(this)]=(null) // INLINED!!
            set s__StatusBar_parent[this]=null
        endfunction

        function s__StatusBar_create takes real x,real y,real width,real height,framehandle parent,string texture returns integer
            local integer this= s__StatusBar__allocate()

            if parent == null then
                set parent=Components___CONSOLE
            endif

            call s__StatusBar__set_x(this,x)
            call s__StatusBar__set_y(this,y)
            call s__StatusBar__set_width(this,width)
            call s__StatusBar__set_height(this,height)
            set s__StatusBar_parent[this]=parent
            call s__StatusBar__set_texture(this,texture)
            set s__StatusBar_Components___Operators____frame[(this)]=(BlzCreateFrameByType("SIMPLESTATUSBAR", "", parent, "", 0)) // INLINED!!

            if parent == Components___CONSOLE or parent == Components___WORLD then
                call BlzFrameSetAbsPoint((s__StatusBar_Components___Operators____frame[(this)]), (s__StatusBar_Components___Operators____point[(this)]), x, y) // INLINED!!
            else
                call BlzFrameSetPoint((s__StatusBar_Components___Operators____frame[(this)]), (s__StatusBar_Components___Operators____point[(this)]), parent, (s__StatusBar_Components___Operators____relative[(this)]), x, y) // INLINED!!
            endif

            call BlzFrameSetValue((s__StatusBar_Components___Operators____frame[(this)]), 0) // INLINED!!
            call BlzFrameSetSize((s__StatusBar_Components___Operators____frame[(this)]), width, height) // INLINED!!
            call BlzFrameSetTexture((s__StatusBar_Components___Operators____frame[(this)]), texture, 0, true) // INLINED!!

            return this
        endfunction



//Implemented from module Components___Operators:


        function s__Component__set_x takes integer this,real newX returns nothing
            set s__Component_Components___Operators____x[this]=newX

            if s__Component_parent[this] == Components___CONSOLE or s__Component_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Component_Components___Operators____frame[(this)]), s__Component_Components___Operators____point[this], s__Component_Components___Operators____x[this], s__Component_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__Component_Components___Operators____frame[(this)]), s__Component_Components___Operators____point[this], s__Component_parent[this], s__Component_Components___Operators____relative[this], s__Component_Components___Operators____x[this], s__Component_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__Component__get_x takes integer this returns real
            return s__Component_Components___Operators____x[this]
        endfunction

        function s__Component__set_y takes integer this,real newY returns nothing
            set s__Component_Components___Operators____y[this]=newY

            if s__Component_parent[this] == Components___CONSOLE or s__Component_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Component_Components___Operators____frame[(this)]), s__Component_Components___Operators____point[this], s__Component_Components___Operators____x[this], s__Component_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__Component_Components___Operators____frame[(this)]), s__Component_Components___Operators____point[this], s__Component_parent[this], s__Component_Components___Operators____relative[this], s__Component_Components___Operators____x[this], s__Component_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__Component__get_y takes integer this returns real
            return s__Component_Components___Operators____y[this]
        endfunction

        function s__Component__set_point takes integer this,framepointtype newPoint returns nothing
            set s__Component_Components___Operators____point[this]=newPoint

            call BlzFrameClearAllPoints((s__Component_Components___Operators____frame[(this)])) // INLINED!!

            if s__Component_parent[this] == Components___CONSOLE or s__Component_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Component_Components___Operators____frame[(this)]), s__Component_Components___Operators____point[this], s__Component_Components___Operators____x[this], s__Component_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__Component_Components___Operators____frame[(this)]), s__Component_Components___Operators____point[this], s__Component_parent[this], s__Component_Components___Operators____relative[this], s__Component_Components___Operators____x[this], s__Component_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__Component__get_point takes integer this returns framepointtype
            return s__Component_Components___Operators____point[this]
        endfunction

        function s__Component__set_relative takes integer this,framepointtype newPoint returns nothing
            set s__Component_Components___Operators____relative[this]=newPoint

            call BlzFrameClearAllPoints((s__Component_Components___Operators____frame[(this)])) // INLINED!!

            if s__Component_parent[this] == Components___CONSOLE or s__Component_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Component_Components___Operators____frame[(this)]), s__Component_Components___Operators____point[this], s__Component_Components___Operators____x[this], s__Component_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__Component_Components___Operators____frame[(this)]), s__Component_Components___Operators____point[this], s__Component_parent[this], s__Component_Components___Operators____relative[this], s__Component_Components___Operators____x[this], s__Component_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__Component__get_relative takes integer this returns framepointtype
            return s__Component_Components___Operators____relative[this]
        endfunction

        function s__Component__set_alpha takes integer this,integer newAlpha returns nothing
            set s__Component_Components___Operators____alpha[this]=newAlpha

            call BlzFrameSetAlpha((s__Component_Components___Operators____frame[(this)]), newAlpha) // INLINED!!
        endfunction

        function s__Component__get_alpha takes integer this returns integer
            return s__Component_Components___Operators____alpha[this]
        endfunction

        function s__Component__set_scale takes integer this,real newScale returns nothing
            set s__Component_Components___Operators____scale[this]=newScale
            call BlzFrameSetScale((s__Component_Components___Operators____frame[(this)]), newScale) // INLINED!!
        endfunction

        function s__Component__get_scale takes integer this returns real
            return s__Component_Components___Operators____scale[this]
        endfunction

        function s__Component__set_width takes integer this,real newWidth returns nothing
            set s__Component_Components___Operators____width[this]=newWidth

            call BlzFrameSetSize((s__Component_Components___Operators____frame[(this)]), newWidth, s__Component_Components___Operators____height[this]) // INLINED!!
        endfunction

        function s__Component__get_width takes integer this returns real
            return s__Component_Components___Operators____width[this]
        endfunction

        function s__Component__set_height takes integer this,real newHeight returns nothing
            set s__Component_Components___Operators____height[this]=newHeight

            call BlzFrameSetSize((s__Component_Components___Operators____frame[(this)]), s__Component_Components___Operators____width[this], newHeight) // INLINED!!
        endfunction

        function s__Component__get_height takes integer this returns real
            return s__Component_Components___Operators____height[this]
        endfunction

        function s__Component__set_enabled takes integer this,boolean flag returns nothing
            set s__Component_Components___Operators____enabled[this]=flag

            call BlzFrameSetEnable((s__Component_Components___Operators____frame[(this)]), flag) // INLINED!!
        endfunction

        function s__Component__get_enabled takes integer this returns boolean
            return s__Component_Components___Operators____enabled[this]
        endfunction

        function s__Component__set_visible takes integer this,boolean visibility returns nothing
            set s__Component_Components___Operators____visible[this]=visibility
            call BlzFrameSetVisible((s__Component_Components___Operators____frame[(this)]), visibility) // INLINED!!
        endfunction

        function s__Component__get_visible takes integer this returns boolean
            return s__Component_Components___Operators____visible[this]
        endfunction

        function s__Component__set_frame takes integer this,framehandle newFrame returns nothing
            set s__Component_Components___Operators____frame[this]=newFrame
        endfunction

        function s__Component__get_frame takes integer this returns framehandle
            return s__Component_Components___Operators____frame[this]
        endfunction

        function s__Component__set_set takes integer this,framehandle target returns nothing
            call BlzFrameSetAllPoints((s__Component_Components___Operators____frame[(this)]), target) // INLINED!!
        endfunction

        function s__Component_setPoint takes integer this,framepointtype point,framepointtype relative,real x,real y returns nothing
            set s__Component_Components___Operators____x[this]=x
            set s__Component_Components___Operators____y[this]=y
            set s__Component_Components___Operators____point[this]=point
            set s__Component_Components___Operators____relative[this]=relative

            call BlzFrameClearAllPoints((s__Component_Components___Operators____frame[(this)])) // INLINED!!

            if s__Component_parent[this] == Components___CONSOLE or s__Component_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Component_Components___Operators____frame[(this)]), point, x, y) // INLINED!!
            else
                call BlzFrameSetPoint((s__Component_Components___Operators____frame[(this)]), point, s__Component_parent[this], relative, x, y) // INLINED!!
            endif
        endfunction

        function s__Component_Components___Operators___onInit takes nothing returns nothing
            set Components___CONSOLE=BlzGetFrameByName("ConsoleUIBackdrop", 0)
            set Components___WORLD=BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0)

            call BlzLoadTOCFile("Components.toc")
            call TimerStart(Components___DOUBLE, 9999999999, false, null)
        endfunction

        function s__Component__set_texture takes integer this,string path returns nothing
            call s__Backdrop__set_texture(s__Component_image[this],path)
        endfunction

        function s__Component__get_texture takes integer this returns string
            return (s__Backdrop_path[(s__Component_image[this])]) // INLINED!!
        endfunction

        function s__Component__set_active takes integer this,boolean flag returns nothing
            set s__Component_isActive[this]=flag

            if not flag then
                if SubString((s__Backdrop_path[(s__Component_image[this])]), 34, 35) == "\\" then // INLINED!!
                    call s__Backdrop__set_texture(s__Component_image[this],SubString((s__Backdrop_path[(s__Component_image[this])]), 0, 34) + "Disabled\\DIS" + SubString((s__Backdrop_path[(s__Component_image[this])]), 35, StringLength((s__Backdrop_path[(s__Component_image[this])])))) // INLINED!!
                endif
            else
                if SubString((s__Backdrop_path[(s__Component_image[this])]), 34, 46) == "Disabled\\DIS" then // INLINED!!
                    call s__Backdrop__set_texture(s__Component_image[this],SubString((s__Backdrop_path[(s__Component_image[this])]), 0, 34) + "\\" + SubString((s__Backdrop_path[(s__Component_image[this])]), 46, StringLength((s__Backdrop_path[(s__Component_image[this])])))) // INLINED!!
                endif
            endif
        endfunction

        function s__Component__get_active takes integer this returns boolean
            return s__Component_isActive[this]
        endfunction

        function s__Component__get_actor takes integer this returns framehandle
            return s__Component_listener[this]
        endfunction

        function s__Component__set_onEnter takes integer this,code c returns nothing
            call DestroyTrigger(s__Component_entered[this])
            set s__Component_entered[this]=null

            if c != null then
                set s__Component_entered[this]=CreateTrigger()
                call TriggerAddCondition(s__Component_entered[this], Condition(c))
            endif
        endfunction

        function s__Component__set_onLeave takes integer this,code c returns nothing
            call DestroyTrigger(s__Component_exited[this])
            set s__Component_exited[this]=null

            if c != null then
                set s__Component_exited[this]=CreateTrigger()
                call TriggerAddCondition(s__Component_exited[this], Condition(c))
            endif
        endfunction

        function s__Component__set_onClick takes integer this,code c returns nothing
            call DestroyTrigger(s__Component_clicked[this])
            set s__Component_clicked[this]=null

            if c != null then
                set s__Component_clicked[this]=CreateTrigger()
                call TriggerAddCondition(s__Component_clicked[this], Condition(c))
            endif
        endfunction

        function s__Component__set_onScroll takes integer this,code c returns nothing
            call DestroyTrigger(s__Component_scrolled[this])
            set s__Component_scrolled[this]=null

            if c != null then
                set s__Component_scrolled[this]=CreateTrigger()
                call TriggerAddCondition(s__Component_scrolled[this], Condition(c))
            endif
        endfunction

        function s__Component__set_onRightClick takes integer this,code c returns nothing
            call DestroyTrigger(s__Component_rightClicked[this])
            set s__Component_rightClicked[this]=null

            if c != null then
                set s__Component_rightClicked[this]=CreateTrigger()
                call TriggerAddCondition(s__Component_rightClicked[this], Condition(c))
            endif
        endfunction

        function s__Component__set_onDoubleClick takes integer this,code c returns nothing
            call DestroyTrigger(s__Component_doubleClicked[this])
            set s__Component_doubleClicked[this]=null

            if c != null then
                set s__Component_doubleClicked[this]=CreateTrigger()
                call TriggerAddCondition(s__Component_doubleClicked[this], Condition(c))
            endif
        endfunction

        function s__Component__set_onMiddleClick takes integer this,code c returns nothing
            call DestroyTrigger(s__Component_middleClicked[this])
            set s__Component_middleClicked[this]=null

            if c != null then
                set s__Component_middleClicked[this]=CreateTrigger()
                call TriggerAddCondition(s__Component_middleClicked[this], Condition(c))
            endif
        endfunction

        function s__Component_destroy takes integer this returns nothing
            call s__Backdrop_destroy(s__Component_image[this])
            call RemoveSavedInteger(Table___ht, (s__Component_table), (GetHandleId(s__Component_listener[this]))) // INLINED!!
            call RemoveSavedInteger(Table___ht, (s__Component_table), (GetHandleId(s__Component_button[this]))) // INLINED!!
            call BlzDestroyFrame((s__Component_Components___Operators____frame[(this)])) // INLINED!!
            call BlzDestroyFrame(s__Component_listener[this])
            call DestroyTrigger(s__Component_exited[this])
            call DestroyTrigger(s__Component_entered[this])
            call DestroyTrigger(s__Component_clicked[this])
            call DestroyTrigger(s__Component_scrolled[this])
            call DestroyTrigger(s__Component_rightClicked[this])
            call DestroyTrigger(s__Component_doubleClicked[this])
            call DestroyTrigger(s__Component_middleClicked[this])

            set s__Component_Components___Operators____frame[(this)]=(null) // INLINED!!
            set s__Component_button[this]=null
            set s__Component_parent[this]=null
            set s__Component_listener[this]=null
            set s__Component_exited[this]=null
            set s__Component_entered[this]=null
            set s__Component_clicked[this]=null
            set s__Component_scrolled[this]=null
            set s__Component_rightClicked[this]=null
            set s__Component_doubleClicked[this]=null
            set s__Component_middleClicked[this]=null
        endfunction

        function s__Component_get takes nothing returns integer
            return s__Component_array[GetPlayerId(GetTriggerPlayer())]
        endfunction

        function s__Component_create takes real x,real y,real width,real height,framehandle parent,string frameType,string template returns integer
            local integer this= s__Component__allocate()

            if parent == null then
                set parent=Components___CONSOLE
            endif

            if template == "" or template == null then
                set template="TransparentBackdrop"
            endif

            call s__Component__set_x(this,x)
            call s__Component__set_y(this,y)
            call s__Component__set_width(this,width)
            call s__Component__set_height(this,height)
            set s__Component_parent[this]=parent
            set s__Component_Components___Operators____frame[(this)]=(BlzCreateFrame(template, parent, 0, 0)) // INLINED!!
            set s__Component_listener[this]=BlzCreateFrame(frameType, (s__Component_Components___Operators____frame[(this)]), 0, 0) // INLINED!!
            set s__Component_button[this]=BlzFrameGetChild(s__Component_listener[this], 0)
            set s__Component_image[this]=s__Backdrop_create(0 , 0 , width , height , s__Component_listener[this] , null)
            call sc__Backdrop__set_visible(s__Component_image[this],false)
            call SaveInteger(Table___ht, (s__Component_table), (GetHandleId(s__Component_listener[this])), ( this)) // INLINED!!
            call SaveInteger(Table___ht, (s__Component_table), (GetHandleId(s__Component_button[this])), ( this)) // INLINED!!

            if parent == Components___CONSOLE or parent == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Component_Components___Operators____frame[(this)]), (s__Component_Components___Operators____point[(this)]), x, y) // INLINED!!
            else
                call BlzFrameSetPoint((s__Component_Components___Operators____frame[(this)]), (s__Component_Components___Operators____point[(this)]), parent, (s__Component_Components___Operators____relative[(this)]), x, y) // INLINED!!
            endif

            call BlzFrameSetSize((s__Component_Components___Operators____frame[(this)]), width, height) // INLINED!!
            call BlzFrameSetAllPoints(s__Component_listener[this], (s__Component_Components___Operators____frame[(this)])) // INLINED!!
            call BlzTriggerRegisterFrameEvent(s__Component_enter, s__Component_listener[this], FRAMEEVENT_MOUSE_ENTER)
            call BlzTriggerRegisterFrameEvent(s__Component_leave, s__Component_listener[this], FRAMEEVENT_MOUSE_LEAVE)
            call BlzTriggerRegisterFrameEvent(s__Component_scroll, s__Component_button[this], FRAMEEVENT_MOUSE_WHEEL)

            return this
        endfunction

        function s__Component_onScrolled takes nothing returns nothing
            local integer this= (LoadInteger(Table___ht, (s__Component_table), (GetHandleId(BlzGetTriggerFrame())))) // INLINED!!

            if this != 0 then
                if (st__Components___IComponent_onScroll[si__Components___IComponent_type[this]]!=null) then
                    call sc__Components___IComponent_onScroll(this)
                endif

                if s__Component_scrolled[this] != null then
                    call TriggerEvaluate(s__Component_scrolled[this])
                endif
            endif
        endfunction

        function s__Component_onClicked takes nothing returns nothing
            local integer id= GetPlayerId(GetTriggerPlayer())
            local integer this= s__Component_array[id]

            if this != 0 then
                if BlzGetTriggerPlayerMouseButton() == MOUSE_BUTTON_TYPE_LEFT then
                    call SaveReal(Table___ht, (((s__HashTable__getindex(s__Component_time,id)))), (this), (( TimerGetElapsed(Components___DOUBLE))*1.0)) // INLINED!!

                    call BlzFrameSetEnable(s__Component_listener[this], false)
                    call BlzFrameSetEnable(s__Component_listener[this], true)
    
                    if (st__Components___IComponent_onClick[si__Components___IComponent_type[this]]!=null) then
                        call sc__Components___IComponent_onClick(this)
                    endif

                    if s__Component_clicked[this] != null then
                        call TriggerEvaluate(s__Component_clicked[this])
                    endif
    
                    if (LoadReal(Table___ht, (((s__HashTable__getindex(s__Component_time,id)))), (this))) - (LoadReal(Table___ht, (((s__HashTable__getindex(s__Component_doubleTime,id)))), (this))) <= Components___DOUBLE_CLICK_DELAY then // INLINED!!
                        call SaveInteger(Table___ht, (s__HashTable__getindex(s__Component_doubleTime,id)), (this), ( 0)) // INLINED!!
    
                        if (st__Components___IComponent_onDoubleClick[si__Components___IComponent_type[this]]!=null) then
                            call sc__Components___IComponent_onDoubleClick(this)
                        endif

                        if s__Component_doubleClicked[this] != null then
                            call TriggerEvaluate(s__Component_doubleClicked[this])
                        endif
                    else
                        call SaveReal(Table___ht, (((s__HashTable__getindex(s__Component_doubleTime,id)))), (this), (( (LoadReal(Table___ht, (((s__HashTable__getindex(s__Component_time,id)))), (this))))*1.0)) // INLINED!!
                    endif
                endif

                if BlzGetTriggerPlayerMouseButton() == MOUSE_BUTTON_TYPE_RIGHT then
                    if (st__Components___IComponent_onRightClick[si__Components___IComponent_type[this]]!=null) then
                        call sc__Components___IComponent_onRightClick(this)
                    endif

                    if s__Component_rightClicked[this] != null then
                        call TriggerEvaluate(s__Component_rightClicked[this])
                    endif
                endif

                if BlzGetTriggerPlayerMouseButton() == MOUSE_BUTTON_TYPE_MIDDLE then
                    if (st__Components___IComponent_onMiddleClick[si__Components___IComponent_type[this]]!=null) then
                        call sc__Components___IComponent_onMiddleClick(this)
                    endif

                    if s__Component_middleClicked[this] != null then
                        call TriggerEvaluate(s__Component_middleClicked[this])
                    endif
                endif
            endif
        endfunction

        function s__Component_onEntered takes nothing returns nothing
            local integer this= (LoadInteger(Table___ht, (s__Component_table), (GetHandleId(BlzGetTriggerFrame())))) // INLINED!!

            set s__Component_array[GetPlayerId(GetTriggerPlayer())]=this

            if this != 0 then
                if (st__Components___IComponent_onEnter[si__Components___IComponent_type[this]]!=null) then
                    call sc__Components___IComponent_onEnter(this)
                endif

                if s__Component_entered[this] != null then
                    call TriggerEvaluate(s__Component_entered[this])
                endif
            endif
        endfunction

        function s__Component_onExited takes nothing returns nothing
            local integer this= (LoadInteger(Table___ht, (s__Component_table), (GetHandleId(BlzGetTriggerFrame())))) // INLINED!!

            set s__Component_array[GetPlayerId(GetTriggerPlayer())]=0

            if this != 0 then
                if (st__Components___IComponent_onLeave[si__Components___IComponent_type[this]]!=null) then
                    call sc__Components___IComponent_onLeave(this)
                endif

                if s__Component_exited[this] != null then
                    call TriggerEvaluate(s__Component_exited[this])
                endif
            endif
        endfunction

        function s__Component_onInit takes nothing returns nothing
            local integer i= 0

            set s__Component_table=s__Table_create()
            set s__Component_time=(s__Table_create()) // INLINED!!
            set s__Component_doubleTime=(s__Table_create()) // INLINED!!
            
            call TriggerAddAction(s__Component_enter, function s__Component_onEntered)
            call TriggerAddAction(s__Component_leave, function s__Component_onExited)
            call TriggerAddAction(s__Component_click, function s__Component_onClicked)
            call TriggerAddAction(s__Component_scroll, function s__Component_onScrolled)

            loop
                exitwhen i >= bj_MAX_PLAYER_SLOTS
                    if GetPlayerController(Player(i)) == MAP_CONTROL_USER then
                        set s__Component_array[i]=0
                        call TriggerRegisterPlayerEvent(s__Component_click, Player(i), EVENT_PLAYER_MOUSE_UP)
                    endif
                set i=i + 1
            endloop
        endfunction



//Implemented from module Components___Operators:


        function s__EditBox__set_x takes integer this,real newX returns nothing
            set s__EditBox_Components___Operators____x[this]=newX

            if s__EditBox_parent[this] == Components___CONSOLE or s__EditBox_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__EditBox_Components___Operators____frame[(this)]), s__EditBox_Components___Operators____point[this], s__EditBox_Components___Operators____x[this], s__EditBox_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__EditBox_Components___Operators____frame[(this)]), s__EditBox_Components___Operators____point[this], s__EditBox_parent[this], s__EditBox_Components___Operators____relative[this], s__EditBox_Components___Operators____x[this], s__EditBox_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__EditBox__get_x takes integer this returns real
            return s__EditBox_Components___Operators____x[this]
        endfunction

        function s__EditBox__set_y takes integer this,real newY returns nothing
            set s__EditBox_Components___Operators____y[this]=newY

            if s__EditBox_parent[this] == Components___CONSOLE or s__EditBox_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__EditBox_Components___Operators____frame[(this)]), s__EditBox_Components___Operators____point[this], s__EditBox_Components___Operators____x[this], s__EditBox_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__EditBox_Components___Operators____frame[(this)]), s__EditBox_Components___Operators____point[this], s__EditBox_parent[this], s__EditBox_Components___Operators____relative[this], s__EditBox_Components___Operators____x[this], s__EditBox_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__EditBox__get_y takes integer this returns real
            return s__EditBox_Components___Operators____y[this]
        endfunction

        function s__EditBox__set_point takes integer this,framepointtype newPoint returns nothing
            set s__EditBox_Components___Operators____point[this]=newPoint

            call BlzFrameClearAllPoints((s__EditBox_Components___Operators____frame[(this)])) // INLINED!!

            if s__EditBox_parent[this] == Components___CONSOLE or s__EditBox_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__EditBox_Components___Operators____frame[(this)]), s__EditBox_Components___Operators____point[this], s__EditBox_Components___Operators____x[this], s__EditBox_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__EditBox_Components___Operators____frame[(this)]), s__EditBox_Components___Operators____point[this], s__EditBox_parent[this], s__EditBox_Components___Operators____relative[this], s__EditBox_Components___Operators____x[this], s__EditBox_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__EditBox__get_point takes integer this returns framepointtype
            return s__EditBox_Components___Operators____point[this]
        endfunction

        function s__EditBox__set_relative takes integer this,framepointtype newPoint returns nothing
            set s__EditBox_Components___Operators____relative[this]=newPoint

            call BlzFrameClearAllPoints((s__EditBox_Components___Operators____frame[(this)])) // INLINED!!

            if s__EditBox_parent[this] == Components___CONSOLE or s__EditBox_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__EditBox_Components___Operators____frame[(this)]), s__EditBox_Components___Operators____point[this], s__EditBox_Components___Operators____x[this], s__EditBox_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__EditBox_Components___Operators____frame[(this)]), s__EditBox_Components___Operators____point[this], s__EditBox_parent[this], s__EditBox_Components___Operators____relative[this], s__EditBox_Components___Operators____x[this], s__EditBox_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__EditBox__get_relative takes integer this returns framepointtype
            return s__EditBox_Components___Operators____relative[this]
        endfunction

        function s__EditBox__set_alpha takes integer this,integer newAlpha returns nothing
            set s__EditBox_Components___Operators____alpha[this]=newAlpha

            call BlzFrameSetAlpha((s__EditBox_Components___Operators____frame[(this)]), newAlpha) // INLINED!!
        endfunction

        function s__EditBox__get_alpha takes integer this returns integer
            return s__EditBox_Components___Operators____alpha[this]
        endfunction

        function s__EditBox__set_scale takes integer this,real newScale returns nothing
            set s__EditBox_Components___Operators____scale[this]=newScale
            call BlzFrameSetScale((s__EditBox_Components___Operators____frame[(this)]), newScale) // INLINED!!
        endfunction

        function s__EditBox__get_scale takes integer this returns real
            return s__EditBox_Components___Operators____scale[this]
        endfunction

        function s__EditBox__set_width takes integer this,real newWidth returns nothing
            set s__EditBox_Components___Operators____width[this]=newWidth

            call BlzFrameSetSize((s__EditBox_Components___Operators____frame[(this)]), newWidth, s__EditBox_Components___Operators____height[this]) // INLINED!!
        endfunction

        function s__EditBox__get_width takes integer this returns real
            return s__EditBox_Components___Operators____width[this]
        endfunction

        function s__EditBox__set_height takes integer this,real newHeight returns nothing
            set s__EditBox_Components___Operators____height[this]=newHeight

            call BlzFrameSetSize((s__EditBox_Components___Operators____frame[(this)]), s__EditBox_Components___Operators____width[this], newHeight) // INLINED!!
        endfunction

        function s__EditBox__get_height takes integer this returns real
            return s__EditBox_Components___Operators____height[this]
        endfunction

        function s__EditBox__set_enabled takes integer this,boolean flag returns nothing
            set s__EditBox_Components___Operators____enabled[this]=flag

            call BlzFrameSetEnable((s__EditBox_Components___Operators____frame[(this)]), flag) // INLINED!!
        endfunction

        function s__EditBox__get_enabled takes integer this returns boolean
            return s__EditBox_Components___Operators____enabled[this]
        endfunction

        function s__EditBox__set_visible takes integer this,boolean visibility returns nothing
            set s__EditBox_Components___Operators____visible[this]=visibility
            call BlzFrameSetVisible((s__EditBox_Components___Operators____frame[(this)]), visibility) // INLINED!!
        endfunction

        function s__EditBox__get_visible takes integer this returns boolean
            return s__EditBox_Components___Operators____visible[this]
        endfunction

        function s__EditBox__set_frame takes integer this,framehandle newFrame returns nothing
            set s__EditBox_Components___Operators____frame[this]=newFrame
        endfunction

        function s__EditBox__get_frame takes integer this returns framehandle
            return s__EditBox_Components___Operators____frame[this]
        endfunction

        function s__EditBox__set_set takes integer this,framehandle target returns nothing
            call BlzFrameSetAllPoints((s__EditBox_Components___Operators____frame[(this)]), target) // INLINED!!
        endfunction

        function s__EditBox_setPoint takes integer this,framepointtype point,framepointtype relative,real x,real y returns nothing
            set s__EditBox_Components___Operators____x[this]=x
            set s__EditBox_Components___Operators____y[this]=y
            set s__EditBox_Components___Operators____point[this]=point
            set s__EditBox_Components___Operators____relative[this]=relative

            call BlzFrameClearAllPoints((s__EditBox_Components___Operators____frame[(this)])) // INLINED!!

            if s__EditBox_parent[this] == Components___CONSOLE or s__EditBox_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__EditBox_Components___Operators____frame[(this)]), point, x, y) // INLINED!!
            else
                call BlzFrameSetPoint((s__EditBox_Components___Operators____frame[(this)]), point, s__EditBox_parent[this], relative, x, y) // INLINED!!
            endif
        endfunction

        function s__EditBox_Components___Operators___onInit takes nothing returns nothing
            set Components___CONSOLE=BlzGetFrameByName("ConsoleUIBackdrop", 0)
            set Components___WORLD=BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0)

            call BlzLoadTOCFile("Components.toc")
            call TimerStart(Components___DOUBLE, 9999999999, false, null)
        endfunction

        function s__EditBox__set_limit takes integer this,integer length returns nothing
            set s__EditBox_length[this]=length

            call BlzFrameSetTextSizeLimit((s__EditBox_Components___Operators____frame[(this)]), length) // INLINED!!
        endfunction

        function s__EditBox__get_limit takes integer this returns integer
            return s__EditBox_length[this]
        endfunction

        function s__EditBox__set_text takes integer this,string newText returns nothing
            set s__EditBox_value[this]=newText
            call BlzFrameSetText((s__EditBox_Components___Operators____frame[(this)]), newText) // INLINED!!
        endfunction

        function s__EditBox__get_text takes integer this returns string
            set s__EditBox_value[this]=BlzFrameGetText((s__EditBox_Components___Operators____frame[(this)])) // INLINED!!
            return s__EditBox_value[this]
        endfunction

        function s__EditBox__set_onEnter takes integer this,code c returns nothing
            call DestroyTrigger(s__EditBox_entered[this])
            set s__EditBox_entered[this]=null

            if c != null then
                set s__EditBox_entered[this]=CreateTrigger()
                call TriggerAddCondition(s__EditBox_entered[this], Condition(c))
            endif
        endfunction

        function s__EditBox__set_onText takes integer this,code c returns nothing
            call DestroyTrigger(s__EditBox_typed[this])
            set s__EditBox_typed[this]=null

            if c != null then
                set s__EditBox_typed[this]=CreateTrigger()
                call TriggerAddCondition(s__EditBox_typed[this], Condition(c))
            endif
        endfunction

        function s__EditBox_destroy takes integer this returns nothing
            call BlzDestroyFrame((s__EditBox_Components___Operators____frame[(this)])) // INLINED!!
            call DestroyTrigger(s__EditBox_typed[this])
            call DestroyTrigger(s__EditBox_entered[this])

            set s__EditBox_Components___Operators____frame[(this)]=(null) // INLINED!!
            set s__EditBox_typed[this]=null
            set s__EditBox_parent[this]=null
            set s__EditBox_entered[this]=null
        endfunction

        function s__EditBox_get takes nothing returns integer
            return (LoadInteger(Table___ht, (s__EditBox_table), (GetHandleId(BlzGetTriggerFrame())))) // INLINED!!
        endfunction

        function s__EditBox_create takes real x,real y,real width,real height,framehandle parent,string template returns integer
            local integer this= s__EditBox__allocate()

            if parent == null then
                set parent=Components___CONSOLE
            endif

            if template == "" or template == null then
                set template="EscMenuEditBoxTemplate"
            endif

            call s__EditBox__set_x(this,x)
            call s__EditBox__set_y(this,y)
            call s__EditBox__set_width(this,width)
            call s__EditBox__set_height(this,height)
            set s__EditBox_parent[this]=parent
            set s__EditBox_Components___Operators____frame[(this)]=(BlzCreateFrame(template, parent, 0, 0)) // INLINED!!
            call SaveInteger(Table___ht, (s__EditBox_table), (GetHandleId((s__EditBox_Components___Operators____frame[(this)]))), ( this)) // INLINED!!

            if parent == Components___CONSOLE or parent == Components___WORLD then
                call BlzFrameSetAbsPoint((s__EditBox_Components___Operators____frame[(this)]), (s__EditBox_Components___Operators____point[(this)]), x, y) // INLINED!!
            else
                call BlzFrameSetPoint((s__EditBox_Components___Operators____frame[(this)]), (s__EditBox_Components___Operators____point[(this)]), parent, (s__EditBox_Components___Operators____relative[(this)]), x, y) // INLINED!!
            endif

            call BlzFrameSetSize((s__EditBox_Components___Operators____frame[(this)]), width, height) // INLINED!!
            call BlzTriggerRegisterFrameEvent(s__EditBox_enter, (s__EditBox_Components___Operators____frame[(this)]), FRAMEEVENT_EDITBOX_ENTER) // INLINED!!
            call BlzTriggerRegisterFrameEvent(s__EditBox_typing, (s__EditBox_Components___Operators____frame[(this)]), FRAMEEVENT_EDITBOX_TEXT_CHANGED) // INLINED!!

            return this
        endfunction

        function s__EditBox_onTyping takes nothing returns nothing
            local integer this= (LoadInteger(Table___ht, (s__EditBox_table), (GetHandleId(BlzGetTriggerFrame())))) // INLINED!!

            if this != 0 then
                set s__EditBox_value[this]=BlzGetTriggerFrameText()

                if (st__Components___IComponent_onText[si__Components___IComponent_type[this]]!=null) then
                    call sc__Components___IComponent_onText(this)
                endif

                if s__EditBox_typed[this] != null then
                    call TriggerEvaluate(s__EditBox_typed[this])
                endif
            endif
        endfunction

        function s__EditBox_onEntered takes nothing returns nothing
            local integer this= (LoadInteger(Table___ht, (s__EditBox_table), (GetHandleId(BlzGetTriggerFrame())))) // INLINED!!

            if this != 0 then
                if (st__Components___IComponent_onEnter[si__Components___IComponent_type[this]]!=null) then
                    call sc__Components___IComponent_onEnter(this)
                endif

                if s__EditBox_entered[this] != null then
                    call TriggerEvaluate(s__EditBox_entered[this])
                endif
            endif
        endfunction

        function s__EditBox_onInit takes nothing returns nothing
            set s__EditBox_table=s__Table_create()

            call TriggerAddAction(s__EditBox_enter, function s__EditBox_onEntered)
            call TriggerAddAction(s__EditBox_typing, function s__EditBox_onTyping)
        endfunction



//Implemented from module Components___Operators:


        function s__CheckBox__set_x takes integer this,real newX returns nothing
            set s__CheckBox_Components___Operators____x[this]=newX

            if s__CheckBox_parent[this] == Components___CONSOLE or s__CheckBox_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__CheckBox_Components___Operators____frame[(this)]), s__CheckBox_Components___Operators____point[this], s__CheckBox_Components___Operators____x[this], s__CheckBox_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__CheckBox_Components___Operators____frame[(this)]), s__CheckBox_Components___Operators____point[this], s__CheckBox_parent[this], s__CheckBox_Components___Operators____relative[this], s__CheckBox_Components___Operators____x[this], s__CheckBox_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__CheckBox__get_x takes integer this returns real
            return s__CheckBox_Components___Operators____x[this]
        endfunction

        function s__CheckBox__set_y takes integer this,real newY returns nothing
            set s__CheckBox_Components___Operators____y[this]=newY

            if s__CheckBox_parent[this] == Components___CONSOLE or s__CheckBox_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__CheckBox_Components___Operators____frame[(this)]), s__CheckBox_Components___Operators____point[this], s__CheckBox_Components___Operators____x[this], s__CheckBox_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__CheckBox_Components___Operators____frame[(this)]), s__CheckBox_Components___Operators____point[this], s__CheckBox_parent[this], s__CheckBox_Components___Operators____relative[this], s__CheckBox_Components___Operators____x[this], s__CheckBox_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__CheckBox__get_y takes integer this returns real
            return s__CheckBox_Components___Operators____y[this]
        endfunction

        function s__CheckBox__set_point takes integer this,framepointtype newPoint returns nothing
            set s__CheckBox_Components___Operators____point[this]=newPoint

            call BlzFrameClearAllPoints((s__CheckBox_Components___Operators____frame[(this)])) // INLINED!!

            if s__CheckBox_parent[this] == Components___CONSOLE or s__CheckBox_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__CheckBox_Components___Operators____frame[(this)]), s__CheckBox_Components___Operators____point[this], s__CheckBox_Components___Operators____x[this], s__CheckBox_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__CheckBox_Components___Operators____frame[(this)]), s__CheckBox_Components___Operators____point[this], s__CheckBox_parent[this], s__CheckBox_Components___Operators____relative[this], s__CheckBox_Components___Operators____x[this], s__CheckBox_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__CheckBox__get_point takes integer this returns framepointtype
            return s__CheckBox_Components___Operators____point[this]
        endfunction

        function s__CheckBox__set_relative takes integer this,framepointtype newPoint returns nothing
            set s__CheckBox_Components___Operators____relative[this]=newPoint

            call BlzFrameClearAllPoints((s__CheckBox_Components___Operators____frame[(this)])) // INLINED!!

            if s__CheckBox_parent[this] == Components___CONSOLE or s__CheckBox_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__CheckBox_Components___Operators____frame[(this)]), s__CheckBox_Components___Operators____point[this], s__CheckBox_Components___Operators____x[this], s__CheckBox_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__CheckBox_Components___Operators____frame[(this)]), s__CheckBox_Components___Operators____point[this], s__CheckBox_parent[this], s__CheckBox_Components___Operators____relative[this], s__CheckBox_Components___Operators____x[this], s__CheckBox_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__CheckBox__get_relative takes integer this returns framepointtype
            return s__CheckBox_Components___Operators____relative[this]
        endfunction

        function s__CheckBox__set_alpha takes integer this,integer newAlpha returns nothing
            set s__CheckBox_Components___Operators____alpha[this]=newAlpha

            call BlzFrameSetAlpha((s__CheckBox_Components___Operators____frame[(this)]), newAlpha) // INLINED!!
        endfunction

        function s__CheckBox__get_alpha takes integer this returns integer
            return s__CheckBox_Components___Operators____alpha[this]
        endfunction

        function s__CheckBox__set_scale takes integer this,real newScale returns nothing
            set s__CheckBox_Components___Operators____scale[this]=newScale
            call BlzFrameSetScale((s__CheckBox_Components___Operators____frame[(this)]), newScale) // INLINED!!
        endfunction

        function s__CheckBox__get_scale takes integer this returns real
            return s__CheckBox_Components___Operators____scale[this]
        endfunction

        function s__CheckBox__set_width takes integer this,real newWidth returns nothing
            set s__CheckBox_Components___Operators____width[this]=newWidth

            call BlzFrameSetSize((s__CheckBox_Components___Operators____frame[(this)]), newWidth, s__CheckBox_Components___Operators____height[this]) // INLINED!!
        endfunction

        function s__CheckBox__get_width takes integer this returns real
            return s__CheckBox_Components___Operators____width[this]
        endfunction

        function s__CheckBox__set_height takes integer this,real newHeight returns nothing
            set s__CheckBox_Components___Operators____height[this]=newHeight

            call BlzFrameSetSize((s__CheckBox_Components___Operators____frame[(this)]), s__CheckBox_Components___Operators____width[this], newHeight) // INLINED!!
        endfunction

        function s__CheckBox__get_height takes integer this returns real
            return s__CheckBox_Components___Operators____height[this]
        endfunction

        function s__CheckBox__set_enabled takes integer this,boolean flag returns nothing
            set s__CheckBox_Components___Operators____enabled[this]=flag

            call BlzFrameSetEnable((s__CheckBox_Components___Operators____frame[(this)]), flag) // INLINED!!
        endfunction

        function s__CheckBox__get_enabled takes integer this returns boolean
            return s__CheckBox_Components___Operators____enabled[this]
        endfunction

        function s__CheckBox__set_visible takes integer this,boolean visibility returns nothing
            set s__CheckBox_Components___Operators____visible[this]=visibility
            call BlzFrameSetVisible((s__CheckBox_Components___Operators____frame[(this)]), visibility) // INLINED!!
        endfunction

        function s__CheckBox__get_visible takes integer this returns boolean
            return s__CheckBox_Components___Operators____visible[this]
        endfunction

        function s__CheckBox__set_frame takes integer this,framehandle newFrame returns nothing
            set s__CheckBox_Components___Operators____frame[this]=newFrame
        endfunction

        function s__CheckBox__get_frame takes integer this returns framehandle
            return s__CheckBox_Components___Operators____frame[this]
        endfunction

        function s__CheckBox__set_set takes integer this,framehandle target returns nothing
            call BlzFrameSetAllPoints((s__CheckBox_Components___Operators____frame[(this)]), target) // INLINED!!
        endfunction

        function s__CheckBox_setPoint takes integer this,framepointtype point,framepointtype relative,real x,real y returns nothing
            set s__CheckBox_Components___Operators____x[this]=x
            set s__CheckBox_Components___Operators____y[this]=y
            set s__CheckBox_Components___Operators____point[this]=point
            set s__CheckBox_Components___Operators____relative[this]=relative

            call BlzFrameClearAllPoints((s__CheckBox_Components___Operators____frame[(this)])) // INLINED!!

            if s__CheckBox_parent[this] == Components___CONSOLE or s__CheckBox_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__CheckBox_Components___Operators____frame[(this)]), point, x, y) // INLINED!!
            else
                call BlzFrameSetPoint((s__CheckBox_Components___Operators____frame[(this)]), point, s__CheckBox_parent[this], relative, x, y) // INLINED!!
            endif
        endfunction

        function s__CheckBox_Components___Operators___onInit takes nothing returns nothing
            set Components___CONSOLE=BlzGetFrameByName("ConsoleUIBackdrop", 0)
            set Components___WORLD=BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0)

            call BlzLoadTOCFile("Components.toc")
            call TimerStart(Components___DOUBLE, 9999999999, false, null)
        endfunction

        function s__CheckBox__get_checked takes integer this returns boolean
            return s___CheckBox_isChecked[s__CheckBox_isChecked[this]+GetPlayerId(GetLocalPlayer())]
        endfunction

        function s__CheckBox__set_onCheck takes integer this,code c returns nothing
            call DestroyTrigger(s__CheckBox_check[this])
            set s__CheckBox_check[this]=null

            if c != null then
                set s__CheckBox_check[this]=CreateTrigger()
                call TriggerAddCondition(s__CheckBox_check[this], Condition(c))
            endif
        endfunction

        function s__CheckBox__set_onUncheck takes integer this,code c returns nothing
            call DestroyTrigger(s__CheckBox_uncheck[this])
            set s__CheckBox_uncheck[this]=null

            if c != null then
                set s__CheckBox_uncheck[this]=CreateTrigger()
                call TriggerAddCondition(s__CheckBox_uncheck[this], Condition(c))
            endif
        endfunction

        function s__CheckBox_destroy takes integer this returns nothing
            call BlzDestroyFrame((s__CheckBox_Components___Operators____frame[(this)])) // INLINED!!
            call DestroyTrigger(s__CheckBox_check[this])
            call DestroyTrigger(s__CheckBox_uncheck[this])

            set s__CheckBox_Components___Operators____frame[(this)]=(null) // INLINED!!
            set s__CheckBox_parent[this]=null
            set s__CheckBox_check[this]=null
            set s__CheckBox_uncheck[this]=null
        endfunction

        function s__CheckBox_get takes nothing returns integer
            return (LoadInteger(Table___ht, (s__CheckBox_table), (GetHandleId(BlzGetTriggerFrame())))) // INLINED!!
        endfunction

        function s__CheckBox_create takes real x,real y,real width,real height,framehandle parent,string template returns integer
            local integer this= s__CheckBox__allocate()

            if parent == null then
                set parent=Components___CONSOLE
            endif

            if template == "" or template == null then
                set template="QuestCheckBox"
            endif

            call s__CheckBox__set_x(this,x)
            call s__CheckBox__set_y(this,y)
            call s__CheckBox__set_width(this,width)
            call s__CheckBox__set_height(this,height)
            set s__CheckBox_parent[this]=parent
            set s__CheckBox_Components___Operators____frame[(this)]=(BlzCreateFrame(template, parent, 0, 0)) // INLINED!!
            call SaveInteger(Table___ht, (s__CheckBox_table), (GetHandleId((s__CheckBox_Components___Operators____frame[(this)]))), ( this)) // INLINED!!

            if parent == Components___CONSOLE or parent == Components___WORLD then
                call BlzFrameSetAbsPoint((s__CheckBox_Components___Operators____frame[(this)]), (s__CheckBox_Components___Operators____point[(this)]), x, y) // INLINED!!
            else
                call BlzFrameSetPoint((s__CheckBox_Components___Operators____frame[(this)]), (s__CheckBox_Components___Operators____point[(this)]), parent, (s__CheckBox_Components___Operators____relative[(this)]), x, y) // INLINED!!
            endif

            call BlzFrameSetSize((s__CheckBox_Components___Operators____frame[(this)]), width, height) // INLINED!!
            call BlzTriggerRegisterFrameEvent(s__CheckBox_event, (s__CheckBox_Components___Operators____frame[(this)]), FRAMEEVENT_CHECKBOX_CHECKED) // INLINED!!
            call BlzTriggerRegisterFrameEvent(s__CheckBox_event, (s__CheckBox_Components___Operators____frame[(this)]), FRAMEEVENT_CHECKBOX_UNCHECKED) // INLINED!!

            return this
        endfunction

        function s__CheckBox_onChecked takes nothing returns nothing
            local integer this= (LoadInteger(Table___ht, (s__CheckBox_table), (GetHandleId(BlzGetTriggerFrame())))) // INLINED!!

            if this != 0 then
                set s___CheckBox_isChecked[s__CheckBox_isChecked[this]+GetPlayerId(GetTriggerPlayer())]=BlzGetTriggerFrameEvent() == FRAMEEVENT_CHECKBOX_CHECKED

                if BlzGetTriggerFrameEvent() == FRAMEEVENT_CHECKBOX_CHECKED then
                    if (st__Components___IComponent_onCheck[si__Components___IComponent_type[this]]!=null) then
                        call sc__Components___IComponent_onCheck(this)
                    endif

                    if s__CheckBox_check[this] != null then
                        call TriggerEvaluate(s__CheckBox_check[this])
                    endif
                else
                    if (st__Components___IComponent_onUncheck[si__Components___IComponent_type[this]]!=null) then
                        call sc__Components___IComponent_onUncheck(this)
                    endif

                    if s__CheckBox_uncheck[this] != null then
                        call TriggerEvaluate(s__CheckBox_uncheck[this])
                    endif
                endif
            endif
        endfunction

        function s__CheckBox_onInit takes nothing returns nothing
            set s__CheckBox_table=s__Table_create()

            call TriggerAddAction(s__CheckBox_event, function s__CheckBox_onChecked)
        endfunction



//Implemented from module Components___Operators:


        function s__Slider__set_x takes integer this,real newX returns nothing
            set s__Slider_Components___Operators____x[this]=newX

            if s__Slider_parent[this] == Components___CONSOLE or s__Slider_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Slider_Components___Operators____frame[(this)]), s__Slider_Components___Operators____point[this], s__Slider_Components___Operators____x[this], s__Slider_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__Slider_Components___Operators____frame[(this)]), s__Slider_Components___Operators____point[this], s__Slider_parent[this], s__Slider_Components___Operators____relative[this], s__Slider_Components___Operators____x[this], s__Slider_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__Slider__get_x takes integer this returns real
            return s__Slider_Components___Operators____x[this]
        endfunction

        function s__Slider__set_y takes integer this,real newY returns nothing
            set s__Slider_Components___Operators____y[this]=newY

            if s__Slider_parent[this] == Components___CONSOLE or s__Slider_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Slider_Components___Operators____frame[(this)]), s__Slider_Components___Operators____point[this], s__Slider_Components___Operators____x[this], s__Slider_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__Slider_Components___Operators____frame[(this)]), s__Slider_Components___Operators____point[this], s__Slider_parent[this], s__Slider_Components___Operators____relative[this], s__Slider_Components___Operators____x[this], s__Slider_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__Slider__get_y takes integer this returns real
            return s__Slider_Components___Operators____y[this]
        endfunction

        function s__Slider__set_point takes integer this,framepointtype newPoint returns nothing
            set s__Slider_Components___Operators____point[this]=newPoint

            call BlzFrameClearAllPoints((s__Slider_Components___Operators____frame[(this)])) // INLINED!!

            if s__Slider_parent[this] == Components___CONSOLE or s__Slider_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Slider_Components___Operators____frame[(this)]), s__Slider_Components___Operators____point[this], s__Slider_Components___Operators____x[this], s__Slider_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__Slider_Components___Operators____frame[(this)]), s__Slider_Components___Operators____point[this], s__Slider_parent[this], s__Slider_Components___Operators____relative[this], s__Slider_Components___Operators____x[this], s__Slider_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__Slider__get_point takes integer this returns framepointtype
            return s__Slider_Components___Operators____point[this]
        endfunction

        function s__Slider__set_relative takes integer this,framepointtype newPoint returns nothing
            set s__Slider_Components___Operators____relative[this]=newPoint

            call BlzFrameClearAllPoints((s__Slider_Components___Operators____frame[(this)])) // INLINED!!

            if s__Slider_parent[this] == Components___CONSOLE or s__Slider_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Slider_Components___Operators____frame[(this)]), s__Slider_Components___Operators____point[this], s__Slider_Components___Operators____x[this], s__Slider_Components___Operators____y[this]) // INLINED!!
            else
                call BlzFrameSetPoint((s__Slider_Components___Operators____frame[(this)]), s__Slider_Components___Operators____point[this], s__Slider_parent[this], s__Slider_Components___Operators____relative[this], s__Slider_Components___Operators____x[this], s__Slider_Components___Operators____y[this]) // INLINED!!
            endif
        endfunction

        function s__Slider__get_relative takes integer this returns framepointtype
            return s__Slider_Components___Operators____relative[this]
        endfunction

        function s__Slider__set_alpha takes integer this,integer newAlpha returns nothing
            set s__Slider_Components___Operators____alpha[this]=newAlpha

            call BlzFrameSetAlpha((s__Slider_Components___Operators____frame[(this)]), newAlpha) // INLINED!!
        endfunction

        function s__Slider__get_alpha takes integer this returns integer
            return s__Slider_Components___Operators____alpha[this]
        endfunction

        function s__Slider__set_scale takes integer this,real newScale returns nothing
            set s__Slider_Components___Operators____scale[this]=newScale
            call BlzFrameSetScale((s__Slider_Components___Operators____frame[(this)]), newScale) // INLINED!!
        endfunction

        function s__Slider__get_scale takes integer this returns real
            return s__Slider_Components___Operators____scale[this]
        endfunction

        function s__Slider__set_width takes integer this,real newWidth returns nothing
            set s__Slider_Components___Operators____width[this]=newWidth

            call BlzFrameSetSize((s__Slider_Components___Operators____frame[(this)]), newWidth, s__Slider_Components___Operators____height[this]) // INLINED!!
        endfunction

        function s__Slider__get_width takes integer this returns real
            return s__Slider_Components___Operators____width[this]
        endfunction

        function s__Slider__set_height takes integer this,real newHeight returns nothing
            set s__Slider_Components___Operators____height[this]=newHeight

            call BlzFrameSetSize((s__Slider_Components___Operators____frame[(this)]), s__Slider_Components___Operators____width[this], newHeight) // INLINED!!
        endfunction

        function s__Slider__get_height takes integer this returns real
            return s__Slider_Components___Operators____height[this]
        endfunction

        function s__Slider__set_enabled takes integer this,boolean flag returns nothing
            set s__Slider_Components___Operators____enabled[this]=flag

            call BlzFrameSetEnable((s__Slider_Components___Operators____frame[(this)]), flag) // INLINED!!
        endfunction

        function s__Slider__get_enabled takes integer this returns boolean
            return s__Slider_Components___Operators____enabled[this]
        endfunction

        function s__Slider__set_visible takes integer this,boolean visibility returns nothing
            set s__Slider_Components___Operators____visible[this]=visibility
            call BlzFrameSetVisible((s__Slider_Components___Operators____frame[(this)]), visibility) // INLINED!!
        endfunction

        function s__Slider__get_visible takes integer this returns boolean
            return s__Slider_Components___Operators____visible[this]
        endfunction

        function s__Slider__set_frame takes integer this,framehandle newFrame returns nothing
            set s__Slider_Components___Operators____frame[this]=newFrame
        endfunction

        function s__Slider__get_frame takes integer this returns framehandle
            return s__Slider_Components___Operators____frame[this]
        endfunction

        function s__Slider__set_set takes integer this,framehandle target returns nothing
            call BlzFrameSetAllPoints((s__Slider_Components___Operators____frame[(this)]), target) // INLINED!!
        endfunction

        function s__Slider_setPoint takes integer this,framepointtype point,framepointtype relative,real x,real y returns nothing
            set s__Slider_Components___Operators____x[this]=x
            set s__Slider_Components___Operators____y[this]=y
            set s__Slider_Components___Operators____point[this]=point
            set s__Slider_Components___Operators____relative[this]=relative

            call BlzFrameClearAllPoints((s__Slider_Components___Operators____frame[(this)])) // INLINED!!

            if s__Slider_parent[this] == Components___CONSOLE or s__Slider_parent[this] == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Slider_Components___Operators____frame[(this)]), point, x, y) // INLINED!!
            else
                call BlzFrameSetPoint((s__Slider_Components___Operators____frame[(this)]), point, s__Slider_parent[this], relative, x, y) // INLINED!!
            endif
        endfunction

        function s__Slider_Components___Operators___onInit takes nothing returns nothing
            set Components___CONSOLE=BlzGetFrameByName("ConsoleUIBackdrop", 0)
            set Components___WORLD=BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0)

            call BlzLoadTOCFile("Components.toc")
            call TimerStart(Components___DOUBLE, 9999999999, false, null)
        endfunction

        function s__Slider__set_min takes integer this,real value returns nothing
            set s__Slider_minimum[this]=value

            call BlzFrameSetMinMaxValue((s__Slider_Components___Operators____frame[(this)]), s__Slider_minimum[this], s__Slider_maximum[this]) // INLINED!!
        endfunction

        function s__Slider__get_min takes integer this returns real
            return s__Slider_minimum[this]
        endfunction

        function s__Slider__set_max takes integer this,real value returns nothing
            set s__Slider_maximum[this]=value

            call BlzFrameSetMinMaxValue((s__Slider_Components___Operators____frame[(this)]), s__Slider_minimum[this], s__Slider_maximum[this]) // INLINED!!
        endfunction

        function s__Slider__get_max takes integer this returns real
            return s__Slider_maximum[this]
        endfunction

        function s__Slider__set_step takes integer this,real value returns nothing
            set s__Slider_stepping[this]=value

            call BlzFrameSetStepSize((s__Slider_Components___Operators____frame[(this)]), s__Slider_stepping[this]) // INLINED!!
        endfunction

        function s__Slider__get_step takes integer this returns real
            return s__Slider_stepping[this]
        endfunction

        function s__Slider__set_value takes integer this,real val returns nothing
            call BlzFrameSetValue((s__Slider_Components___Operators____frame[(this)]), val) // INLINED!!
        endfunction

        function s__Slider__get_value takes integer this returns real
            return BlzFrameGetValue((s__Slider_Components___Operators____frame[(this)])) // INLINED!!
        endfunction

        function s__Slider__set_onSlide takes integer this,code c returns nothing
            call DestroyTrigger(s__Slider_slided[this])
            set s__Slider_slided[this]=null

            if c != null then
                set s__Slider_slided[this]=CreateTrigger()
                call TriggerAddCondition(s__Slider_slided[this], Condition(c))
            endif
        endfunction

        function s__Slider_destroy takes integer this returns nothing
            call BlzDestroyFrame((s__Slider_Components___Operators____frame[(this)])) // INLINED!!
            call DestroyTrigger(s__Slider_slided[this])

            set s__Slider_Components___Operators____frame[(this)]=(null) // INLINED!!
            set s__Slider_parent[this]=null
            set s__Slider_slided[this]=null
        endfunction

        function s__Slider_get takes nothing returns integer
            return (LoadInteger(Table___ht, (s__Slider_table), (GetHandleId(BlzGetTriggerFrame())))) // INLINED!!
        endfunction

        function s__Slider_create takes real x,real y,real width,real height,framehandle parent,string template returns integer
            local integer this= s__Slider__allocate()

            if parent == null then
                set parent=Components___CONSOLE
            endif

            if template == "" or template == null then
                set template="EscMenuSliderTemplate"
            endif

            call s__Slider__set_x(this,x)
            call s__Slider__set_y(this,y)
            call s__Slider__set_width(this,width)
            call s__Slider__set_height(this,height)
            set s__Slider_parent[this]=parent
            set s__Slider_Components___Operators____frame[(this)]=(BlzCreateFrame(template, parent, 0, 0)) // INLINED!!
            call SaveInteger(Table___ht, (s__Slider_table), (GetHandleId((s__Slider_Components___Operators____frame[(this)]))), ( this)) // INLINED!!

            if parent == Components___CONSOLE or parent == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Slider_Components___Operators____frame[(this)]), (s__Slider_Components___Operators____point[(this)]), x, y) // INLINED!!
            else
                call BlzFrameSetPoint((s__Slider_Components___Operators____frame[(this)]), (s__Slider_Components___Operators____point[(this)]), parent, (s__Slider_Components___Operators____relative[(this)]), x, y) // INLINED!!
            endif

            call BlzFrameSetSize((s__Slider_Components___Operators____frame[(this)]), width, height) // INLINED!!
            call BlzFrameSetStepSize((s__Slider_Components___Operators____frame[(this)]), s__Slider_stepping[this]) // INLINED!!
            call BlzFrameSetMinMaxValue((s__Slider_Components___Operators____frame[(this)]), s__Slider_minimum[this], s__Slider_maximum[this]) // INLINED!!
            call BlzTriggerRegisterFrameEvent(s__Slider_event, (s__Slider_Components___Operators____frame[(this)]), FRAMEEVENT_SLIDER_VALUE_CHANGED) // INLINED!!

            return this
        endfunction

        function s__Slider_onSlided takes nothing returns nothing
            local integer this= (LoadInteger(Table___ht, (s__Slider_table), (GetHandleId(BlzGetTriggerFrame())))) // INLINED!!

            if this != 0 then
                if (st__Components___IComponent_onSlide[si__Components___IComponent_type[this]]!=null) then
                    call sc__Components___IComponent_onSlide(this)
                endif

                if s__Slider_slided[this] != null then
                    call TriggerEvaluate(s__Slider_slided[this])
                endif
            endif
        endfunction

        function s__Slider_onInit takes nothing returns nothing
            set s__Slider_table=s__Table_create()

            call TriggerAddAction(s__Slider_event, function s__Slider_onSlided)
        endfunction



        function s__Button__set_available takes integer this,boolean flag returns nothing
            call sc__Backdrop__set_visible(s__Button_block[this],not flag)
        endfunction

        function s__Button__get_available takes integer this returns boolean
            return not sc__Backdrop__get_visible(s__Button_block[this])
        endfunction

        function s__Button__set_checked takes integer this,boolean flag returns nothing
            call sc__Backdrop__set_visible(s__Button_check[this],flag)
        endfunction

        function s__Button__get_checked takes integer this returns boolean
            return sc__Backdrop__get_visible(s__Button_check[this])
        endfunction

        function s__Button__set_highlighted takes integer this,boolean flag returns nothing
            set s__Button_isHighlighted[this]=flag

            call BlzFrameSetVisible(s__Button_highlight[this], flag)
        endfunction

        function s__Button__get_highlighted takes integer this returns boolean
            return s__Button_isHighlighted[this]
        endfunction

        function s__Button_destroy takes integer this returns nothing
            call s__Backdrop_destroy(s__Button_check[this])
            call s__Backdrop_destroy(s__Button_block[this])
            call s__Sprite_destroy(s__Button_tagger[this])
            call s__Sprite_destroy(s__Button_sprite[this])
            call s__Sprite_destroy(s__Button_player[this])
            call s__Tooltip_destroy(s__Button_tooltip[this])
            call BlzDestroyFrame(s__Button_highlight[this])

            call s__Component_destroy(this)

            set s__Button_highlight[this]=null
        endfunction

        function s__Button_play takes integer this,string model,real scale,integer animation returns nothing
            if model != "" and model != null then
                call s__Sprite__set_scale(s__Button_sprite[this],scale)
                call s__Sprite__set_model(s__Button_sprite[this],model)
                call s__Sprite__set_animation(s__Button_sprite[this],animation)
            endif
        endfunction

        function s__Button_display takes integer this,string model,real scale,real offsetX,real offsetY returns nothing
            call s__Sprite__set_visible(s__Button_player[this],model != "" and model != null)

            if (s__Sprite_Components___Operators____visible[(s__Button_player[this])]) then // INLINED!!
                call s__Sprite__set_x(s__Button_player[this],offsetX)
                call s__Sprite__set_y(s__Button_player[this],offsetY)
                call s__Sprite__set_scale(s__Button_player[this],scale)
                call s__Sprite__set_model(s__Button_player[this],model)
            endif
        endfunction

        function s__Button_tag takes integer this,string model,real scale,real offsetX,real offsetY returns nothing
            call s__Sprite__set_visible(s__Button_tagger[this],model != "" and model != null)
            
            if (s__Sprite_Components___Operators____visible[(s__Button_tagger[this])]) then // INLINED!!
                call s__Sprite__set_x(s__Button_tagger[this],offsetX)
                call s__Sprite__set_y(s__Button_tagger[this],offsetY)
                call s__Sprite__set_scale(s__Button_tagger[this],scale)
                call s__Sprite__set_model(s__Button_tagger[this],model)
            endif
        endfunction

        function s__Button_create takes real x,real y,real width,real height,framehandle parent,boolean simpleTooltip returns integer
            local integer this= s__Button__allocate(x , y , width , height , parent , "ComponentFrame" , null)

            set s__Button_check[this]=s__Backdrop_create(0 , 0 , width , height , (s__Component_Components___Operators____frame[(this)]) , Components___CHECKED_BUTTON) // INLINED!!
            set s__Button_block[this]=s__Backdrop_create(0 , 0 , width , height , (s__Component_Components___Operators____frame[(this)]) , Components___UNAVAILABLE_BUTTON) // INLINED!!
            set s__Button_sprite[this]=s__Sprite_create(0 , 0 , width , height , (s__Component_Components___Operators____frame[(this)]) , FRAMEPOINT_CENTER , FRAMEPOINT_CENTER) // INLINED!!
            set s__Button_tagger[this]=s__Sprite_create(0 , 0 , 0.00001 , 0.00001 , (s__Component_Components___Operators____frame[(this)]) , FRAMEPOINT_BOTTOMLEFT , FRAMEPOINT_BOTTOMLEFT) // INLINED!!
            set s__Button_player[this]=s__Sprite_create(0 , 0 , 0.00001 , 0.00001 , (s__Component_Components___Operators____frame[(this)]) , FRAMEPOINT_BOTTOMLEFT , FRAMEPOINT_BOTTOMLEFT) // INLINED!!
            set s__Button_tooltip[this]=s__Tooltip_create((s__Component_Components___Operators____frame[(this)]) , Components___TOOLTIP_SIZE , FRAMEPOINT_TOPLEFT , simpleTooltip) // INLINED!!
            set s__Button_highlight[this]=BlzCreateFrame("HighlightFrame", (s__Component_Components___Operators____frame[(this)]), 0, 0) // INLINED!!
            call sc__Backdrop__set_visible(s__Button_check[(this)],(false)) // INLINED!!
            call sc__Backdrop__set_visible(s__Button_block[(this)],not (true)) // INLINED!!
            call s__Button__set_highlighted(this,false)

            call BlzFrameSetTooltip((s__Component_listener[(this)]), s__Tooltip_frame[s__Button_tooltip[this]]) // INLINED!!
            call BlzFrameSetPoint(s__Button_highlight[this], FRAMEPOINT_TOPLEFT, (s__Component_Components___Operators____frame[(this)]), FRAMEPOINT_TOPLEFT, - 0.004, 0.0045) // INLINED!!
            call BlzFrameSetSize(s__Button_highlight[this], width + 0.0085, height + 0.0085)
            call BlzFrameSetTexture(s__Button_highlight[this], Components___HIGHLIGHT, 0, true)

            return this
        endfunction

        function s__Panel_destroy takes integer this returns nothing
            call s__Component_destroy(this)
        endfunction

        function s__Panel_create takes real x,real y,real width,real height,framehandle parent,string template returns integer
            return s__Panel__allocate(x , y , width , height , parent , "PanelFrame" , template)
        endfunction

        function s__Line_destroy takes integer this returns nothing
            call s__Backdrop_destroy(this)
        endfunction
            
        function s__Line_create takes real x,real y,real width,real height,framehandle parent,string texture returns integer
            return s__Line__allocate(x , y , width , height , parent , texture)
        endfunction

//library Components ends
//library CooldownReduction:
    
        // Intro
        //     This library intension in to introduce to warcraft an easy way to 
        //     manipulate abilities cooldowns based on a cooldown reduction value that
        //     is unique for each unit.
    
        // How it Works?
        //     When casting an ability, its "new" cooldown is calculated based on the 
        //     amount of cooldown reduction of the casting unit. the formula for 
        //     calculation is:
        //         Cooldown = (Default Cooldown - Cooldown Offset) * [(1 - source1)*(1 - source2)*...] * (1 - Cooldown Reduction Flat)
    
        //     The system also allow negative values for CDR, resulting in increased
        //     ability cooldown.
    
        //     It does not acumulate because the abilities are registered automatically
        //     on the first cast, saving its base cooldown (Object Editor values) and 
        //     always using this base value for calculation, so you can still edit 
        //     the ability via the editor and the system takes care of the rest.
    
        // How to Import
        //     simply copy the CooldownReduction folder over to your map, and start 
        //     use the API functions
    
        // Requirements
        //     CooldownReduction requires RegisterPlayerUnitEvent, Alloc and a Unit Indexer.
        //     Credits to Magtheridon96 for RegisterPlayerUnitEvent and to Bribe for
        //     the UnitIndexer. It also requires patch 1.31+.
    
        //     RegisterPlayerUnitEvent: www.hiveworkshop.com/threads/snippet-registerplayerunitevent.203338/
        //     UnitIndexer: www.hiveworkshop.com/threads/gui-unit-indexer-1-4-0-0.197329/#resource-45899
        //     Alloc: www.hiveworkshop.com/threads/snippet-alloc.192348/
        
        
        
        
        
        // Use this function to filter out units you dont want to have abilities registered.
        // By default dummy units do not trigger the system.
        function CooldownReduction___UnitFilter takes unit source returns boolean
            return GetUnitAbilityLevel(source, 'Aloc') == 0
        endfunction
        
        
        
        
        
//Implemented from module Alloc:
   
        function s__CooldownReduction___AbilityList_allocate takes nothing returns integer
            local integer this
   
            if ( s__CooldownReduction___AbilityList_Alloc___recycle[(0)] == 0 ) then
                set s__CooldownReduction___AbilityList_Alloc___instanceCount=s__CooldownReduction___AbilityList_Alloc___instanceCount + 1
                set this=s__CooldownReduction___AbilityList_Alloc___instanceCount
            else
                set this=s__CooldownReduction___AbilityList_Alloc___recycle[(0)]
                set s__CooldownReduction___AbilityList_Alloc___recycle[(0)]=s__CooldownReduction___AbilityList_Alloc___recycle[s__CooldownReduction___AbilityList_Alloc___recycle[(0)]]
            endif

   
            return this
        endfunction
   
        function s__CooldownReduction___AbilityList_deallocate takes integer this returns nothing
            set s__CooldownReduction___AbilityList_Alloc___recycle[this]=s__CooldownReduction___AbilityList_Alloc___recycle[(0)]
            set s__CooldownReduction___AbilityList_Alloc___recycle[(0)]=this
        endfunction
//Implemented from module CooldownReduction___List:
    
            function s__CooldownReduction___AbilityList_init takes integer this returns integer
                set s__CooldownReduction___AbilityList_next[this]=this
                set s__CooldownReduction___AbilityList_prev[this]=this
    
                return this
            endfunction
    
            function s__CooldownReduction___AbilityList_push takes integer this,integer node returns integer
                set s__CooldownReduction___AbilityList_prev[node]=s__CooldownReduction___AbilityList_prev[this]
                set s__CooldownReduction___AbilityList_next[node]=this
                set s__CooldownReduction___AbilityList_next[s__CooldownReduction___AbilityList_prev[this]]=node
                set s__CooldownReduction___AbilityList_prev[this]=node
    
                return node
            endfunction
    
            function s__CooldownReduction___AbilityList_pop takes integer this returns nothing
                set s__CooldownReduction___AbilityList_next[s__CooldownReduction___AbilityList_prev[this]]=s__CooldownReduction___AbilityList_next[this]
                set s__CooldownReduction___AbilityList_prev[s__CooldownReduction___AbilityList_next[this]]=s__CooldownReduction___AbilityList_prev[this]
            endfunction
            
            
            function s__CooldownReduction___AbilityList_destroy takes integer this returns nothing
                local integer node= s__CooldownReduction___AbilityList_next[this]
            
                loop
                    exitwhen node == this
                        set s__CooldownReduction___AbilityList_ability[node]=null
                        call s__Table_destroy(s__CooldownReduction___AbilityList_defaults[node])
                        call s__CooldownReduction___AbilityList_pop(node)
                        call s__CooldownReduction___AbilityList_deallocate(node)
                    set node=s__CooldownReduction___AbilityList_next[node]
                endloop
                call s__CooldownReduction___AbilityList_deallocate(this)
    
                set s__CooldownReduction___AbilityList_unit[this]=null
            endfunction
            
            function s__CooldownReduction___AbilityList_insert takes integer this,integer id returns integer
                local integer node= s__CooldownReduction___AbilityList_push(this,s__CooldownReduction___AbilityList_allocate())
                local integer i= 0
    
                set s__CooldownReduction___AbilityList_id[node]=id
                set s__CooldownReduction___AbilityList_ability[node]=BlzGetUnitAbility(s__CooldownReduction___AbilityList_unit[this], id)
                set s__CooldownReduction___AbilityList_levels[node]=BlzGetAbilityIntegerField(s__CooldownReduction___AbilityList_ability[node], ABILITY_IF_LEVELS)
                set s__CooldownReduction___AbilityList_defaults[node]=s__Table_create()
                
                loop
                    exitwhen i >= s__CooldownReduction___AbilityList_levels[node]
                        call SaveReal(Table___ht, (((s__CooldownReduction___AbilityList_defaults[node]))), (i), (( BlzGetAbilityRealLevelField(s__CooldownReduction___AbilityList_ability[node], ABILITY_RLF_COOLDOWN, i))*1.0)) // INLINED!!
                    set i=i + 1
                endloop
    
                return node
            endfunction
            
            function s__CooldownReduction___AbilityList_update takes integer this,integer count,real normal,real flat,real offset returns nothing
                local integer node= s__CooldownReduction___AbilityList_next[this]
                local real cooldown
                local integer i
            
                loop
                    exitwhen node == this
                        set i=0
                        loop
                            exitwhen i >= s__CooldownReduction___AbilityList_levels[node]
                                if count > 0 then
                                    set cooldown=( ( (LoadReal(Table___ht, (((s__CooldownReduction___AbilityList_defaults[node]))), (i))) - offset ) * normal * ( 1 - flat ) ) // INLINED!!
                                else
                                    set cooldown=( ( (LoadReal(Table___ht, (((s__CooldownReduction___AbilityList_defaults[node]))), (i))) - offset ) * ( 1 - flat ) ) // INLINED!!
                                endif
                                call BlzSetAbilityRealLevelField(s__CooldownReduction___AbilityList_ability[node], ABILITY_RLF_COOLDOWN, i, cooldown)
                                call IncUnitAbilityLevel(s__CooldownReduction___AbilityList_unit[this], s__CooldownReduction___AbilityList_id[node])
                                call DecUnitAbilityLevel(s__CooldownReduction___AbilityList_unit[this], s__CooldownReduction___AbilityList_id[node])
                            set i=i + 1
                        endloop
                    set node=s__CooldownReduction___AbilityList_next[node]
                endloop
            endfunction
            
            function s__CooldownReduction___AbilityList_calculate takes integer this,integer id,integer level,real cooldown,integer count,real normal,real flat,real offset returns nothing
                if count > 0 then
                    call BlzSetAbilityRealLevelField(BlzGetUnitAbility(s__CooldownReduction___AbilityList_unit[this], id), ABILITY_RLF_COOLDOWN, level, ( ( cooldown - offset ) * normal * ( 1 - flat ) ))
                else
                    call BlzSetAbilityRealLevelField(BlzGetUnitAbility(s__CooldownReduction___AbilityList_unit[this], id), ABILITY_RLF_COOLDOWN, level, ( ( cooldown - offset ) * ( 1 - flat ) ))
                endif
                call IncUnitAbilityLevel(s__CooldownReduction___AbilityList_unit[this], id)
                call DecUnitAbilityLevel(s__CooldownReduction___AbilityList_unit[this], id)
            endfunction
            
            function s__CooldownReduction___AbilityList_simulate takes integer this,real cooldown,integer count,real normal,real flat,real offset returns real
                local real cd
                
                if count > 0 then
                    set cd=( ( cooldown - offset ) * normal * ( 1 - flat ) )
                else
                    set cd=( ( cooldown - offset ) * ( 1 - flat ) )
                endif
                
                return cd
            endfunction
            
            function s__CooldownReduction___AbilityList_create takes unit source returns integer
                local integer this= s__CooldownReduction___AbilityList_init((s__CooldownReduction___AbilityList_allocate()))
                
                set s__CooldownReduction___AbilityList_unit[this]=source
                
                return this
            endfunction
        
        
            function s__CDR_getInstance takes unit source returns integer
                local integer i= GetUnitUserData(source)
                
                if s__CDR_n[i] == 0 then
                    set s__CDR_n[i]=s__CooldownReduction___AbilityList_create(source)
                endif
    
                return s__CDR_n[i]
            endfunction
        
            function s__CDR_update takes unit u returns nothing
                local integer id= GetUnitUserData(u)
                local integer list= s__CDR_getInstance(u)
    
                call s__CooldownReduction___AbilityList_update(list,s__CDR_count[id] , s__CDR_normal[id] , s__CDR_flat[id] , s__CDR_offset[id])
            endfunction
            
            function s__CDR_calculate takes unit u returns real
                local integer idx= GetUnitUserData(u)
                local integer id= GetHandleId(u)
                local integer i= 0
                local real cdr= 0
                local real aux
    
                loop
                    exitwhen i > s__CDR_count[idx]
                        set aux=LoadReal(s__CDR_hashtable, id, i)
                        
                        if i > 0 then
                            set cdr=cdr * ( 1 - aux )
                        else
                            set cdr=1 - aux
                        endif
                    set i=i + 1
                endloop
    
                return cdr
            endfunction
        
            function s__CDR_get takes unit u,integer types returns real
                if types == 0 then
                    return s__CDR_normal[GetUnitUserData(u)]
                elseif types == 1 then
                    return s__CDR_flat[GetUnitUserData(u)]
                else
                    return s__CDR_offset[GetUnitUserData(u)]
                endif
            endfunction
    
            function s__CDR_Set takes unit u,real value,integer types returns nothing
                if types == 0 then
                    set s__CDR_normal[GetUnitUserData(u)]=value
                elseif types == 1 then
                    set s__CDR_flat[GetUnitUserData(u)]=value
                else
                    set s__CDR_offset[GetUnitUserData(u)]=value
                endif
    
                call s__CDR_update(u)
            endfunction
    
            function s__CDR_add takes unit u,real amount returns nothing
                local integer i= GetUnitUserData(u)
    
                if amount != 0 then
                    call SaveReal(s__CDR_hashtable, GetHandleId(u), s__CDR_count[i], amount)
                    set s__CDR_normal[i]=s__CDR_calculate(u)
                    set s__CDR_count[i]=s__CDR_count[i] + 1
                    call s__CDR_update(u)
                endif
            endfunction
            
            function s__CDR_remove takes unit u,real amount returns boolean
                local integer idx= GetUnitUserData(u)
                local integer id= GetHandleId(u)
                local boolean removed= false
                local integer i= 0
                local real aux
    
                if amount == 0 then
                    return false
                endif
    
                loop
                    exitwhen i > s__CDR_count[idx] - 1
                        set aux=LoadReal(s__CDR_hashtable, id, i)
                        
                        if aux == amount then
                            set removed=true

                            call RemoveSavedReal(s__CDR_hashtable, id, i)

                            if i != s__CDR_count[idx] - 1 then
                                set aux=LoadReal(s__CDR_hashtable, id, s__CDR_count[idx] - 1)
                                call SaveReal(s__CDR_hashtable, id, i, aux)
                                call RemoveSavedReal(s__CDR_hashtable, id, s__CDR_count[idx] - 1)
                            endif

                            set s__CDR_count[idx]=s__CDR_count[idx] - 1
                            set s__CDR_normal[idx]=s__CDR_calculate(u)
                            set i=s__CDR_count[idx] + 1

                            call s__CDR_update(u)
                        else
                            set i=i + 1
                        endif
                endloop

                return removed
            endfunction
        
            function s__CDR_calculateCooldown takes unit u,integer id,integer level,real cooldown returns nothing
                local integer i= GetUnitUserData(u)
                local integer list= s__CDR_getInstance(u)
    
                call s__CooldownReduction___AbilityList_calculate(list,id , level - 1 , cooldown , s__CDR_count[i] , s__CDR_normal[i] , s__CDR_flat[i] , s__CDR_offset[i])
            endfunction
            
            function s__CDR_simulateCooldown takes unit u,real cooldown returns real
                local integer i= GetUnitUserData(u)
                local integer list= s__CDR_getInstance(u)
    
                return s__CooldownReduction___AbilityList_simulate(list,cooldown , s__CDR_count[i] , s__CDR_normal[i] , s__CDR_flat[i] , s__CDR_offset[i])
            endfunction
        
            function s__CDR_register takes unit u,integer id returns nothing
                local integer list
                local integer i
                
                if (GetUnitAbilityLevel((u), 'Aloc') == 0) then // INLINED!!
                    set list=s__CDR_getInstance(u)
                    set i=GetUnitUserData(u)
                    
                    if not LoadBoolean(s__CDR_hashtable, list, id) then
                        call s__CooldownReduction___AbilityList_insert(list,id)
                        call SaveBoolean(s__CDR_hashtable, list, id, true)
                        
                        if s__CDR_count[i] > 0 or s__CDR_normal[i] != 0 or s__CDR_flat[i] != 0 or s__CDR_offset[i] != 0 then
                            call s__CDR_update(u)
                        endif
                    endif
                endif
            endfunction
        
            function s__CDR_onCast takes nothing returns nothing
                call s__CDR_register(GetTriggerUnit() , GetSpellAbilityId())
            endfunction
            
            function s__CDR_onLevel takes nothing returns nothing
                call s__CDR_register(GetTriggerUnit() , GetLearnedSkill())
            endfunction
            
            function s__CDR_onDeindex takes nothing returns nothing
                local unit source= (s__Indexer_unit) // INLINED!!
                local integer i= GetUnitUserData(source)
                local integer list= s__CDR_getInstance(source)
                
                set s__CDR_n[i]=0
                set s__CDR_normal[i]=0
                set s__CDR_flat[i]=0
                set s__CDR_offset[i]=0
                set s__CDR_count[i]=0
    
                if list != 0 then
                    call s__CooldownReduction___AbilityList_destroy(list)
                    call FlushChildHashtable(s__CDR_hashtable, list)
                endif
                call FlushChildHashtable(s__CDR_hashtable, GetHandleId(source))
            endfunction
        
            function s__CDR_onInit takes nothing returns nothing
                call TriggerAddCondition(s__Indexer_onDeindex, Filter((function s__CDR_onDeindex))) // INLINED!!
                call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT , function s__CDR_onCast)
                call RegisterPlayerUnitEvent(EVENT_PLAYER_HERO_SKILL , function s__CDR_onLevel)
            endfunction
        
        
        
        
        function GetUnitCooldownReduction takes unit u returns real
            return 1 - s__CDR_get(u , 0)
        endfunction
    
        function GetUnitCooldownReductionFlat takes unit u returns real
            return s__CDR_get(u , 1)
        endfunction
    
        function GetUnitCooldownOffset takes unit u returns real
            return s__CDR_get(u , 2)
        endfunction
    
        function SetUnitCooldownReduction takes unit u,real value returns nothing
            call s__CDR_Set(u , value , 0)
        endfunction
    
        function SetUnitCooldownReductionFlat takes unit u,real value returns nothing
            call s__CDR_Set(u , value , 1)
        endfunction
    
        function SetUnitCooldownOffset takes unit u,real value returns nothing
            call s__CDR_Set(u , value , 2)
        endfunction
    
        function UnitAddCooldownReduction takes unit u,real value returns nothing
            call s__CDR_add(u , value)
        endfunction
    
        function UnitAddCooldownReductionFlat takes unit u,real value returns nothing
            call s__CDR_Set(u , s__CDR_get(u , 1) + value , 1)
        endfunction
    
        function UnitAddCooldownOffset takes unit u,real value returns nothing
            call s__CDR_Set(u , s__CDR_get(u , 2) + value , 2)
        endfunction
    
        function UnitRemoveCooldownReduction takes unit u,real value returns boolean
            return s__CDR_remove(u , value)
        endfunction
    
        function CalculateAbilityCooldown takes unit u,integer id,integer level,real cooldown returns nothing
            call s__CDR_calculateCooldown(u , id , level , cooldown)
        endfunction 
        
        function SimulateAbilityCooldown takes unit u,real cooldown returns real
            return s__CDR_simulateCooldown(u , cooldown)
        endfunction 
        
        function RegisterAbility takes unit u,integer id returns nothing
            call s__CDR_register(u , id)
        endfunction

//library CooldownReduction ends
//library DamageInterface:
    
    // Allows for easy registration of specific damage type events like on attack
    // damage or on spell damage, etc...
    
    
    
    

    
    
    
    
    function RegisterAttackDamageEvent takes code c returns nothing
        call sc__Damage_register(null , DAMAGE_TYPE_NORMAL , c , true)
    endfunction
    
    function RegisterSpellDamageEvent takes code c returns nothing
        call sc__Damage_register(ATTACK_TYPE_NORMAL , null , c , true)
    endfunction

    function RegisterDamageEvent takes attacktype attack,damagetype damage,code c returns nothing
        call sc__Damage_register(attack , damage , c , true)
    endfunction

    function RegisterAnyDamageEvent takes code c returns nothing
        call TriggerAddCondition(s__Damage_anyAfter, Filter(c))
    endfunction

    function RegisterAttackDamagingEvent takes code c returns nothing
        call sc__Damage_register(null , DAMAGE_TYPE_NORMAL , c , false)
    endfunction
    
    function RegisterSpellDamagingEvent takes code c returns nothing
        call sc__Damage_register(ATTACK_TYPE_NORMAL , null , c , false)
    endfunction

    function RegisterDamagingEvent takes attacktype attack,damagetype damage,code c returns nothing
        call sc__Damage_register(attack , damage , c , false)
    endfunction 

    function RegisterAnyDamagingEvent takes code c returns nothing
        call TriggerAddCondition(s__Damage_anyBefore, Filter(c))
    endfunction

    
    function RegisterEvasionEvent takes code c returns nothing
        call TriggerAddCondition(s__Evasion_trigger, Filter((c))) // INLINED!!
    endfunction

    function GetMissingUnit takes nothing returns unit
        return s__DamageInterface___Unit_unit[s__Evasion_source]
    endfunction

    function GetEvadingUnit takes nothing returns unit
        return s__DamageInterface___Unit_unit[s__Evasion_target]
    endfunction

    function GetEvadedDamage takes nothing returns real
        return s__Evasion_damage
    endfunction

    function GetUnitEvasionChance takes unit u returns real
        return (s__Evasion_evasion[GetUnitUserData((u))]) // INLINED!!
    endfunction

    function GetUnitMissChance takes unit u returns real
        return (s__Evasion_miss[GetUnitUserData((u))]) // INLINED!!
    endfunction

    function SetUnitEvasionChance takes unit u,real chance returns real
        return sc__Evasion_setEvasionChance(u , chance)
    endfunction

    function SetUnitMissChance takes unit u,real chance returns real
        return sc__Evasion_setMissChance(u , chance)
    endfunction

    function UnitAddEvasionChance takes unit u,real chance returns real
        return sc__Evasion_setEvasionChance(u , (s__Evasion_evasion[GetUnitUserData((u))]) + chance) // INLINED!!
    endfunction

    function UnitAddMissChance takes unit u,real chance returns real
        return sc__Evasion_setMissChance(u , (s__Evasion_miss[GetUnitUserData((u))]) + chance) // INLINED!!
    endfunction

    function MakeUnitNeverMiss takes unit u,boolean flag returns nothing
        if flag then
            set s__Evasion_pierce[GetUnitUserData(u)]=s__Evasion_pierce[GetUnitUserData(u)] + 1
        else
            set s__Evasion_pierce[GetUnitUserData(u)]=s__Evasion_pierce[GetUnitUserData(u)] - 1
        endif
    endfunction

    function DoUnitNeverMiss takes unit u returns boolean
        return s__Evasion_pierce[GetUnitUserData(u)] > 0
    endfunction
    
    
    function RegisterCriticalStrikeEvent takes code c returns nothing
        call TriggerAddCondition(s__Critical_trigger, Filter((c))) // INLINED!!
    endfunction

    function GetCriticalSource takes nothing returns unit
        return s__DamageInterface___Unit_unit[s__Critical_source]
    endfunction

    function GetCriticalTarget takes nothing returns unit
        return s__DamageInterface___Unit_unit[s__Critical_target]
    endfunction

    function GetCriticalDamage takes nothing returns real
        return s__Critical_damage
    endfunction

    function GetUnitCriticalChance takes unit u returns real
        return (s__Critical_chance[GetUnitUserData((u))]) // INLINED!!
    endfunction

    function GetUnitCriticalMultiplier takes unit u returns real
        return (s__Critical_multiplier[GetUnitUserData((u))]) // INLINED!!
    endfunction

    function SetUnitCriticalChance takes unit u,real value returns real
        return sc__Critical_setChance(u , value)
    endfunction

    function SetUnitCriticalMultiplier takes unit u,real value returns real
        return sc__Critical_setMultiplier(u , value)
    endfunction

    function SetCriticalEventDamage takes real newValue returns nothing
        set s__Critical_damage=newValue
    endfunction

    function UnitAddCriticalStrike takes unit u,real chance,real multiplier returns nothing
        call sc__Critical_add(u , chance , multiplier)
    endfunction

    
    function GetUnitMagicResistance takes unit u returns real
        return sc__MagicResistance_get(u)
    endfunction

    function SetUnitMagicResistance takes unit u,real value returns real
        return sc__MagicResistance_Set(u , value)
    endfunction

    function UnitAddMagicResistance takes unit u,real value returns real
        return sc__MagicResistance_Set(u , sc__MagicResistance_get(u) + value)
    endfunction

    
    function GetUnitArmorPenetration takes unit u,boolean flat returns real
        return sc__ArmorPenetration_get(u , flat)
    endfunction

    function SetUnitArmorPenetration takes unit u,real value,boolean flat returns real
        return sc__ArmorPenetration_Set(u , value , flat)
    endfunction

    function UnitAddArmorPenetration takes unit u,real value,boolean flat returns real
        return sc__ArmorPenetration_Set(u , sc__ArmorPenetration_get(u , flat) + value , flat)
    endfunction
    
    function GetArmorReduction takes unit source,unit target returns real
        local real armor= BlzGetUnitArmor(target) - (sc__ArmorPenetration_get((source ) , ( true))) // INLINED!!

        if armor > 0 then
            set armor=armor * ( 1 - (sc__ArmorPenetration_get((source ) , ( false))) ) // INLINED!!
        endif

        return ( armor * DamageInterface___ARMOR_MULTIPLIER ) / ( 1 + ( armor * DamageInterface___ARMOR_MULTIPLIER ) )
    endfunction

    
    function GetUnitMagicPenetration takes unit u,boolean flat returns real
        return sc__MagicPenetration_get(u , flat)
    endfunction

    function SetUnitMagicPenetration takes unit u,real value,boolean flat returns real
        return sc__MagicPenetration_Set(u , value , flat)
    endfunction

    function UnitAddMagicPenetration takes unit u,real value,boolean flat returns real
        return sc__MagicPenetration_Set(u , sc__MagicPenetration_get(u , flat) + value , flat)
    endfunction

    function GetMagicReduction takes unit source,unit target returns real
        local real magic= (sc__MagicResistance_get((target))) - (sc__MagicPenetration_get((source ) , ( true))) // INLINED!!

        if magic > 0 then
            set magic=magic * ( 1 - (sc__MagicPenetration_get((source ) , ( false))) ) // INLINED!!
        endif

        return ( magic * DamageInterface___MAGIC_MULTIPLIER ) / ( 1 + ( magic * DamageInterface___MAGIC_MULTIPLIER ) )
    endfunction

    
    
    

        
        function s__DamageInterface___Unit_destroy takes integer this returns nothing
            set s__DamageInterface___Unit_unit[this]=null
            call s__DamageInterface___Unit_deallocate(this)
        endfunction

        function s__DamageInterface___Unit__get_x takes integer this returns real
            return GetUnitX(s__DamageInterface___Unit_unit[this])
        endfunction

        function s__DamageInterface___Unit__get_y takes integer this returns real
            return GetUnitY(s__DamageInterface___Unit_unit[this])
        endfunction

        function s__DamageInterface___Unit__get_z takes integer this returns real
            call MoveLocation(s__DamageInterface___Unit_location, GetUnitX(s__DamageInterface___Unit_unit[this]), GetUnitY(s__DamageInterface___Unit_unit[this]))
            return GetUnitFlyHeight(s__DamageInterface___Unit_unit[this]) + GetLocationZ(s__DamageInterface___Unit_location)
        endfunction

        function s__DamageInterface___Unit__get_id takes integer this returns integer
            return GetUnitUserData(s__DamageInterface___Unit_unit[this])
        endfunction

        function s__DamageInterface___Unit__get_type takes integer this returns integer
            return GetUnitTypeId(s__DamageInterface___Unit_unit[this])
        endfunction

        function s__DamageInterface___Unit__get_handle takes integer this returns integer
            return GetHandleId(s__DamageInterface___Unit_unit[this])
        endfunction

        function s__DamageInterface___Unit__get_player takes integer this returns player
            return GetOwningPlayer(s__DamageInterface___Unit_unit[this])
        endfunction

        function s__DamageInterface___Unit__get_armor takes integer this returns real
            return BlzGetUnitArmor(s__DamageInterface___Unit_unit[this])
        endfunction

        function s__DamageInterface___Unit__get_mana takes integer this returns real
            return GetUnitState(s__DamageInterface___Unit_unit[this], UNIT_STATE_MANA)
        endfunction

        function s__DamageInterface___Unit__get_health takes integer this returns real
            return GetWidgetLife(s__DamageInterface___Unit_unit[this])
        endfunction

        function s__DamageInterface___Unit__get_agility takes integer this returns integer
            return GetHeroAgi(s__DamageInterface___Unit_unit[this], true)
        endfunction

        function s__DamageInterface___Unit__get_strength takes integer this returns integer
            return GetHeroStr(s__DamageInterface___Unit_unit[this], true)
        endfunction

        function s__DamageInterface___Unit__get_intelligence takes integer this returns integer
            return GetHeroInt(s__DamageInterface___Unit_unit[this], true)
        endfunction

        function s__DamageInterface___Unit__get_armortype takes integer this returns armortype
            return ConvertArmorType(BlzGetUnitIntegerField(s__DamageInterface___Unit_unit[this], UNIT_IF_ARMOR_TYPE))
        endfunction

        function s__DamageInterface___Unit__get_defensetype takes integer this returns defensetype
            return ConvertDefenseType(BlzGetUnitIntegerField(s__DamageInterface___Unit_unit[this], UNIT_IF_DEFENSE_TYPE))
        endfunction

        function s__DamageInterface___Unit__get_isHero takes integer this returns boolean
            return IsUnitType(s__DamageInterface___Unit_unit[this], UNIT_TYPE_HERO)
        endfunction

        function s__DamageInterface___Unit__get_isMelee takes integer this returns boolean
            return IsUnitType(s__DamageInterface___Unit_unit[this], UNIT_TYPE_MELEE_ATTACKER)
        endfunction

        function s__DamageInterface___Unit__get_isRanged takes integer this returns boolean
            return IsUnitType(s__DamageInterface___Unit_unit[this], UNIT_TYPE_RANGED_ATTACKER)
        endfunction

        function s__DamageInterface___Unit__get_isSummoned takes integer this returns boolean
            return IsUnitType(s__DamageInterface___Unit_unit[this], UNIT_TYPE_SUMMONED)
        endfunction

        function s__DamageInterface___Unit__get_isStructure takes integer this returns boolean
            return IsUnitType(s__DamageInterface___Unit_unit[this], UNIT_TYPE_STRUCTURE)
        endfunction

        function s__DamageInterface___Unit__get_isMagicImmune takes integer this returns boolean
            return IsUnitType(s__DamageInterface___Unit_unit[this], UNIT_TYPE_MAGIC_IMMUNE)
        endfunction

        function s__DamageInterface___Unit_create takes unit u returns integer
            local integer this= s__DamageInterface___Unit__allocate()

            set s__DamageInterface___Unit_unit[this]=u

            return this
        endfunction




        function s__Damage_destroy takes integer this returns nothing
            call s__DamageInterface___Unit_destroy(s__Damage_sources[this])
            call s__DamageInterface___Unit_destroy(s__Damage_targets[this])

            set s__Damage_damage[this]=0
            set s__Damage_evade[this]=false
            set s__Damage_newSource[this]=null
            set s__Damage_newTarget[this]=null
            set s__Damage_attackType[this]=null
            set s__Damage_damageType[this]=null
            set s__Damage_weaponType[this]=null
            set s__Damage_key=s__Damage_key - 1
        endfunction

        function s__Damage__get_source takes nothing returns integer
            return s__Damage_sources[s__Damage_key]
        endfunction

        function s__Damage__set_source takes unit value returns nothing
            set s__Damage_newSource[s__Damage_key]=value
        endfunction

        function s__Damage__get_target takes nothing returns integer
            return s__Damage_targets[s__Damage_key]
        endfunction

        function s__Damage__set_target takes unit value returns nothing
            set s__Damage_newTarget[s__Damage_key]=value
        endfunction

        function s__Damage__get_amount takes nothing returns real
            return s__Damage_damage[s__Damage_key]
        endfunction

        function s__Damage__set_amount takes real value returns nothing
            set s__Damage_damage[s__Damage_key]=value
            call BlzSetEventDamage(value)
        endfunction

        function s__Damage__get_damagetype takes nothing returns damagetype
            return s__Damage_damageType[s__Damage_key]
        endfunction

        function s__Damage__set_damagetype takes damagetype value returns nothing
            set s__Damage_damageType[s__Damage_key]=value
            call BlzSetEventDamageType(value)
        endfunction

        function s__Damage__get_attacktype takes nothing returns attacktype
            return s__Damage_attackType[s__Damage_key]
        endfunction

        function s__Damage__set_attacktype takes attacktype value returns nothing
            set s__Damage_attackType[s__Damage_key]=value
            call BlzSetEventAttackType(value)
        endfunction

        function s__Damage__get_weapontype takes nothing returns weapontype
            return s__Damage_weaponType[s__Damage_key]
        endfunction

        function s__Damage__set_weapontype takes weapontype value returns nothing
            set s__Damage_weaponType[s__Damage_key]=value
            call BlzSetEventWeaponType(value)
        endfunction

        function s__Damage__get_isAlly takes nothing returns boolean
            return IsUnitAlly(s__DamageInterface___Unit_unit[(s__Damage_targets[s__Damage_key])], (GetOwningPlayer(s__DamageInterface___Unit_unit[((s__Damage_sources[s__Damage_key]))]))) // INLINED!!
        endfunction

        function s__Damage__get_isEnemy takes nothing returns boolean
            return IsUnitEnemy(s__DamageInterface___Unit_unit[(s__Damage_targets[s__Damage_key])], (GetOwningPlayer(s__DamageInterface___Unit_unit[((s__Damage_sources[s__Damage_key]))]))) // INLINED!!
        endfunction

        function s__Damage__get_isSpell takes nothing returns boolean
            return (s__Damage_attackType[s__Damage_key]) == ATTACK_TYPE_NORMAL // INLINED!!
        endfunction

        function s__Damage__get_isAttack takes nothing returns boolean
            return (s__Damage_damageType[s__Damage_key]) == DAMAGE_TYPE_NORMAL or BlzGetEventIsAttack() // INLINED!!
        endfunction

        function s__Damage_register takes attacktype attack,damagetype damage,code c,boolean posmitigation returns nothing
            local integer i= GetHandleId(attack)
            local integer j= GetHandleId(damage)

            if posmitigation then
                if not (HaveSavedHandle(Table___ht, (((s__HashTable__getindex(s__Damage_after,i)))), (j))) then // INLINED!!
                    call SaveTriggerHandle(Table___ht, (((s__HashTable__getindex(s__Damage_after,i)))), (j), ( CreateTrigger())) // INLINED!!
                endif
                
                call TriggerAddCondition((LoadTriggerHandle(Table___ht, (((s__HashTable__getindex(s__Damage_after,i)))), (j))), Filter(c)) // INLINED!!
            else
                if not (HaveSavedHandle(Table___ht, (((s__HashTable__getindex(s__Damage_before,i)))), (j))) then // INLINED!!
                    call SaveTriggerHandle(Table___ht, (((s__HashTable__getindex(s__Damage_before,i)))), (j), ( CreateTrigger())) // INLINED!!
                endif

                call TriggerAddCondition((LoadTriggerHandle(Table___ht, (((s__HashTable__getindex(s__Damage_before,i)))), (j))), Filter(c)) // INLINED!!
            endif
        endfunction

        function s__Damage_create takes nothing returns integer
            local integer this= s__Damage_key + 1

            set s__Damage_key=this
            set s__Damage_evade[this]=false
            set s__Damage_newSource[this]=null
            set s__Damage_newTarget[this]=null
            set s__Damage_damage[this]=GetEventDamage()
            set s__Damage_sources[this]=s__DamageInterface___Unit_create(GetEventDamageSource())
            set s__Damage_targets[this]=s__DamageInterface___Unit_create(BlzGetEventDamageTarget())
            set s__Damage_attackType[this]=BlzGetEventAttackType()
            set s__Damage_damageType[this]=BlzGetEventDamageType()
            set s__Damage_weaponType[this]=BlzGetEventWeaponType()


                if ((s__Damage_damageType[s__Damage_key]) == DAMAGE_TYPE_NORMAL or BlzGetEventIsAttack()) then // INLINED!!
                    set s__Damage_evade[this]=sc__Evasion__get_evade()
                endif


            return this
        endfunction

        function s__Damage_onDamaging takes nothing returns nothing
            local integer i
            local integer j
            local integer this= s__Damage_create()

            if (s__Damage_damageType[s__Damage_key]) != DAMAGE_TYPE_UNKNOWN then // INLINED!!
                set i=GetHandleId((s__Damage_attackType[s__Damage_key])) // INLINED!!
                set j=GetHandleId((s__Damage_damageType[s__Damage_key])) // INLINED!!

                if (HaveSavedHandle(Table___ht, (((s__HashTable__getindex(s__Damage_before,i)))), (0))) then // INLINED!!
                    call TriggerEvaluate((LoadTriggerHandle(Table___ht, (((s__HashTable__getindex(s__Damage_before,i)))), (0)))) // INLINED!!
                endif

                if not s__Damage_evade[this] then
                    if (HaveSavedHandle(Table___ht, (((s__HashTable__getindex(s__Damage_before,0)))), (j))) then // INLINED!!
                        call TriggerEvaluate((LoadTriggerHandle(Table___ht, (((s__HashTable__getindex(s__Damage_before,0)))), (j)))) // INLINED!!
                    endif
                endif
                
                if (HaveSavedHandle(Table___ht, (((s__HashTable__getindex(s__Damage_before,i)))), (j))) then // INLINED!!
                    call TriggerEvaluate((LoadTriggerHandle(Table___ht, (((s__HashTable__getindex(s__Damage_before,i)))), (j)))) // INLINED!!
                endif
            endif

            call TriggerEvaluate(s__Damage_anyBefore)
        endfunction

        function s__Damage_onDamage takes nothing returns nothing
            local integer i
            local integer j
            local integer this= s__Damage_key
            local real premitigation= s__Damage_damage[this]

            set s__Damage_damage[this]=GetEventDamage()

            if (s__Damage_damageType[s__Damage_key]) != DAMAGE_TYPE_UNKNOWN then // INLINED!!
                set i=GetHandleId((s__Damage_attackType[s__Damage_key])) // INLINED!!
                set j=GetHandleId((s__Damage_damageType[s__Damage_key])) // INLINED!!

                if ((s__Damage_attackType[s__Damage_key]) == ATTACK_TYPE_NORMAL) then // INLINED!!

                        call s__Damage__set_amount(premitigation * ( 1 - GetMagicReduction(s__DamageInterface___Unit_unit[(s__Damage_sources[s__Damage_key])] , s__DamageInterface___Unit_unit[(s__Damage_targets[s__Damage_key])]) )) // INLINED!!


                    if (HaveSavedHandle(Table___ht, (((s__HashTable__getindex(s__Damage_after,i)))), (0))) then // INLINED!!
                        call TriggerEvaluate((LoadTriggerHandle(Table___ht, (((s__HashTable__getindex(s__Damage_after,i)))), (0)))) // INLINED!!
                    endif
                endif

                if ((s__Damage_damageType[s__Damage_key]) == DAMAGE_TYPE_NORMAL or BlzGetEventIsAttack()) and not s__Damage_evade[this] then // INLINED!!

                        call s__Damage__set_amount(premitigation * ( 1 - GetArmorReduction(s__DamageInterface___Unit_unit[(s__Damage_sources[s__Damage_key])] , s__DamageInterface___Unit_unit[(s__Damage_targets[s__Damage_key])]) )) // INLINED!!


                    if (HaveSavedHandle(Table___ht, (((s__HashTable__getindex(s__Damage_after,0)))), (j))) then // INLINED!!
                        call TriggerEvaluate((LoadTriggerHandle(Table___ht, (((s__HashTable__getindex(s__Damage_after,0)))), (j)))) // INLINED!!
                    endif
                endif
                
                if (HaveSavedHandle(Table___ht, (((s__HashTable__getindex(s__Damage_after,i)))), (j))) then // INLINED!!
                    call TriggerEvaluate((LoadTriggerHandle(Table___ht, (((s__HashTable__getindex(s__Damage_after,i)))), (j)))) // INLINED!!
                endif
            endif

            call TriggerEvaluate(s__Damage_anyAfter)
            call BlzSetEventDamage(s__Damage_damage[this])

            if s__Damage_newSource[this] != null or s__Damage_newTarget[this] != null then
                if s__Damage_newSource[this] != null then
                    set s__DamageInterface___Unit_unit[(s__Damage_sources[s__Damage_key])]=s__Damage_newSource[this] // INLINED!!
                endif

                if s__Damage_newTarget[this] != null then
                    set s__DamageInterface___Unit_unit[(s__Damage_targets[s__Damage_key])]=s__Damage_newTarget[this] // INLINED!!
                endif

                call BlzSetEventDamage(0)
                call UnitDamageTarget(s__DamageInterface___Unit_unit[(s__Damage_sources[s__Damage_key])], s__DamageInterface___Unit_unit[(s__Damage_targets[s__Damage_key])], (s__Damage_damage[s__Damage_key]), false, false, (s__Damage_attackType[s__Damage_key]), (s__Damage_damageType[s__Damage_key]), (s__Damage_weaponType[s__Damage_key])) // INLINED!!
            endif

            call s__Damage_destroy(this)
        endfunction

        function s__Damage_onInit takes nothing returns nothing
            set s__Damage_after=(s__Table_create()) // INLINED!!
            set s__Damage_before=(s__Table_create()) // INLINED!!

            call TriggerRegisterAnyUnitEventBJ(s__Damage_damaged, EVENT_PLAYER_UNIT_DAMAGED)
            call TriggerAddCondition(s__Damage_damaged, Condition(function s__Damage_onDamage))

            call TriggerRegisterAnyUnitEventBJ(s__Damage_damaging, EVENT_PLAYER_UNIT_DAMAGING)
            call TriggerAddCondition(s__Damage_damaging, Condition(function s__Damage_onDamaging))
        endfunction


        function s__Evasion_getEvasionChance takes unit u returns real
            return s__Evasion_evasion[GetUnitUserData(u)]
        endfunction

        function s__Evasion_getMissChance takes unit u returns real
            return s__Evasion_miss[GetUnitUserData(u)]
        endfunction

        function s__Evasion_setEvasionChance takes unit u,real value returns real
            set s__Evasion_evasion[GetUnitUserData(u)]=value

            return value
        endfunction

        function s__Evasion_setMissChance takes unit u,real value returns real
            set s__Evasion_miss[GetUnitUserData(u)]=value

            return value
        endfunction

        function s__Evasion_register takes code c returns nothing
            call TriggerAddCondition(s__Evasion_trigger, Filter(c))
        endfunction

        function s__Evasion__get_evade takes nothing returns boolean
            local texttag text
            local boolean should= false

            if (s__Damage_damage[s__Damage_key]) > 0 and not ( s__Evasion_pierce[(GetUnitUserData(s__DamageInterface___Unit_unit[((s__Damage_sources[s__Damage_key]))]))] > 0 ) then // INLINED!!
                set text=CreateTextTag()
                set should=GetRandomReal(0, 1) <= s__Evasion_evasion[(GetUnitUserData(s__DamageInterface___Unit_unit[((s__Damage_targets[s__Damage_key]))]))] or GetRandomReal(0, 1) <= s__Evasion_miss[(GetUnitUserData(s__DamageInterface___Unit_unit[((s__Damage_sources[s__Damage_key]))]))] // INLINED!!

                if should then
                    set s__Evasion_source=(s__Damage_sources[s__Damage_key]) // INLINED!!
                    set s__Evasion_target=(s__Damage_targets[s__Damage_key]) // INLINED!!
                    set s__Evasion_damage=(s__Damage_damage[s__Damage_key]) // INLINED!!
                    call s__Damage__set_amount(0)
                    call s__Damage__set_weapontype(WEAPON_TYPE_WHOKNOWS)

                    call TriggerEvaluate(s__Evasion_trigger)
                    call SetTextTagText(text, "miss", 0.016)
                    call SetTextTagPosUnit(text, s__DamageInterface___Unit_unit[s__Evasion_source], 0)
                    call SetTextTagColor(text, 255, 0, 0, 255)
                    call SetTextTagLifespan(text, 1.5)
                    call SetTextTagVelocity(text, 0.0, 0.0355)
                    call SetTextTagPermanent(text, false)

                    set s__Evasion_damage=0
                    set s__Evasion_source=0
                    set s__Evasion_target=0
                endif
            endif

            set text=null

            return should
        endfunction



        function s__Critical_getChance takes unit u returns real
            return s__Critical_chance[GetUnitUserData(u)]
        endfunction

        function s__Critical_getMultiplier takes unit u returns real
            return s__Critical_multiplier[GetUnitUserData(u)]
        endfunction

        function s__Critical_setChance takes unit u,real value returns real
            set s__Critical_chance[GetUnitUserData(u)]=value

            return value
        endfunction

        function s__Critical_setMultiplier takes unit u,real value returns real
            set s__Critical_multiplier[GetUnitUserData(u)]=value

            return value
        endfunction

        function s__Critical_add takes unit u,real chance,real multuplier returns nothing
            call s__Critical_setChance(u , (s__Critical_chance[GetUnitUserData((u))]) + chance) // INLINED!!
            call s__Critical_setMultiplier(u , (s__Critical_multiplier[GetUnitUserData((u))]) + multuplier) // INLINED!!
        endfunction

        function s__Critical_register takes code c returns nothing
            call TriggerAddCondition(s__Critical_trigger, Filter(c))
        endfunction

        function s__Critical_onDamage takes nothing returns nothing
            local texttag text

            if (s__Damage_damage[s__Damage_key]) > 0 and GetRandomReal(0, 1) <= s__Critical_chance[(GetUnitUserData(s__DamageInterface___Unit_unit[((s__Damage_sources[s__Damage_key]))]))] and (IsUnitEnemy(s__DamageInterface___Unit_unit[(s__Damage_targets[s__Damage_key])], (GetOwningPlayer(s__DamageInterface___Unit_unit[((s__Damage_sources[s__Damage_key]))])))) and not (IsUnitType(s__DamageInterface___Unit_unit[((s__Damage_targets[s__Damage_key]))], UNIT_TYPE_STRUCTURE)) and s__Critical_multiplier[(GetUnitUserData(s__DamageInterface___Unit_unit[((s__Damage_sources[s__Damage_key]))]))] > 0 then // INLINED!!
                set s__Critical_source=(s__Damage_sources[s__Damage_key]) // INLINED!!
                set s__Critical_target=(s__Damage_targets[s__Damage_key]) // INLINED!!
                set s__Critical_damage=(s__Damage_damage[s__Damage_key]) * ( 1 + s__Critical_multiplier[(GetUnitUserData(s__DamageInterface___Unit_unit[((s__Damage_sources[s__Damage_key]))]))] ) // INLINED!!
                call s__Damage__set_amount(s__Critical_damage)

                call TriggerEvaluate(s__Critical_trigger)

                if s__Critical_damage > 0 then
                    set text=CreateTextTag()

                    call SetTextTagText(text, ( I2S(R2I(s__Critical_damage)) + "!" ), 0.016)
                    call SetTextTagPosUnit(text, s__DamageInterface___Unit_unit[s__Critical_target], 0)
                    call SetTextTagColor(text, 255, 0, 0, 255)
                    call SetTextTagLifespan(text, 1.5)
                    call SetTextTagVelocity(text, 0.0, 0.0355)
                    call SetTextTagPermanent(text, false)
                endif

                set s__Critical_damage=0
                set s__Critical_source=0
                set s__Critical_target=0
            endif

            set text=null
        endfunction

        function s__Critical_onInit takes nothing returns nothing
            call sc__Damage_register(null , DAMAGE_TYPE_NORMAL , (function s__Critical_onDamage) , false) // INLINED!!
        endfunction


        function s__ArmorPenetration_get takes unit u,boolean isFlat returns real
            if isFlat then
                return s__ArmorPenetration_flat[GetUnitUserData(u)]
            else
                return s__ArmorPenetration_percent[GetUnitUserData(u)]
            endif
        endfunction

        function s__ArmorPenetration_Set takes unit u,real value,boolean isFlat returns real
            if isFlat then
                set s__ArmorPenetration_flat[GetUnitUserData(u)]=value
            else
                set s__ArmorPenetration_percent[GetUnitUserData(u)]=value
            endif

            return value
        endfunction


        function s__MagicPenetration_get takes unit u,boolean isFlat returns real
            if isFlat then
                return s__MagicPenetration_flat[GetUnitUserData(u)]
            else
                return s__MagicPenetration_percent[GetUnitUserData(u)]
            endif
        endfunction

        function s__MagicPenetration_Set takes unit u,real value,boolean isFlat returns real
            if isFlat then
                set s__MagicPenetration_flat[GetUnitUserData(u)]=value
            else
                set s__MagicPenetration_percent[GetUnitUserData(u)]=value
            endif

            return value
        endfunction


        function s__MagicResistance_get takes unit u returns real
            local integer id= GetUnitUserData(u)

            if IsUnitType(u, UNIT_TYPE_HERO) and not s__MagicResistance_check[id] then
                set s__MagicResistance_check[id]=true
                set s__MagicResistance_resistance[id]=s__MagicResistance_resistance[id] + DamageInterface___BASE_HERO_MAGIC_RESISTANCE
            endif

            return s__MagicResistance_resistance[GetUnitUserData(u)]
        endfunction

        function s__MagicResistance_Set takes unit u,real value returns real
            set s__MagicResistance_resistance[GetUnitUserData(u)]=value

            return value
        endfunction

//library DamageInterface ends
//library MissileEffect:
    
    // This is a simple helper library for the Relativistic Missiles system.
    // Credits:
    //     Sevion for the Alloc module
    //         - www.hiveworkshop.com/threads/snippet-alloc.192348/
    //     Nestharus for World Bounds Library
    
    
    
    
    

//Implemented from module MissileEffect___LinkedList:

        function s__MissileEffect___Effect_init takes integer this returns integer
            set s__MissileEffect___Effect_next[this]=this
            set s__MissileEffect___Effect_prev[this]=this

            return this
        endfunction

        function s__MissileEffect___Effect_pushBack takes integer this,integer node returns integer
            set s__MissileEffect___Effect_prev[node]=s__MissileEffect___Effect_prev[this]
            set s__MissileEffect___Effect_next[node]=this
            set s__MissileEffect___Effect_next[s__MissileEffect___Effect_prev[this]]=node
            set s__MissileEffect___Effect_prev[this]=node

            return node
        endfunction

        function s__MissileEffect___Effect_pushFront takes integer this,integer node returns integer
            set s__MissileEffect___Effect_prev[node]=this
            set s__MissileEffect___Effect_next[node]=s__MissileEffect___Effect_next[this]
            set s__MissileEffect___Effect_prev[s__MissileEffect___Effect_next[this]]=node
            set s__MissileEffect___Effect_next[this]=node

            return node
        endfunction

        function s__MissileEffect___Effect_pop takes integer this returns nothing
            set s__MissileEffect___Effect_next[s__MissileEffect___Effect_prev[this]]=s__MissileEffect___Effect_next[this]
            set s__MissileEffect___Effect_prev[s__MissileEffect___Effect_next[this]]=s__MissileEffect___Effect_prev[this]
        endfunction
//Implemented from module Alloc:
   
        function s__MissileEffect___Effect_allocate takes nothing returns integer
            local integer this
   
            if ( s__MissileEffect___Effect_Alloc___recycle[(0)] == 0 ) then
                set s__MissileEffect___Effect_Alloc___instanceCount=s__MissileEffect___Effect_Alloc___instanceCount + 1
                set this=s__MissileEffect___Effect_Alloc___instanceCount
            else
                set this=s__MissileEffect___Effect_Alloc___recycle[(0)]
                set s__MissileEffect___Effect_Alloc___recycle[(0)]=s__MissileEffect___Effect_Alloc___recycle[s__MissileEffect___Effect_Alloc___recycle[(0)]]
            endif

   
            return this
        endfunction
   
        function s__MissileEffect___Effect_deallocate takes integer this returns nothing
            set s__MissileEffect___Effect_Alloc___recycle[this]=s__MissileEffect___Effect_Alloc___recycle[(0)]
            set s__MissileEffect___Effect_Alloc___recycle[(0)]=this
        endfunction


        function s__MissileEffect___Effect_remove takes integer this returns nothing
            call DestroyEffect(s__MissileEffect___Effect_effect[this])
            call s__MissileEffect___Effect_pop(this)
            call s__MissileEffect___Effect_deallocate(this)
            set s__MissileEffect___Effect_effect[this]=null
        endfunction

        function s__MissileEffect___Effect_insert takes integer this,string fxpath,real x,real y,real z,real scale returns integer
            local integer node= s__MissileEffect___Effect_pushBack(this,s__MissileEffect___Effect_allocate())

            set s__MissileEffect___Effect_x[node]=x
            set s__MissileEffect___Effect_y[node]=y
            set s__MissileEffect___Effect_z[node]=z
            set s__MissileEffect___Effect_yaw[node]=0.
            set s__MissileEffect___Effect_pitch[node]=0.
            set s__MissileEffect___Effect_roll[node]=0.
            set s__MissileEffect___Effect_path[node]=fxpath
            set s__MissileEffect___Effect_size[node]=scale
            set s__MissileEffect___Effect_effect[node]=AddSpecialEffect(fxpath, x, y)
            call BlzSetSpecialEffectZ(s__MissileEffect___Effect_effect[node], z)
            call BlzSetSpecialEffectScale(s__MissileEffect___Effect_effect[node], scale)

            return node
        endfunction

        function s__MissileEffect___Effect_create takes nothing returns integer
            return s__MissileEffect___Effect_init((s__MissileEffect___Effect_allocate()))
        endfunction


        
        function s__MissileEffect__set_timeScale takes integer this,real newTimeScale returns nothing
            set s__MissileEffect_time[this]=newTimeScale
            call BlzSetSpecialEffectTimeScale(s__MissileEffect_effect[this], s__MissileEffect_time[this])
        endfunction
        
        function s__MissileEffect__get_timeScale takes integer this returns real
            return s__MissileEffect_time[this]
        endfunction

        function s__MissileEffect__set_alpha takes integer this,integer newAlpha returns nothing
            set s__MissileEffect_transparency[this]=newAlpha
            call BlzSetSpecialEffectAlpha(s__MissileEffect_effect[this], s__MissileEffect_transparency[this])
        endfunction

        function s__MissileEffect__get_alpha takes integer this returns integer
            return s__MissileEffect_transparency[this]
        endfunction

        function s__MissileEffect__set_playerColor takes integer this,integer playerId returns nothing
            set s__MissileEffect_playercolor[this]=playerId
            call BlzSetSpecialEffectColorByPlayer(s__MissileEffect_effect[this], Player(playerId))
        endfunction

        function s__MissileEffect__get_playerColor takes integer this returns integer
            return s__MissileEffect_playercolor[this]
        endfunction

        function s__MissileEffect__set_animation takes integer this,integer animType returns nothing
            set s__MissileEffect_animtype[this]=animType
            call BlzPlaySpecialEffect(s__MissileEffect_effect[this], ConvertAnimType(s__MissileEffect_animtype[this]))
        endfunction

        function s__MissileEffect__get_animation takes integer this returns integer
            return s__MissileEffect_animtype[this]
        endfunction

        
        function s__MissileEffect_scale takes integer this,effect sfx,real scale returns nothing
            set s__MissileEffect_size[this]=scale
            call BlzSetSpecialEffectScale(sfx, scale)
        endfunction   

        function s__MissileEffect_orient takes integer this,real yaw,real pitch,real roll returns nothing
            local integer node= s__MissileEffect___Effect_next[s__MissileEffect_attachments[this]]

            set s__MissileEffect_yaw[this]=yaw
            set s__MissileEffect_pitch[this]=pitch
            set s__MissileEffect_roll[this]=roll
            call BlzSetSpecialEffectOrientation(s__MissileEffect_effect[this], yaw, pitch, roll)

            loop
                exitwhen node == s__MissileEffect_attachments[this]
                    set s__MissileEffect___Effect_yaw[node]=yaw
                    set s__MissileEffect___Effect_pitch[node]=pitch
                    set s__MissileEffect___Effect_roll[node]=roll
                    call BlzSetSpecialEffectOrientation(s__MissileEffect___Effect_effect[node], yaw, pitch, roll)
                set node=s__MissileEffect___Effect_next[node]
            endloop
        endfunction

        function s__MissileEffect_move takes integer this,real x,real y,real z returns boolean
            local integer node= s__MissileEffect___Effect_next[s__MissileEffect_attachments[this]]

            if not ( x > s__WorldBounds_maxX or x < s__WorldBounds_minX or y > s__WorldBounds_maxY or y < s__WorldBounds_minY ) then
                call BlzSetSpecialEffectPosition(s__MissileEffect_effect[this], x, y, z)
                loop
                    exitwhen node == s__MissileEffect_attachments[this]
                        call BlzSetSpecialEffectPosition(s__MissileEffect___Effect_effect[node], x - s__MissileEffect___Effect_x[node], y - s__MissileEffect___Effect_y[node], z - s__MissileEffect___Effect_z[node])
                    set node=s__MissileEffect___Effect_next[node]
                endloop
                return true
            endif
            return false
        endfunction

        function s__MissileEffect_attach takes integer this,string fxpath,real dx,real dy,real dz,real scale returns effect
            local integer node= s__MissileEffect___Effect_insert(s__MissileEffect_attachments[this],fxpath , dx , dy , dz , scale)

            call BlzSetSpecialEffectPosition(s__MissileEffect___Effect_effect[node], BlzGetLocalSpecialEffectX(s__MissileEffect_effect[this]) - dx, BlzGetLocalSpecialEffectY(s__MissileEffect_effect[this]) - dy, BlzGetLocalSpecialEffectZ(s__MissileEffect_effect[this]) - dz)

            return s__MissileEffect___Effect_effect[node]
        endfunction

        function s__MissileEffect_detach takes integer this,effect sfx returns nothing
            local integer node= s__MissileEffect___Effect_next[s__MissileEffect_attachments[this]]

            loop
                exitwhen node == s__MissileEffect_attachments[this]
                    if GetHandleId(s__MissileEffect___Effect_effect[node]) == GetHandleId(sfx) then
                        call s__MissileEffect___Effect_remove(node)
                        exitwhen true
                    endif
                set node=s__MissileEffect___Effect_next[node]
            endloop
        endfunction

        function s__MissileEffect_setColor takes integer this,integer red,integer green,integer blue returns nothing
            call BlzSetSpecialEffectColor(s__MissileEffect_effect[this], red, green, blue)
        endfunction

        
        function s__MissileEffect_destroy takes integer this returns nothing
            local integer node= s__MissileEffect___Effect_next[s__MissileEffect_attachments[this]]

            loop
                exitwhen node == s__MissileEffect_attachments[this]
                    call s__MissileEffect___Effect_remove(node)
                set node=s__MissileEffect___Effect_next[node]
            endloop
            call DestroyEffect(s__MissileEffect_effect[this])
            call s__MissileEffect___Effect_deallocate(s__MissileEffect_attachments[this])
            
            set s__MissileEffect_effect[this]=null
            set s__MissileEffect_path[this]=null
            set s__MissileEffect_size[this]=1.
            call s__MissileEffect_deallocate(this)
        endfunction

        function s__MissileEffect_create takes real x,real y,real z returns integer
            local integer this= s__MissileEffect__allocate()

            set s__MissileEffect_effect[this]=AddSpecialEffect("", x, y)
            set s__MissileEffect_path[this]=""
            set s__MissileEffect_size[this]=1
            set s__MissileEffect_time[this]=0
            set s__MissileEffect_transparency[this]=0
            set s__MissileEffect_animtype[this]=0
            set s__MissileEffect_playercolor[this]=0
            set s__MissileEffect_attachments[this]=(s__MissileEffect___Effect_init((s__MissileEffect___Effect_allocate()))) // INLINED!!
            call BlzSetSpecialEffectZ(s__MissileEffect_effect[this], z)

            return this
        endfunction

//library MissileEffect ends
//library Periodic:

//library Periodic ends
//library PluginSpellEffect:
    
    // Simple plugin for the SpellEffectEvent library by Bribe to access some usefull
    // values.

    // Credits to Bribe and Magtheridon96
    

        
        function s__PluginSpellEffect___Unit_destroy takes integer this returns nothing
            set s__PluginSpellEffect___Unit_unit[this]=null
            call s__PluginSpellEffect___Unit_deallocate(this)
        endfunction

        function s__PluginSpellEffect___Unit__get_x takes integer this returns real
            return GetUnitX(s__PluginSpellEffect___Unit_unit[this])
        endfunction

        function s__PluginSpellEffect___Unit__get_y takes integer this returns real
            return GetUnitY(s__PluginSpellEffect___Unit_unit[this])
        endfunction

        function s__PluginSpellEffect___Unit__get_z takes integer this returns real
            call MoveLocation(s__PluginSpellEffect___Unit_location, GetUnitX(s__PluginSpellEffect___Unit_unit[this]), GetUnitY(s__PluginSpellEffect___Unit_unit[this]))
            return GetUnitFlyHeight(s__PluginSpellEffect___Unit_unit[this]) + GetLocationZ(s__PluginSpellEffect___Unit_location)
        endfunction

        function s__PluginSpellEffect___Unit__get_id takes integer this returns integer
            return GetUnitUserData(s__PluginSpellEffect___Unit_unit[this])
        endfunction

        function s__PluginSpellEffect___Unit__get_type takes integer this returns integer
            return GetUnitTypeId(s__PluginSpellEffect___Unit_unit[this])
        endfunction

        function s__PluginSpellEffect___Unit__get_handle takes integer this returns integer
            return GetHandleId(s__PluginSpellEffect___Unit_unit[this])
        endfunction

        function s__PluginSpellEffect___Unit__get_player takes integer this returns player
            return GetOwningPlayer(s__PluginSpellEffect___Unit_unit[this])
        endfunction

        function s__PluginSpellEffect___Unit__get_armor takes integer this returns real
            return BlzGetUnitArmor(s__PluginSpellEffect___Unit_unit[this])
        endfunction

        function s__PluginSpellEffect___Unit__get_mana takes integer this returns real
            return GetUnitState(s__PluginSpellEffect___Unit_unit[this], UNIT_STATE_MANA)
        endfunction

        function s__PluginSpellEffect___Unit__get_health takes integer this returns real
            return GetWidgetLife(s__PluginSpellEffect___Unit_unit[this])
        endfunction

        function s__PluginSpellEffect___Unit__get_agility takes integer this returns integer
            return GetHeroAgi(s__PluginSpellEffect___Unit_unit[this], true)
        endfunction

        function s__PluginSpellEffect___Unit__get_strength takes integer this returns integer
            return GetHeroStr(s__PluginSpellEffect___Unit_unit[this], true)
        endfunction

        function s__PluginSpellEffect___Unit__get_intelligence takes integer this returns integer
            return GetHeroInt(s__PluginSpellEffect___Unit_unit[this], true)
        endfunction

        function s__PluginSpellEffect___Unit__get_armortype takes integer this returns armortype
            return ConvertArmorType(BlzGetUnitIntegerField(s__PluginSpellEffect___Unit_unit[this], UNIT_IF_ARMOR_TYPE))
        endfunction

        function s__PluginSpellEffect___Unit__get_defensetype takes integer this returns defensetype
            return ConvertDefenseType(BlzGetUnitIntegerField(s__PluginSpellEffect___Unit_unit[this], UNIT_IF_DEFENSE_TYPE))
        endfunction

        function s__PluginSpellEffect___Unit__get_isHero takes integer this returns boolean
            return IsUnitType(s__PluginSpellEffect___Unit_unit[this], UNIT_TYPE_HERO)
        endfunction

        function s__PluginSpellEffect___Unit__get_isMelee takes integer this returns boolean
            return IsUnitType(s__PluginSpellEffect___Unit_unit[this], UNIT_TYPE_MELEE_ATTACKER)
        endfunction

        function s__PluginSpellEffect___Unit__get_isRanged takes integer this returns boolean
            return IsUnitType(s__PluginSpellEffect___Unit_unit[this], UNIT_TYPE_RANGED_ATTACKER)
        endfunction

        function s__PluginSpellEffect___Unit__get_isSummoned takes integer this returns boolean
            return IsUnitType(s__PluginSpellEffect___Unit_unit[this], UNIT_TYPE_SUMMONED)
        endfunction

        function s__PluginSpellEffect___Unit__get_isStructure takes integer this returns boolean
            return IsUnitType(s__PluginSpellEffect___Unit_unit[this], UNIT_TYPE_STRUCTURE)
        endfunction

        function s__PluginSpellEffect___Unit__get_isMagicImmune takes integer this returns boolean
            return IsUnitType(s__PluginSpellEffect___Unit_unit[this], UNIT_TYPE_MAGIC_IMMUNE)
        endfunction

        function s__PluginSpellEffect___Unit_create takes nothing returns integer
            return s__PluginSpellEffect___Unit__allocate()
        endfunction
    

//Implemented from module PluginSpellEffect___Event:

        function s__Spell__get_x takes nothing returns real
            return GetSpellTargetX()
        endfunction

        function s__Spell__get_y takes nothing returns real
            return GetSpellTargetY()
        endfunction

        function s__Spell__get_z takes nothing returns real
            call MoveLocation(s__Spell_location, (GetSpellTargetX()), (GetSpellTargetY())) // INLINED!!

            if s__PluginSpellEffect___Unit_unit[s__Spell_target] != null then
                return s__PluginSpellEffect___Unit__get_z(s__Spell_target)
            else
                return GetLocationZ(s__Spell_location)
            endif
        endfunction

        function s__Spell__get_id takes nothing returns integer
            return GetSpellAbilityId()
        endfunction

        function s__Spell__get_level takes nothing returns integer
            return GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId())) // INLINED!!
        endfunction

        function s__Spell__get_ability takes nothing returns ability
            return BlzGetUnitAbility(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId())) // INLINED!!
        endfunction

        function s__Spell_PluginSpellEffect___Event___onCast takes nothing returns nothing
            if GetUnitAbilityLevel(GetTriggerUnit(), 'Aloc') == 0 then
                set s__PluginSpellEffect___Unit_unit[s__Spell_source]=GetTriggerUnit()
                set s__PluginSpellEffect___Unit_unit[s__Spell_target]=GetSpellTargetUnit()
            endif
        endfunction

        function s__Spell_PluginSpellEffect___Event___onInit takes nothing returns nothing
            set s__Spell_source=(s__PluginSpellEffect___Unit__allocate()) // INLINED!!
            set s__Spell_target=(s__PluginSpellEffect___Unit__allocate()) // INLINED!!
        
            call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT , function s__Spell_PluginSpellEffect___Event___onCast)
        endfunction

//library PluginSpellEffect ends
//library SpellEffectEvent:
 
    //============================================================================
     
    //============================================================================
//Implemented from module SpellEffectEvent___M:
       




       
        function s__SpellEffectEvent___S_onCast takes nothing returns nothing

                call TriggerEvaluate((LoadTriggerHandle(Table___ht, (((s__SpellEffectEvent___S_tb))), (GetSpellAbilityId())))) // INLINED!!



        endfunction
     
        function s__SpellEffectEvent___S_SpellEffectEvent___M___onInit takes nothing returns nothing

                set s__SpellEffectEvent___S_tb=s__Table_create()

            call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT , function s__SpellEffectEvent___S_onCast)
        endfunction
     
    //============================================================================
    function RegisterSpellEffectEvent takes integer abil,code onCast returns nothing

            if not (HaveSavedHandle(Table___ht, (((s__SpellEffectEvent___S_tb))), (abil))) then // INLINED!!
                call SaveTriggerHandle(Table___ht, (((s__SpellEffectEvent___S_tb))), (abil), ( CreateTrigger())) // INLINED!!
            endif
            call TriggerAddCondition((LoadTriggerHandle(Table___ht, (((s__SpellEffectEvent___S_tb))), (abil))), Filter(onCast)) // INLINED!!






    endfunction

//library SpellEffectEvent ends
//library Tenacity:
    
    // Intro
    //      This library intension in to introduce to warcraft an easy way to 
    //      manipulate the duration of crowd control on units.
    //
    // How it Works?
    //      Working in conjuction with the Crowd Control Library this library allows you to control the 
    //      duration of disables provided in the Crowd Control library. It work similar to the Tenacity
    //      status in League of Legends or the Status Resistence in Dota 2.
    //
    //      The are basically 3 types of tenacity: Normal (stacks multiplicatively), 
    //      Flat and Offset (stacks additively).The formula for calculation is:
    //          newDuration = (duration - Offset) * [(1 - value1)*(1 - value2)*...] * (1 - Flat)
    //
    //      The system also allow negative values for Tenacity, resulting in increased
    //      crowd control duration. Also note that tenacity will only work on CC applied through
    //      the Crowd Control API
    //
    // How to Import
    //      1. Copy the Indexer and Alloc libraries into your map
    //      2. Copy this library into your map and you are done
    

    
    
    
    function GetUnitTenacity takes unit u returns real
        return sc__Tenacity_get(u , 0)
    endfunction

    function GetUnitTenacityFlat takes unit u returns real
        return sc__Tenacity_get(u , 1)
    endfunction

    function GetUnitTenacityOffset takes unit u returns real
        return sc__Tenacity_get(u , 2)
    endfunction

    function SetUnitTenacity takes unit u,real value returns nothing
        call sc__Tenacity_Set(u , value , 0)
    endfunction

    function SetUnitTenacityFlat takes unit u,real value returns nothing
        call sc__Tenacity_Set(u , value , 1)
    endfunction

    function SetUnitTenacityOffset takes unit u,real value returns nothing
        call sc__Tenacity_Set(u , value , 2)
    endfunction

    function UnitAddTenacity takes unit u,real value returns nothing
        call sc__Tenacity_add(u , value , 0)
    endfunction

    function UnitAddTenacityFlat takes unit u,real value returns nothing
        call sc__Tenacity_add(u , value , 1)
    endfunction

    function UnitAddTenacityOffset takes unit u,real value returns nothing
        call sc__Tenacity_add(u , value , 2)
    endfunction

    function UnitRemoveTenacity takes unit u,real value returns boolean
        return sc__Tenacity_remove(u , value)
    endfunction

    function GetTenacityDuration takes unit u,real duration returns real
        return sc__Tenacity_calculate(u , duration)
    endfunction 
    
    function RegisterTenacityUnit takes unit u returns integer
        return sc__Tenacity_register(u)
    endfunction

    function DisplayTenacityStatus takes unit u returns nothing
        call sc__Tenacity_print(u)
    endfunction

    
    
    
    
//Implemented from module Alloc:
   
        function s__Tenacity___List_allocate takes nothing returns integer
            local integer this
   
            if ( s__Tenacity___List_Alloc___recycle[(0)] == 0 ) then
                set s__Tenacity___List_Alloc___instanceCount=s__Tenacity___List_Alloc___instanceCount + 1
                set this=s__Tenacity___List_Alloc___instanceCount
            else
                set this=s__Tenacity___List_Alloc___recycle[(0)]
                set s__Tenacity___List_Alloc___recycle[(0)]=s__Tenacity___List_Alloc___recycle[s__Tenacity___List_Alloc___recycle[(0)]]
            endif

   
            return this
        endfunction
   
        function s__Tenacity___List_deallocate takes integer this returns nothing
            set s__Tenacity___List_Alloc___recycle[this]=s__Tenacity___List_Alloc___recycle[(0)]
            set s__Tenacity___List_Alloc___recycle[(0)]=this
        endfunction
//Implemented from module Tenacity___ListModule:

        function s__Tenacity___List_init takes integer this returns integer
            set s__Tenacity___List_next[this]=this
            set s__Tenacity___List_prev[this]=this

            return this
        endfunction

        function s__Tenacity___List_push takes integer this,integer node returns integer
            set s__Tenacity___List_prev[node]=s__Tenacity___List_prev[this]
            set s__Tenacity___List_next[node]=this
            set s__Tenacity___List_next[s__Tenacity___List_prev[this]]=node
            set s__Tenacity___List_prev[this]=node

            return node
        endfunction

        function s__Tenacity___List_pop takes integer this returns nothing
            set s__Tenacity___List_next[s__Tenacity___List_prev[this]]=s__Tenacity___List_next[this]
            set s__Tenacity___List_prev[s__Tenacity___List_next[this]]=s__Tenacity___List_prev[this]
        endfunction


        function s__Tenacity___List_destroy takes integer this returns nothing
            local integer node= s__Tenacity___List_next[this]
            
            loop
                exitwhen node == this
                    set s__Tenacity___List_value[node]=0
                    call s__Tenacity___List_pop(node)
                    call s__Tenacity___List_deallocate(node)
                set node=s__Tenacity___List_next[node]
            endloop

            call s__Tenacity___List_deallocate(this)
        endfunction

        function s__Tenacity___List_insert takes integer this,real value returns integer
            local integer node= s__Tenacity___List_push(this,s__Tenacity___List_allocate())

            set s__Tenacity___List_value[node]=value
            set s__Tenacity___List_size[this]=s__Tenacity___List_size[this] + 1
            call sc__Tenacity___List_update(this)

            return node
        endfunction

        function s__Tenacity___List_remove takes integer this,real value returns boolean
            local integer node= s__Tenacity___List_next[this]
            local boolean removed= false
        
            loop
                exitwhen node == this
                    if s__Tenacity___List_value[node] == value then
                        set s__Tenacity___List_size[this]=s__Tenacity___List_size[this] - 1
                        set removed=true

                        call s__Tenacity___List_pop(node)
                        call s__Tenacity___List_deallocate(node)

                        exitwhen true
                    endif
                set node=s__Tenacity___List_next[node]
            endloop

            call sc__Tenacity___List_update(this)

            return removed
        endfunction

        function s__Tenacity___List_update takes integer this returns nothing
            local integer node= s__Tenacity___List_next[this]
            local integer i= 0

            if s__Tenacity___List_size[this] > 0 then
                loop
                    exitwhen node == this
                        if i > 0 then
                            set s__Tenacity___List_tenacity[this]=s__Tenacity___List_tenacity[this] * ( 1 - s__Tenacity___List_value[node] )
                        else
                            set s__Tenacity___List_tenacity[this]=1 - s__Tenacity___List_value[node]
                        endif
                        set i=i + 1
                    set node=s__Tenacity___List_next[node]
                endloop
            endif
        endfunction

        function s__Tenacity___List_create takes nothing returns integer
            local integer this= s__Tenacity___List_init((s__Tenacity___List_allocate()))

            set s__Tenacity___List_size[this]=0
            set s__Tenacity___List_tenacity[this]=0
            
            return this
        endfunction



        function s__Tenacity_get takes unit source,integer types returns real
            local integer id= GetUnitUserData(source)
            local integer this

            if s__Tenacity_struct[id] != 0 then
                set this=s__Tenacity_struct[id]
                
                if types == 0 then
                    if s__Tenacity___List_size[s__Tenacity_list[this]] > 0 then
                        return 1 - s__Tenacity___List_tenacity[s__Tenacity_list[this]]
                    else
                        return 0.
                    endif
                elseif types == 1 then
                    return s__Tenacity_flat[this]
                else
                    return s__Tenacity_offset[this]
                endif
            endif

            return 0.
        endfunction

        function s__Tenacity_Set takes unit source,real value,integer types returns nothing
            local integer id= GetUnitUserData(source)
            local integer this

            if s__Tenacity_struct[id] == 0 then
                set this=sc__Tenacity_register(source)
            else
                set this=s__Tenacity_struct[id]
            endif

            if types == 0 then
                set s__Tenacity___List_tenacity[s__Tenacity_list[this]]=value
            elseif types == 1 then
                set s__Tenacity_flat[this]=value
            else
                set s__Tenacity_offset[this]=value
            endif
        endfunction

        function s__Tenacity_add takes unit source,real value,integer types returns nothing
            local integer id= GetUnitUserData(source)
            local integer this

            if value != 0 then
                if s__Tenacity_struct[id] == 0 then
                    set this=sc__Tenacity_register(source)
                else
                    set this=s__Tenacity_struct[id]
                endif

                if types == 0 then
                    call s__Tenacity___List_insert(s__Tenacity_list[this],value)
                elseif types == 1 then
                    set s__Tenacity_flat[this]=s__Tenacity_flat[this] + value
                else
                    set s__Tenacity_offset[this]=s__Tenacity_offset[this] + value
                endif
            endif
        endfunction

        function s__Tenacity_remove takes unit source,real value returns boolean
            local integer id= GetUnitUserData(source)
            local integer this

            if value != 0 and s__Tenacity_struct[id] != 0 then
                set this=s__Tenacity_struct[id]
                return s__Tenacity___List_remove(s__Tenacity_list[this],value)
            endif

            return false
        endfunction

        function s__Tenacity_calculate takes unit source,real duration returns real
            local integer id= GetUnitUserData(source)
            local integer this

            if duration != 0 and s__Tenacity_struct[id] != 0 then
                set this=s__Tenacity_struct[id]

                if s__Tenacity___List_size[s__Tenacity_list[this]] > 0 then
                    set duration=( duration - s__Tenacity_offset[this] ) * s__Tenacity___List_tenacity[s__Tenacity_list[this]] * ( 1 - s__Tenacity_flat[this] )
                else
                    set duration=( duration - s__Tenacity_offset[this] ) * ( 1 - s__Tenacity_flat[this] )
                endif
                
                if duration <= 0 then
                    return 0.
                endif

                return duration
            endif

            return duration
        endfunction

        function s__Tenacity_register takes unit source returns integer
            local integer id= GetUnitUserData(source)
            local integer this

            if s__Tenacity_struct[id] == 0 then
                set this=s__Tenacity__allocate()
                set s__Tenacity_list[this]=s__Tenacity___List_create()
                set s__Tenacity_flat[this]=0
                set s__Tenacity_offset[this]=0
                set s__Tenacity_struct[GetUnitUserData(source)]=this
            endif

            return this
        endfunction

        function s__Tenacity_print takes unit source returns nothing
            local integer id= GetUnitUserData(source)
            local integer this
            local integer node
            local integer i= 0
            local real array bonus

            if s__Tenacity_struct[id] != 0 then
                set this=s__Tenacity_struct[id]

                if s__Tenacity___List_size[s__Tenacity_list[this]] > 0 then
                    set node=s__Tenacity___List_next[s__Tenacity_list[this]]

                    loop
                        exitwhen node == s__Tenacity_list[this]
                            set bonus[i]=s__Tenacity___List_value[node]
                            set i=i + 1
                        set node=s__Tenacity___List_next[node]
                    endloop
                endif

                call ClearTextMessages()
                call BJDebugMsg("Tenacity Status for " + GetUnitName(source))
                call BJDebugMsg("Tenacity List [" + R2S(bonus[0]) + " | " + R2S(bonus[1]) + " | " + R2S(bonus[2]) + " | " + R2S(bonus[3]) + " | " + R2S(bonus[4]) + " | " + R2S(bonus[5]) + " | ...] = " + R2S(s__Tenacity_get(source , 0)))
                call BJDebugMsg("Tenacity Flat [" + R2S(s__Tenacity_get(source , 1)) + "]")
                call BJDebugMsg("Tenacity Offset [" + R2S(s__Tenacity_get(source , 2)) + "]")
            endif
        endfunction

        function s__Tenacity_onDeindex takes nothing returns nothing
            local unit source= (s__Indexer_unit) // INLINED!!
            local integer id= GetUnitUserData(source)
            local integer this

            if s__Tenacity_struct[id] != 0 then
                set this=s__Tenacity_struct[id]
                
                call s__Tenacity___List_destroy(s__Tenacity_list[this])
                call sc__Tenacity_deallocate(this)

                set s__Tenacity_struct[id]=0
            endif
        endfunction

        function s__Tenacity_onInit takes nothing returns nothing
            call TriggerAddCondition(s__Indexer_onDeindex, Filter((function s__Tenacity_onDeindex))) // INLINED!!
        endfunction

//library Tenacity ends
//library TimedHandles:



    // here you may add or remove handle types
//textmacro instance: TIMEDHANDLES("effect", "DestroyEffect")
        
        
            




            
            function s__effectTimed_destroy takes integer this returns nothing
                call DestroyEffect(s__effectTimed_effect_var[this])
                set s__effectTimed_effect_var[this]=null
                

                    set s__effectTimed_elapsed[this]=0

                
                call s__effectTimed_deallocate(this)
            endfunction
            
            function s__effectTimed_remove takes nothing returns nothing

                    local integer i= 0
                    local integer this
                    loop
                        exitwhen i > s__effectTimed_index
                        set this=s__effectTimed_instance[i]
                        set s__effectTimed_elapsed[this]=s__effectTimed_elapsed[this] + TimedHandles___UPDATE_PERIOD
                        if ( s__effectTimed_elapsed[this] >= s__effectTimed_duration[this] ) then
                            set s__effectTimed_instance[i]=s__effectTimed_instance[s__effectTimed_index]
                            set i=i - 1
                            set s__effectTimed_index=s__effectTimed_index - 1
                            call s__effectTimed_destroy(this)
                            if ( s__effectTimed_index == - 1 ) then
                                call PauseTimer(s__effectTimed_timer)
                            endif
                        endif
                        set i=i + 1
                    endloop













            endfunction
            
            function s__effectTimed_create takes effect h,real timeout returns integer
                local integer this= s__effectTimed__allocate()
                

                    set s__effectTimed_index=s__effectTimed_index + 1
                    set s__effectTimed_instance[s__effectTimed_index]=this
                    if ( s__effectTimed_index == 0 ) then
                        call TimerStart(s__effectTimed_timer, TimedHandles___UPDATE_PERIOD, true, function s__effectTimed_remove)
                    endif
                    set s__effectTimed_duration[this]=timeout










                
                set s__effectTimed_effect_var[this]=h
                
                return this
            endfunction
            
        
        function DestroyEffectTimed takes effect h,real duration returns integer
            return s__effectTimed_create(h , duration)
        endfunction

//end of: TIMEDHANDLES("effect", "DestroyEffect")
//textmacro instance: TIMEDHANDLES("lightning", "DestroyLightning")
        
        
            




            
            function s__lightningTimed_destroy takes integer this returns nothing
                call DestroyLightning(s__lightningTimed_lightning_var[this])
                set s__lightningTimed_lightning_var[this]=null
                

                    set s__lightningTimed_elapsed[this]=0

                
                call s__lightningTimed_deallocate(this)
            endfunction
            
            function s__lightningTimed_remove takes nothing returns nothing

                    local integer i= 0
                    local integer this
                    loop
                        exitwhen i > s__lightningTimed_index
                        set this=s__lightningTimed_instance[i]
                        set s__lightningTimed_elapsed[this]=s__lightningTimed_elapsed[this] + TimedHandles___UPDATE_PERIOD
                        if ( s__lightningTimed_elapsed[this] >= s__lightningTimed_duration[this] ) then
                            set s__lightningTimed_instance[i]=s__lightningTimed_instance[s__lightningTimed_index]
                            set i=i - 1
                            set s__lightningTimed_index=s__lightningTimed_index - 1
                            call s__lightningTimed_destroy(this)
                            if ( s__lightningTimed_index == - 1 ) then
                                call PauseTimer(s__lightningTimed_timer)
                            endif
                        endif
                        set i=i + 1
                    endloop













            endfunction
            
            function s__lightningTimed_create takes lightning h,real timeout returns integer
                local integer this= s__lightningTimed__allocate()
                

                    set s__lightningTimed_index=s__lightningTimed_index + 1
                    set s__lightningTimed_instance[s__lightningTimed_index]=this
                    if ( s__lightningTimed_index == 0 ) then
                        call TimerStart(s__lightningTimed_timer, TimedHandles___UPDATE_PERIOD, true, function s__lightningTimed_remove)
                    endif
                    set s__lightningTimed_duration[this]=timeout










                
                set s__lightningTimed_lightning_var[this]=h
                
                return this
            endfunction
            
        
        function DestroyLightningTimed takes lightning h,real duration returns integer
            return s__lightningTimed_create(h , duration)
        endfunction

//end of: TIMEDHANDLES("lightning", "DestroyLightning")
//textmacro instance: TIMEDHANDLES("weathereffect", "RemoveWeatherEffect")
        
        
            




            
            function s__weathereffectTimed_destroy takes integer this returns nothing
                call RemoveWeatherEffect(s__weathereffectTimed_weathereffect_var[this])
                set s__weathereffectTimed_weathereffect_var[this]=null
                

                    set s__weathereffectTimed_elapsed[this]=0

                
                call s__weathereffectTimed_deallocate(this)
            endfunction
            
            function s__weathereffectTimed_remove takes nothing returns nothing

                    local integer i= 0
                    local integer this
                    loop
                        exitwhen i > s__weathereffectTimed_index
                        set this=s__weathereffectTimed_instance[i]
                        set s__weathereffectTimed_elapsed[this]=s__weathereffectTimed_elapsed[this] + TimedHandles___UPDATE_PERIOD
                        if ( s__weathereffectTimed_elapsed[this] >= s__weathereffectTimed_duration[this] ) then
                            set s__weathereffectTimed_instance[i]=s__weathereffectTimed_instance[s__weathereffectTimed_index]
                            set i=i - 1
                            set s__weathereffectTimed_index=s__weathereffectTimed_index - 1
                            call s__weathereffectTimed_destroy(this)
                            if ( s__weathereffectTimed_index == - 1 ) then
                                call PauseTimer(s__weathereffectTimed_timer)
                            endif
                        endif
                        set i=i + 1
                    endloop













            endfunction
            
            function s__weathereffectTimed_create takes weathereffect h,real timeout returns integer
                local integer this= s__weathereffectTimed__allocate()
                

                    set s__weathereffectTimed_index=s__weathereffectTimed_index + 1
                    set s__weathereffectTimed_instance[s__weathereffectTimed_index]=this
                    if ( s__weathereffectTimed_index == 0 ) then
                        call TimerStart(s__weathereffectTimed_timer, TimedHandles___UPDATE_PERIOD, true, function s__weathereffectTimed_remove)
                    endif
                    set s__weathereffectTimed_duration[this]=timeout










                
                set s__weathereffectTimed_weathereffect_var[this]=h
                
                return this
            endfunction
            
        
        function RemoveWeatherEffectTimed takes weathereffect h,real duration returns integer
            return s__weathereffectTimed_create(h , duration)
        endfunction

//end of: TIMEDHANDLES("weathereffect", "RemoveWeatherEffect")
//textmacro instance: TIMEDHANDLES("item", "RemoveItem")
        
        
            




            
            function s__itemTimed_destroy takes integer this returns nothing
                call RemoveItem(s__itemTimed_item_var[this])
                set s__itemTimed_item_var[this]=null
                

                    set s__itemTimed_elapsed[this]=0

                
                call s__itemTimed_deallocate(this)
            endfunction
            
            function s__itemTimed_remove takes nothing returns nothing

                    local integer i= 0
                    local integer this
                    loop
                        exitwhen i > s__itemTimed_index
                        set this=s__itemTimed_instance[i]
                        set s__itemTimed_elapsed[this]=s__itemTimed_elapsed[this] + TimedHandles___UPDATE_PERIOD
                        if ( s__itemTimed_elapsed[this] >= s__itemTimed_duration[this] ) then
                            set s__itemTimed_instance[i]=s__itemTimed_instance[s__itemTimed_index]
                            set i=i - 1
                            set s__itemTimed_index=s__itemTimed_index - 1
                            call s__itemTimed_destroy(this)
                            if ( s__itemTimed_index == - 1 ) then
                                call PauseTimer(s__itemTimed_timer)
                            endif
                        endif
                        set i=i + 1
                    endloop













            endfunction
            
            function s__itemTimed_create takes item h,real timeout returns integer
                local integer this= s__itemTimed__allocate()
                

                    set s__itemTimed_index=s__itemTimed_index + 1
                    set s__itemTimed_instance[s__itemTimed_index]=this
                    if ( s__itemTimed_index == 0 ) then
                        call TimerStart(s__itemTimed_timer, TimedHandles___UPDATE_PERIOD, true, function s__itemTimed_remove)
                    endif
                    set s__itemTimed_duration[this]=timeout










                
                set s__itemTimed_item_var[this]=h
                
                return this
            endfunction
            
        
        function RemoveItemTimed takes item h,real duration returns integer
            return s__itemTimed_create(h , duration)
        endfunction

//end of: TIMEDHANDLES("item", "RemoveItem")
//textmacro instance: TIMEDHANDLES("unit", "RemoveUnit")
        
        
            




            
            function s__unitTimed_destroy takes integer this returns nothing
                call RemoveUnit(s__unitTimed_unit_var[this])
                set s__unitTimed_unit_var[this]=null
                

                    set s__unitTimed_elapsed[this]=0

                
                call s__unitTimed_deallocate(this)
            endfunction
            
            function s__unitTimed_remove takes nothing returns nothing

                    local integer i= 0
                    local integer this
                    loop
                        exitwhen i > s__unitTimed_index
                        set this=s__unitTimed_instance[i]
                        set s__unitTimed_elapsed[this]=s__unitTimed_elapsed[this] + TimedHandles___UPDATE_PERIOD
                        if ( s__unitTimed_elapsed[this] >= s__unitTimed_duration[this] ) then
                            set s__unitTimed_instance[i]=s__unitTimed_instance[s__unitTimed_index]
                            set i=i - 1
                            set s__unitTimed_index=s__unitTimed_index - 1
                            call s__unitTimed_destroy(this)
                            if ( s__unitTimed_index == - 1 ) then
                                call PauseTimer(s__unitTimed_timer)
                            endif
                        endif
                        set i=i + 1
                    endloop













            endfunction
            
            function s__unitTimed_create takes unit h,real timeout returns integer
                local integer this= s__unitTimed__allocate()
                

                    set s__unitTimed_index=s__unitTimed_index + 1
                    set s__unitTimed_instance[s__unitTimed_index]=this
                    if ( s__unitTimed_index == 0 ) then
                        call TimerStart(s__unitTimed_timer, TimedHandles___UPDATE_PERIOD, true, function s__unitTimed_remove)
                    endif
                    set s__unitTimed_duration[this]=timeout










                
                set s__unitTimed_unit_var[this]=h
                
                return this
            endfunction
            
        
        function RemoveUnitTimed takes unit h,real duration returns integer
            return s__unitTimed_create(h , duration)
        endfunction

//end of: TIMEDHANDLES("unit", "RemoveUnit")
//textmacro instance: TIMEDHANDLES("ubersplat", "DestroyUbersplat")
        
        
            




            
            function s__ubersplatTimed_destroy takes integer this returns nothing
                call DestroyUbersplat(s__ubersplatTimed_ubersplat_var[this])
                set s__ubersplatTimed_ubersplat_var[this]=null
                

                    set s__ubersplatTimed_elapsed[this]=0

                
                call s__ubersplatTimed_deallocate(this)
            endfunction
            
            function s__ubersplatTimed_remove takes nothing returns nothing

                    local integer i= 0
                    local integer this
                    loop
                        exitwhen i > s__ubersplatTimed_index
                        set this=s__ubersplatTimed_instance[i]
                        set s__ubersplatTimed_elapsed[this]=s__ubersplatTimed_elapsed[this] + TimedHandles___UPDATE_PERIOD
                        if ( s__ubersplatTimed_elapsed[this] >= s__ubersplatTimed_duration[this] ) then
                            set s__ubersplatTimed_instance[i]=s__ubersplatTimed_instance[s__ubersplatTimed_index]
                            set i=i - 1
                            set s__ubersplatTimed_index=s__ubersplatTimed_index - 1
                            call s__ubersplatTimed_destroy(this)
                            if ( s__ubersplatTimed_index == - 1 ) then
                                call PauseTimer(s__ubersplatTimed_timer)
                            endif
                        endif
                        set i=i + 1
                    endloop













            endfunction
            
            function s__ubersplatTimed_create takes ubersplat h,real timeout returns integer
                local integer this= s__ubersplatTimed__allocate()
                

                    set s__ubersplatTimed_index=s__ubersplatTimed_index + 1
                    set s__ubersplatTimed_instance[s__ubersplatTimed_index]=this
                    if ( s__ubersplatTimed_index == 0 ) then
                        call TimerStart(s__ubersplatTimed_timer, TimedHandles___UPDATE_PERIOD, true, function s__ubersplatTimed_remove)
                    endif
                    set s__ubersplatTimed_duration[this]=timeout










                
                set s__ubersplatTimed_ubersplat_var[this]=h
                
                return this
            endfunction
            
        
        function DestroyUbersplatTimed takes ubersplat h,real duration returns integer
            return s__ubersplatTimed_create(h , duration)
        endfunction

//end of: TIMEDHANDLES("ubersplat", "DestroyUbersplat")
    
    // Do not edit below this line
    
    

//library TimedHandles ends
//library Ability:
    
    
    



        function s__Ability_register takes integer spell,integer id returns nothing
            if id > 0 and spell != 0 then
                call SaveInteger(Table___ht, (s__Ability_struct), (id), ( spell)) // INLINED!!

                call RegisterSpellEffectEvent(id , function sc__Ability_onCasting)
            endif
        endfunction

        function s__Ability_onPeriod takes nothing returns nothing
            local integer i= 0
            local integer level
            local integer this
            local string tooltip
        
            loop
                exitwhen i > s__Ability_key
                    set this=s__Ability_array[i]
                    set level=GetUnitAbilityLevel(s__Ability_unit[this], s__Ability_id[this])
                    
                    if level > 0 then
                        set tooltip=sc__Ability___IAbility_onTooltip(s__Ability_type[this],s__Ability_unit[this] , level)

                        call BlzSetAbilityExtendedTooltip(s__Ability_id[this], tooltip, level - 1)
                        call BlzSetAbilityStringLevelField(s__Ability_ability[this], ABILITY_SLF_TOOLTIP_NORMAL_EXTENDED, level - 1, tooltip)
                    endif
                set i=i + 1
            endloop
        endfunction

        function s__Ability_onLearning takes nothing returns nothing
            local unit source= GetLearningUnit()
            local integer skill= GetLearnedSkill()
            local integer level= GetUnitAbilityLevel(source, skill)
            local integer this= (LoadInteger(Table___ht, (s__Ability_struct), (skill))) // INLINED!!
            local integer spell

            if this != 0 then
                if (st__Ability___IAbility_onLearn[si__Ability___IAbility_type[this]]!=null) then
                    call sc__Ability___IAbility_onLearn(this,source , skill , level)
                endif

                if (st__Ability___IAbility_onTooltip[si__Ability___IAbility_type[this]]!=null) and level == 1 then
                    set spell=s__Ability__allocate()
                    set s__Ability_type[spell]=this
                    set s__Ability_id[spell]=skill
                    set s__Ability_unit[spell]=source
                    set s__Ability_ability[spell]=BlzGetUnitAbility(source, skill)
                    set s__Ability_key=s__Ability_key + 1
                    set s__Ability_array[s__Ability_key]=spell
                    call SaveInteger(Table___ht, (s__HashTable__getindex(s__Ability_learned,skill)), (GetUnitUserData(source)), ( 1)) // INLINED!!

                    if s__Ability_key == 0 then
                        call TimerStart(s__Ability_timer, 1, true, function s__Ability_onPeriod)
                    endif
                endif
            endif

            set source=null
        endfunction

        function s__Ability_onCasting takes nothing returns nothing
            local integer this= (LoadInteger(Table___ht, (s__Ability_struct), ((GetSpellAbilityId())))) // INLINED!!
            local integer spell
            local string tooltip

            if this != 0 then
                if (st__Ability___IAbility_onCast[si__Ability___IAbility_type[this]]!=null) then
                    call sc__Ability___IAbility_onCast(this)
                endif

                if (st__Ability___IAbility_onTooltip[si__Ability___IAbility_type[this]]!=null) then
                    set tooltip=sc__Ability___IAbility_onTooltip(this,s__PluginSpellEffect___Unit_unit[s__Spell_source] , (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId())))) // INLINED!!

                    call BlzSetAbilityExtendedTooltip((GetSpellAbilityId()), tooltip, (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))) - 1) // INLINED!!
                    call BlzSetAbilityStringLevelField((BlzGetUnitAbility(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))), ABILITY_SLF_TOOLTIP_NORMAL_EXTENDED, (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))) - 1, tooltip) // INLINED!!

                    if not (HaveSavedInteger(Table___ht, (s__HashTable__getindex(s__Ability_learned,(GetSpellAbilityId()))), ((GetUnitUserData(s__PluginSpellEffect___Unit_unit[(s__Spell_source)]))))) then // INLINED!!
                        set spell=s__Ability__allocate()
                        set s__Ability_type[spell]=this
                        set s__Ability_id[spell]=(GetSpellAbilityId()) // INLINED!!
                        set s__Ability_unit[spell]=s__PluginSpellEffect___Unit_unit[s__Spell_source]
                        set s__Ability_ability[spell]=(BlzGetUnitAbility(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))) // INLINED!!
                        set s__Ability_key=s__Ability_key + 1
                        set s__Ability_array[s__Ability_key]=spell
                        call SaveInteger(Table___ht, (s__HashTable__getindex(s__Ability_learned,(GetSpellAbilityId()))), ((GetUnitUserData(s__PluginSpellEffect___Unit_unit[(s__Spell_source)]))), ( 1)) // INLINED!!

                        if s__Ability_key == 0 then
                            call TimerStart(s__Ability_timer, 1, true, function s__Ability_onPeriod)
                        endif
                    endif
                endif
            endif
        endfunction

        function s__Ability_onInit takes nothing returns nothing
            set s__Ability_struct=s__Table_create()
            set s__Ability_learned=(s__Table_create()) // INLINED!!

            call RegisterPlayerUnitEvent(EVENT_PLAYER_HERO_SKILL , function s__Ability_onLearning)
        endfunction

    
    
    
    function RegisterSpell takes integer spell,integer id returns nothing
        call s__Ability_register(spell , id)
    endfunction

//library Ability ends
//library ArcingFloatingText:
    

        
        function s__ArcingTextTag_destroy takes integer this returns nothing
            set s__ArcingTextTag_key=s__ArcingTextTag_key + 1
            call SaveTextTagHandle(Table___ht, (((s__ArcingTextTag_table))), (s__ArcingTextTag_key), ( s__ArcingTextTag_texttag[this])) // INLINED!!

            call SetTextTagVisibility(s__ArcingTextTag_texttag[this], false)

            set s__ArcingTextTag_texttag[this]=null

            call s__ArcingTextTag_deallocate(this)
        endfunction

        function s__ArcingTextTag_onPeriod takes integer this returns boolean
            local real height= Sin(s__ArcingTextTag_duration[this] * bj_PI)

            set s__ArcingTextTag_duration[this]=s__ArcingTextTag_duration[this] - 0.03125

            if s__ArcingTextTag_duration[this] > 0 then
                set s__ArcingTextTag_x[this]=s__ArcingTextTag_x[this] + s__ArcingTextTag_cos[this]
                set s__ArcingTextTag_y[this]=s__ArcingTextTag_y[this] + s__ArcingTextTag_sin[this]

                call SetTextTagPos(s__ArcingTextTag_texttag[this], s__ArcingTextTag_x[this], s__ArcingTextTag_y[this], ArcingFloatingText___Z_OFFSET + ArcingFloatingText___Z_OFFSET_BONUS * height)
                call SetTextTagText(s__ArcingTextTag_texttag[this], s__ArcingTextTag_text[this], ArcingFloatingText___MIN_SIZE + ArcingFloatingText___BONUS_SIZE * height)
            endif

            return s__ArcingTextTag_duration[this] > 0
        endfunction
        
        function s__ArcingTextTag_create takes string value,unit u returns integer
            local integer this= s__ArcingTextTag__allocate()
            local real angle= GetRandomReal(0, 2 * bj_PI)
            
            set s__ArcingTextTag_x[this]=GetUnitX(u)
            set s__ArcingTextTag_y[this]=GetUnitY(u)
            set s__ArcingTextTag_sin[this]=Sin(angle) * ArcingFloatingText___VELOCITY
            set s__ArcingTextTag_cos[this]=Cos(angle) * ArcingFloatingText___VELOCITY
            set s__ArcingTextTag_text[this]=value
            set s__ArcingTextTag_duration[this]=ArcingFloatingText___LIFE_TIME

            if s__ArcingTextTag_key >= 0 then
                set s__ArcingTextTag_texttag[this]=(LoadTextTagHandle(Table___ht, (((s__ArcingTextTag_table))), (s__ArcingTextTag_key))) // INLINED!!
                set s__ArcingTextTag_key=s__ArcingTextTag_key - 1

                call SetTextTagVisibility(s__ArcingTextTag_texttag[this], true)
            else
                set s__ArcingTextTag_texttag[this]=CreateTextTag()
                call SetTextTagPermanent(s__ArcingTextTag_texttag[this], true)
            endif

            call SetTextTagText(s__ArcingTextTag_texttag[this], s__ArcingTextTag_text[this], ArcingFloatingText___MIN_SIZE)
            call SetTextTagPos(s__ArcingTextTag_texttag[this], s__ArcingTextTag_x[this], s__ArcingTextTag_y[this], ArcingFloatingText___Z_OFFSET)
            call sc__ArcingTextTag_StartTimer(0.03125 , true , this , - 1)
            
            return this
        endfunction

//Implemented from module Periodic:



        function s__ArcingTextTag_Periodic___end takes integer this,integer i,integer id returns integer
            if i >= 0 then
                call SaveInteger(Table___ht, (s__ArcingTextTag_Periodic___key), (id), ( (LoadInteger(Table___ht, (s__ArcingTextTag_Periodic___key), (id))) - 1)) // INLINED!!
                call SaveInteger(Table___ht, (s__ArcingTextTag_Periodic___table), (i), ( (LoadInteger(Table___ht, (s__ArcingTextTag_Periodic___table), ((LoadInteger(Table___ht, (s__ArcingTextTag_Periodic___key), (id)))))))) // INLINED!!

                if (LoadInteger(Table___ht, (s__ArcingTextTag_Periodic___key), (id))) == 0 then // INLINED!!
                    call PauseTimer(GetExpiredTimer())
                endif
            else
                call ReleaseTimer(GetExpiredTimer())
            endif

            if (HaveSavedInteger(Table___ht, (s__ArcingTextTag_Periodic___struct), (s__ArcingTextTag_Periodic____unique[this]))) then // INLINED!!
                call RemoveSavedInteger(Table___ht, (s__ArcingTextTag_Periodic___struct), (s__ArcingTextTag_Periodic____unique[this])) // INLINED!!
            endif

            if s__ArcingTextTag_Periodic____allocated[this] then
                set s__ArcingTextTag_Periodic____timer[this]=null
                set s__ArcingTextTag_Periodic____allocated[this]=false

                call s__ArcingTextTag_destroy(this)
            endif

            return i - 1
        endfunction

        function s__ArcingTextTag_Periodic___onTimeout takes nothing returns nothing
            local integer this= (LoadInteger(TimerUtils___ht, 0, GetHandleId((GetExpiredTimer())))) // INLINED!!
            
            if this != 0 then




                call s__ArcingTextTag_Periodic___end(this,- 1 , 0)
            endif
        endfunction

        function s__ArcingTextTag_Periodic___onPeriodic takes nothing returns nothing
            local integer i= 0
            local integer id= GetHandleId(GetExpiredTimer())
            local integer this= (LoadInteger(TimerUtils___ht, 0, GetHandleId((GetExpiredTimer())))) // INLINED!!
            
            if this != 0 then

                    if not s__ArcingTextTag_onPeriod(this) then
                        call s__ArcingTextTag_Periodic___end(this,- 1 , 0)
                    endif

            else
                loop
                    exitwhen i == (LoadInteger(Table___ht, (((s__ArcingTextTag_Periodic___key))), (id))) // INLINED!!
                        set this=(LoadInteger(Table___ht, (s__ArcingTextTag_Periodic___table), (i))) // INLINED!!

                        if this != 0 then

                                if not s__ArcingTextTag_onPeriod(this) then
                                    set i=s__ArcingTextTag_Periodic___end(this,i , id)
                                endif

                        endif
                    set i=i + 1
                endloop
            endif
        endfunction

        function s__ArcingTextTag_HasStartedTimer takes integer id returns boolean
            return (HaveSavedInteger(Table___ht, (s__ArcingTextTag_Periodic___struct), (id))) // INLINED!!
        endfunction

        function s__ArcingTextTag_GetTimerInstance takes integer id returns integer
            return (LoadInteger(Table___ht, (s__ArcingTextTag_Periodic___struct), (id))) // INLINED!!
        endfunction

        function s__ArcingTextTag_GetRemainingTime takes integer this returns real
            return TimerGetRemaining(s__ArcingTextTag_Periodic____timer[this])
        endfunction

        function s__ArcingTextTag_StartTimer takes real timeout,boolean periodic,integer this,integer uniqueId returns nothing
            local integer index= R2I(timeout * 100000)
            local integer id

            if this != 0 then
                set s__ArcingTextTag_Periodic____unique[this]=uniqueId
                set s__ArcingTextTag_Periodic____allocated[this]=true

                if s__ArcingTextTag_Periodic____unique[this] >= 0 and not (HaveSavedInteger(Table___ht, (s__ArcingTextTag_Periodic___struct), (s__ArcingTextTag_Periodic____unique[this]))) then // INLINED!!
                    call SaveInteger(Table___ht, (s__ArcingTextTag_Periodic___struct), (s__ArcingTextTag_Periodic____unique[this]), ( this)) // INLINED!!
                endif

                if periodic then
                    if timeout <= s__ArcingTextTag_Periodic___PERIODIC_THRESHOLD then
                        if not (HaveSavedHandle(Table___ht, (((s__ArcingTextTag_Periodic___timers))), (index))) then // INLINED!!
                            call SaveTimerHandle(Table___ht, (((s__ArcingTextTag_Periodic___timers))), (index), ( CreateTimer())) // INLINED!!
                        endif

                        set id=GetHandleId((LoadTimerHandle(Table___ht, (((s__ArcingTextTag_Periodic___timers))), (index)))) // INLINED!!
                        set s__ArcingTextTag_Periodic____timer[this]=(LoadTimerHandle(Table___ht, (((s__ArcingTextTag_Periodic___timers))), (index))) // INLINED!!
                        call SaveInteger(Table___ht, (s__ArcingTextTag_Periodic___table), ((LoadInteger(Table___ht, (s__ArcingTextTag_Periodic___key), (id)))), ( this)) // INLINED!!
                        call SaveInteger(Table___ht, (s__ArcingTextTag_Periodic___key), (id), ( (LoadInteger(Table___ht, (s__ArcingTextTag_Periodic___key), (id))) + 1)) // INLINED!!
    
                        if (LoadInteger(Table___ht, (s__ArcingTextTag_Periodic___key), (id))) == 1 then // INLINED!!
                            call TimerStart((LoadTimerHandle(Table___ht, (((s__ArcingTextTag_Periodic___timers))), (index))), timeout, periodic, function s__ArcingTextTag_Periodic___onPeriodic) // INLINED!!
                        endif
                    else
                        set s__ArcingTextTag_Periodic____timer[this]=NewTimerEx(this)
                        call TimerStart(s__ArcingTextTag_Periodic____timer[this], timeout, periodic, function s__ArcingTextTag_Periodic___onPeriodic)
                    endif
                else
                    set s__ArcingTextTag_Periodic____timer[this]=NewTimerEx(this)
                    call TimerStart(s__ArcingTextTag_Periodic____timer[this], timeout, periodic, function s__ArcingTextTag_Periodic___onTimeout)
                endif
            else
                call BJDebugMsg("Periodic Error: instance not provided")
            endif
        endfunction

        function s__ArcingTextTag_Periodic___onInit takes nothing returns nothing
            set s__ArcingTextTag_Periodic___key=s__Table_create()
            set s__ArcingTextTag_Periodic___table=s__Table_create()
            set s__ArcingTextTag_Periodic___struct=s__Table_create()
            set s__ArcingTextTag_Periodic___timers=s__Table_create()
        endfunction

        function s__ArcingTextTag_onInit takes nothing returns nothing
            set s__ArcingTextTag_table=s__Table_create()

            loop
                exitwhen s__ArcingTextTag_key > 100
                    call SaveTextTagHandle(Table___ht, (((s__ArcingTextTag_table))), (s__ArcingTextTag_key), ( CreateTextTag())) // INLINED!!

                    call SetTextTagPermanent((LoadTextTagHandle(Table___ht, (((s__ArcingTextTag_table))), (s__ArcingTextTag_key))), true) // INLINED!!
                    call SetTextTagVisibility((LoadTextTagHandle(Table___ht, (((s__ArcingTextTag_table))), (s__ArcingTextTag_key))), false) // INLINED!!
                set s__ArcingTextTag_key=s__ArcingTextTag_key + 1
            endloop
        endfunction

//library ArcingFloatingText ends
//library CooldownReductionUtils:
    
    // Intro
    //     Utility Library that include a few extra functions to deal with 
    //     Cooldown Reduction

    // JASS API
    //     function UnitAddCooldownReductionTimed takes unit u, real value, real duration returns nothing
    //         -> Add to the amount of cdr of a unit for a given duration. Accepts positive and negative values. 
    //         -> It handles removing the bonus automatically
    
    //     function UnitAddCooldownReductionFlatTimed takes unit u, real value, real duration returns nothing
    //         -> Add to the amount of cdr flat of a unit for a given period. Accepts positive and negative values.
    //         -> It handles removing the bonus automatically
    
    //     function UnitAddCooldownOffsetTimed takes unit u, real value, real duration returns nothing
    //         -> Add to the amount of cdr offset of a unit for a given period. Accepts positive and negative values.
    //         -> It handles removing the bonus automatically
        
    //     function GetUnitCooldownReductionEx takes unit u returns string
    //         -> Returns the amount of cdr a unit has as a string factored by 100
    //         -> example of return: 10.50 -> 0.105 internally.
    
    //     function GetUnitCooldownReductionFlatEx takes unit u returns string
    //         -> Returns the amount of cdr flat a unit has as a string factored by 100
    //         -> example of return: 10.50 -> 0.105 internally.
    
    //     function GetUnitCooldownOffsetEx takes unit u returns string
    //         -> Returns the amount of cdr offset a unit has as a string
    
    //     function GetAbilityTable takes nothing returns hashtable
    //         -> Returns the hashtable that holds the units default cooldown reduction values. 
    //         -> Use with caution! you might break stuff
    
    
    
    
    
        //----------------------------------------------
        //----------------------------------------------


        function s__CooldownReductionUtils___CDRUtils_destroy takes integer this returns nothing
            if s__CooldownReductionUtils___CDRUtils_didx == - 1 then
                call PauseTimer(s__CooldownReductionUtils___CDRUtils_t)
            endif

            set s__CooldownReductionUtils___CDRUtils_u[this]=null
            set s__CooldownReductionUtils___CDRUtils_ticks[this]=0
            call sc__CDR_deallocate(this)
        endfunction

        function s__CooldownReductionUtils___CDRUtils_onPeriod takes nothing returns nothing
            local integer i= 0
            local integer this
            
            loop
                exitwhen i > s__CooldownReductionUtils___CDRUtils_didx
                    set this=s__CooldownReductionUtils___CDRUtils_data[i]
                    set s__CooldownReductionUtils___CDRUtils_ticks[this]=s__CooldownReductionUtils___CDRUtils_ticks[this] - 1

                    if s__CooldownReductionUtils___CDRUtils_ticks[this] <= 0 then
                        if s__CooldownReductionUtils___CDRUtils_tipo[this] == 0 then
                            call s__CDR_remove(s__CooldownReductionUtils___CDRUtils_u[this] , s__CooldownReductionUtils___CDRUtils_amount[this])
                        elseif s__CooldownReductionUtils___CDRUtils_tipo[this] == 1 then
                            call s__CDR_Set(s__CooldownReductionUtils___CDRUtils_u[this] , s__CDR_get(s__CooldownReductionUtils___CDRUtils_u[this] , 1) - s__CooldownReductionUtils___CDRUtils_amount[this] , 1)
                        else
                            call s__CDR_Set(s__CooldownReductionUtils___CDRUtils_u[this] , s__CDR_get(s__CooldownReductionUtils___CDRUtils_u[this] , 2) - s__CooldownReductionUtils___CDRUtils_amount[this] , 2)
                        endif

                        set s__CooldownReductionUtils___CDRUtils_data[i]=s__CooldownReductionUtils___CDRUtils_data[s__CooldownReductionUtils___CDRUtils_didx]
                        set s__CooldownReductionUtils___CDRUtils_didx=s__CooldownReductionUtils___CDRUtils_didx - 1
                        set i=i - 1
                        call s__CooldownReductionUtils___CDRUtils_destroy(this)
                    endif
                set i=i + 1
            endloop
        endfunction

        function s__CooldownReductionUtils___CDRUtils_addTimed takes unit u,real amount,real duration,integer tipo returns nothing
            local integer this= s__CooldownReductionUtils___CDRUtils__allocate()

            set s__CooldownReductionUtils___CDRUtils_u[this]=u
            set s__CooldownReductionUtils___CDRUtils_amount[this]=amount
            set s__CooldownReductionUtils___CDRUtils_tipo[this]=tipo
            set s__CooldownReductionUtils___CDRUtils_ticks[this]=duration / 0.03125000
            set s__CooldownReductionUtils___CDRUtils_didx=s__CooldownReductionUtils___CDRUtils_didx + 1
            set s__CooldownReductionUtils___CDRUtils_data[s__CooldownReductionUtils___CDRUtils_didx]=this

            if tipo == 0 then
                call s__CDR_add(u , amount)
            elseif tipo == 1 then
                call s__CDR_Set(u , s__CDR_get(u , 1) + amount , 1)
            else
                call s__CDR_Set(u , s__CDR_get(u , 2) + amount , 2)
            endif
            
            if s__CooldownReductionUtils___CDRUtils_didx == 0 then
                call TimerStart(s__CooldownReductionUtils___CDRUtils_t, 0.03125000, true, function s__CooldownReductionUtils___CDRUtils_onPeriod)
            endif
        endfunction

    
    
    
    function UnitAddCooldownReductionTimed takes unit u,real value,real duration returns nothing
        call s__CooldownReductionUtils___CDRUtils_addTimed(u , value , duration , 0)
    endfunction

    function UnitAddCooldownReductionFlatTimed takes unit u,real value,real duration returns nothing
        call s__CooldownReductionUtils___CDRUtils_addTimed(u , value , duration , 1)
    endfunction

    function UnitAddCooldownOffsetTimed takes unit u,real value,real duration returns nothing
        call s__CooldownReductionUtils___CDRUtils_addTimed(u , value , duration , 2)
    endfunction

    function GetUnitCooldownReductionEx takes unit u returns string
        return R2SW(s__CDR_get(u , 0) * 100, 1, 2)
    endfunction

    function GetUnitCooldownReductionFlatEx takes unit u returns string
        return R2SW(s__CDR_get(u , 1) * 100, 1, 2)
    endfunction

    function GetUnitCooldownOffsetEx takes unit u returns string
        return R2SW(s__CDR_get(u , 2), 1, 2)
    endfunction

    function GetAbilityTable takes nothing returns hashtable
        return s__CDR_hashtable
    endfunction

//library CooldownReductionUtils ends
//library Missiles:
    
    // Thanks and Credits to BPower, Dirac and Vexorian for the Missile Library's at which i based
    // this Missiles library. Credits and thanks to AGD and for the effect orientation ideas.
    // This version of Missiles requires patch 1.31+
    
    // How to Import:
    //     1 - Copy this, MissileEffect and optionaly the MissileUtils libraries to your map
    
    
    
    
    

    
    function Missiles___GetLocZ takes real x,real y returns real
        call MoveLocation(Missiles___LOC, x, y)
        return GetLocationZ(Missiles___LOC)
    endfunction
    
    function Missiles___GetUnitZ takes unit u returns real
        return Missiles___GetLocZ(GetUnitX(u) , GetUnitY(u)) + GetUnitFlyHeight(u)
    endfunction
    
    function Missiles___SetUnitZ takes unit u,real z returns nothing
        call SetUnitFlyHeight(u, z - Missiles___GetLocZ(GetUnitX(u) , GetUnitY(u)), 0)
    endfunction
    
    function Missiles___GetMapCliffLevel takes nothing returns integer
        return GetTerrainCliffLevel(s__WorldBounds_maxX, s__WorldBounds_maxY)
    endfunction



        function s__Missiles___Pool_recycle takes unit dummy returns nothing
            if GetUnitTypeId(dummy) == Missiles___DUMMY then
                call GroupAddUnit(s__Missiles___Pool_group, dummy)
                call SetUnitX(dummy, s__WorldBounds_maxX)
                call SetUnitY(dummy, s__WorldBounds_maxY)
                call SetUnitOwner(dummy, s__Missiles___Pool_player, false)
                call PauseUnit(dummy, true)
            endif
        endfunction

        function s__Missiles___Pool_retrieve takes real x,real y,real z,real face returns unit
            if BlzGroupGetSize(s__Missiles___Pool_group) > 0 then
                set bj_lastCreatedUnit=FirstOfGroup(s__Missiles___Pool_group)
                call PauseUnit(bj_lastCreatedUnit, false)
                call GroupRemoveUnit(s__Missiles___Pool_group, bj_lastCreatedUnit)
                call SetUnitX(bj_lastCreatedUnit, x)
                call SetUnitY(bj_lastCreatedUnit, y)
                call Missiles___SetUnitZ(bj_lastCreatedUnit , z)
                call BlzSetUnitFacingEx(bj_lastCreatedUnit, face)
            else
                set bj_lastCreatedUnit=CreateUnit(s__Missiles___Pool_player, Missiles___DUMMY, x, y, face)
                call Missiles___SetUnitZ(bj_lastCreatedUnit , z)
                call UnitRemoveAbility(bj_lastCreatedUnit, 'Amrf')
            endif

            return bj_lastCreatedUnit
        endfunction

        function s__Missiles___Pool_onExpire takes nothing returns nothing
            local integer this= (LoadInteger(TimerUtils___ht, 0, GetHandleId((GetExpiredTimer())))) // INLINED!!

            call s__Missiles___Pool_recycle(s__Missiles___Pool_unit[this])
            call ReleaseTimer(s__Missiles___Pool_timer[this])
            
            set s__Missiles___Pool_timer[this]=null
            set s__Missiles___Pool_unit[this]=null

            call s__Missiles___Pool_deallocate(this)
        endfunction

        function s__Missiles___Pool_recycleTimed takes unit dummy,real delay returns nothing
            local integer this

            if GetUnitTypeId(dummy) != Missiles___DUMMY then
            else
                set this=s__Missiles___Pool__allocate()

                set s__Missiles___Pool_timer[this]=NewTimerEx(this)
                set s__Missiles___Pool_unit[this]=dummy
                
                call TimerStart(s__Missiles___Pool_timer[this], delay, false, function s__Missiles___Pool_onExpire)
            endif
        endfunction

        function s__Missiles___Pool_onInit takes nothing returns nothing
            local integer i= 0
            local unit u

            loop
                exitwhen i == Missiles_SWEET_SPOT
                    set u=CreateUnit(s__Missiles___Pool_player, Missiles___DUMMY, s__WorldBounds_maxX, s__WorldBounds_maxY, 0)
                    call PauseUnit(u, false)
                    call GroupAddUnit(s__Missiles___Pool_group, u)
                    call UnitRemoveAbility(u, 'Amrf')
                set i=i + 1
            endloop

            set u=null
        endfunction


        // Creates an origin - impact link.

        function s__Missiles___Coordinates_math takes integer a,integer b returns nothing
            local real dx
            local real dy
            loop
                set dx=s__Missiles___Coordinates_x[b] - s__Missiles___Coordinates_x[a]
                set dy=s__Missiles___Coordinates_y[b] - s__Missiles___Coordinates_y[a]
                set dx=dx * dx + dy * dy
                set dy=SquareRoot(dx)
                exitwhen dx != 0. and dy != 0.
                set s__Missiles___Coordinates_x[b]=s__Missiles___Coordinates_x[b] + .01
                set s__Missiles___Coordinates_z[b]=s__Missiles___Coordinates_z[b] - Missiles___GetLocZ(s__Missiles___Coordinates_x[b] - .01 , s__Missiles___Coordinates_y[b]) + Missiles___GetLocZ(s__Missiles___Coordinates_x[b] , s__Missiles___Coordinates_y[b])
            endloop

            set s__Missiles___Coordinates_square[a]=dx
            set s__Missiles___Coordinates_distance[a]=dy
            set s__Missiles___Coordinates_angle[a]=Atan2(s__Missiles___Coordinates_y[b] - s__Missiles___Coordinates_y[a], s__Missiles___Coordinates_x[b] - s__Missiles___Coordinates_x[a])
            set s__Missiles___Coordinates_slope[a]=( s__Missiles___Coordinates_z[b] - s__Missiles___Coordinates_z[a] ) / dy
            set s__Missiles___Coordinates_alpha[a]=Atan(s__Missiles___Coordinates_slope[a])
            // Set b.
            if s__Missiles___Coordinates_ref[b] == a then
                set s__Missiles___Coordinates_angle[b]=s__Missiles___Coordinates_angle[a] + bj_PI
                set s__Missiles___Coordinates_distance[b]=dy
                set s__Missiles___Coordinates_slope[b]=- s__Missiles___Coordinates_slope[a]
                set s__Missiles___Coordinates_alpha[b]=- s__Missiles___Coordinates_alpha[a]
                set s__Missiles___Coordinates_square[b]=dx
            endif
        endfunction

        function s__Missiles___Coordinates_link takes integer a,integer b returns nothing
            set s__Missiles___Coordinates_ref[a]=b
            set s__Missiles___Coordinates_ref[b]=a
            call s__Missiles___Coordinates_math(a , b)
        endfunction

        function s__Missiles___Coordinates_move takes integer this,real toX,real toY,real toZ returns nothing
            set s__Missiles___Coordinates_x[this]=toX
            set s__Missiles___Coordinates_y[this]=toY
            set s__Missiles___Coordinates_z[this]=toZ + Missiles___GetLocZ(toX , toY)
            if s__Missiles___Coordinates_ref[this] != this then
                call s__Missiles___Coordinates_math(this , s__Missiles___Coordinates_ref[this])
            endif
        endfunction

        function s__Missiles___Coordinates_destroy takes integer this returns nothing
            call s__Missiles___Coordinates_deallocate(this)
        endfunction

        function s__Missiles___Coordinates_create takes real x,real y,real z returns integer
            local integer this= s__Missiles___Coordinates__allocate()
            set s__Missiles___Coordinates_ref[this]=this
            call s__Missiles___Coordinates_move(this,x , y , z)
            return this
        endfunction
        
    
    
    
    


       
       
    
    
    
    
    
    
    
    
    
    

        
        
        
        
        
        
//Implemented from module Missiles___Operators:
        
        function s__Missiles__set_model takes integer this,string fx returns nothing
            call DestroyEffect(s__MissileEffect_effect[s__Missiles_effect[this]])
            set s__MissileEffect_path[s__Missiles_effect[this]]=fx
            set s__MissileEffect_effect[s__Missiles_effect[this]]=AddSpecialEffect(fx, s__Missiles___Coordinates_x[s__Missiles_origin[this]], s__Missiles___Coordinates_y[s__Missiles_origin[this]])
            call BlzSetSpecialEffectZ(s__MissileEffect_effect[s__Missiles_effect[this]], s__Missiles___Coordinates_z[s__Missiles_origin[this]])
            call BlzSetSpecialEffectYaw(s__MissileEffect_effect[s__Missiles_effect[this]], s__Missiles_cA[this])
        endfunction

        function s__Missiles__get_model takes integer this returns string
            return s__MissileEffect_path[s__Missiles_effect[this]]
        endfunction
        
        
        function s__Missiles__set_curve takes integer this,real value returns nothing
            set s__Missiles_open[this]=Tan(value * bj_DEGTORAD) * s__Missiles___Coordinates_distance[s__Missiles_origin[this]]
        endfunction
        
        function s__Missiles__get_curve takes integer this returns real
            return Atan(s__Missiles_open[this] / s__Missiles___Coordinates_distance[s__Missiles_origin[this]]) * bj_RADTODEG
        endfunction
        
        
        function s__Missiles__set_arc takes integer this,real value returns nothing
            set s__Missiles_height[this]=Tan(value * bj_DEGTORAD) * s__Missiles___Coordinates_distance[s__Missiles_origin[this]] / 4
        endfunction
        
        function s__Missiles__get_arc takes integer this returns real
            return Atan(4 * s__Missiles_height[this] / s__Missiles___Coordinates_distance[s__Missiles_origin[this]]) * bj_RADTODEG
        endfunction
        
        
        function s__Missiles__set_scale takes integer this,real value returns nothing
            set s__MissileEffect_size[s__Missiles_effect[this]]=value
            call s__MissileEffect_scale(s__Missiles_effect[this],s__MissileEffect_effect[s__Missiles_effect[this]] , value)
        endfunction

        function s__Missiles__get_scale takes integer this returns real
            return s__MissileEffect_size[s__Missiles_effect[this]]
        endfunction

        
        function s__Missiles__set_speed takes integer this,real newspeed returns nothing
            local real d= s__Missiles___Coordinates_distance[s__Missiles_origin[this]]
            local real s
            local real vel
        
            set s__Missiles_veloc[this]=newspeed * Missiles_PERIOD
            set vel=s__Missiles_veloc[this] * s__Missiles_dilation
            set s=s__Missiles_travel[this] + vel
            set s__Missiles_nextX[this]=s__Missiles_x[this] + vel * Cos(s__Missiles_cA[this])
            set s__Missiles_nextY[this]=s__Missiles_y[this] + vel * Sin(s__Missiles_cA[this])

            if s__Missiles_height[this] != 0 or s__Missiles___Coordinates_slope[s__Missiles_origin[this]] != 0 then
                set s__Missiles_nextZ[this]=4 * s__Missiles_height[this] * s * ( d - s ) / ( d * d ) + s__Missiles___Coordinates_slope[s__Missiles_origin[this]] * s + s__Missiles___Coordinates_z[s__Missiles_origin[this]]
                set s__Missiles_z[this]=s__Missiles_nextZ[this]
            endif
        endfunction

        function s__Missiles__get_speed takes integer this returns real
            return s__Missiles_veloc[this] / Missiles_PERIOD
        endfunction

        
        function s__Missiles__set_duration takes integer this,real flightTime returns nothing
            local real d= s__Missiles___Coordinates_distance[s__Missiles_origin[this]]
            local real s
            local real vel
        
            set s__Missiles_veloc[this]=RMaxBJ(0.00000001, ( s__Missiles___Coordinates_distance[s__Missiles_origin[this]] - s__Missiles_travel[this] ) * Missiles_PERIOD / RMaxBJ(0.00000001, flightTime))
            set s__Missiles_time[this]=flightTime
            set vel=s__Missiles_veloc[this] * s__Missiles_dilation
            set s=s__Missiles_travel[this] + vel
            set s__Missiles_nextX[this]=s__Missiles_x[this] + vel * Cos(s__Missiles_cA[this])
            set s__Missiles_nextY[this]=s__Missiles_y[this] + vel * Sin(s__Missiles_cA[this])

            if s__Missiles_height[this] != 0 or s__Missiles___Coordinates_slope[s__Missiles_origin[this]] != 0 then
                set s__Missiles_nextZ[this]=4 * s__Missiles_height[this] * s * ( d - s ) / ( d * d ) + s__Missiles___Coordinates_slope[s__Missiles_origin[this]] * s + s__Missiles___Coordinates_z[s__Missiles_origin[this]]
                set s__Missiles_z[this]=s__Missiles_nextZ[this]
            endif
        endfunction
        
        function s__Missiles__get_duration takes integer this returns real
            return s__Missiles_time[this]
        endfunction
        
        
        function s__Missiles__set_vision takes integer this,real sightRange returns nothing
            set s__Missiles_sight[this]=sightRange
            
            if s__Missiles_dummy[this] == null then
                if s__Missiles_owner[this] == null then
                    if s__Missiles_source[this] != null then
                        set s__Missiles_dummy[this]=s__Missiles___Pool_retrieve(s__Missiles_x[this] , s__Missiles_y[this] , s__Missiles_z[this] , 0)
                        call SetUnitOwner(s__Missiles_dummy[this], GetOwningPlayer(s__Missiles_source[this]), false)
                        call BlzSetUnitRealField(s__Missiles_dummy[this], UNIT_RF_SIGHT_RADIUS, sightRange)
                    endif
                else
                    set s__Missiles_dummy[this]=s__Missiles___Pool_retrieve(s__Missiles_x[this] , s__Missiles_y[this] , s__Missiles_z[this] , 0)
                    call SetUnitOwner(s__Missiles_dummy[this], s__Missiles_owner[this], false)
                    call BlzSetUnitRealField(s__Missiles_dummy[this], UNIT_RF_SIGHT_RADIUS, sightRange)
                endif
            else
                call SetUnitOwner(s__Missiles_dummy[this], s__Missiles_owner[this], false)
                call BlzSetUnitRealField(s__Missiles_dummy[this], UNIT_RF_SIGHT_RADIUS, sightRange)
            endif
        endfunction
        
        function s__Missiles__get_vision takes integer this returns real
            return s__Missiles_sight[this]
        endfunction

        
        function s__Missiles__set_timeScale takes integer this,real newTimeScale returns nothing
            call s__MissileEffect__set_timeScale(s__Missiles_effect[this],newTimeScale)
        endfunction
        
        function s__Missiles__get_timeScale takes integer this returns real
            return (s__MissileEffect_time[(s__Missiles_effect[this])]) // INLINED!!
        endfunction

        
        function s__Missiles__set_alpha takes integer this,integer newAlpha returns nothing
            call s__MissileEffect__set_alpha(s__Missiles_effect[this],newAlpha)
        endfunction

        function s__Missiles__get_alpha takes integer this returns integer
            return (s__MissileEffect_transparency[(s__Missiles_effect[this])]) // INLINED!!
        endfunction

        
        function s__Missiles__set_playerColor takes integer this,integer playerId returns nothing
            call s__MissileEffect__set_playerColor(s__Missiles_effect[this],playerId)
        endfunction

        function s__Missiles__get_playerColor takes integer this returns integer
            return (s__MissileEffect_playercolor[(s__Missiles_effect[this])]) // INLINED!!
        endfunction

        
        function s__Missiles__set_animation takes integer this,integer animType returns nothing
            call s__MissileEffect__set_animation(s__Missiles_effect[this],animType)
        endfunction

        function s__Missiles__get_animation takes integer this returns integer
            return (s__MissileEffect_animtype[(s__Missiles_effect[this])]) // INLINED!!
        endfunction
//Implemented from module Missiles___Methods:
        
        function s__Missiles_bounce takes integer this returns nothing
            call s__Missiles___Coordinates_move(s__Missiles_origin[this],s__Missiles_x[this] , s__Missiles_y[this] , s__Missiles_z[this] - Missiles___GetLocZ(s__Missiles_x[this] , s__Missiles_y[this]))
            
            set s__Missiles_travel[this]=0
            set s__Missiles_finished[this]=false
        endfunction

        function s__Missiles_deflect takes integer this,real tx,real ty,real tz returns nothing
            local real locZ= Missiles___GetLocZ(s__Missiles_x[this] , s__Missiles_y[this])
            
            set s__Missiles_target[this]=null
            set s__Missiles_toZ[this]=tz
            
            if s__Missiles_z[this] < locZ and (st__Missiles___MissileEvents_onTerrain[si__Missiles___MissileEvents_type[this]]!=null) then
                set s__Missiles_nextX[this]=s__Missiles_prevX[this]
                set s__Missiles_nextY[this]=s__Missiles_prevY[this]
                set s__Missiles_nextZ[this]=s__Missiles_prevZ[this]
            endif
            
            call s__Missiles___Coordinates_move(s__Missiles_impact[this],tx , ty , tz)
            call s__Missiles___Coordinates_move(s__Missiles_origin[this],s__Missiles_x[this] , s__Missiles_y[this] , s__Missiles_z[this] - locZ)
            
            set s__Missiles_travel[this]=0
            set s__Missiles_finished[this]=false
        endfunction
        
        function s__Missiles_deflectTarget takes integer this,unit u returns nothing
            call s__Missiles_deflect(this,GetUnitX(u) , GetUnitY(u) , s__Missiles_toZ[this])
            set s__Missiles_target[this]=u
        endfunction

        
        function s__Missiles_flushAll takes integer this returns nothing
            call FlushChildHashtable(s__Missiles_table, this)
        endfunction

        function s__Missiles_flush takes integer this,widget w returns nothing
            if w != null then
                call RemoveSavedBoolean(s__Missiles_table, this, GetHandleId(w))
            endif
        endfunction

        function s__Missiles_hitted takes integer this,widget w returns boolean
            return HaveSavedBoolean(s__Missiles_table, this, GetHandleId(w))
        endfunction

        
        function s__Missiles_attach takes integer this,string model,real dx,real dy,real dz,real scale returns effect
            return s__MissileEffect_attach(s__Missiles_effect[this],model , dx , dy , dz , scale)
        endfunction

        function s__Missiles_detach takes integer this,effect attachment returns nothing
            if attachment != null then
                call s__MissileEffect_detach(s__Missiles_effect[this],attachment)
            endif
        endfunction

        
        function s__Missiles_pause takes integer this,boolean flag returns nothing
        local integer aux
        
        set s__Missiles_paused[this]=flag
        if not s__Missiles_paused[this] and s__Missiles_pkey[this] != - 1 then
            set s__Missiles_id=s__Missiles_id + 1
            set s__Missiles_missiles[s__Missiles_id]=this
            set aux=s__Missiles_frozen[s__Missiles_pid]
            set s__Missiles_pkey[aux]=s__Missiles_pkey[this]
            set s__Missiles_frozen[s__Missiles_pkey[this]]=s__Missiles_frozen[s__Missiles_pid]
            set s__Missiles_pid=s__Missiles_pid - 1
            set s__Missiles_pkey[this]=- 1

            if s__Missiles_id + 1 > Missiles_SWEET_SPOT and Missiles_SWEET_SPOT > 0 then
                set s__Missiles_dilation=( s__Missiles_id + 1 ) / Missiles_SWEET_SPOT
            else
                set s__Missiles_dilation=1.
            endif

            if s__Missiles_id == 0 then
                call TimerStart(s__Missiles_timer, Missiles_PERIOD, true, function sc__Missiles_move)
            endif
            
            if (st__Missiles___MissileEvents_onResume[si__Missiles___MissileEvents_type[this]]!=null) then
                if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onResume(this) then
                    call sc__Missiles_terminate(this)
                else
                    if s__Missiles_finished[this] then
                        call sc__Missiles_terminate(this)
                    endif
                endif
            else
                if s__Missiles_finished[this] then
                    call sc__Missiles_terminate(this)
                endif
            endif
        endif
        endfunction

        
        function s__Missiles_color takes integer this,integer red,integer green,integer blue returns nothing
            call BlzSetSpecialEffectColor(s__MissileEffect_effect[(s__Missiles_effect[this])], (red ), ( green ), ( blue)) // INLINED!!
        endfunction
        
        
        function s__Missiles_onDest takes nothing returns nothing
            local integer this= s__Missiles_temp
            local destructable d= GetEnumDestructable()
            local real dz
            local real tz

            if not HaveSavedBoolean(s__Missiles_table, this, GetHandleId(d)) then
                if s__Missiles_collideZ[this] then
                    set dz=Missiles___GetLocZ(GetWidgetX(d) , GetWidgetY(d))
                    set tz=GetDestructableOccluderHeight(d)
                    if dz + tz >= s__Missiles_z[this] - s__Missiles_collision[this] and dz <= s__Missiles_z[this] + s__Missiles_collision[this] then
                        call SaveBoolean(s__Missiles_table, this, GetHandleId(d), true)
                        if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onDestructable(this,d) then
                            set d=null
                            call sc__Missiles_terminate(this)
                            return
                        endif
                    endif
                else
                    call SaveBoolean(s__Missiles_table, this, GetHandleId(d), true)
                    if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onDestructable(this,d) then
                        set d=null
                        call sc__Missiles_terminate(this)
                        return
                    endif
                endif
            endif

            set d=null
        endfunction

        
        function s__Missiles_onItems takes nothing returns nothing
            local integer this= s__Missiles_temp
            local item i= GetEnumItem()
            local real dz

            if not HaveSavedBoolean(s__Missiles_table, this, GetHandleId(i)) then
                if s__Missiles_collideZ[this] then
                    set dz=Missiles___GetLocZ(GetItemX(i) , GetItemY(i))
                    if dz + Missiles___ITEM_SIZE >= s__Missiles_z[this] - s__Missiles_collision[this] and dz <= s__Missiles_z[this] + s__Missiles_collision[this] then
                        call SaveBoolean(s__Missiles_table, this, GetHandleId(i), true)
                        if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onItem(this,i) then
                            set i=null
                            call sc__Missiles_terminate(this)
                            return
                        endif
                    endif
                else
                    call SaveBoolean(s__Missiles_table, this, GetHandleId(i), true)
                    if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onItem(this,i) then
                        set i=null
                        call sc__Missiles_terminate(this)
                        return
                    endif
                endif
            endif

            set i=null
        endfunction

        
        function s__Missiles_terminate takes integer this returns nothing
        local integer aux
    
        if s__Missiles_allocated[this] and s__Missiles_launched[this] then
            set s__Missiles_allocated[this]=false
            
            if s__Missiles_pkey[this] != - 1 then
                set aux=s__Missiles_frozen[s__Missiles_pid]
                set s__Missiles_pkey[aux]=s__Missiles_pkey[this]
                set s__Missiles_frozen[s__Missiles_pkey[this]]=s__Missiles_frozen[s__Missiles_pid]
                set s__Missiles_pid=s__Missiles_pid - 1
                set s__Missiles_pkey[this]=- 1
            endif
            
            if (st__Missiles___MissileEvents_onRemove[si__Missiles___MissileEvents_type[this]]!=null) then
                call sc__Missiles___MissileEvents_onRemove(this)
            endif
            
            if s__Missiles_dummy[this] != null then
                call s__Missiles___Pool_recycle(s__Missiles_dummy[this])
            endif
            
            set aux=s__Missiles_collection[s__Missiles_count]
            set s__Missiles_index[aux]=s__Missiles_index[this]
            set s__Missiles_collection[s__Missiles_index[this]]=s__Missiles_collection[s__Missiles_count]
            set s__Missiles_count=s__Missiles_count - 1
            set s__Missiles_index[this]=- 1
            
            call s__Missiles___Coordinates_deallocate((s__Missiles_origin[this])) // INLINED!!
            call s__Missiles___Coordinates_deallocate((s__Missiles_impact[this])) // INLINED!!
            call s__MissileEffect_destroy(s__Missiles_effect[this])
            call sc__Missiles_reset(this)
            call FlushChildHashtable(s__Missiles_table, this)
        endif
        endfunction

        
        function s__Missiles_reset takes integer this returns nothing
            set s__Missiles_launched[this]=false
            set s__Missiles_finished[this]=false
            set s__Missiles_collideZ[this]=false
            set s__Missiles_paused[this]=false
            set s__Missiles_roll[this]=false
            set s__Missiles_source[this]=null
            set s__Missiles_target[this]=null
            set s__Missiles_owner[this]=null
            set s__Missiles_dummy[this]=null
            set s__Missiles_open[this]=0.
            set s__Missiles_height[this]=0.
            set s__Missiles_veloc[this]=0.
            set s__Missiles_acceleration[this]=0.
            set s__Missiles_collision[this]=0.
            set s__Missiles_damage[this]=0.
            set s__Missiles_travel[this]=0.
            set s__Missiles_turn[this]=0.
            set s__Missiles_time[this]=0.
            set s__Missiles_sight[this]=0.
            set s__Missiles_data[this]=0
            set s__Missiles_type[this]=0
            set s__Missiles_tileset[this]=0
            set s__Missiles_pkey[this]=- 1
            set s__Missiles_index[this]=- 1
        endfunction

        
        function s__Missiles_remove takes integer this,integer i returns integer
            if s__Missiles_paused[this] then
//Implemented from module Missiles___OnPause:
        set s__Missiles_pid=s__Missiles_pid + 1
        set s__Missiles_pkey[this]=s__Missiles_pid
        set s__Missiles_frozen[s__Missiles_pid]=this
        
        if (st__Missiles___MissileEvents_onPause[si__Missiles___MissileEvents_type[this]]!=null) then
            if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onPause(this) then
                call s__Missiles_terminate(this)
            endif
        endif
            else
//Implemented from module Missiles___OnRemove:
            endif
            
            set s__Missiles_missiles[i]=s__Missiles_missiles[s__Missiles_id]
            set s__Missiles_id=s__Missiles_id - 1

            if s__Missiles_id + 1 > Missiles_SWEET_SPOT and Missiles_SWEET_SPOT > 0 then
                set s__Missiles_dilation=( s__Missiles_id + 1 ) / Missiles_SWEET_SPOT
            else
                set s__Missiles_dilation=1
            endif

            if s__Missiles_id == - 1 then
                call PauseTimer(s__Missiles_timer)
            endif
            
            if not s__Missiles_allocated[this] then
                call sc__Missiles___MissileEvents_deallocate(this)
            endif

            return i - 1
        endfunction
        
        
        function s__Missiles_move takes nothing returns nothing
            local integer j= 0
            local integer i
            local integer k
            local unit u
            local real a
            local real d
            local real s
            local real h
            local real c
            local real dx
            local real dy
            local real vel
            local real yaw
            local real pitch
            local integer missile
            local integer o
            local integer this

            if Missiles_SWEET_SPOT > 0 then
                set i=s__Missiles_last
            else
                set i=0
            endif
            
            loop
                exitwhen ( ( j >= Missiles_SWEET_SPOT and Missiles_SWEET_SPOT > 0 ) or j > s__Missiles_id )
                    set this=s__Missiles_missiles[i]
                    set s__Missiles_temp=this
                    if s__Missiles_allocated[this] and not s__Missiles_paused[this] then
//Implemented from module Missiles___OnHit:
        set o=s__Missiles_origin[this]
        set h=s__Missiles_height[this]
        set c=s__Missiles_open[this]
        set d=s__Missiles___Coordinates_distance[o]
    
        if (st__Missiles___MissileEvents_onHit[si__Missiles___MissileEvents_type[this]]!=null) then
            if s__Missiles_allocated[this] and s__Missiles_collision[this] > 0 then
                call GroupEnumUnitsInRange(s__Missiles_group, s__Missiles_x[this], s__Missiles_y[this], s__Missiles_collision[this] + Missiles___COLLISION_SIZE, null)
                loop
                    set u=FirstOfGroup(s__Missiles_group)
                    exitwhen u == null
                        if not HaveSavedBoolean(s__Missiles_table, this, GetHandleId(u)) then
                            if IsUnitInRangeXY(u, s__Missiles_x[this], s__Missiles_y[this], s__Missiles_collision[this]) then
                                if s__Missiles_collideZ[this] then
                                    set dx=Missiles___GetLocZ(GetUnitX(u) , GetUnitY(u)) + GetUnitFlyHeight(u)
                                    set dy=BlzGetUnitCollisionSize(u)
                                    if dx + dy >= s__Missiles_z[this] - s__Missiles_collision[this] and dx <= s__Missiles_z[this] + s__Missiles_collision[this] then
                                        call SaveBoolean(s__Missiles_table, this, GetHandleId(u), true)
                                        if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onHit(this,u) then
                                            call s__Missiles_terminate(this)
                                            exitwhen true
                                        endif
                                    endif
                                else
                                    call SaveBoolean(s__Missiles_table, this, GetHandleId(u), true)
                                    if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onHit(this,u) then
                                        call s__Missiles_terminate(this)
                                        exitwhen true
                                    endif
                                endif
                            endif
                        endif
                    call GroupRemoveUnit(s__Missiles_group, u)
                endloop
            endif
        endif
//Implemented from module Missiles___OnMissile:
        if (st__Missiles___MissileEvents_onMissile[si__Missiles___MissileEvents_type[this]]!=null) then
            if s__Missiles_allocated[this] and s__Missiles_collision[this] > 0 then
                set k=0
                loop
                    exitwhen k > s__Missiles_count
                        set missile=s__Missiles_collection[k]
                        if missile != this then
                            if not HaveSavedBoolean(s__Missiles_table, this, missile) then
                                set dx=s__Missiles_x[missile] - s__Missiles_x[this]
                                set dy=s__Missiles_y[missile] - s__Missiles_y[this]
                                if SquareRoot(dx * dx + dy * dy) <= s__Missiles_collision[this] then
                                    call SaveBoolean(s__Missiles_table, this, missile, true)
                                    if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onMissile(this,missile) then
                                        call s__Missiles_terminate(this)
                                        exitwhen true
                                    endif
                                endif
                            endif
                        endif
                    set k=k + 1
                endloop
            endif
        endif
//Implemented from module Missiles___OnDestructable:
        if (st__Missiles___MissileEvents_onDestructable[si__Missiles___MissileEvents_type[this]]!=null) then
            if s__Missiles_allocated[this] and s__Missiles_collision[this] > 0 then
                set dx=s__Missiles_collision[this]
                call SetRect(s__Missiles_rect, s__Missiles_x[this] - dx, s__Missiles_y[this] - dx, s__Missiles_x[this] + dx, s__Missiles_y[this] + dx)
                call EnumDestructablesInRect(s__Missiles_rect, null, function s__Missiles_onDest)
            endif
        endif
//Implemented from module Missiles___OnItem:
        if (st__Missiles___MissileEvents_onItem[si__Missiles___MissileEvents_type[this]]!=null) then
            if s__Missiles_allocated[this] and s__Missiles_collision[this] > 0 then
                set dx=s__Missiles_collision[this]
                call SetRect(s__Missiles_rect, s__Missiles_x[this] - dx, s__Missiles_y[this] - dx, s__Missiles_x[this] + dx, s__Missiles_y[this] + dx)
                call EnumItemsInRect(s__Missiles_rect, null, function s__Missiles_onItems)
            endif
        endif
//Implemented from module Missiles___OnCliff:
        if (st__Missiles___MissileEvents_onCliff[si__Missiles___MissileEvents_type[this]]!=null) then
            set dx=GetTerrainCliffLevel(s__Missiles_nextX[this], s__Missiles_nextY[this])
            set dy=GetTerrainCliffLevel(s__Missiles_x[this], s__Missiles_y[this])
            if dy < dx and s__Missiles_z[this] < ( dx - (GetTerrainCliffLevel(s__WorldBounds_maxX, s__WorldBounds_maxY)) ) * bj_CLIFFHEIGHT then // INLINED!!
                if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onCliff(this) then
                    call s__Missiles_terminate(this)
                endif
            endif
        endif
//Implemented from module Missiles___OnTerrain:
        if (st__Missiles___MissileEvents_onTerrain[si__Missiles___MissileEvents_type[this]]!=null) then
            if Missiles___GetLocZ(s__Missiles_x[this] , s__Missiles_y[this]) > s__Missiles_z[this] then
                if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onTerrain(this) then
                    call s__Missiles_terminate(this)
                endif
            endif
        endif
//Implemented from module Missiles___OnTileset:
        if (st__Missiles___MissileEvents_onTileset[si__Missiles___MissileEvents_type[this]]!=null) then
            set k=GetTerrainType(s__Missiles_x[this], s__Missiles_y[this])
            if k != s__Missiles_tileset[this] then
                if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onTileset(this,k) then
                    call s__Missiles_terminate(this)
                endif
            endif
            set s__Missiles_tileset[this]=k
        endif
//Implemented from module Missiles___OnPeriod:
        if (st__Missiles___MissileEvents_onPeriod[si__Missiles___MissileEvents_type[this]]!=null) then
            if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onPeriod(this) then
                call s__Missiles_terminate(this)
            endif
        endif
//Implemented from module Missiles___OnOrient:
        // Homing or not
        set u=s__Missiles_target[this]
        if u != null and GetUnitTypeId(u) != 0 then
            call s__Missiles___Coordinates_move(s__Missiles_impact[this],GetUnitX(u) , GetUnitY(u) , GetUnitFlyHeight(u) + s__Missiles_toZ[this])
            set dx=s__Missiles___Coordinates_x[s__Missiles_impact[this]] - s__Missiles_nextX[this]
            set dy=s__Missiles___Coordinates_y[s__Missiles_impact[this]] - s__Missiles_nextY[this]
            set a=Atan2(dy, dx)
            set s__Missiles_travel[this]=s__Missiles___Coordinates_distance[o] - SquareRoot(dx * dx + dy * dy)
        else
            set a=s__Missiles___Coordinates_angle[o]
            set s__Missiles_target[this]=null
        endif
        
        // turn rate
        if s__Missiles_turn[this] != 0 and not ( Cos(s__Missiles_cA[this] - a) >= Cos(s__Missiles_turn[this]) ) then
            if Sin(a - s__Missiles_cA[this]) >= 0 then
                set s__Missiles_cA[this]=s__Missiles_cA[this] + s__Missiles_turn[this]
            else
                set s__Missiles_cA[this]=s__Missiles_cA[this] - s__Missiles_turn[this]
            endif
        else
            set s__Missiles_cA[this]=a
        endif

        set vel=s__Missiles_veloc[this] * s__Missiles_dilation
        set yaw=s__Missiles_cA[this]
        set s=s__Missiles_travel[this] + vel
        set s__Missiles_veloc[this]=s__Missiles_veloc[this] + s__Missiles_acceleration[this]
        set s__Missiles_travel[this]=s
        set pitch=s__Missiles___Coordinates_alpha[o]
        set s__Missiles_prevX[this]=s__Missiles_x[this]
        set s__Missiles_prevY[this]=s__Missiles_y[this]
        set s__Missiles_prevZ[this]=s__Missiles_z[this]
        set s__Missiles_x[this]=s__Missiles_nextX[this]
        set s__Missiles_y[this]=s__Missiles_nextY[this]
        set s__Missiles_z[this]=s__Missiles_nextZ[this]
        set s__Missiles_nextX[this]=s__Missiles_x[this] + vel * Cos(yaw)
        set s__Missiles_nextY[this]=s__Missiles_y[this] + vel * Sin(yaw)

        // arc calculation
        if h != 0 or s__Missiles___Coordinates_slope[o] != 0 then
            set s__Missiles_nextZ[this]=4 * h * s * ( d - s ) / ( d * d ) + s__Missiles___Coordinates_slope[o] * s + s__Missiles___Coordinates_z[o]
            set pitch=pitch - Atan(( ( 4 * h ) * ( 2 * s - d ) ) / ( d * d ))
        endif
        
        // curve calculation
        if c != 0 then
            set dx=4 * c * s * ( d - s ) / ( d * d )
            set a=yaw + bj_PI / 2
            set s__Missiles_x[this]=s__Missiles_x[this] + dx * Cos(a)
            set s__Missiles_y[this]=s__Missiles_y[this] + dx * Sin(a)
            set yaw=yaw + Atan(- ( ( 4 * c ) * ( 2 * s - d ) ) / ( d * d ))
        endif
//Implemented from module Missiles___OnFinish:
        if s >= d - 0.0001 then
            set s__Missiles_finished[this]=true
            if (st__Missiles___MissileEvents_onFinish[si__Missiles___MissileEvents_type[this]]!=null) then
                if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onFinish(this) then
                    call s__Missiles_terminate(this)
                else
                    if s__Missiles_travel[this] > 0 and not s__Missiles_paused[this] then
                        call s__Missiles_terminate(this)
                    endif
                endif
            else
                call s__Missiles_terminate(this)
            endif
        else
            if not s__Missiles_roll[this] then
                call s__MissileEffect_orient(s__Missiles_effect[this],yaw , - pitch , 0)
            else
                call s__MissileEffect_orient(s__Missiles_effect[this],yaw , - pitch , Atan2(c, h))
            endif
        endif
//Implemented from module Missiles___OnBoundaries:
        if not s__MissileEffect_move(s__Missiles_effect[this],s__Missiles_x[this] , s__Missiles_y[this] , s__Missiles_z[this]) then
            if (st__Missiles___MissileEvents_onBoundaries[si__Missiles___MissileEvents_type[this]]!=null) then
                if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onBoundaries(this) then
                    call s__Missiles_terminate(this)
                endif
            endif
        else
            if s__Missiles_dummy[this] != null then
                call SetUnitX(s__Missiles_dummy[this], s__Missiles_x[this])
                call SetUnitY(s__Missiles_dummy[this], s__Missiles_y[this])
            endif
        endif
                    else
                        set i=s__Missiles_remove(this,i)
                        set j=j - 1
                    endif
                set i=i + 1
                set j=j + 1

                if i > s__Missiles_id and Missiles_SWEET_SPOT > 0 then
                    set i=0
                endif
            endloop
            set s__Missiles_last=i

            set u=null
        endfunction
        
        
        function s__Missiles_launch takes integer this returns nothing
            if not s__Missiles_launched[this] and s__Missiles_allocated[this] then
                set s__Missiles_launched[this]=true
                set s__Missiles_id=s__Missiles_id + 1
                set s__Missiles_missiles[s__Missiles_id]=this
                set s__Missiles_count=s__Missiles_count + 1
                set s__Missiles_index[this]=s__Missiles_count
                set s__Missiles_collection[s__Missiles_count]=this
                
                if s__Missiles_id + 1 > Missiles_SWEET_SPOT and Missiles_SWEET_SPOT > 0 then
                    set s__Missiles_dilation=( s__Missiles_id + 1 ) / Missiles_SWEET_SPOT
                else
                    set s__Missiles_dilation=1.
                endif

                if s__Missiles_id == 0 then
                    call TimerStart(s__Missiles_timer, Missiles_PERIOD, true, function s__Missiles_move)
                endif
            endif
        endfunction

        
        function s__Missiles_create takes real x,real y,real z,real toX,real toY,real toZ returns integer
            local integer this= s__Missiles__allocate()

            call s__Missiles_reset(this)
            set s__Missiles_origin[this]=s__Missiles___Coordinates_create(x , y , z)
            set s__Missiles_impact[this]=s__Missiles___Coordinates_create(toX , toY , toZ)
            set s__Missiles_effect[this]=s__MissileEffect_create(x , y , s__Missiles___Coordinates_z[s__Missiles_origin[this]])
            call s__Missiles___Coordinates_link(s__Missiles_origin[this] , s__Missiles_impact[this])
            set s__Missiles_allocated[this]=true
            set s__Missiles_cA[this]=s__Missiles___Coordinates_angle[s__Missiles_origin[this]]
            set s__Missiles_x[this]=x
            set s__Missiles_y[this]=y
            set s__Missiles_z[this]=s__Missiles___Coordinates_z[s__Missiles_impact[this]]
            set s__Missiles_prevX[this]=x
            set s__Missiles_prevY[this]=y
            set s__Missiles_prevZ[this]=s__Missiles___Coordinates_z[s__Missiles_impact[this]]
            set s__Missiles_nextX[this]=x
            set s__Missiles_nextY[this]=y
            set s__Missiles_nextZ[this]=s__Missiles___Coordinates_z[s__Missiles_impact[this]]
            set s__Missiles_toZ[this]=toZ
            
            return this
        endfunction

//library Missiles ends
//library NewBonus:
    
    // Credits to Earth Fury for the original Bonus idea
    
    
    
    
    

    
    
    




        function s__Bonus_destroy takes integer this returns nothing
            call sc__Bonus_adder(s__Bonus_source[this] , s__Bonus_bonus[this] , - s__Bonus_value[this])

            set s__Bonus_item[this]=null
            set s__Bonus_buff[this]=0
            set s__Bonus_value[this]=0
            set s__Bonus_bonus[this]=0
            set s__Bonus_source[this]=null
            
            call sc__NewBonus___IBonus_deallocate(this)
        endfunction

        function s__Bonus_overflow takes integer this,real current,real value returns real
            if value > 0 and current > 2147483647 - value then
                return 2147483647 - current
            elseif value < 0 and current < - 2147483648 - value then
                return - 2147483648 - current
            else
                return value
            endif
        endfunction

        function s__Bonus_getter takes unit source,integer bonus returns real
            local integer this= s__Bonus_struct[bonus]

            if this != 0 then
                if (st__NewBonus___IBonus_get[si__NewBonus___IBonus_type[this]]!=null) then
                    return sc__NewBonus___IBonus_get(this,source)
                endif
            else
                call DisplayTextToPlayer(GetLocalPlayer(), 0, 0, "Invalid Bonus Type")
            endif

            return 0.
        endfunction

        function s__Bonus_setter takes unit source,integer bonus,real value returns real
            local integer this= s__Bonus_struct[bonus]
            
            if this != 0 then
                if (st__NewBonus___IBonus_Set[si__NewBonus___IBonus_type[this]]!=null) then
                    set s__Bonus_type[s__Bonus_key]=bonus
                    set s__Bonus_unit[s__Bonus_key]=source
                    set s__Bonus_amount[s__Bonus_key]=value
                    
                    call sc__Bonus_onEvent(s__Bonus_key)

                    if s__Bonus_type[s__Bonus_key] != bonus then
                        return s__Bonus_setter(s__Bonus_unit[s__Bonus_key] , s__Bonus_type[s__Bonus_key] , s__Bonus_amount[s__Bonus_key])
                    endif

                    return sc__NewBonus___IBonus_Set(this,s__Bonus_unit[s__Bonus_key] , s__Bonus_amount[s__Bonus_key])
                endif
            else
                call DisplayTextToPlayer(GetLocalPlayer(), 0, 0, "Invalid Bonus Type")
            endif

            return 0.
        endfunction

        function s__Bonus_adder takes unit source,integer bonus,real value returns real
            local integer this= s__Bonus_struct[bonus]

            if this != 0 and value != 0 then
                if (st__NewBonus___IBonus_add[si__NewBonus___IBonus_type[this]]!=null) then
                    set s__Bonus_type[s__Bonus_key]=bonus
                    set s__Bonus_unit[s__Bonus_key]=source
                    set s__Bonus_amount[s__Bonus_key]=value
                    
                    call sc__Bonus_onEvent(s__Bonus_key)

                    if s__Bonus_type[s__Bonus_key] != bonus then
                        return s__Bonus_adder(s__Bonus_unit[s__Bonus_key] , s__Bonus_type[s__Bonus_key] , s__Bonus_amount[s__Bonus_key])
                    endif
                    
                    return sc__NewBonus___IBonus_add(this,s__Bonus_unit[s__Bonus_key] , s__Bonus_amount[s__Bonus_key])
                endif
            else
                call DisplayTextToPlayer(GetLocalPlayer(), 0, 0, "Invalid Bonus Type")
            endif

            return 0.
        endfunction
        
        function s__Bonus_copy takes unit source,unit target returns nothing
            local integer i= 0

            loop
                exitwhen i > s__Bonus_index
                    if s__Bonus_getter(source , s__Bonus_array[i]) != 0 then
                        call s__Bonus_adder(target , s__Bonus_array[i] , s__Bonus_getter(source , s__Bonus_array[i]))
                    endif
                set i=i + 1
            endloop
        endfunction

        function s__Bonus_mirror takes unit source,unit target returns nothing
            local integer i= 0
            
            loop
                exitwhen i > s__Bonus_index
                    call s__Bonus_setter(target , s__Bonus_array[i] , s__Bonus_getter(source , s__Bonus_array[i]))
                set i=i + 1
            endloop
        endfunction

        function s__Bonus_linkTimer takes unit source,integer bonus,real amount,real duration returns nothing
            local integer this
            
            if amount != 0 then
                set this=s__Bonus__allocate()
                set s__Bonus_value[this]=s__Bonus_adder(source , bonus , amount)
                set s__Bonus_source[this]=s__Bonus_unit[s__Bonus_key]
                set s__Bonus_bonus[this]=s__Bonus_type[s__Bonus_key]
            
                call sc__Bonus_StartTimer(duration , false , this , - 1)
            endif
        endfunction

        function s__Bonus_linkBuff takes unit source,integer bonus,real amount,integer id returns nothing
            local integer this

            if amount != 0 then
                set this=s__Bonus__allocate()
                set s__Bonus_value[this]=s__Bonus_adder(source , bonus , amount)
                set s__Bonus_source[this]=s__Bonus_unit[s__Bonus_key]
                set s__Bonus_bonus[this]=s__Bonus_type[s__Bonus_key]
                set s__Bonus_buff[this]=id
            
                call sc__Bonus_StartTimer(0.03125 , true , this , - 1)
            endif
        endfunction

        function s__Bonus_linkItem takes unit source,integer bonus,real amount,item i returns nothing
            local integer this
            local integer j= 0
            local integer id= GetHandleId(i)
            
            if amount != 0 then
                set this=s__Bonus__allocate()
                set s__Bonus_value[this]=s__Bonus_adder(source , bonus , amount)
                set s__Bonus_source[this]=s__Bonus_unit[s__Bonus_key]
                set s__Bonus_bonus[this]=s__Bonus_type[s__Bonus_key]
                set s__Bonus_item[this]=i

                loop
                    if not (HaveSavedInteger(Table___ht, (s__HashTable__getindex(s__Bonus_table,id)), (j))) then // INLINED!!
                        call SaveInteger(Table___ht, (s__HashTable__getindex(s__Bonus_table,id)), (j), ( this)) // INLINED!!
                        exitwhen true
                    endif
                    
                    set j=j + 1
                endloop
            endif
        endfunction

        function s__Bonus_register takes integer bonus returns integer
            set s__Bonus_index=s__Bonus_index + 1
            set s__Bonus_array[s__Bonus_index]=si__NewBonus___IBonus_type[bonus]
            set s__Bonus_struct[si__NewBonus___IBonus_type[bonus]]=bonus

            return si__NewBonus___IBonus_type[bonus]
        endfunction

        function s__Bonus_registerEvent takes code c,integer bonus returns nothing
            if bonus > 0 then
                if s__Bonus_event[bonus] == null then
                    set s__Bonus_event[bonus]=CreateTrigger()
                endif

                call TriggerAddCondition(s__Bonus_event[bonus], Filter(c))
            else
                call TriggerAddCondition(s__Bonus_trigger, Filter(c))
            endif
        endfunction

        function s__Bonus_onPeriod takes integer this returns boolean
            return GetUnitAbilityLevel(s__Bonus_source[this], s__Bonus_buff[this]) > 0
        endfunction

        function s__Bonus_onEvent takes integer key returns nothing
            set s__Bonus_key=s__Bonus_key + 1

            if key <= NewBonus___RECURSION_LIMIT then
                if s__Bonus_event[s__Bonus_type[key]] != null then
                    call TriggerEvaluate(s__Bonus_event[s__Bonus_type[key]])
                endif

                call TriggerEvaluate(s__Bonus_trigger)
            endif

            set s__Bonus_key=s__Bonus_key - 1
        endfunction

        function s__Bonus_onDrop takes nothing returns nothing
            local integer this
            local integer i= 0
            local integer id= GetHandleId(GetManipulatedItem())

            loop
                exitwhen not (HaveSavedInteger(Table___ht, (s__HashTable__getindex(s__Bonus_table,id)), (i))) // INLINED!!
                    set this=(LoadInteger(Table___ht, (s__HashTable__getindex(s__Bonus_table,id)), (i))) // INLINED!!

                    call s__Bonus_destroy(this)
                    call RemoveSavedInteger(Table___ht, (s__HashTable__getindex(s__Bonus_table,id)), (i)) // INLINED!!
                set i=i + 1
            endloop
        endfunction

//Implemented from module Periodic:



        function s__Bonus_Periodic___end takes integer this,integer i,integer id returns integer
            if i >= 0 then
                call SaveInteger(Table___ht, (s__Bonus_Periodic___key), (id), ( (LoadInteger(Table___ht, (s__Bonus_Periodic___key), (id))) - 1)) // INLINED!!
                call SaveInteger(Table___ht, (s__Bonus_Periodic___table), (i), ( (LoadInteger(Table___ht, (s__Bonus_Periodic___table), ((LoadInteger(Table___ht, (s__Bonus_Periodic___key), (id)))))))) // INLINED!!

                if (LoadInteger(Table___ht, (s__Bonus_Periodic___key), (id))) == 0 then // INLINED!!
                    call PauseTimer(GetExpiredTimer())
                endif
            else
                call ReleaseTimer(GetExpiredTimer())
            endif

            if (HaveSavedInteger(Table___ht, (s__Bonus_Periodic___struct), (s__Bonus_Periodic____unique[this]))) then // INLINED!!
                call RemoveSavedInteger(Table___ht, (s__Bonus_Periodic___struct), (s__Bonus_Periodic____unique[this])) // INLINED!!
            endif

            if s__Bonus_Periodic____allocated[this] then
                set s__Bonus_Periodic____timer[this]=null
                set s__Bonus_Periodic____allocated[this]=false

                call s__Bonus_destroy(this)
            endif

            return i - 1
        endfunction

        function s__Bonus_Periodic___onTimeout takes nothing returns nothing
            local integer this= (LoadInteger(TimerUtils___ht, 0, GetHandleId((GetExpiredTimer())))) // INLINED!!
            
            if this != 0 then




                call s__Bonus_Periodic___end(this,- 1 , 0)
            endif
        endfunction

        function s__Bonus_Periodic___onPeriodic takes nothing returns nothing
            local integer i= 0
            local integer id= GetHandleId(GetExpiredTimer())
            local integer this= (LoadInteger(TimerUtils___ht, 0, GetHandleId((GetExpiredTimer())))) // INLINED!!
            
            if this != 0 then

                    if not s__Bonus_onPeriod(this) then
                        call s__Bonus_Periodic___end(this,- 1 , 0)
                    endif

            else
                loop
                    exitwhen i == (LoadInteger(Table___ht, (((s__Bonus_Periodic___key))), (id))) // INLINED!!
                        set this=(LoadInteger(Table___ht, (s__Bonus_Periodic___table), (i))) // INLINED!!

                        if this != 0 then

                                if not s__Bonus_onPeriod(this) then
                                    set i=s__Bonus_Periodic___end(this,i , id)
                                endif

                        endif
                    set i=i + 1
                endloop
            endif
        endfunction

        function s__Bonus_HasStartedTimer takes integer id returns boolean
            return (HaveSavedInteger(Table___ht, (s__Bonus_Periodic___struct), (id))) // INLINED!!
        endfunction

        function s__Bonus_GetTimerInstance takes integer id returns integer
            return (LoadInteger(Table___ht, (s__Bonus_Periodic___struct), (id))) // INLINED!!
        endfunction

        function s__Bonus_GetRemainingTime takes integer this returns real
            return TimerGetRemaining(s__Bonus_Periodic____timer[this])
        endfunction

        function s__Bonus_StartTimer takes real timeout,boolean periodic,integer this,integer uniqueId returns nothing
            local integer index= R2I(timeout * 100000)
            local integer id

            if this != 0 then
                set s__Bonus_Periodic____unique[this]=uniqueId
                set s__Bonus_Periodic____allocated[this]=true

                if s__Bonus_Periodic____unique[this] >= 0 and not (HaveSavedInteger(Table___ht, (s__Bonus_Periodic___struct), (s__Bonus_Periodic____unique[this]))) then // INLINED!!
                    call SaveInteger(Table___ht, (s__Bonus_Periodic___struct), (s__Bonus_Periodic____unique[this]), ( this)) // INLINED!!
                endif

                if periodic then
                    if timeout <= s__Bonus_Periodic___PERIODIC_THRESHOLD then
                        if not (HaveSavedHandle(Table___ht, (((s__Bonus_Periodic___timers))), (index))) then // INLINED!!
                            call SaveTimerHandle(Table___ht, (((s__Bonus_Periodic___timers))), (index), ( CreateTimer())) // INLINED!!
                        endif

                        set id=GetHandleId((LoadTimerHandle(Table___ht, (((s__Bonus_Periodic___timers))), (index)))) // INLINED!!
                        set s__Bonus_Periodic____timer[this]=(LoadTimerHandle(Table___ht, (((s__Bonus_Periodic___timers))), (index))) // INLINED!!
                        call SaveInteger(Table___ht, (s__Bonus_Periodic___table), ((LoadInteger(Table___ht, (s__Bonus_Periodic___key), (id)))), ( this)) // INLINED!!
                        call SaveInteger(Table___ht, (s__Bonus_Periodic___key), (id), ( (LoadInteger(Table___ht, (s__Bonus_Periodic___key), (id))) + 1)) // INLINED!!
    
                        if (LoadInteger(Table___ht, (s__Bonus_Periodic___key), (id))) == 1 then // INLINED!!
                            call TimerStart((LoadTimerHandle(Table___ht, (((s__Bonus_Periodic___timers))), (index))), timeout, periodic, function s__Bonus_Periodic___onPeriodic) // INLINED!!
                        endif
                    else
                        set s__Bonus_Periodic____timer[this]=NewTimerEx(this)
                        call TimerStart(s__Bonus_Periodic____timer[this], timeout, periodic, function s__Bonus_Periodic___onPeriodic)
                    endif
                else
                    set s__Bonus_Periodic____timer[this]=NewTimerEx(this)
                    call TimerStart(s__Bonus_Periodic____timer[this], timeout, periodic, function s__Bonus_Periodic___onTimeout)
                endif
            else
                call BJDebugMsg("Periodic Error: instance not provided")
            endif
        endfunction

        function s__Bonus_Periodic___onInit takes nothing returns nothing
            set s__Bonus_Periodic___key=s__Table_create()
            set s__Bonus_Periodic___table=s__Table_create()
            set s__Bonus_Periodic___struct=s__Table_create()
            set s__Bonus_Periodic___timers=s__Table_create()
        endfunction

        function s__Bonus_onInit takes nothing returns nothing
            set s__Bonus_table=(s__Table_create()) // INLINED!!

            call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_DROP_ITEM , function s__Bonus_onDrop)
        endfunction

    
    
    
    function RegisterBonus takes integer bonus returns integer
        return s__Bonus_register(bonus)
    endfunction

    function RegisterBonusEvent takes code c returns nothing
        call s__Bonus_registerEvent(c , 0)
    endfunction
    
    function RegisterBonusTypeEvent takes integer bonus,code c returns nothing
        call s__Bonus_registerEvent(c , bonus)
    endfunction
    
    function GetBonusUnit takes nothing returns unit
        return s__Bonus_unit[s__Bonus_key - 1]
    endfunction
    
    function GetBonusType takes nothing returns integer
        return s__Bonus_type[s__Bonus_key - 1]
    endfunction
    
    function SetBonusType takes integer bonus returns nothing
        set s__Bonus_type[s__Bonus_key - 1]=bonus
    endfunction
    
    function GetBonusAmount takes nothing returns real
        return s__Bonus_amount[s__Bonus_key - 1]
    endfunction
    
    function SetBonusAmount takes real amount returns nothing
        set s__Bonus_amount[s__Bonus_key - 1]=amount
    endfunction

    function GetUnitBonus takes unit source,integer bonus returns real
        return s__Bonus_getter(source , bonus)
    endfunction

    function SetUnitBonus takes unit source,integer bonus,real amount returns real
        return s__Bonus_setter(source , bonus , amount)
    endfunction
    
    function RemoveUnitBonus takes unit source,integer bonus returns nothing
        call s__Bonus_setter(source , bonus , 0)
    endfunction
    
    function AddUnitBonus takes unit source,integer bonus,real amount returns real
        return s__Bonus_adder(source , bonus , amount)
    endfunction

    function AddUnitBonusTimed takes unit source,integer bonus,real amount,real duration returns nothing
        call s__Bonus_linkTimer(source , bonus , amount , duration)
    endfunction

    function LinkBonusToBuff takes unit source,integer bonus,real amount,integer id returns nothing
        call s__Bonus_linkBuff(source , bonus , amount , id)
    endfunction

    function LinkBonusToItem takes unit source,integer bonus,real amount,item i returns nothing
        call s__Bonus_linkItem(source , bonus , amount , i)
    endfunction

    function UnitCopyBonuses takes unit source,unit target returns nothing
        call s__Bonus_copy(source , target)
    endfunction

    function UnitMirrorBonuses takes unit source,unit target returns nothing
        call s__Bonus_mirror(source , target)
    endfunction

//library NewBonus ends
//library TenacityUtils:
    
    // Utility Library that include a few extra functions to deal with Tenacity
    

    
    
    
    function UnitAddTenacityTimed takes unit u,real value,real duration returns nothing
        call sc__TenacityUtils_addTimed(u , value , duration , 0)
    endfunction

    function UnitAddTenacityFlatTimed takes unit u,real value,real duration returns nothing
        call sc__TenacityUtils_addTimed(u , value , duration , 1)
    endfunction

    function UnitAddTenacityOffsetTimed takes unit u,real value,real duration returns nothing
        call sc__TenacityUtils_addTimed(u , value , duration , 2)
    endfunction

    
    
    


        function s__TenacityUtils_destroy takes integer this returns nothing
            if s__TenacityUtils_key == - 1 then
                call PauseTimer(s__TenacityUtils_timer)
            endif

            set s__TenacityUtils_unit[this]=null
            call sc__Tenacity_deallocate(this)
        endfunction

        function s__TenacityUtils_onPeriod takes nothing returns nothing
            local integer this
            local integer i= 0
            
            loop
                exitwhen i > s__TenacityUtils_key
                    set this=s__TenacityUtils_array[i]

                    if s__TenacityUtils_duration[this] <= 0 then
                        if s__TenacityUtils_type[this] == 0 then
                            call s__Tenacity_remove(s__TenacityUtils_unit[this] , s__TenacityUtils_value[this])
                        else
                            call s__Tenacity_add(s__TenacityUtils_unit[this] , - s__TenacityUtils_value[this] , s__TenacityUtils_type[this])
                        endif

                        set s__TenacityUtils_array[i]=s__TenacityUtils_array[s__TenacityUtils_key]
                        set s__TenacityUtils_key=s__TenacityUtils_key - 1
                        set i=i - 1
                        call s__TenacityUtils_destroy(this)
                    endif
                    set s__TenacityUtils_duration[this]=s__TenacityUtils_duration[this] - s__TenacityUtils_period
                set i=i + 1
            endloop
        endfunction

        function s__TenacityUtils_addTimed takes unit u,real amount,real duration,integer types returns nothing
            local integer this= s__TenacityUtils__allocate()

            set s__TenacityUtils_unit[this]=u
            set s__TenacityUtils_value[this]=amount
            set s__TenacityUtils_type[this]=types
            set s__TenacityUtils_duration[this]=duration
            set s__TenacityUtils_key=s__TenacityUtils_key + 1
            set s__TenacityUtils_array[s__TenacityUtils_key]=this

            call s__Tenacity_add(s__TenacityUtils_unit[this] , s__TenacityUtils_value[this] , s__TenacityUtils_type[this])
            
            if s__TenacityUtils_key == 0 then
                call TimerStart(s__TenacityUtils_timer, s__TenacityUtils_period, true, function s__TenacityUtils_onPeriod)
            endif
        endfunction

//library TenacityUtils ends
//library Utilities:
    
    // How to Import:
    // 1 - Copy this library into your map
    // 2 - Copy the dummy unit in object editor and match its raw code below
    // 3 - Copy the TimerUtils library into your map and follow its install instructions
    // 4 - Copy the Indexer library over to your map and follow its install instructions
    // 5 - Copy the TimedHandles library over to your map and follow its install instructions
    // 6 - Copy the RegisterPlayerUnitEvent library over to your map and follow its install instructions
    
    
    
    
    

    
    
    
    // Only one declaration per map required


    // Returns the terrain Z value (Desync safe)
    function GetLocZ takes real x,real y returns real
        call MoveLocation(Utilities___LOCZ, x, y)
        return GetLocationZ(Utilities___LOCZ)
    endfunction
    
    // Similar to GetUnitX and GetUnitY but for Z axis
    function GetUnitZ takes unit u returns real
        return GetLocZ(GetUnitX(u) , GetUnitY(u)) + GetUnitFlyHeight(u)
    endfunction
    
    // Similar to SetUnitX and SetUnitY but for Z axis
    function SetUnitZ takes unit u,real z returns nothing
        call SetUnitFlyHeight(u, z - GetLocZ(GetUnitX(u) , GetUnitY(u)), 0)
    endfunction

    // Anlge between 2D points
    function AngleBetweenCoordinates takes real x,real y,real x2,real y2 returns real
        return Atan2(y2 - y, x2 - x)
    endfunction

    // Similar to AddSpecialEffect but scales the effect and considers z and return it
    function AddSpecialEffectEx takes string model,real x,real y,real z,real scale returns effect
        set bj_lastCreatedEffect=AddSpecialEffect(model, x, y)

        if z != 0 then
            call BlzSetSpecialEffectZ(bj_lastCreatedEffect, z + GetLocZ(x , y))
        endif
        call BlzSetSpecialEffectScale(bj_lastCreatedEffect, scale)
        
        return bj_lastCreatedEffect
    endfunction

    // Returns a group of enemy units of the specified player within the specified AOE of x and y
    function GetEnemyUnitsInRange takes player enemyOf,real x,real y,real aoe,boolean structures,boolean magicImmune returns group
        local group g= CreateGroup()
        local group h= CreateGroup()
        local unit w
        
        call GroupEnumUnitsInRange(h, x, y, aoe, null)
        loop
            set w=FirstOfGroup(h)
            exitwhen w == null
                if IsUnitEnemy(w, enemyOf) and UnitAlive(w) and ( structures or ( not IsUnitType(w, UNIT_TYPE_STRUCTURE) ) ) and ( magicImmune or ( not IsUnitType(w, UNIT_TYPE_MAGIC_IMMUNE) ) ) then
                    call GroupAddUnit(g, w)
                endif
            call GroupRemoveUnit(h, w)
        endloop
        call DestroyGroup(h)
    
        set h=null
        return g
    endfunction

    // Returns the closest unit in a unit group with center at x and y
    function GetClosestUnitGroup takes real x,real y,group g returns unit
        local unit u
        local real dx
        local real dy
        local real md= 100000
        local integer i= 0
        local integer size= BlzGroupGetSize(g)
        
        set Utilities___bj_closestUnitGroup=null
        loop
            exitwhen i == size
                set u=BlzGroupUnitAt(g, i)
                if UnitAlive(u) then
                    set dx=GetUnitX(u) - x
                    set dy=GetUnitY(u) - y
                    
                    if ( dx * dx + dy * dy ) / 100000 < md then
                        set Utilities___bj_closestUnitGroup=u
                        set md=( dx * dx + dy * dy ) / 100000
                    endif
                endif
            set i=i + 1
        endloop
        
        return Utilities___bj_closestUnitGroup
    endfunction
    
    // Removes a destructable after a period of time
    function RemoveDestructableTimed takes destructable dest,real timeout returns nothing
        call sc__TimedDestructable_create(dest , timeout)
    endfunction

    // Link an effect to a unit buff or ability
    function LinkEffectToBuff takes unit target,integer buffId,string model,string attach returns nothing
        call sc__EffectLink_BuffLink(target , buffId , model , attach)
    endfunction

    // Link an effect to an unit item.
    function LinkEffectToItem takes unit target,item i,string model,string attach returns nothing
        call sc__EffectLink_ItemLink(target , i , model , attach)
    endfunction

    // Pretty obvious.
    function R2I2S takes real r returns string
        return I2S(R2I(r))
    endfunction

    // Workaround for patch 2.0 R2S bug
    function N2S takes real value,integer precision returns string
        local integer i
        local integer digit
        local string result
        local string sign= ""
    
        if value < 0 then
            set sign="-"
            set value=RAbsBJ(value)
        endif
    
        set result=sign + I2S(R2I(value))
    
        if precision <= 0 then
            return result
        endif
    
        set result=result + "."
        set value=value - R2I(value)

        loop
            exitwhen precision <= 0
                set value=value * 10
                set digit=R2I(value)
                set result=result + I2S(digit)
                set value=value - digit
            set precision=precision - 1
        endloop
    
        return result
    endfunction

    // Spams the specified effect model at a location with the given interval for the number of times count
    function SpamEffect takes string model,real x,real y,real z,real scale,real interval,integer count returns nothing
        call sc__EffectSpam_spam(null , model , "" , x , y , z , scale , interval , count)
    endfunction

    // Spams the specified effect model attached to a unit for the given interval for the number of times count
    function SpamEffectUnit takes unit target,string model,string attach,real interval,integer count returns nothing
        call sc__EffectSpam_spam(target , model , attach , 0 , 0 , 0 , 0 , interval , count)
    endfunction   

    // Add the specified ability to the specified unit for the given duration. Use hide to show or not the ability button.
    function UnitAddAbilityTimed takes unit whichUnit,integer abilityId,real duration,integer level,boolean hide returns nothing
        call sc__TimedAbility_add(whichUnit , abilityId , duration , level , hide)
    endfunction

    // Resets the specified unit ability cooldown
    function ResetUnitAbilityCooldown takes unit whichUnit,integer abilCode returns nothing
        call sc__ResetCooldown_reset(whichUnit , abilCode)
    endfunction 

    // Returns the distance between 2 coordinates in Warcraft III units
    function DistanceBetweenCoordinates takes real x1,real y1,real x2,real y2 returns real
        local real dx= ( x2 - x1 )
        local real dy= ( y2 - y1 )
    
        return SquareRoot(dx * dx + dy * dy)
    endfunction

    // Makes the specified source damage an area respecting some basic unit filters
    function UnitDamageArea takes unit source,real x,real y,real aoe,real damage,attacktype atkType,damagetype dmgType,boolean structures,boolean magicImmune,boolean allies returns nothing
        local group h= CreateGroup()
        local player enemyOf= GetOwningPlayer(source)
        local unit w
        
        call GroupEnumUnitsInRange(h, x, y, aoe, null)
        call GroupRemoveUnit(h, source)
        loop
            set w=FirstOfGroup(h)
            exitwhen w == null
                if UnitAlive(w) and ( allies or IsUnitEnemy(w, enemyOf) ) and ( structures or ( not IsUnitType(w, UNIT_TYPE_STRUCTURE) ) ) and ( magicImmune or ( not IsUnitType(w, UNIT_TYPE_MAGIC_IMMUNE) ) ) then
                    call UnitDamageTarget(source, w, damage, true, false, atkType, dmgType, null)
                endif
            call GroupRemoveUnit(h, w)
        endloop
        call DestroyGroup(h)
    
        set h=null
        set enemyOf=null
    endfunction

    // Makes the specified source damage a group. Creates a special effect if specified
    function UnitDamageGroup takes unit u,group g,real damage,attacktype atk_type,damagetype dmg_type,string sfx,string atch_point,boolean destroy returns group
        local unit v
        local integer i= 0
        local integer t= BlzGroupGetSize(g)

        loop
            exitwhen i == t
                set v=BlzGroupUnitAt(g, i)
                call UnitDamageTarget(u, v, damage, true, false, atk_type, dmg_type, null)

                if sfx != "" and atch_point != "" then
                    call DestroyEffect(AddSpecialEffectTarget(sfx, v, atch_point))
                endif
            set i=i + 1
        endloop

        if destroy then
            call DestroyGroup(g)
        endif

        return g
    endfunction

    // Returns a random range given a max value
    function GetRandomRange takes real radius returns real
        local real r= GetRandomReal(0, 1) + GetRandomReal(0, 1)

        if r > 1 then
            return ( 2 - r ) * radius
        endif

        return r * radius
    endfunction

    // Returns a random value in the x/y coordinates depending on the value of boolean x
    function GetRandomCoordInRange takes real center,real radius,boolean x returns real
        local real theta= 2 * bj_PI * GetRandomReal(0, 1)
        local real r

        if x then
            set r=center + radius * Cos(theta)
        else
            set r=center + radius * Sin(theta)
        endif

        return r
    endfunction

    // Clones the items in the source unit inventory to the target unit
    function CloneItems takes unit source,unit target,boolean isIllusion returns nothing
        local integer i= 0
        local integer j
        local item k
        
        loop
            exitwhen i > bj_MAX_INVENTORY
                set k=UnitItemInSlot(source, i)
                set j=GetItemCharges(k)
                set k=CreateItem(GetItemTypeId(k), GetUnitX(target), GetUnitY(target))
                call SetItemCharges(k, j)
                call UnitAddItem(target, k)

                if isIllusion then
                    if GetItemTypeId(k) == 'ankh' then
                        call BlzItemRemoveAbility(k, 'AIrc')
                    endif

                    call BlzSetItemBooleanField(k, ITEM_BF_ACTIVELY_USED, false)
                endif
            set i=i + 1
        endloop
        
        set k=null
    endfunction

    // Add the mount for he unit mana pool
    function AddUnitMana takes unit whichUnit,real amount returns nothing
        call SetUnitState(whichUnit, UNIT_STATE_MANA, ( GetUnitState(whichUnit, UNIT_STATE_MANA) + amount ))
    endfunction

    // Add the specified amounts to a hero str/agi/int base amount
    function UnitAddStat takes unit whichUnit,integer strength,integer agility,integer intelligence returns nothing
        if strength != 0 then
            call SetHeroStr(whichUnit, GetHeroStr(whichUnit, false) + strength, true)
        endif
    
        if agility != 0 then
            call SetHeroAgi(whichUnit, GetHeroAgi(whichUnit, false) + agility, true)
        endif
    
        if intelligence != 0 then
            call SetHeroInt(whichUnit, GetHeroInt(whichUnit, false) + intelligence, true)
        endif
    endfunction

    // Returns the closest unit from the x and y coordinates in the map
    function GetClosestUnit takes real x,real y,boolexpr e returns unit
        local real md= 100000
        local group g= CreateGroup()
        local unit u
        local real dx
        local real dy

        set Utilities___bj_closestUnitGroup=null
        
        call GroupEnumUnitsInRect(g, bj_mapInitialPlayableArea, e)
        loop
            set u=FirstOfGroup(g)
            exitwhen u == null
                if UnitAlive(u) then
                    set dx=GetUnitX(u) - x
                    set dy=GetUnitY(u) - y
                    
                    if ( dx * dx + dy * dy ) / 100000 < md then
                        set Utilities___bj_closestUnitGroup=u
                        set md=( dx * dx + dy * dy ) / 100000
                    endif
                endif
            call GroupRemoveUnit(g, u)
        endloop
        call DestroyGroup(g)
        call DestroyBoolExpr(e)
        set g=null

        return Utilities___bj_closestUnitGroup
    endfunction
    
    // Creates a chain lightning with the specified ligihtning effect with the amount of bounces
    function CreateChainLightning takes unit source,unit target,real damage,real aoe,real duration,real interval,integer bounceCount,attacktype attackType,damagetype damageType,string lightningType,string sfx,string attachPoint,boolean canRebounce returns nothing
        call sc__ChainLightning_create(source , target , damage , aoe , duration , interval , bounceCount , attackType , damageType , lightningType , sfx , attachPoint , canRebounce)
    endfunction

    // Add the specified amount to the specified player gold amount
    function AddPlayerGold takes player whichPlayer,integer amount returns nothing
        call SetPlayerState(whichPlayer, PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(whichPlayer, PLAYER_STATE_RESOURCE_GOLD) + amount)
    endfunction

    // Creates a text tag in an unit position for a duration
    function CreateTextOnUnit takes unit whichUnit,string text,real duration,integer red,integer green,integer blue,integer alpha returns nothing
        local texttag tx= CreateTextTag()
        
        call SetTextTagText(tx, text, 0.015)
        call SetTextTagPosUnit(tx, whichUnit, 0)
        call SetTextTagColor(tx, red, green, blue, alpha)
        call SetTextTagLifespan(tx, duration)
        call SetTextTagVelocity(tx, 0.0, 0.0355)
        call SetTextTagPermanent(tx, false)
        
        set tx=null
    endfunction

    // Add health regeneration to the unit base value
    function UnitAddHealthRegen takes unit whichUnit,real regen returns nothing
        call BlzSetUnitRealField(whichUnit, UNIT_RF_HIT_POINTS_REGENERATION_RATE, BlzGetUnitRealField(whichUnit, UNIT_RF_HIT_POINTS_REGENERATION_RATE) + regen)
    endfunction

    // Retrieves a dummy from the pool. Facing angle in radians
    function DummyRetrieve takes player owner,real x,real y,real z,real face returns unit
        return sc__DummyPool_retrieve(owner , x , y , z , face)
    endfunction

    // Recycles a dummy unit type, putting it back into the pool.
    function DummyRecycle takes unit dummy returns nothing
        call sc__DummyPool_recycle(dummy)
    endfunction

    // Recycles a dummy with a delay.
    function DummyRecycleTimed takes unit dummy,real delay returns nothing
        call sc__DummyPool_recycleTimed(dummy , delay)
    endfunction

    // Casts an ability in the target unit. Must have no casting time
    function CastAbilityTarget takes unit target,integer id,string order,integer level returns nothing
        local unit dummy= (sc__DummyPool_retrieve((GetOwningPlayer(target) ) , (( 0 )*1.0) , (( 0 )*1.0) , (( 0 )*1.0) , (( 0)*1.0))) // INLINED!!
        
        call UnitAddAbility(dummy, id)
        call SetUnitAbilityLevel(dummy, id, level)
        call IssueTargetOrder(dummy, order, target)
        call UnitRemoveAbility(dummy, id)
        call sc__DummyPool_recycle((dummy)) // INLINED!!

        set dummy=null
    endfunction

    // Returns a random unit within a group
    function GroupPickRandomUnitEx takes group g returns unit
        if BlzGroupGetSize(g) > 0 then
            return BlzGroupUnitAt(g, GetRandomInt(0, BlzGroupGetSize(g) - 1))
        else
            return null
        endif
    endfunction

    // Returns true if a unit is within a cone given a facing and fov angle in degrees (Less precise)
    function IsUnitInConeEx takes unit u,real x,real y,real face,real fov returns boolean
        return Acos(Cos(( Atan2(GetUnitY(u) - y, GetUnitX(u) - x) ) - face * bj_DEGTORAD)) < fov * bj_DEGTORAD / 2
    endfunction

    // Returns true if a unit is within a cone given a facing, fov angle and a range in degrees (takes collision into consideration). Credits to AGD.
    function IsUnitInCone takes unit u,real x,real y,real range,real face,real fov returns boolean
        if IsUnitInRangeXY(u, x, y, range) then
            set x=GetUnitX(u) - x
            set y=GetUnitY(u) - y
            set range=x * x + y * y
    
            if range > 0. then
                set face=face * bj_DEGTORAD - Atan2(y, x)
                set fov=fov * bj_DEGTORAD / 2 + Asin(BlzGetUnitCollisionSize(u) / SquareRoot(range))
    
                return RAbsBJ(face) <= fov or RAbsBJ(face - 2.00 * bj_PI) <= fov
            endif
    
            return true
        endif
    
        return false
    endfunction

    // Makes the source unit damage enemy unit in a cone given a direction, foy and range
    function UnitDamageCone takes unit source,real x,real y,real face,real fov,real aoe,real damage,attacktype atkType,damagetype dmgType,boolean structures,boolean magicImmune,boolean allies returns nothing
        local group h= CreateGroup()
        local player enemyOf= GetOwningPlayer(source)
        local unit w
        
        call GroupEnumUnitsInRange(h, x, y, aoe, null)
        call GroupRemoveUnit(h, source)
        loop
            set w=FirstOfGroup(h)
            exitwhen w == null
                if ( UnitAlive(w) and IsUnitInCone(w , x , y , aoe , face , fov) ) then
                    if ( allies or IsUnitEnemy(w, enemyOf) ) and ( structures or ( not IsUnitType(w, UNIT_TYPE_STRUCTURE) ) ) and ( magicImmune or ( not IsUnitType(w, UNIT_TYPE_MAGIC_IMMUNE) ) ) then
                        call UnitDamageTarget(source, w, damage, true, false, atkType, dmgType, null)
                    endif
                endif
            call GroupRemoveUnit(h, w)
        endloop
        call DestroyGroup(h)
    
        set h=null
        set enemyOf=null
    endfunction

    // Heals all allied units of specified player in an area
    function HealArea takes player alliesOf,real x,real y,real aoe,real amount,string fxpath,string attchPoint returns nothing
        local group g= CreateGroup()
        local unit v
        
        call GroupEnumUnitsInRange(g, x, y, aoe, null)
        loop
            set v=FirstOfGroup(g)
            exitwhen v == null
                if IsUnitAlly(v, alliesOf) and UnitAlive(v) and not IsUnitType(v, UNIT_TYPE_STRUCTURE) then
                    call SetWidgetLife(v, GetWidgetLife(v) + amount)
                    if fxpath != "" then
                        if attchPoint != "" then
                            call DestroyEffect(AddSpecialEffectTarget(fxpath, v, attchPoint))
                        else
                            call DestroyEffect(AddSpecialEffect(fxpath, GetUnitX(v), GetUnitY(v)))
                        endif
                    endif
                endif
            call GroupRemoveUnit(g, v)
        endloop
        call DestroyGroup(g)
    
        set g=null
    endfunction

    // Returns an ability real level field as a string. Usefull for toolltip manipulation.
    function AbilityRealField takes unit u,integer abilityId,abilityreallevelfield field,integer level,integer multiplier,boolean asInteger returns string
        if asInteger then
            return (I2S(R2I(((BlzGetAbilityRealLevelField(BlzGetUnitAbility(u, abilityId), field, level) * multiplier)*1.0)))) // INLINED!!
        else
            return R2SW(BlzGetAbilityRealLevelField(BlzGetUnitAbility(u, abilityId), field, level) * multiplier, 1, 1)
        endif
    endfunction

    // Fix for camera pan desync. credits do Daffa
    function SmartCameraPanBJModified takes player whichPlayer,location loc,real duration returns nothing
        local real tx= GetLocationX(loc)
        local real ty= GetLocationY(loc)
        local real dx= tx - GetCameraTargetPositionX()
        local real dy= ty - GetCameraTargetPositionY()
        local real dist= SquareRoot(dx * dx + dy * dy)

        if ( GetLocalPlayer() == whichPlayer ) then
            if ( dist >= bj_SMARTPAN_TRESHOLD_SNAP ) then
                call PanCameraToTimed(tx, ty, duration)
                // Far away = snap camera immediately to point
            elseif ( dist >= bj_SMARTPAN_TRESHOLD_PAN ) then
                call PanCameraToTimed(tx, ty, duration)
                // Moderately close = pan camera over duration
            else
                // User is close, don't move camera
            endif
        endif
    endfunction
    
    // Fix for camera pan desync. credits do Daffa
    function SmartCameraPanBJModifiedXY takes player whichPlayer,real x,real y,real duration returns nothing
        local real dx= x - GetCameraTargetPositionX()
        local real dy= y - GetCameraTargetPositionY()
        local real dist= SquareRoot(dx * dx + dy * dy)

        if ( GetLocalPlayer() == whichPlayer ) then
            if ( dist >= bj_SMARTPAN_TRESHOLD_SNAP ) then
                call PanCameraToTimed(x, y, duration)
                // Far away = snap camera immediately to point
            elseif ( dist >= bj_SMARTPAN_TRESHOLD_PAN ) then
                call PanCameraToTimed(x, y, duration)
                // Moderately close = pan camera over duration
            else
                // User is close, don't move camera
            endif
        endif
    endfunction

    // Start the cooldown for the source unit unit the new value
    function StartUnitAbilityCooldown takes unit source,integer abilCode,real cooldown returns nothing
        call sc__AbilityCooldown_start(source , abilCode , cooldown)
    endfunction
    
    // Pauses or Unpauses a unit after a delay. If flag = true than the unit will be paused and unpaused after the duration. If flag = false than the unit will be unpaused and paused after the duration.
    function PauseUnitTimed takes unit u,real duration,boolean flag returns nothing
        call sc__TimedPause_create(u , duration , flag)
    endfunction

    
    
    
    

        function s__ResetCooldown_onExpire takes nothing returns nothing
            local integer this= (LoadInteger(TimerUtils___ht, 0, GetHandleId((GetExpiredTimer())))) // INLINED!!

            call BlzEndUnitAbilityCooldown(s__ResetCooldown_unit[this], s__ResetCooldown_ability[this])
            call ReleaseTimer(s__ResetCooldown_timer[this])
            call s__ResetCooldown_deallocate(this)
            
            set s__ResetCooldown_unit[this]=null
            set s__ResetCooldown_timer[this]=null
        endfunction

        function s__ResetCooldown_reset takes unit u,integer id returns nothing
            local integer this= s__ResetCooldown__allocate()

            set s__ResetCooldown_timer[this]=NewTimerEx(this)
            set s__ResetCooldown_unit[this]=u
            set s__ResetCooldown_ability[this]=id

            call TimerStart(s__ResetCooldown_timer[this], 0.01, false, function s__ResetCooldown_onExpire)
        endfunction 

    


        function s__TimedAbility_remove takes integer this,integer i returns integer
            call UnitRemoveAbility(s__TimedAbility_unit[this], s__TimedAbility_ability[this])
            call RemoveSavedInteger(Utilities___table, GetHandleId(s__TimedAbility_unit[this]), s__TimedAbility_ability[this])

            set s__TimedAbility_array[i]=s__TimedAbility_array[s__TimedAbility_key]
            set s__TimedAbility_key=s__TimedAbility_key - 1
            set s__TimedAbility_unit[this]=null

            if s__TimedAbility_key == - 1 then
                call PauseTimer(s__TimedAbility_timer)
            endif

            call s__TimedAbility_deallocate(this)

            return i - 1
        endfunction

        function s__TimedAbility_onPeriod takes nothing returns nothing
            local integer i= 0
            local integer this

            loop
                exitwhen i > s__TimedAbility_key
                    set this=s__TimedAbility_array[i]

                    if s__TimedAbility_duration[this] <= 0 then
                        set i=s__TimedAbility_remove(this,i)
                    endif
                    set s__TimedAbility_duration[this]=s__TimedAbility_duration[this] - 0.1
                set i=i + 1
            endloop
        endfunction


        function s__TimedAbility_add takes unit u,integer id,real duration,integer level,boolean hide returns nothing
            local integer this= LoadInteger(Utilities___table, GetHandleId(u), id)
            
            if this == 0 then
                set this=s__TimedAbility__allocate()
                set s__TimedAbility_unit[this]=u
                set s__TimedAbility_ability[this]=id
                set s__TimedAbility_key=s__TimedAbility_key + 1
                set s__TimedAbility_array[s__TimedAbility_key]=this

                call SaveInteger(Utilities___table, GetHandleId(s__TimedAbility_unit[this]), s__TimedAbility_ability[this], this)

                if s__TimedAbility_key == 0 then
                    call TimerStart(s__TimedAbility_timer, 0.1, true, function s__TimedAbility_onPeriod)
                endif
            endif

            if GetUnitAbilityLevel(s__TimedAbility_unit[this], s__TimedAbility_ability[this]) != level then
                call UnitAddAbility(s__TimedAbility_unit[this], s__TimedAbility_ability[this])
                call SetUnitAbilityLevel(s__TimedAbility_unit[this], s__TimedAbility_ability[this], level)
                call UnitMakeAbilityPermanent(s__TimedAbility_unit[this], true, s__TimedAbility_ability[this])
                call BlzUnitHideAbility(s__TimedAbility_unit[this], s__TimedAbility_ability[this], hide)
            endif

            set s__TimedAbility_duration[this]=duration
        endfunction

    

        function s__EffectSpam_onPeriod takes nothing returns nothing
            local integer this= (LoadInteger(TimerUtils___ht, 0, GetHandleId((GetExpiredTimer())))) // INLINED!!

            if s__EffectSpam_i[this] > 0 then
                if s__EffectSpam_unit[this] == null then
                    call DestroyEffect(AddSpecialEffectEx(s__EffectSpam_effect[this] , s__EffectSpam_x[this] , s__EffectSpam_y[this] , s__EffectSpam_z[this] , s__EffectSpam_scale[this]))
                else
                    call DestroyEffect(AddSpecialEffectTarget(s__EffectSpam_effect[this], s__EffectSpam_unit[this], s__EffectSpam_point[this]))
                endif
            else
                call ReleaseTimer(s__EffectSpam_timer[this])
                call s__EffectSpam_deallocate(this)
                set s__EffectSpam_timer[this]=null
                set s__EffectSpam_unit[this]=null
            endif
            set s__EffectSpam_i[this]=s__EffectSpam_i[this] - 1
        endfunction

        function s__EffectSpam_spam takes unit target,string model,string attach,real x,real y,real z,real scale,real interval,integer count returns nothing
            local integer this= s__EffectSpam__allocate()

            set s__EffectSpam_timer[this]=NewTimerEx(this)
            set s__EffectSpam_unit[this]=target
            set s__EffectSpam_i[this]=count
            set s__EffectSpam_effect[this]=model
            set s__EffectSpam_x[this]=x
            set s__EffectSpam_y[this]=y
            set s__EffectSpam_z[this]=z
            set s__EffectSpam_scale[this]=scale
            set s__EffectSpam_point[this]=attach

            call TimerStart(s__EffectSpam_timer[this], interval, true, function s__EffectSpam_onPeriod)
        endfunction

    

        function s__ChainLightning_destroy takes integer this returns nothing
            call DestroyGroup(s__ChainLightning_group[this])
            call ReleaseTimer(s__ChainLightning_timer[this])
            call DestroyGroup(s__ChainLightning_damaged[this])

            set s__ChainLightning_prev[this]=null
            set s__ChainLightning_self[this]=null
            set s__ChainLightning_next[this]=null
            set s__ChainLightning_unit[this]=null
            set s__ChainLightning_group[this]=null
            set s__ChainLightning_timer[this]=null
            set s__ChainLightning_player[this]=null
            set s__ChainLightning_damaged[this]=null
            set s__ChainLightning_attacktype[this]=null
            set s__ChainLightning_damagetype[this]=null

            call s__ChainLightning_deallocate(this)
        endfunction

        function s__ChainLightning_onPeriod takes nothing returns nothing
            local integer this= (LoadInteger(TimerUtils___ht, 0, GetHandleId((GetExpiredTimer())))) // INLINED!!
            
            call DestroyGroup(s__ChainLightning_group[this])
            if s__ChainLightning_bounces[this] > 0 then
                set s__ChainLightning_group[this]=GetEnemyUnitsInRange(s__ChainLightning_player[this] , GetUnitX(s__ChainLightning_self[this]) , GetUnitY(s__ChainLightning_self[this]) , s__ChainLightning_range[this] , false , false)
                call GroupRemoveUnit(s__ChainLightning_group[this], s__ChainLightning_self[this])
                
                if not s__ChainLightning_rebounce[this] then
                    call BlzGroupRemoveGroupFast(s__ChainLightning_damaged[this], s__ChainLightning_group[this])
                endif
                
                if BlzGroupGetSize(s__ChainLightning_group[this]) == 0 then
                    call s__ChainLightning_destroy(this)
                else
                    set s__ChainLightning_next[this]=GetClosestUnitGroup(GetUnitX(s__ChainLightning_self[this]) , GetUnitY(s__ChainLightning_self[this]) , s__ChainLightning_group[this])
                    
                    if s__ChainLightning_next[this] == s__ChainLightning_prev[this] and BlzGroupGetSize(s__ChainLightning_group[this]) > 1 then
                        call GroupRemoveUnit(s__ChainLightning_group[this], s__ChainLightning_prev[this])
                        set s__ChainLightning_next[this]=GetClosestUnitGroup(GetUnitX(s__ChainLightning_self[this]) , GetUnitY(s__ChainLightning_self[this]) , s__ChainLightning_group[this])
                    endif
                    
                    if s__ChainLightning_next[this] != null then
call s__lightningTimed_create((AddLightningEx(s__ChainLightning_lightning[this], true, GetUnitX(s__ChainLightning_self[this]), GetUnitY(s__ChainLightning_self[this]), GetUnitZ(s__ChainLightning_self[this]) + 60.0, GetUnitX(s__ChainLightning_next[this]), GetUnitY(s__ChainLightning_next[this]), GetUnitZ(s__ChainLightning_next[this]) + 60.0) ) , (( s__ChainLightning_duration[this])*1.0)) // INLINED!!
                        call DestroyEffect(AddSpecialEffectTarget(s__ChainLightning_effect[this], s__ChainLightning_next[this], s__ChainLightning_attach[this]))
                        call GroupAddUnit(s__ChainLightning_damaged[this], s__ChainLightning_next[this])
                        call UnitDamageTarget(s__ChainLightning_unit[this], s__ChainLightning_next[this], s__ChainLightning_damage[this], false, false, s__ChainLightning_attacktype[this], s__ChainLightning_damagetype[this], null)
                        call DestroyGroup(s__ChainLightning_group[this])
                        set s__ChainLightning_prev[this]=s__ChainLightning_self[this]
                        set s__ChainLightning_self[this]=s__ChainLightning_next[this]
                        set s__ChainLightning_next[this]=null
                    else
                        call s__ChainLightning_destroy(this)
                    endif
                endif
            else
                call s__ChainLightning_destroy(this)
            endif
            set s__ChainLightning_bounces[this]=s__ChainLightning_bounces[this] - 1
        endfunction

        function s__ChainLightning_create takes unit source,unit target,real dmg,real aoe,real dur,real interval,integer bounceCount,attacktype attackType,damagetype damageType,string lightningType,string sfx,string attachPoint,boolean canRebounce returns integer
            local group g
            local integer this

            set g=GetEnemyUnitsInRange(GetOwningPlayer(source) , GetUnitX(target) , GetUnitY(target) , aoe , false , false)

            if BlzGroupGetSize(g) == 1 then
call s__lightningTimed_create((AddLightningEx(lightningType, true, GetUnitX(source), GetUnitY(source), BlzGetUnitZ(source) + 60.0, GetUnitX(target), GetUnitY(target), BlzGetUnitZ(target) + 60.0) ) , (( dur)*1.0)) // INLINED!!
                call DestroyEffect(AddSpecialEffectTarget(sfx, target, attachPoint))
                call UnitDamageTarget(source, target, dmg, false, false, attackType, damageType, null)
            else
                set this=s__ChainLightning__allocate()
                set s__ChainLightning_timer[this]=NewTimerEx(this)
                set s__ChainLightning_prev[this]=null
                set s__ChainLightning_self[this]=target
                set s__ChainLightning_next[this]=null
                set s__ChainLightning_unit[this]=source
                set s__ChainLightning_player[this]=GetOwningPlayer(source)
                set s__ChainLightning_damage[this]=dmg
                set s__ChainLightning_range[this]=aoe
                set s__ChainLightning_duration[this]=dur
                set s__ChainLightning_bounces[this]=bounceCount
                set s__ChainLightning_attacktype[this]=attackType
                set s__ChainLightning_damagetype[this]=damageType
                set s__ChainLightning_lightning[this]=lightningType
                set s__ChainLightning_effect[this]=sfx
                set s__ChainLightning_attach[this]=attachPoint
                set s__ChainLightning_rebounce[this]=canRebounce
                set s__ChainLightning_damaged[this]=CreateGroup()

                call GroupRemoveUnit(g, target)
                call GroupAddUnit(s__ChainLightning_damaged[this], target)
                call DestroyEffect(AddSpecialEffectTarget(sfx, target, attachPoint))
                call UnitDamageTarget(source, target, s__ChainLightning_damage[this], false, false, s__ChainLightning_attacktype[this], s__ChainLightning_damagetype[this], null)
                call TimerStart(s__ChainLightning_timer[this], interval, true, function s__ChainLightning_onPeriod)
            endif
            call DestroyGroup(g)
            set g=null

            return this
        endfunction

    


        function s__DummyPool_recycle takes unit dummy returns nothing
            if GetUnitTypeId(dummy) != Utilities_DUMMY then
            else
                call GroupAddUnit(s__DummyPool_group, dummy)
                call SetUnitX(dummy, s__WorldBounds_maxX)
                call SetUnitY(dummy, s__WorldBounds_maxY)
                call SetUnitOwner(dummy, s__DummyPool_player, false)
                call ShowUnit(dummy, false)
                call BlzPauseUnitEx(dummy, true)
            endif
        endfunction

        function s__DummyPool_retrieve takes player owner,real x,real y,real z,real face returns unit
            if BlzGroupGetSize(s__DummyPool_group) > 0 then
                set bj_lastCreatedUnit=FirstOfGroup(s__DummyPool_group)
                call BlzPauseUnitEx(bj_lastCreatedUnit, false)
                call ShowUnit(bj_lastCreatedUnit, true)
                call GroupRemoveUnit(s__DummyPool_group, bj_lastCreatedUnit)
                call SetUnitX(bj_lastCreatedUnit, x)
                call SetUnitY(bj_lastCreatedUnit, y)
                call SetUnitFlyHeight(bj_lastCreatedUnit, z, 0)
                call BlzSetUnitFacingEx(bj_lastCreatedUnit, face * bj_RADTODEG)
                call SetUnitOwner(bj_lastCreatedUnit, owner, false)
            else
                set bj_lastCreatedUnit=CreateUnit(owner, Utilities_DUMMY, x, y, face * bj_RADTODEG)
                call SetUnitFlyHeight(bj_lastCreatedUnit, z, 0)
            endif

            return bj_lastCreatedUnit
        endfunction

        function s__DummyPool_onExpire takes nothing returns nothing
            local integer this= (LoadInteger(TimerUtils___ht, 0, GetHandleId((GetExpiredTimer())))) // INLINED!!

            call s__DummyPool_recycle(s__DummyPool_unit[this])
            call ReleaseTimer(s__DummyPool_timer[this])
            
            set s__DummyPool_timer[this]=null
            set s__DummyPool_unit[this]=null

            call s__DummyPool_deallocate(this)
        endfunction

        function s__DummyPool_recycleTimed takes unit dummy,real delay returns nothing
            local integer this

            if GetUnitTypeId(dummy) != Utilities_DUMMY then
            else
                set this=s__DummyPool__allocate()

                set s__DummyPool_timer[this]=NewTimerEx(this)
                set s__DummyPool_unit[this]=dummy
                
                call TimerStart(s__DummyPool_timer[this], delay, false, function s__DummyPool_onExpire)
            endif
        endfunction

        function s__DummyPool_onInit takes nothing returns nothing
            local integer i= 0
            local unit u

            loop
                exitwhen i == 20
                    set u=CreateUnit(s__DummyPool_player, Utilities_DUMMY, s__WorldBounds_maxX, s__WorldBounds_maxY, 0)
                    call BlzPauseUnitEx(u, false)
                    call GroupAddUnit(s__DummyPool_group, u)
                set i=i + 1
            endloop

            set u=null
        endfunction

    
        //Dynamic Indexing for buff and timed
        //Dynamic Indexing for items


        function s__EffectLink_remove takes integer this,integer i,boolean isItem returns integer
            call DestroyEffect(s__EffectLink_effect[this])

            if isItem then
                set s__EffectLink_items[i]=s__EffectLink_items[s__EffectLink_ditem]
                set s__EffectLink_ditem=s__EffectLink_ditem - 1
            else
                set s__EffectLink_data[i]=s__EffectLink_data[s__EffectLink_didx]
                set s__EffectLink_didx=s__EffectLink_didx - 1

                if s__EffectLink_didx == - 1 then
                    call PauseTimer(s__EffectLink_timer)
                endif
            endif

            set s__EffectLink_unit[this]=null
            set s__EffectLink_item[this]=null
            set s__EffectLink_effect[this]=null

            call s__EffectLink_deallocate(this)

            return i - 1
        endfunction

        function s__EffectLink_onDrop takes nothing returns nothing
            local item j= GetManipulatedItem()
            local integer i= 0
            local integer this

            loop
                exitwhen i > s__EffectLink_ditem
                    set this=s__EffectLink_items[i]

                    if s__EffectLink_item[this] == j then
                        set i=s__EffectLink_remove(this,i , true)
                    endif
                set i=i + 1
            endloop

            set j=null
        endfunction

        function s__EffectLink_onPeriod takes nothing returns nothing
            local integer i= 0
            local integer this

            loop
                exitwhen i > s__EffectLink_didx
                    set this=s__EffectLink_data[i]

                    if GetUnitAbilityLevel(s__EffectLink_unit[this], s__EffectLink_buff[this]) == 0 then
                        set i=s__EffectLink_remove(this,i , false)
                    endif
                set i=i + 1
            endloop
        endfunction

        function s__EffectLink_BuffLink takes unit target,integer id,string model,string attach returns nothing
            local integer this= s__EffectLink__allocate()

            set s__EffectLink_unit[this]=target
            set s__EffectLink_buff[this]=id
            set s__EffectLink_effect[this]=AddSpecialEffectTarget(model, target, attach)
            set s__EffectLink_didx=s__EffectLink_didx + 1
            set s__EffectLink_data[s__EffectLink_didx]=this
            
            if s__EffectLink_didx == 0 then
                call TimerStart(s__EffectLink_timer, 0.03125000, true, function s__EffectLink_onPeriod)
            endif
        endfunction

        function s__EffectLink_ItemLink takes unit target,item i,string model,string attach returns nothing
            local integer this= s__EffectLink__allocate()

            set s__EffectLink_item[this]=i
            set s__EffectLink_effect[this]=AddSpecialEffectTarget(model, target, attach)
            set s__EffectLink_ditem=s__EffectLink_ditem + 1
            set s__EffectLink_items[s__EffectLink_ditem]=this
        endfunction

        function s__EffectLink_onInit takes nothing returns nothing
            call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_DROP_ITEM , function s__EffectLink_onDrop)
        endfunction

    

        function s__AbilityCooldown_onExpire takes nothing returns nothing
            local integer this= (LoadInteger(TimerUtils___ht, 0, GetHandleId((GetExpiredTimer())))) // INLINED!!

            call BlzStartUnitAbilityCooldown(s__AbilityCooldown_unit[this], s__AbilityCooldown_ability[this], s__AbilityCooldown_newCd[this])
            call ReleaseTimer(s__AbilityCooldown_timer[this])
            call s__AbilityCooldown_deallocate(this)

            set s__AbilityCooldown_timer[this]=null
            set s__AbilityCooldown_unit[this]=null
        endfunction

        function s__AbilityCooldown_start takes unit source,integer abilCode,real cooldown returns nothing
            local integer this= s__AbilityCooldown__allocate()

            set s__AbilityCooldown_timer[this]=NewTimerEx(this)
            set s__AbilityCooldown_unit[this]=source
            set s__AbilityCooldown_ability[this]=abilCode
            set s__AbilityCooldown_newCd[this]=cooldown

            call TimerStart(s__AbilityCooldown_timer[this], 0.01, false, function s__AbilityCooldown_onExpire)
        endfunction

    


        function s__TimedDestructable_remove takes integer this,integer i returns integer
            call RemoveDestructable(s__TimedDestructable_destructable[this])

            set s__TimedDestructable_destructable[this]=null
            set s__TimedDestructable_array[i]=s__TimedDestructable_array[s__TimedDestructable_id]
            set s__TimedDestructable_id=s__TimedDestructable_id - 1

            if s__TimedDestructable_id == - 1 then
                call PauseTimer(s__TimedDestructable_timer)
            endif

            call s__TimedDestructable_deallocate(this)

            return i - 1
        endfunction

        function s__TimedDestructable_onPeriod takes nothing returns nothing
            local integer i= 0
            local integer this

            loop
                exitwhen i > s__TimedDestructable_id
                    set this=s__TimedDestructable_array[i]

                    if s__TimedDestructable_duration[this] <= 0 then
                        set i=s__TimedDestructable_remove(this,i)
                    endif
                    set s__TimedDestructable_duration[this]=s__TimedDestructable_duration[this] - s__TimedDestructable_period
                set i=i + 1
            endloop
        endfunction

        function s__TimedDestructable_create takes destructable dest,real timeout returns integer
            local integer this= s__TimedDestructable__allocate()

            set s__TimedDestructable_destructable[this]=dest
            set s__TimedDestructable_duration[this]=timeout
            set s__TimedDestructable_id=s__TimedDestructable_id + 1
            set s__TimedDestructable_array[s__TimedDestructable_id]=this

            if s__TimedDestructable_id == 0 then
                call TimerStart(s__TimedDestructable_timer, s__TimedDestructable_period, true, function s__TimedDestructable_onPeriod)
            endif

            return this
        endfunction

    


        function s__TimedPause_onExpire takes nothing returns nothing
            local integer this= (LoadInteger(TimerUtils___ht, 0, GetHandleId((GetExpiredTimer())))) // INLINED!!

            set s__TimedPause_array[s__TimedPause_key[this]]=s__TimedPause_array[s__TimedPause_key[this]] - 1
            if s__TimedPause_array[s__TimedPause_key[this]] == 0 then
                call BlzPauseUnitEx(s__TimedPause_unit[this], not s__TimedPause_flag[this])
            endif
            call ReleaseTimer(s__TimedPause_timer[this])
            call s__TimedPause_deallocate(this)
            
            set s__TimedPause_timer[this]=null
            set s__TimedPause_unit[this]=null
        endfunction


        function s__TimedPause_create takes unit u,real duration,boolean pause returns integer
            local integer this= s__TimedPause__allocate()

            set s__TimedPause_timer[this]=NewTimerEx(this)
            set s__TimedPause_unit[this]=u
            set s__TimedPause_flag[this]=pause
            set s__TimedPause_key[this]=GetUnitUserData(u)
            
            if s__TimedPause_array[s__TimedPause_key[this]] == 0 then
                call BlzPauseUnitEx(u, pause)
            endif
            set s__TimedPause_array[s__TimedPause_key[this]]=s__TimedPause_array[s__TimedPause_key[this]] + 1
            
            call TimerStart(s__TimedPause_timer[this], duration, false, function s__TimedPause_onExpire)
            
            return this
        endfunction

//library Utilities ends
//library Afterburner:
    
    // Credits:
    //     PrinceYaser - icon.
    
    
    
    
    

    //function responsible to determine the duration of the Afterburn
    //By default, it uses the Cooldown value in the Object Editor
    function Afterburner___GetDuration takes unit u,integer level returns real
        return BlzGetAbilityRealLevelField(BlzGetUnitAbility(u, Afterburner___ABILITY), ABILITY_RLF_DURATION_NORMAL, level - 1)
    endfunction

    //function responsible to determine the AoE of the Afterburn
    //By default, it uses the AoE value in the Object Editor
    function Afterburner___GetAoE takes unit u,integer level returns real
        return BlzGetAbilityRealLevelField(BlzGetUnitAbility(u, Afterburner___ABILITY), ABILITY_RLF_AREA_OF_EFFECT, level - 1)
    endfunction

    //The damage per interval of the Afterburn
    function Afterburner___GetDamage takes unit u,integer level returns real

            return 25. * level + 0.6 * (s__Bonus_getter((u ) , ( BONUS_SPELL_POWER))) // INLINED!!



    endfunction

    //The damage interval of the Afterburn
    function Afterburner___GetDamageInterval takes unit u,integer level returns real
        return 1.0
    endfunction
    
    
    
    


        function s__Afterburner___Afterburner_destroy takes integer this returns nothing
            call sc__DummyPool_recycle((s__Afterburner___Afterburner_dummy[this])) // INLINED!!
            call sc__Ability___IAbility_deallocate(this)

            set s__Afterburner___Afterburner_unit[this]=null
            set s__Afterburner___Afterburner_dummy[this]=null
            set s__Afterburner___Afterburner_array[s__Afterburner___Afterburner_id[this]]=0
        endfunction

        function s__Afterburner___Afterburner_create takes real x,real y,real damage,real duration,real aoe,real interval,unit source returns integer
            local integer this= s__Afterburner___Afterburner__allocate()
            local ability skill
    
            set s__Afterburner___Afterburner_unit[this]=source
            set s__Afterburner___Afterburner_dummy[this]=(sc__DummyPool_retrieve((GetOwningPlayer(source) ) , (( x )*1.0) , (( y )*1.0) , (( 0 )*1.0) , (( 0)*1.0))) // INLINED!!
            set s__Afterburner___Afterburner_id[this]=GetUnitUserData(s__Afterburner___Afterburner_dummy[this])
            set s__Afterburner___Afterburner_array[s__Afterburner___Afterburner_id[this]]=this

            call UnitAddAbility(s__Afterburner___Afterburner_dummy[this], Afterburner___AFTERBURN_PROXY)
            set skill=BlzGetUnitAbility(s__Afterburner___Afterburner_dummy[this], Afterburner___AFTERBURN_PROXY)
            call BlzSetAbilityRealLevelField(skill, ABILITY_RLF_DURATION_NORMAL, 0, duration)
            call BlzSetAbilityRealLevelField(skill, ABILITY_RLF_FULL_DAMAGE_INTERVAL, 0, duration)
            call BlzSetAbilityRealLevelField(skill, ABILITY_RLF_HALF_DAMAGE_INTERVAL, 0, interval)
            call BlzSetAbilityRealLevelField(skill, ABILITY_RLF_AREA_OF_EFFECT, 0, aoe)
            call BlzSetAbilityRealLevelField(skill, ABILITY_RLF_HALF_DAMAGE_DEALT, 0, damage)
            call IncUnitAbilityLevel(s__Afterburner___Afterburner_dummy[this], Afterburner___AFTERBURN_PROXY)
            call DecUnitAbilityLevel(s__Afterburner___Afterburner_dummy[this], Afterburner___AFTERBURN_PROXY)
            call IssuePointOrder(s__Afterburner___Afterburner_dummy[this], "flamestrike", x, y)
            call sc__Afterburner___Afterburner_StartTimer(duration + 0.05 , false , this , - 1)
            
            set skill=null

            return this
        endfunction

        function s__Afterburner___Afterburner_onTooltip takes integer this,unit source,integer level returns string
            return "|cffffcc00Ragnaros|r spells leave a trail of fire after cast that burns enemy units within |cffffcc00" + N2S(Afterburner___GetAoE(source , level) , 0) + "|r range for |cff00ffff" + N2S(Afterburner___GetDamage(source , level) , 0) + " Magic|r damage every |cffffcc00" + N2S(Afterburner___GetDamageInterval(source , level) , 1) + "|r seconds.\n\nLasts |cffffcc00" + N2S(Afterburner___GetDuration(source , level) , 1) + "|r seconds."
        endfunction 

        function s__Afterburner___Afterburner_onDamage takes nothing returns nothing
            local integer this= s__Afterburner___Afterburner_array[(GetUnitUserData(s__DamageInterface___Unit_unit[((s__Damage_sources[s__Damage_key]))]))] // INLINED!!

            if this != 0 and (s__Damage_damage[s__Damage_key]) > 0 then // INLINED!!
                set s__Damage_newSource[s__Damage_key]=(s__Afterburner___Afterburner_unit[this]) // INLINED!!
            endif
        endfunction

//Implemented from module Periodic:



        function s__Afterburner___Afterburner_Periodic___end takes integer this,integer i,integer id returns integer
            if i >= 0 then
                call SaveInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___key), (id), ( (LoadInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___key), (id))) - 1)) // INLINED!!
                call SaveInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___table), (i), ( (LoadInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___table), ((LoadInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___key), (id)))))))) // INLINED!!

                if (LoadInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___key), (id))) == 0 then // INLINED!!
                    call PauseTimer(GetExpiredTimer())
                endif
            else
                call ReleaseTimer(GetExpiredTimer())
            endif

            if (HaveSavedInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___struct), (s__Afterburner___Afterburner_Periodic____unique[this]))) then // INLINED!!
                call RemoveSavedInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___struct), (s__Afterburner___Afterburner_Periodic____unique[this])) // INLINED!!
            endif

            if s__Afterburner___Afterburner_Periodic____allocated[this] then
                set s__Afterburner___Afterburner_Periodic____timer[this]=null
                set s__Afterburner___Afterburner_Periodic____allocated[this]=false

                call s__Afterburner___Afterburner_destroy(this)
            endif

            return i - 1
        endfunction

        function s__Afterburner___Afterburner_Periodic___onTimeout takes nothing returns nothing
            local integer this= (LoadInteger(TimerUtils___ht, 0, GetHandleId((GetExpiredTimer())))) // INLINED!!
            
            if this != 0 then




                call s__Afterburner___Afterburner_Periodic___end(this,- 1 , 0)
            endif
        endfunction

        function s__Afterburner___Afterburner_Periodic___onPeriodic takes nothing returns nothing
            local integer i= 0
            local integer id= GetHandleId(GetExpiredTimer())
            local integer this= (LoadInteger(TimerUtils___ht, 0, GetHandleId((GetExpiredTimer())))) // INLINED!!
            
            if this != 0 then





            else
                loop
                    exitwhen i == (LoadInteger(Table___ht, (((s__Afterburner___Afterburner_Periodic___key))), (id))) // INLINED!!
                        set this=(LoadInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___table), (i))) // INLINED!!

                        if this != 0 then





                        endif
                    set i=i + 1
                endloop
            endif
        endfunction

        function s__Afterburner___Afterburner_HasStartedTimer takes integer id returns boolean
            return (HaveSavedInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___struct), (id))) // INLINED!!
        endfunction

        function s__Afterburner___Afterburner_GetTimerInstance takes integer id returns integer
            return (LoadInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___struct), (id))) // INLINED!!
        endfunction

        function s__Afterburner___Afterburner_GetRemainingTime takes integer this returns real
            return TimerGetRemaining(s__Afterburner___Afterburner_Periodic____timer[this])
        endfunction

        function s__Afterburner___Afterburner_StartTimer takes real timeout,boolean periodic,integer this,integer uniqueId returns nothing
            local integer index= R2I(timeout * 100000)
            local integer id

            if this != 0 then
                set s__Afterburner___Afterburner_Periodic____unique[this]=uniqueId
                set s__Afterburner___Afterburner_Periodic____allocated[this]=true

                if s__Afterburner___Afterburner_Periodic____unique[this] >= 0 and not (HaveSavedInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___struct), (s__Afterburner___Afterburner_Periodic____unique[this]))) then // INLINED!!
                    call SaveInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___struct), (s__Afterburner___Afterburner_Periodic____unique[this]), ( this)) // INLINED!!
                endif

                if periodic then
                    if timeout <= s__Afterburner___Afterburner_Periodic___PERIODIC_THRESHOLD then
                        if not (HaveSavedHandle(Table___ht, (((s__Afterburner___Afterburner_Periodic___timers))), (index))) then // INLINED!!
                            call SaveTimerHandle(Table___ht, (((s__Afterburner___Afterburner_Periodic___timers))), (index), ( CreateTimer())) // INLINED!!
                        endif

                        set id=GetHandleId((LoadTimerHandle(Table___ht, (((s__Afterburner___Afterburner_Periodic___timers))), (index)))) // INLINED!!
                        set s__Afterburner___Afterburner_Periodic____timer[this]=(LoadTimerHandle(Table___ht, (((s__Afterburner___Afterburner_Periodic___timers))), (index))) // INLINED!!
                        call SaveInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___table), ((LoadInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___key), (id)))), ( this)) // INLINED!!
                        call SaveInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___key), (id), ( (LoadInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___key), (id))) + 1)) // INLINED!!
    
                        if (LoadInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___key), (id))) == 1 then // INLINED!!
                            call TimerStart((LoadTimerHandle(Table___ht, (((s__Afterburner___Afterburner_Periodic___timers))), (index))), timeout, periodic, function s__Afterburner___Afterburner_Periodic___onPeriodic) // INLINED!!
                        endif
                    else
                        set s__Afterburner___Afterburner_Periodic____timer[this]=NewTimerEx(this)
                        call TimerStart(s__Afterburner___Afterburner_Periodic____timer[this], timeout, periodic, function s__Afterburner___Afterburner_Periodic___onPeriodic)
                    endif
                else
                    set s__Afterburner___Afterburner_Periodic____timer[this]=NewTimerEx(this)
                    call TimerStart(s__Afterburner___Afterburner_Periodic____timer[this], timeout, periodic, function s__Afterburner___Afterburner_Periodic___onTimeout)
                endif
            else
                call BJDebugMsg("Periodic Error: instance not provided")
            endif
        endfunction

        function s__Afterburner___Afterburner_Periodic___onInit takes nothing returns nothing
            set s__Afterburner___Afterburner_Periodic___key=s__Table_create()
            set s__Afterburner___Afterburner_Periodic___table=s__Table_create()
            set s__Afterburner___Afterburner_Periodic___struct=s__Table_create()
            set s__Afterburner___Afterburner_Periodic___timers=s__Table_create()
        endfunction

        function s__Afterburner___Afterburner_onInit takes nothing returns nothing
            call s__Ability_register((s__Afterburner___Afterburner__allocate() ) , ( Afterburner___ABILITY)) // INLINED!!
            call sc__Damage_register(ATTACK_TYPE_NORMAL , null , (function s__Afterburner___Afterburner_onDamage) , true) // INLINED!!
        endfunction

    function Afterburn takes real x,real y,unit source returns nothing
        local integer level= GetUnitAbilityLevel(source, Afterburner___ABILITY)

        if level > 0 then
            call s__Afterburner___Afterburner_create(x , y , Afterburner___GetDamage(source , level) , Afterburner___GetDuration(source , level) , Afterburner___GetAoE(source , level) , Afterburner___GetDamageInterval(source , level) , source)
        endif
    endfunction

//library Afterburner ends
//library CrowdControl:
    
    // How to Import:
    // 1 - Copy the Utilities library over to your map and follow its install instructions
    // 2 - Copy the WorldBounds library over to your map and follow its install instructions
    // 3 - Copy the Indexer library over to your map and follow its install instructions
    // 4 - Copy the TimerUtils library over to your map and follow its install instructions
    // 5 - Copy the RegisterPlayerUnitEvent library over to your map and follow its install instructions
    // 6 - Copy the Tenacity library over to your map and follow its install instructions
    // 7 - Copy this library into your map
    // 8 - Copy the 14 buffs and 15 abilities with the CC prefix and match their raw code below.
    

    
    
    

    
    
    
    
    function DisarmUnit takes unit target,real duration,string model,string point,boolean stack returns nothing
        call sc__CrowdControl_disarm(target , duration , model , point , stack)
    endfunction

    function IsUnitDisarmed takes unit target returns boolean
        return (GetUnitAbilityLevel((target), CrowdControl___DISARM_BUFF) > 0) // INLINED!!
    endfunction

    
    function FearUnit takes unit target,real duration,string model,string point,boolean stack returns nothing
        call sc__CrowdControl_fear(target , duration , model , point , stack)
    endfunction

    function IsUnitFeared takes unit target returns boolean
        return sc__CrowdControl_feared(target)
    endfunction 

    
    function TauntUnit takes unit source,unit target,real duration,string model,string point,boolean stack returns nothing
        call sc__CrowdControl_taunt(source , target , duration , model , point , stack)
    endfunction

    function IsUnitTaunted takes unit target returns boolean
        return sc__CrowdControl_taunted(target)
    endfunction 

    
    function KnockbackUnit takes unit target,real angle,real distance,real duration,string model,string point,boolean onCliff,boolean onDestructable,boolean onUnit,boolean stack returns nothing
        call sc__CrowdControl_knockback(target , angle , distance , duration , model , point , onCliff , onDestructable , onUnit , stack)
    endfunction
    
    function IsUnitKnockedBack takes unit target returns boolean
        return sc__CrowdControl_knockedback(target)
    endfunction

    
    function KnockupUnit takes unit target,real maxHeight,real duration,string model,string point,boolean stack returns nothing
        call sc__CrowdControl_knockup(target , maxHeight , duration , model , point , stack)
    endfunction

    function IsUnitKnockedUp takes unit target returns boolean
        return sc__CrowdControl_knockedup(target)
    endfunction

    
    function SilenceUnit takes unit target,real duration,string model,string point,boolean stack returns nothing
        call sc__CrowdControl_silence(target , duration , model , point , stack)
    endfunction

    function IsUnitSilenced takes unit target returns boolean
        return (GetUnitAbilityLevel((target), CrowdControl___SILENCE_BUFF) > 0) // INLINED!!
    endfunction

    
    function StunUnit takes unit target,real duration,string model,string point,boolean stack returns nothing
        call sc__CrowdControl_stun(target , duration , model , point , stack)
    endfunction

    function IsUnitStunned takes unit target returns boolean
        return (GetUnitAbilityLevel((target), CrowdControl___STUN_BUFF) > 0) // INLINED!!
    endfunction

    
    function SlowUnit takes unit target,real amount,real duration,string model,string point,boolean stack returns nothing
        call sc__CrowdControl_slow(target , amount , duration , model , point , stack)
    endfunction

    function IsUnitSlowed takes unit target returns boolean
        return (GetUnitAbilityLevel((target), CrowdControl___MOVEMENT_SLOW_BUFF) > 0) // INLINED!!
    endfunction

    
    function SlowUnitAttack takes unit target,real amount,real duration,string model,string point,boolean stack returns nothing
        call sc__CrowdControl_slowAttack(target , amount , duration , model , point , stack)
    endfunction

    function IsUnitAttackSlowed takes unit target returns boolean
        return (GetUnitAbilityLevel((target), CrowdControl___ATTACK_SLOW_BUFF) > 0) // INLINED!!
    endfunction

    
    function BanishUnit takes unit target,real duration,string model,string point,boolean stack returns nothing
        call sc__CrowdControl_banish(target , duration , model , point , stack)
    endfunction

    function IsUnitBanished takes unit target returns boolean
        return (GetUnitAbilityLevel((target), CrowdControl___BANISH_BUFF) > 0) // INLINED!!
    endfunction

    
    function EnsnareUnit takes unit target,real duration,string model,string point,boolean stack returns nothing
        call sc__CrowdControl_ensnare(target , duration , model , point , stack)
    endfunction

    function IsUnitEnsnared takes unit target returns boolean
        return (GetUnitAbilityLevel((target), CrowdControl___ENSNARE_BUFF) > 0) // INLINED!!
    endfunction

    
    function PurgeUnit takes unit target,real duration,string model,string point,boolean stack returns nothing
        call sc__CrowdControl_purge(target , duration , model , point , stack)
    endfunction

    function IsUnitPurged takes unit target returns boolean
        return (GetUnitAbilityLevel((target), CrowdControl___PURGE_BUFF) > 0) // INLINED!!
    endfunction

    
    function HexUnit takes unit target,real duration,string model,string point,boolean stack returns nothing
        call sc__CrowdControl_hex(target , duration , model , point , stack)
    endfunction

    function IsUnitHexed takes unit target returns boolean
        return (GetUnitAbilityLevel((target), CrowdControl___HEX_BUFF) > 0) // INLINED!!
    endfunction

    
    function SleepUnit takes unit target,real duration,string model,string point,boolean stack returns nothing
        call sc__CrowdControl_sleep(target , duration , model , point , stack)
    endfunction

    function IsUnitSleeping takes unit target returns boolean
        return (GetUnitAbilityLevel((target), CrowdControl___SLEEP_BUFF) > 0) // INLINED!!
    endfunction

    
    function CycloneUnit takes unit target,real duration,string model,string point,boolean stack returns nothing
        call sc__CrowdControl_cyclone(target , duration , model , point , stack)
    endfunction

    function IsUnitCycloned takes unit target returns boolean
        return (GetUnitAbilityLevel((target), CrowdControl___CYCLONE_BUFF) > 0) // INLINED!!
    endfunction

    
    function EntangleUnit takes unit target,real duration,string model,string point,boolean stack returns nothing
        call sc__CrowdControl_entangle(target , duration , model , point , stack)
    endfunction

    function IsUnitEntangled takes unit target returns boolean
        return (GetUnitAbilityLevel((target), CrowdControl___ENTANGLE_BUFF) > 0) // INLINED!!
    endfunction

    
    function UnitDispelCrowdControl takes unit target,integer id returns nothing
        call sc__CrowdControl_dispel(target , id)
    endfunction

    function UnitDispelAllCrowdControl takes unit target returns nothing
        call sc__CrowdControl_dispelAll(target)
    endfunction

    
    function RegisterCrowdControlEvent takes integer id,code c returns nothing
        call sc__CrowdControl_register(id , c)
    endfunction

    function RegisterAnyCrowdControlEvent takes code c returns nothing
        call sc__CrowdControl_register(- 1 , c)
    endfunction

    function GetCrowdControlUnit takes nothing returns unit
        return s__CrowdControl_unit[s__CrowdControl_key]
    endfunction

    function GetCrowdControlType takes nothing returns integer
        return s__CrowdControl_type[s__CrowdControl_key]
    endfunction

    function GetCrowdControlDuration takes nothing returns real
        return s__CrowdControl_duration[s__CrowdControl_key]
    endfunction

    function GetCrowdControlAmount takes nothing returns real
        return s__CrowdControl_amount[s__CrowdControl_key]
    endfunction

    function GetCrowdControlModel takes nothing returns string
        return s__CrowdControl_model[s__CrowdControl_key]
    endfunction

    function GetCrowdControlBone takes nothing returns string
        return s__CrowdControl_point[s__CrowdControl_key]
    endfunction

    function GetCrowdControlStack takes nothing returns boolean
        return s__CrowdControl_stack[s__CrowdControl_key]
    endfunction

    function GetCrowdControlRemaining takes unit target,integer id returns real
        return (TimerGetRemaining(LoadTimerHandle(s__CrowdControl_timer, GetHandleId((target )), ( id)))) // INLINED!!
    endfunction

    function GetTauntSource takes nothing returns unit
        return s__CrowdControl_source[s__CrowdControl_key]
    endfunction

    function GetKnockbackAngle takes nothing returns real
        return s__CrowdControl_angle[s__CrowdControl_key]
    endfunction

    function GetKnockbackDistance takes nothing returns real
        return s__CrowdControl_distance[s__CrowdControl_key]
    endfunction

    function GetKnockupHeight takes nothing returns real
        return s__CrowdControl_height[s__CrowdControl_key]
    endfunction

    function GetKnockbackOnCliff takes nothing returns boolean
        return s__CrowdControl_cliff[s__CrowdControl_key]
    endfunction

    function GetKnockbackOnDestructable takes nothing returns boolean
        return s__CrowdControl_destructable[s__CrowdControl_key]
    endfunction

    function GetKnockbackOnUnit takes nothing returns boolean
        return s__CrowdControl_agent[s__CrowdControl_key]
    endfunction

    function SetCrowdControlUnit takes unit u returns nothing
        set s__CrowdControl_unit[s__CrowdControl_key]=u
    endfunction

    function SetCrowdControlType takes integer id returns nothing
        if id >= CROWD_CONTROL_SILENCE and id <= CROWD_CONTROL_KNOCKUP then
            set s__CrowdControl_type[s__CrowdControl_key]=id
        endif
    endfunction

    function SetCrowdControlDuration takes real duration returns nothing
        set s__CrowdControl_duration[s__CrowdControl_key]=duration
    endfunction

    function SetCrowdControlAmount takes real amount returns nothing
        set s__CrowdControl_amount[s__CrowdControl_key]=amount
    endfunction

    function SetCrowdControlModel takes string model returns nothing
        set s__CrowdControl_model[s__CrowdControl_key]=model
    endfunction

    function SetCrowdControlBone takes string point returns nothing
        set s__CrowdControl_point[s__CrowdControl_key]=point
    endfunction

    function SetCrowdControlStack takes boolean stack returns nothing
        set s__CrowdControl_stack[s__CrowdControl_key]=stack
    endfunction

    function SetTauntSource takes unit u returns nothing
        set s__CrowdControl_source[s__CrowdControl_key]=u
    endfunction

    function SetKnockbackAngle takes real angle returns nothing
        set s__CrowdControl_angle[s__CrowdControl_key]=angle
    endfunction

    function SetKnockbackDistance takes real distance returns nothing
        set s__CrowdControl_distance[s__CrowdControl_key]=distance
    endfunction

    function SetKnockupHeight takes real height returns nothing
        set s__CrowdControl_height[s__CrowdControl_key]=height
    endfunction

    function SetKnockbackOnCliff takes boolean onCliff returns nothing
        set s__CrowdControl_cliff[s__CrowdControl_key]=onCliff
    endfunction

    function SetKnockbackOnDestructable takes boolean onDestructable returns nothing
        set s__CrowdControl_destructable[s__CrowdControl_key]=onDestructable
    endfunction

    function SetKnockbackOnUnit takes boolean onUnit returns nothing
        set s__CrowdControl_agent[s__CrowdControl_key]=onUnit
    endfunction

    
    
    
    
    
        
        function s__Knockback_remove takes integer this,integer i returns integer
            call DestroyGroup(s__Knockback_group[this])
            call DestroyEffect(s__Knockback_effect[this])
            call BlzPauseUnitEx(s__Knockback_unit[this], false)

            set s__Knockback_unit[this]=null
            set s__Knockback_group[this]=null
            set s__Knockback_effect[this]=null
            set s__Knockback_struct[s__Knockback_id[this]]=0
            set s__Knockback_array[i]=s__Knockback_array[s__Knockback_key]
            set s__Knockback_key=s__Knockback_key - 1

            call s__Knockback_deallocate(this)

            if s__Knockback_key == - 1 then
                call PauseTimer(s__Knockback_timer)
            endif

            return i - 1
        endfunction

        function s__Knockback_onDestructable takes nothing returns nothing
            local integer this= s__Knockback_temp

            if GetDestructableLife(GetEnumDestructable()) > 0 then
                set s__Knockback_duration[this]=0
                return
            endif
        endfunction

        function s__Knockback_onPeriod takes nothing returns nothing
            local integer i= 0
            local integer this
            local real x
            local real y
            local unit u

            loop
                exitwhen i > s__Knockback_key
                    set this=s__Knockback_array[i]

                    if s__Knockback_duration[this] > 0 and UnitAlive(s__Knockback_unit[this]) then
                        set s__Knockback_duration[this]=s__Knockback_duration[this] - s__Knockback_period
                        set x=GetUnitX(s__Knockback_unit[this]) + s__Knockback_offset[this] * Cos(s__Knockback_angle[this])
                        set y=GetUnitY(s__Knockback_unit[this]) + s__Knockback_offset[this] * Sin(s__Knockback_angle[this])
                        
                        if s__Knockback_onUnit[this] and s__Knockback_collision[this] > 0 then
                            call GroupEnumUnitsInRange(s__Knockback_group[this], x, y, s__Knockback_collision[this], null)
                            call GroupRemoveUnit(s__Knockback_group[this], s__Knockback_unit[this])

                            loop
                                set u=FirstOfGroup(s__Knockback_group[this])
                                exitwhen u == null
                                    if UnitAlive(u) then
                                        set s__Knockback_duration[this]=0
                                        set u=null
                                        exitwhen true
                                    endif
                                call GroupRemoveUnit(s__Knockback_group[this], u)
                            endloop
                        endif

                        if s__Knockback_onDest[this] and s__Knockback_duration[this] > 0 and s__Knockback_collision[this] > 0 then
                            set s__Knockback_temp=this
                            call SetRect(s__Knockback_rect, x - s__Knockback_collision[this], y - s__Knockback_collision[this], x + s__Knockback_collision[this], y + s__Knockback_collision[this])
                            call EnumDestructablesInRect(s__Knockback_rect, null, function s__Knockback_onDestructable)
                        endif

                        if s__Knockback_onCliff[this] and s__Knockback_duration[this] > 0 then
                            if GetTerrainCliffLevel(GetUnitX(s__Knockback_unit[this]), GetUnitY(s__Knockback_unit[this])) < GetTerrainCliffLevel(x, y) and GetUnitZ(s__Knockback_unit[this]) < ( GetTerrainCliffLevel(x, y) - GetTerrainCliffLevel(s__WorldBounds_maxX, s__WorldBounds_maxY) ) * bj_CLIFFHEIGHT then
                                set s__Knockback_duration[this]=0
                            endif
                        endif

                        if s__Knockback_duration[this] > 0 then
                            call SetUnitX(s__Knockback_unit[this], x)
                            call SetUnitY(s__Knockback_unit[this], y)
                        endif
                    else
                        set i=s__Knockback_remove(this,i)
                    endif
                set i=i + 1
            endloop
        endfunction

        function s__Knockback_knocked takes unit u returns boolean
            return s__Knockback_struct[GetUnitUserData(u)] != 0
        endfunction
        
        function s__Knockback_apply takes unit target,real angle,real distance,real duration,string model,string point,boolean onCliff,boolean onDestructable,boolean onUnit returns nothing
            local integer id= GetUnitUserData(target)
            local integer this

            if duration > 0 and UnitAlive(target) then
                if s__Knockback_struct[id] != 0 then
                    set this=s__Knockback_struct[id]
                else
                    set this=s__Knockback__allocate()
                    set s__Knockback_id[this]=id
                    set s__Knockback_unit[this]=target
                    set s__Knockback_collision[this]=2 * BlzGetUnitCollisionSize(target)
                    set s__Knockback_group[this]=CreateGroup()
                    set s__Knockback_key=s__Knockback_key + 1
                    set s__Knockback_array[s__Knockback_key]=this
                    set s__Knockback_struct[id]=this

                    call BlzPauseUnitEx(target, true)

                    if model != null and point != null then
                        set s__Knockback_effect[this]=AddSpecialEffectTarget(model, target, point)
                    endif

                    if s__Knockback_key == 0 then
                        call TimerStart(s__Knockback_timer, s__Knockback_period, true, function s__Knockback_onPeriod)
                    endif
                endif

                set s__Knockback_angle[this]=angle
                set s__Knockback_distance[this]=distance
                set s__Knockback_duration[this]=duration
                set s__Knockback_onCliff[this]=onCliff
                set s__Knockback_onDest[this]=onDestructable
                set s__Knockback_onUnit[this]=onUnit
                set s__Knockback_offset[this]=RMaxBJ(0.00000001, distance * s__Knockback_period / RMaxBJ(0.00000001, duration))
            endif
        endfunction

    


        function s__Knockup_isUnitKnocked takes unit u returns boolean
            return s__Knockup_knocked[GetUnitUserData(u)] > 0
        endfunction

        function s__Knockup_onPeriod takes nothing returns nothing
            local integer this= (LoadInteger(TimerUtils___ht, 0, GetHandleId((GetExpiredTimer())))) // INLINED!!

            if s__Knockup_up[this] then
                set s__Knockup_up[this]=false
                call SetUnitFlyHeight(s__Knockup_unit[this], GetUnitDefaultFlyHeight(s__Knockup_unit[this]), s__Knockup_rate[this])
                call TimerStart(s__Knockup_timer[this], s__Knockup_airTime[this] / 2, false, function s__Knockup_onPeriod)
            else
                call DestroyEffect(s__Knockup_effect[this])
                call ReleaseTimer(s__Knockup_timer[this])
                call s__Knockup_deallocate(this)

                set s__Knockup_knocked[s__Knockup_key[this]]=s__Knockup_knocked[s__Knockup_key[this]] - 1

                if s__Knockup_knocked[s__Knockup_key[this]] == 0 then
                    call BlzPauseUnitEx(s__Knockup_unit[this], false)
                endif

                set s__Knockup_timer[this]=null
                set s__Knockup_unit[this]=null
                set s__Knockup_effect[this]=null
            endif
        endfunction

        function s__Knockup_apply takes unit whichUnit,real airTime,real maxHeight,string model,string point returns nothing
            local integer this

            if airTime > 0 then
                set this=s__Knockup__allocate()
                set s__Knockup_timer[this]=NewTimerEx(this)
                set s__Knockup_unit[this]=whichUnit
                set s__Knockup_rate[this]=maxHeight / airTime
                set s__Knockup_airTime[this]=airTime
                set s__Knockup_up[this]=true
                set s__Knockup_key[this]=GetUnitUserData(s__Knockup_unit[this])
                set s__Knockup_knocked[s__Knockup_key[this]]=s__Knockup_knocked[s__Knockup_key[this]] + 1

                if model != null and point != null then
                    set s__Knockup_effect[this]=AddSpecialEffectTarget(model, s__Knockup_unit[this], point)
                endif

                if s__Knockup_knocked[s__Knockup_key[this]] == 1 then
                    call BlzPauseUnitEx(whichUnit, true)
                endif

                call UnitAddAbility(s__Knockup_unit[this], 'Amrf')
                call UnitRemoveAbility(s__Knockup_unit[this], 'Amrf')
                call SetUnitFlyHeight(s__Knockup_unit[this], ( GetUnitDefaultFlyHeight(s__Knockup_unit[this]) + maxHeight ), s__Knockup_rate[this])
                call TimerStart(s__Knockup_timer[this], airTime / 2, false, function s__Knockup_onPeriod)
            endif
        endfunction

    


        function s__Fear_feared takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___FEAR_BUFF) > 0
        endfunction

        function s__Fear_remove takes integer this,integer i returns integer
            set s__Fear_flag[s__Fear_id[this]]=true
            call IssueImmediateOrder(s__Fear_unit[this], "stop")
            call DestroyEffect(s__Fear_effect[this])

            set s__Fear_struct[s__Fear_id[this]]=0
            set s__Fear_unit[this]=null
            set s__Fear_effect[this]=null
            set s__Fear_array[i]=s__Fear_array[s__Fear_key]
            set s__Fear_key=s__Fear_key - 1

            call s__Fear_deallocate(this)

            if s__Fear_key == - 1 then
                call PauseTimer(s__Fear_timer)
            endif

            return i - 1
        endfunction

        function s__Fear_onPeriod takes nothing returns nothing
            local integer i= 0
            local integer this

            loop
                exitwhen i > s__Fear_key
                    set this=s__Fear_array[i]

                    if GetUnitAbilityLevel(s__Fear_unit[this], CrowdControl___FEAR_BUFF) > 0 then
                        set s__Fear_change[this]=s__Fear_change[this] + 1

                        if s__Fear_change[this] >= s__Fear_DIRECTION_CHANGE then
                            set s__Fear_change[this]=0
                            set s__Fear_flag[s__Fear_id[this]]=true
                            set s__Fear_x[s__Fear_id[this]]=GetRandomReal(GetUnitX(s__Fear_unit[this]) - s__Fear_MAX_CHANGE, GetUnitX(s__Fear_unit[this]) + s__Fear_MAX_CHANGE)
                            set s__Fear_y[s__Fear_id[this]]=GetRandomReal(GetUnitY(s__Fear_unit[this]) - s__Fear_MAX_CHANGE, GetUnitY(s__Fear_unit[this]) + s__Fear_MAX_CHANGE)
                            call IssuePointOrder(s__Fear_unit[this], "move", s__Fear_x[s__Fear_id[this]], s__Fear_y[s__Fear_id[this]])
                        endif
                    else
                        set i=s__Fear_remove(this,i)
                    endif
                set i=i + 1
            endloop
        endfunction

        function s__Fear_apply takes unit whichUnit,real duration,string model,string point returns nothing
            local integer id= GetUnitUserData(whichUnit)
            local integer this

            if duration > 0 then
                call BlzSetAbilityRealLevelField(s__Fear_ability, ABILITY_RLF_DURATION_NORMAL, 0, duration)
                call BlzSetAbilityRealLevelField(s__Fear_ability, ABILITY_RLF_DURATION_HERO, 0, duration)
                call IncUnitAbilityLevel(s__Fear_dummy, CrowdControl___FEAR)
                call DecUnitAbilityLevel(s__Fear_dummy, CrowdControl___FEAR)

                if IssueTargetOrder(s__Fear_dummy, "drunkenhaze", whichUnit) then
                    if s__Fear_struct[id] != 0 then
                        set this=s__Fear_struct[id]
                    else
                        set this=s__Fear__allocate()
                        set s__Fear_id[this]=id
                        set s__Fear_unit[this]=whichUnit
                        set s__Fear_change[this]=0
                        set s__Fear_key=s__Fear_key + 1
                        set s__Fear_array[s__Fear_key]=this
                        set s__Fear_struct[id]=this
    
                        if model != null and point != null then
                            set s__Fear_effect[this]=AddSpecialEffectTarget(model, whichUnit, point)
                        endif
    
                        if s__Fear_key == 0 then
                            call TimerStart(s__Fear_timer, s__Fear_PERIOD, true, function s__Fear_onPeriod)
                        endif
                    endif
    
                    set s__Fear_flag[id]=true
                    set s__Fear_x[id]=GetRandomReal(GetUnitX(whichUnit) - s__Fear_MAX_CHANGE, GetUnitX(whichUnit) + s__Fear_MAX_CHANGE)
                    set s__Fear_y[id]=GetRandomReal(GetUnitY(whichUnit) - s__Fear_MAX_CHANGE, GetUnitY(whichUnit) + s__Fear_MAX_CHANGE)
                    call IssuePointOrder(whichUnit, "move", s__Fear_x[id], s__Fear_y[id])
                endif
            endif
        endfunction

        function s__Fear_onOrder takes nothing returns nothing
            local unit source= GetOrderedUnit()
            local integer id

            if (GetUnitAbilityLevel((source), CrowdControl___FEAR_BUFF) > 0) and GetIssuedOrderId() != 851973 then // INLINED!!
                set id=GetUnitUserData(source)

                if not s__Fear_flag[id] then
                    set s__Fear_flag[id]=true
                    call IssuePointOrder(source, "move", s__Fear_x[id], s__Fear_y[id])
                else
                    set s__Fear_flag[id]=false
                endif
            endif

            set source=null
        endfunction

        function s__Fear_onInit takes nothing returns nothing
            set s__Fear_dummy=(sc__DummyPool_retrieve((Player(PLAYER_NEUTRAL_PASSIVE) ) , (( GetRectCenterX(GetWorldBounds()) )*1.0) , (( GetRectCenterY(GetWorldBounds()) )*1.0) , (( 0 )*1.0) , (( 0)*1.0))) // INLINED!!

            call UnitAddAbility(s__Fear_dummy, CrowdControl___TRUE_SIGHT)
            call UnitAddAbility(s__Fear_dummy, CrowdControl___FEAR)
            call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER , function s__Fear_onOrder)
            call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER , function s__Fear_onOrder)
            call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER , function s__Fear_onOrder)
            call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER , function s__Fear_onOrder)

            set s__Fear_ability=BlzGetUnitAbility(s__Fear_dummy, CrowdControl___FEAR)
        endfunction

    



        function s__Taunt_taunted takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___TAUNT_BUFF) > 0
        endfunction

        function s__Taunt_remove takes integer this,integer i returns integer
            call sc__CrowdControl_dispel((s__Taunt_unit[this] ) , ( CROWD_CONTROL_TAUNT)) // INLINED!!
            call IssueImmediateOrder(s__Taunt_unit[this], "stop")
            call DestroyEffect(s__Taunt_effect[this])

            if s__Taunt_selected[this] and UnitAlive(s__Taunt_unit[this]) then
                call SelectUnitAddForPlayer(s__Taunt_unit[this], GetOwningPlayer(s__Taunt_unit[this]))
            endif

            set s__Taunt_struct[s__Taunt_id[this]]=0
            set s__Taunt_source[s__Taunt_id[this]]=null
            set s__Taunt_unit[this]=null
            set s__Taunt_effect[this]=null
            set s__Taunt_array[i]=s__Taunt_array[s__Taunt_key]
            set s__Taunt_key=s__Taunt_key - 1

            call s__Taunt_deallocate(this)

            if s__Taunt_key == - 1 then
                call PauseTimer(s__Taunt_timer)
            endif

            return i - 1
        endfunction

        function s__Taunt_onPeriod takes nothing returns nothing
            local integer i= 0
            local integer this

            loop
                exitwhen i > s__Taunt_key
                    set this=s__Taunt_array[i]

                    if GetUnitAbilityLevel(s__Taunt_unit[this], CrowdControl___TAUNT_BUFF) > 0 and UnitAlive(s__Taunt_source[s__Taunt_id[this]]) and UnitAlive(s__Taunt_unit[this]) then
                        if IsUnitVisible(s__Taunt_source[s__Taunt_id[this]], GetOwningPlayer(s__Taunt_unit[this])) then
                            call IssueTargetOrderById(s__Taunt_unit[this], 851983, s__Taunt_source[s__Taunt_id[this]])
                        else
                            call IssuePointOrderById(s__Taunt_unit[this], 851986, GetUnitX(s__Taunt_source[s__Taunt_id[this]]), GetUnitY(s__Taunt_source[s__Taunt_id[this]]))
                        endif
                    else
                        set i=s__Taunt_remove(this,i)
                    endif
                set i=i + 1
            endloop
        endfunction

        function s__Taunt_apply takes unit source,unit target,real duration,string model,string point returns nothing
            local integer id= GetUnitUserData(target)
            local integer this

            if duration > 0 and UnitAlive(source) and UnitAlive(target) then
                call BlzSetAbilityRealLevelField(s__Taunt_ability, ABILITY_RLF_DURATION_NORMAL, 0, duration)
                call BlzSetAbilityRealLevelField(s__Taunt_ability, ABILITY_RLF_DURATION_HERO, 0, duration)
                call IncUnitAbilityLevel(s__Taunt_dummy, CrowdControl___TAUNT)
                call DecUnitAbilityLevel(s__Taunt_dummy, CrowdControl___TAUNT)

                if IssueTargetOrder(s__Taunt_dummy, "drunkenhaze", target) then
                    if s__Taunt_struct[id] != 0 then
                        set this=s__Taunt_struct[id]
                    else
                        set this=s__Taunt__allocate()
                        set s__Taunt_id[this]=id
                        set s__Taunt_unit[this]=target
                        set s__Taunt_selected[this]=IsUnitSelected(target, GetOwningPlayer(target))
                        set s__Taunt_key=s__Taunt_key + 1
                        set s__Taunt_array[s__Taunt_key]=this
                        set s__Taunt_struct[id]=this
    
                        if s__Taunt_selected[this] then
                            call SelectUnit(target, false)
                        endif

                        if model != null and point != null then
                            set s__Taunt_effect[this]=AddSpecialEffectTarget(model, target, point)
                        endif
    
                        if s__Taunt_key == 0 then
                            call TimerStart(s__Taunt_timer, s__Taunt_PERIOD, true, function s__Taunt_onPeriod)
                        endif
                    endif

                    set s__Taunt_source[id]=source
                    
                    if IsUnitVisible(source, GetOwningPlayer(target)) then
                        call IssueTargetOrderById(target, 851983, source)
                    else
                        call IssuePointOrderById(target, 851986, GetUnitX(source), GetUnitY(source))
                    endif
                endif
            endif
        endfunction

        function s__Taunt_onOrder takes nothing returns nothing
            local unit target= GetOrderedUnit()
            local integer order= GetIssuedOrderId()
            local integer id
            
            if (GetUnitAbilityLevel((target), CrowdControl___TAUNT_BUFF) > 0) and order != 851973 then // INLINED!!
                set id=GetUnitUserData(target)

                if order != 851983 and order != 851986 then
                    if IsUnitVisible(s__Taunt_source[id], GetOwningPlayer(target)) then
                        call IssueTargetOrderById(target, 851983, s__Taunt_source[id])
                    else
                        call IssuePointOrderById(target, 851986, GetUnitX(s__Taunt_source[id]), GetUnitY(s__Taunt_source[id]))
                    endif
                else
                    if GetOrderTargetUnit() != s__Taunt_source[id] and GetOrderTargetUnit() != null then
                        if IsUnitVisible(s__Taunt_source[id], GetOwningPlayer(target)) then
                            call IssueTargetOrderById(target, 851983, s__Taunt_source[id])
                        else
                            call IssuePointOrderById(target, 851986, GetUnitX(s__Taunt_source[id]), GetUnitY(s__Taunt_source[id]))
                        endif
                    endif
                endif
            endif

            set target=null
        endfunction

        function s__Taunt_onSelect takes nothing returns nothing
            local unit target= GetTriggerUnit()
            
            if (GetUnitAbilityLevel((target), CrowdControl___TAUNT_BUFF) > 0) then // INLINED!!
                if IsUnitSelected(target, GetOwningPlayer(target)) then
                    call SelectUnit(target, false)
                endif
            endif
            
            set target=null
        endfunction

        function s__Taunt_onInit takes nothing returns nothing
            set s__Taunt_dummy=(sc__DummyPool_retrieve((Player(PLAYER_NEUTRAL_PASSIVE) ) , (( GetRectCenterX(GetWorldBounds()) )*1.0) , (( GetRectCenterY(GetWorldBounds()) )*1.0) , (( 0 )*1.0) , (( 0)*1.0))) // INLINED!!

            call UnitAddAbility(s__Taunt_dummy, CrowdControl___TRUE_SIGHT)
            call UnitAddAbility(s__Taunt_dummy, CrowdControl___TAUNT)
            call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER , function s__Taunt_onOrder)
            call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER , function s__Taunt_onOrder)
            call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER , function s__Taunt_onOrder)
            call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER , function s__Taunt_onOrder)
            call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_SELECTED , function s__Taunt_onSelect)

            set s__Taunt_ability=BlzGetUnitAbility(s__Taunt_dummy, CrowdControl___TAUNT)
        endfunction

    

        

        function s__CrowdControl_onInit takes nothing returns nothing
            set s__CrowdControl_dummy=(sc__DummyPool_retrieve((Player(PLAYER_NEUTRAL_PASSIVE) ) , (( GetRectCenterX(GetWorldBounds()) )*1.0) , (( GetRectCenterY(GetWorldBounds()) )*1.0) , (( 0 )*1.0) , (( 0)*1.0))) // INLINED!!
            
            call UnitAddAbility(s__CrowdControl_dummy, CrowdControl___SILENCE)
            call UnitAddAbility(s__CrowdControl_dummy, CrowdControl___STUN)
            call UnitAddAbility(s__CrowdControl_dummy, CrowdControl___ATTACK_SLOW)
            call UnitAddAbility(s__CrowdControl_dummy, CrowdControl___MOVEMENT_SLOW)
            call UnitAddAbility(s__CrowdControl_dummy, CrowdControl___BANISH)
            call UnitAddAbility(s__CrowdControl_dummy, CrowdControl___ENSNARE)
            call UnitAddAbility(s__CrowdControl_dummy, CrowdControl___PURGE)
            call UnitAddAbility(s__CrowdControl_dummy, CrowdControl___HEX)
            call UnitAddAbility(s__CrowdControl_dummy, CrowdControl___SLEEP)
            call UnitAddAbility(s__CrowdControl_dummy, CrowdControl___CYCLONE)
            call UnitAddAbility(s__CrowdControl_dummy, CrowdControl___ENTANGLE)
            call UnitAddAbility(s__CrowdControl_dummy, CrowdControl___DISARM)
            call UnitAddAbility(s__CrowdControl_dummy, CrowdControl___TRUE_SIGHT)

            call BlzUnitDisableAbility(s__CrowdControl_dummy, CrowdControl___SILENCE, true, true)
            call BlzUnitDisableAbility(s__CrowdControl_dummy, CrowdControl___STUN, true, true)
            call BlzUnitDisableAbility(s__CrowdControl_dummy, CrowdControl___ATTACK_SLOW, true, true)
            call BlzUnitDisableAbility(s__CrowdControl_dummy, CrowdControl___MOVEMENT_SLOW, true, true)
            call BlzUnitDisableAbility(s__CrowdControl_dummy, CrowdControl___BANISH, true, true)
            call BlzUnitDisableAbility(s__CrowdControl_dummy, CrowdControl___ENSNARE, true, true)
            call BlzUnitDisableAbility(s__CrowdControl_dummy, CrowdControl___PURGE, true, true)
            call BlzUnitDisableAbility(s__CrowdControl_dummy, CrowdControl___HEX, true, true)
            call BlzUnitDisableAbility(s__CrowdControl_dummy, CrowdControl___SLEEP, true, true)
            call BlzUnitDisableAbility(s__CrowdControl_dummy, CrowdControl___CYCLONE, true, true)
            call BlzUnitDisableAbility(s__CrowdControl_dummy, CrowdControl___ENTANGLE, true, true)
            call BlzUnitDisableAbility(s__CrowdControl_dummy, CrowdControl___DISARM, true, true)

            set s__CrowdControl_ability[CROWD_CONTROL_SILENCE]=CrowdControl___SILENCE
            set s__CrowdControl_ability[CROWD_CONTROL_STUN]=CrowdControl___STUN
            set s__CrowdControl_ability[CROWD_CONTROL_SLOW]=CrowdControl___MOVEMENT_SLOW
            set s__CrowdControl_ability[CROWD_CONTROL_SLOW_ATTACK]=CrowdControl___ATTACK_SLOW
            set s__CrowdControl_ability[CROWD_CONTROL_BANISH]=CrowdControl___BANISH
            set s__CrowdControl_ability[CROWD_CONTROL_ENSNARE]=CrowdControl___ENSNARE
            set s__CrowdControl_ability[CROWD_CONTROL_PURGE]=CrowdControl___PURGE
            set s__CrowdControl_ability[CROWD_CONTROL_HEX]=CrowdControl___HEX
            set s__CrowdControl_ability[CROWD_CONTROL_SLEEP]=CrowdControl___SLEEP
            set s__CrowdControl_ability[CROWD_CONTROL_CYCLONE]=CrowdControl___CYCLONE
            set s__CrowdControl_ability[CROWD_CONTROL_ENTANGLE]=CrowdControl___ENTANGLE
            set s__CrowdControl_ability[CROWD_CONTROL_DISARM]=CrowdControl___DISARM
            set s__CrowdControl_ability[CROWD_CONTROL_FEAR]=CrowdControl___FEAR
            set s__CrowdControl_ability[CROWD_CONTROL_TAUNT]=CrowdControl___TAUNT

            set s__CrowdControl_buff[CROWD_CONTROL_SILENCE]=CrowdControl___SILENCE_BUFF
            set s__CrowdControl_buff[CROWD_CONTROL_STUN]=CrowdControl___STUN_BUFF
            set s__CrowdControl_buff[CROWD_CONTROL_SLOW]=CrowdControl___MOVEMENT_SLOW_BUFF
            set s__CrowdControl_buff[CROWD_CONTROL_SLOW_ATTACK]=CrowdControl___ATTACK_SLOW_BUFF
            set s__CrowdControl_buff[CROWD_CONTROL_BANISH]=CrowdControl___BANISH_BUFF
            set s__CrowdControl_buff[CROWD_CONTROL_ENSNARE]=CrowdControl___ENSNARE_BUFF
            set s__CrowdControl_buff[CROWD_CONTROL_PURGE]=CrowdControl___PURGE_BUFF
            set s__CrowdControl_buff[CROWD_CONTROL_HEX]=CrowdControl___HEX_BUFF
            set s__CrowdControl_buff[CROWD_CONTROL_SLEEP]=CrowdControl___SLEEP_BUFF
            set s__CrowdControl_buff[CROWD_CONTROL_CYCLONE]=CrowdControl___CYCLONE_BUFF
            set s__CrowdControl_buff[CROWD_CONTROL_ENTANGLE]=CrowdControl___ENTANGLE_BUFF
            set s__CrowdControl_buff[CROWD_CONTROL_DISARM]=CrowdControl___DISARM_BUFF
            set s__CrowdControl_buff[CROWD_CONTROL_FEAR]=CrowdControl___FEAR_BUFF
            set s__CrowdControl_buff[CROWD_CONTROL_TAUNT]=CrowdControl___TAUNT_BUFF

            set s__CrowdControl_order[CROWD_CONTROL_SILENCE]="drunkenhaze"
            set s__CrowdControl_order[CROWD_CONTROL_STUN]="thunderbolt"
            set s__CrowdControl_order[CROWD_CONTROL_SLOW]="cripple"
            set s__CrowdControl_order[CROWD_CONTROL_SLOW_ATTACK]="cripple"
            set s__CrowdControl_order[CROWD_CONTROL_BANISH]="banish"
            set s__CrowdControl_order[CROWD_CONTROL_ENSNARE]="ensnare"
            set s__CrowdControl_order[CROWD_CONTROL_PURGE]="purge"
            set s__CrowdControl_order[CROWD_CONTROL_HEX]="hex"
            set s__CrowdControl_order[CROWD_CONTROL_SLEEP]="sleep"
            set s__CrowdControl_order[CROWD_CONTROL_CYCLONE]="cyclone"
            set s__CrowdControl_order[CROWD_CONTROL_ENTANGLE]="entanglingroots"
            set s__CrowdControl_order[CROWD_CONTROL_DISARM]="drunkenhaze"
        endfunction

        function s__CrowdControl_onExpire takes nothing returns nothing
            local timer t= GetExpiredTimer()

            call RemoveSavedHandle(s__CrowdControl_timer, GetHandleId(LoadUnitHandle(s__CrowdControl_timer, GetHandleId(t), 0)), LoadInteger(s__CrowdControl_timer, GetHandleId(t), 1))
            call FlushChildHashtable(s__CrowdControl_timer, GetHandleId(t))
            call DestroyTimer(t)

            set t=null
        endfunction

        function s__CrowdControl_onEvent takes integer key returns nothing
            local integer i= 0
            local integer next= - 1
            local integer prev= - 2

            set s__CrowdControl_count=s__CrowdControl_count + 1

            if s__CrowdControl_count - CROWD_CONTROL_KNOCKUP < CrowdControl___RECURSION_LIMIT then
                loop
                    exitwhen s__CrowdControl_type[key] == next or ( i - CROWD_CONTROL_KNOCKUP > CrowdControl___RECURSION_LIMIT )
                        set next=s__CrowdControl_type[key]
    
                        if s__CrowdControl_event[next] != null then
                            call TriggerEvaluate(s__CrowdControl_event[next])
                        endif

                        if s__CrowdControl_type[key] != next then
                            set i=i + 1
                        else
                            if next != prev then
                                call TriggerEvaluate(s__CrowdControl_trigger)

                                if s__CrowdControl_type[key] != next then
                                    set i=i + 1
                                    set prev=next
                                endif
                            endif
                        endif
                endloop
            endif
            
            set s__CrowdControl_count=s__CrowdControl_count - 1
            set s__CrowdControl_key=key
        endfunction

        function s__CrowdControl_cast takes unit source,unit target,real amount,real angle,real distance,real height,real duration,string model,string point,boolean stack,boolean onCliff,boolean onDestructable,boolean onUnit,integer id returns nothing
            local ability spell
            local timer t
    
            if not IsUnitType(target, UNIT_TYPE_MAGIC_IMMUNE) and UnitAlive(target) and duration > 0 then
                set s__CrowdControl_key=s__CrowdControl_key + 1
                set s__CrowdControl_unit[s__CrowdControl_key]=target
                set s__CrowdControl_source[s__CrowdControl_key]=source
                set s__CrowdControl_amount[s__CrowdControl_key]=amount
                set s__CrowdControl_angle[s__CrowdControl_key]=angle
                set s__CrowdControl_distance[s__CrowdControl_key]=distance
                set s__CrowdControl_height[s__CrowdControl_key]=height
                set s__CrowdControl_duration[s__CrowdControl_key]=duration
                set s__CrowdControl_model[s__CrowdControl_key]=model
                set s__CrowdControl_point[s__CrowdControl_key]=point
                set s__CrowdControl_stack[s__CrowdControl_key]=stack
                set s__CrowdControl_cliff[s__CrowdControl_key]=onCliff
                set s__CrowdControl_destructable[s__CrowdControl_key]=onDestructable
                set s__CrowdControl_agent[s__CrowdControl_key]=onUnit
                set s__CrowdControl_type[s__CrowdControl_key]=id

                call s__CrowdControl_onEvent(s__CrowdControl_key)
        

                    set s__CrowdControl_duration[s__CrowdControl_key]=(sc__Tenacity_calculate((s__CrowdControl_unit[s__CrowdControl_key] ) , (( s__CrowdControl_duration[s__CrowdControl_key])*1.0))) // INLINED!!


                if s__CrowdControl_duration[s__CrowdControl_key] > 0 and UnitAlive(s__CrowdControl_unit[s__CrowdControl_key]) then
                    if not HaveSavedHandle(s__CrowdControl_timer, GetHandleId(s__CrowdControl_unit[s__CrowdControl_key]), s__CrowdControl_type[s__CrowdControl_key]) then
                        set t=CreateTimer()
                        call SaveTimerHandle(s__CrowdControl_timer, GetHandleId(s__CrowdControl_unit[s__CrowdControl_key]), s__CrowdControl_type[s__CrowdControl_key], t)
                        call SaveUnitHandle(s__CrowdControl_timer, GetHandleId(t), 0, s__CrowdControl_unit[s__CrowdControl_key])
                        call SaveInteger(s__CrowdControl_timer, GetHandleId(t), 1, s__CrowdControl_type[s__CrowdControl_key])
                    endif

                    if s__CrowdControl_stack[s__CrowdControl_key] then
                        if s__CrowdControl_type[s__CrowdControl_key] != CROWD_CONTROL_TAUNT then
                            set s__CrowdControl_duration[s__CrowdControl_key]=s__CrowdControl_duration[s__CrowdControl_key] + TimerGetRemaining(LoadTimerHandle(s__CrowdControl_timer, GetHandleId(s__CrowdControl_unit[s__CrowdControl_key]), s__CrowdControl_type[s__CrowdControl_key]))
                        else
                            if s__Taunt_source[GetUnitUserData(s__CrowdControl_unit[s__CrowdControl_key])] == s__CrowdControl_source[s__CrowdControl_key] then
                                set s__CrowdControl_duration[s__CrowdControl_key]=s__CrowdControl_duration[s__CrowdControl_key] + TimerGetRemaining(LoadTimerHandle(s__CrowdControl_timer, GetHandleId(s__CrowdControl_unit[s__CrowdControl_key]), s__CrowdControl_type[s__CrowdControl_key]))
                            endif
                        endif
                    endif

                    if s__CrowdControl_type[s__CrowdControl_key] != CROWD_CONTROL_FEAR and s__CrowdControl_type[s__CrowdControl_key] != CROWD_CONTROL_TAUNT and s__CrowdControl_type[s__CrowdControl_key] != CROWD_CONTROL_KNOCKBACK and s__CrowdControl_type[s__CrowdControl_key] != CROWD_CONTROL_KNOCKUP then
                        set spell=BlzGetUnitAbility(s__CrowdControl_dummy, s__CrowdControl_ability[s__CrowdControl_type[s__CrowdControl_key]])

                        call BlzUnitDisableAbility(s__CrowdControl_dummy, s__CrowdControl_ability[s__CrowdControl_type[s__CrowdControl_key]], false, false)
                        call BlzSetAbilityRealLevelField(spell, ABILITY_RLF_DURATION_NORMAL, 0, s__CrowdControl_duration[s__CrowdControl_key])
                        call BlzSetAbilityRealLevelField(spell, ABILITY_RLF_DURATION_HERO, 0, s__CrowdControl_duration[s__CrowdControl_key])

                        if s__CrowdControl_type[s__CrowdControl_key] == CROWD_CONTROL_SLOW then
                            call BlzSetAbilityRealLevelField(spell, ABILITY_RLF_MOVEMENT_SPEED_REDUCTION_PERCENT_CRI1, 0, s__CrowdControl_amount[s__CrowdControl_key])
                        elseif s__CrowdControl_type[s__CrowdControl_key] == CROWD_CONTROL_SLOW_ATTACK then
                            call BlzSetAbilityRealLevelField(spell, ABILITY_RLF_ATTACK_SPEED_REDUCTION_PERCENT_CRI2, 0, s__CrowdControl_amount[s__CrowdControl_key])
                        endif

                        call IncUnitAbilityLevel(s__CrowdControl_dummy, s__CrowdControl_ability[s__CrowdControl_type[s__CrowdControl_key]])
                        call DecUnitAbilityLevel(s__CrowdControl_dummy, s__CrowdControl_ability[s__CrowdControl_type[s__CrowdControl_key]])

                        if IssueTargetOrder(s__CrowdControl_dummy, s__CrowdControl_order[s__CrowdControl_type[s__CrowdControl_key]], s__CrowdControl_unit[s__CrowdControl_key]) then
                            call UnitRemoveAbility(s__CrowdControl_unit[s__CrowdControl_key], s__CrowdControl_buff[s__CrowdControl_type[s__CrowdControl_key]])
                            call IssueTargetOrder(s__CrowdControl_dummy, s__CrowdControl_order[s__CrowdControl_type[s__CrowdControl_key]], s__CrowdControl_unit[s__CrowdControl_key])
                            call TimerStart(LoadTimerHandle(s__CrowdControl_timer, GetHandleId(s__CrowdControl_unit[s__CrowdControl_key]), s__CrowdControl_type[s__CrowdControl_key]), s__CrowdControl_duration[s__CrowdControl_key], false, function s__CrowdControl_onExpire)

                            if s__CrowdControl_model[s__CrowdControl_key] != null and s__CrowdControl_model[s__CrowdControl_key] != "" then
                                if s__CrowdControl_point[s__CrowdControl_key] != null and s__CrowdControl_point[s__CrowdControl_key] != "" then
                                    call sc__EffectLink_BuffLink((s__CrowdControl_unit[s__CrowdControl_key] ) , ( s__CrowdControl_buff[s__CrowdControl_type[s__CrowdControl_key]] ) , ( s__CrowdControl_model[s__CrowdControl_key] ) , ( s__CrowdControl_point[s__CrowdControl_key])) // INLINED!!
                                else
                                    call DestroyEffect(AddSpecialEffect(s__CrowdControl_model[s__CrowdControl_key], GetUnitX(s__CrowdControl_unit[s__CrowdControl_key]), GetUnitY(s__CrowdControl_unit[s__CrowdControl_key])))
                                endif
                            endif
                        else
                            call RemoveSavedHandle(s__CrowdControl_timer, GetHandleId(s__CrowdControl_unit[s__CrowdControl_key]), s__CrowdControl_type[s__CrowdControl_key])
                            call FlushChildHashtable(s__CrowdControl_timer, GetHandleId(t))
                            call DestroyTimer(t)
                        endif

                        call BlzUnitDisableAbility(s__CrowdControl_dummy, s__CrowdControl_ability[s__CrowdControl_type[s__CrowdControl_key]], true, true)
                    else
                        if s__CrowdControl_type[s__CrowdControl_key] == CROWD_CONTROL_FEAR then
                            call s__Fear_apply(s__CrowdControl_unit[s__CrowdControl_key] , s__CrowdControl_duration[s__CrowdControl_key] , s__CrowdControl_model[s__CrowdControl_key] , s__CrowdControl_point[s__CrowdControl_key])
                        elseif s__CrowdControl_type[s__CrowdControl_key] == CROWD_CONTROL_TAUNT then
                            call s__Taunt_apply(s__CrowdControl_source[s__CrowdControl_key] , s__CrowdControl_unit[s__CrowdControl_key] , s__CrowdControl_duration[s__CrowdControl_key] , s__CrowdControl_model[s__CrowdControl_key] , s__CrowdControl_point[s__CrowdControl_key])
                        elseif s__CrowdControl_type[s__CrowdControl_key] == CROWD_CONTROL_KNOCKBACK then
                            call s__Knockback_apply(s__CrowdControl_unit[s__CrowdControl_key] , s__CrowdControl_angle[s__CrowdControl_key] , s__CrowdControl_distance[s__CrowdControl_key] , s__CrowdControl_duration[s__CrowdControl_key] , s__CrowdControl_model[s__CrowdControl_key] , s__CrowdControl_point[s__CrowdControl_key] , s__CrowdControl_cliff[s__CrowdControl_key] , s__CrowdControl_destructable[s__CrowdControl_key] , s__CrowdControl_agent[s__CrowdControl_key])
                        elseif s__CrowdControl_type[s__CrowdControl_key] == CROWD_CONTROL_KNOCKUP then
                            call s__Knockup_apply(s__CrowdControl_unit[s__CrowdControl_key] , s__CrowdControl_duration[s__CrowdControl_key] , s__CrowdControl_height[s__CrowdControl_key] , s__CrowdControl_model[s__CrowdControl_key] , s__CrowdControl_point[s__CrowdControl_key])
                        endif

                        call TimerStart(LoadTimerHandle(s__CrowdControl_timer, GetHandleId(s__CrowdControl_unit[s__CrowdControl_key]), s__CrowdControl_type[s__CrowdControl_key]), s__CrowdControl_duration[s__CrowdControl_key], false, function s__CrowdControl_onExpire)
                    endif
                endif
    
                if s__CrowdControl_key > - 1 then
                    set s__CrowdControl_key=s__CrowdControl_key - 1
                endif
            endif
    
            set t=null
            set spell=null
        endfunction

        function s__CrowdControl_silence takes unit target,real duration,string model,string point,boolean stack returns nothing
            call s__CrowdControl_cast(null , target , 0 , 0 , 0 , 0 , duration , model , point , stack , false , false , false , CROWD_CONTROL_SILENCE)
        endfunction
    
        function s__CrowdControl_silenced takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___SILENCE_BUFF) > 0
        endfunction

        function s__CrowdControl_stun takes unit target,real duration,string model,string point,boolean stack returns nothing
            call s__CrowdControl_cast(null , target , 0 , 0 , 0 , 0 , duration , model , point , stack , false , false , false , CROWD_CONTROL_STUN)
        endfunction
    
        function s__CrowdControl_stunned takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___STUN_BUFF) > 0
        endfunction

        function s__CrowdControl_slow takes unit target,real amount,real duration,string model,string point,boolean stack returns nothing
            call s__CrowdControl_cast(null , target , amount , 0 , 0 , 0 , duration , model , point , stack , false , false , false , CROWD_CONTROL_SLOW)
        endfunction
    
        function s__CrowdControl_slowed takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___MOVEMENT_SLOW_BUFF) > 0
        endfunction

        function s__CrowdControl_slowAttack takes unit target,real amount,real duration,string model,string point,boolean stack returns nothing
            call s__CrowdControl_cast(null , target , amount , 0 , 0 , 0 , duration , model , point , stack , false , false , false , CROWD_CONTROL_SLOW_ATTACK)
        endfunction
    
        function s__CrowdControl_attackSlowed takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___ATTACK_SLOW_BUFF) > 0
        endfunction

        function s__CrowdControl_banish takes unit target,real duration,string model,string point,boolean stack returns nothing
            call s__CrowdControl_cast(null , target , 0 , 0 , 0 , 0 , duration , model , point , stack , false , false , false , CROWD_CONTROL_BANISH)
        endfunction
    
        function s__CrowdControl_banished takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___BANISH_BUFF) > 0
        endfunction

        function s__CrowdControl_ensnare takes unit target,real duration,string model,string point,boolean stack returns nothing
            call s__CrowdControl_cast(null , target , 0 , 0 , 0 , 0 , duration , model , point , stack , false , false , false , CROWD_CONTROL_ENSNARE)
        endfunction
    
        function s__CrowdControl_ensnared takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___ENSNARE_BUFF) > 0
        endfunction

        function s__CrowdControl_purge takes unit target,real duration,string model,string point,boolean stack returns nothing
            call s__CrowdControl_cast(null , target , 0 , 0 , 0 , 0 , duration , model , point , stack , false , false , false , CROWD_CONTROL_PURGE)
        endfunction
    
        function s__CrowdControl_purged takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___PURGE_BUFF) > 0
        endfunction

        function s__CrowdControl_hex takes unit target,real duration,string model,string point,boolean stack returns nothing
            call s__CrowdControl_cast(null , target , 0 , 0 , 0 , 0 , duration , model , point , stack , false , false , false , CROWD_CONTROL_HEX)
        endfunction
    
        function s__CrowdControl_hexed takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___HEX_BUFF) > 0
        endfunction

        function s__CrowdControl_sleep takes unit target,real duration,string model,string point,boolean stack returns nothing
            call s__CrowdControl_cast(null , target , 0 , 0 , 0 , 0 , duration , model , point , stack , false , false , false , CROWD_CONTROL_SLEEP)
        endfunction
    
        function s__CrowdControl_sleeping takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___SLEEP_BUFF) > 0
        endfunction

        function s__CrowdControl_cyclone takes unit target,real duration,string model,string point,boolean stack returns nothing
            call s__CrowdControl_cast(null , target , 0 , 0 , 0 , 0 , duration , model , point , stack , false , false , false , CROWD_CONTROL_CYCLONE)
        endfunction
    
        function s__CrowdControl_cycloned takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___CYCLONE_BUFF) > 0
        endfunction

        function s__CrowdControl_entangle takes unit target,real duration,string model,string point,boolean stack returns nothing
            call s__CrowdControl_cast(null , target , 0 , 0 , 0 , 0 , duration , model , point , stack , false , false , false , CROWD_CONTROL_ENTANGLE)
        endfunction
    
        function s__CrowdControl_entangled takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___ENTANGLE_BUFF) > 0
        endfunction
        
        function s__CrowdControl_knockback takes unit target,real angle,real distance,real duration,string model,string point,boolean onCliff,boolean onDestructable,boolean onUnit,boolean stack returns nothing
            call s__CrowdControl_cast(null , target , 0 , angle , distance , 0 , duration , model , point , stack , onCliff , onDestructable , onUnit , CROWD_CONTROL_KNOCKBACK)
        endfunction
    
        function s__CrowdControl_knockedback takes unit target returns boolean
            return (s__Knockback_struct[GetUnitUserData((target))] != 0) // INLINED!!
        endfunction

        function s__CrowdControl_knockup takes unit target,real maxHeight,real duration,string model,string point,boolean stack returns nothing
            call s__CrowdControl_cast(null , target , 0 , 0 , 0 , maxHeight , duration , model , point , stack , false , false , false , CROWD_CONTROL_KNOCKUP)
        endfunction
    
        function s__CrowdControl_knockedup takes unit target returns boolean
            return (s__Knockup_knocked[GetUnitUserData((target))] > 0) // INLINED!!
        endfunction

        function s__CrowdControl_fear takes unit target,real duration,string model,string point,boolean stack returns nothing
            call s__CrowdControl_cast(null , target , 0 , 0 , 0 , 0 , duration , model , point , stack , false , false , false , CROWD_CONTROL_FEAR)
        endfunction
    
        function s__CrowdControl_feared takes unit target returns boolean
            return (GetUnitAbilityLevel((target), CrowdControl___FEAR_BUFF) > 0) // INLINED!!
        endfunction

        function s__CrowdControl_disarm takes unit target,real duration,string model,string point,boolean stack returns nothing
            call s__CrowdControl_cast(null , target , 0 , 0 , 0 , 0 , duration , model , point , stack , false , false , false , CROWD_CONTROL_DISARM)
        endfunction
    
        function s__CrowdControl_disarmed takes unit target returns boolean
            return GetUnitAbilityLevel(target, CrowdControl___DISARM_BUFF) > 0
        endfunction

        function s__CrowdControl_taunt takes unit source,unit target,real duration,string model,string point,boolean stack returns nothing
            call s__CrowdControl_cast(source , target , 0 , 0 , 0 , 0 , duration , model , point , stack , false , false , false , CROWD_CONTROL_TAUNT)
        endfunction
    
        function s__CrowdControl_taunted takes unit target returns boolean
            return (GetUnitAbilityLevel((target), CrowdControl___TAUNT_BUFF) > 0) // INLINED!!
        endfunction

        function s__CrowdControl_dispel takes unit target,integer id returns nothing
            local timer t

            if s__CrowdControl_buff[id] != 0 then
                call UnitRemoveAbility(target, s__CrowdControl_buff[id])

                if HaveSavedHandle(s__CrowdControl_timer, GetHandleId(target), id) then
                    set t=LoadTimerHandle(s__CrowdControl_timer, GetHandleId(target), id)
                    call RemoveSavedHandle(s__CrowdControl_timer, GetHandleId(target), id)
                    call FlushChildHashtable(s__CrowdControl_timer, GetHandleId(t))
                    call DestroyTimer(t)
                endif
            endif

            set t=null
        endfunction

        function s__CrowdControl_dispelAll takes unit target returns nothing
            call s__CrowdControl_dispel(target , CROWD_CONTROL_SILENCE)
            call s__CrowdControl_dispel(target , CROWD_CONTROL_STUN)
            call s__CrowdControl_dispel(target , CROWD_CONTROL_SLOW)
            call s__CrowdControl_dispel(target , CROWD_CONTROL_SLOW_ATTACK)
            call s__CrowdControl_dispel(target , CROWD_CONTROL_BANISH)
            call s__CrowdControl_dispel(target , CROWD_CONTROL_ENSNARE)
            call s__CrowdControl_dispel(target , CROWD_CONTROL_PURGE)
            call s__CrowdControl_dispel(target , CROWD_CONTROL_HEX)
            call s__CrowdControl_dispel(target , CROWD_CONTROL_SLEEP)
            call s__CrowdControl_dispel(target , CROWD_CONTROL_CYCLONE)
            call s__CrowdControl_dispel(target , CROWD_CONTROL_ENTANGLE)
            call s__CrowdControl_dispel(target , CROWD_CONTROL_DISARM)
            call s__CrowdControl_dispel(target , CROWD_CONTROL_FEAR)
            call s__CrowdControl_dispel(target , CROWD_CONTROL_TAUNT)
        endfunction

        function s__CrowdControl_remaining takes unit target,integer id returns real
            return TimerGetRemaining(LoadTimerHandle(s__CrowdControl_timer, GetHandleId(target), id))
        endfunction

        function s__CrowdControl_register takes integer id,code c returns nothing
            if id >= CROWD_CONTROL_SILENCE and id <= CROWD_CONTROL_KNOCKUP then
                if s__CrowdControl_event[id] == null then
                    set s__CrowdControl_event[id]=CreateTrigger()
                endif
                call TriggerAddCondition(s__CrowdControl_event[id], Filter(c))
            else
                call TriggerAddCondition(s__CrowdControl_trigger, Filter(c))
            endif
        endfunction

//library CrowdControl ends
//library Item:
    
    // Credits:
    //      Bribe: Table library
    //      Magtheridon: RegisterPlayerUnitEvent library
    

    
    
    

    
    
    

    



        function s__Item__set_gold takes integer this,integer value returns nothing
            call SaveInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[this])), (1), ( value)) // INLINED!!
        endfunction

        function s__Item__get_gold takes integer this returns integer
            return (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[this])), (1))) // INLINED!!
        endfunction

        function s__Item__set_charges takes integer this,integer value returns nothing
            if value <= 0 then
                call SaveInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[this])), (2), ( 1)) // INLINED!!
            else
                call SaveInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[this])), (2), ( value)) // INLINED!!
            endif
        endfunction

        function s__Item__get_charges takes integer this returns integer
            return (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[this])), (2))) // INLINED!!
        endfunction

        function s__Item__set_name takes integer this,string value returns nothing
            call SaveStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[this])))), (3), ( value)) // INLINED!!
        endfunction

        function s__Item__get_name takes integer this returns string
            return (LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[this])))), (3))) // INLINED!!
        endfunction

        function s__Item__set_icon takes integer this,string value returns nothing
            call SaveStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[this])))), (4), ( value)) // INLINED!!
        endfunction

        function s__Item__get_icon takes integer this returns string
            return (LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[this])))), (4))) // INLINED!!
        endfunction

        function s__Item__set_tooltip takes integer this,string value returns nothing
            call SaveStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[this])))), (5), ( value)) // INLINED!!
        endfunction

        function s__Item__get_tooltip takes integer this returns string
            return (LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[this])))), (5))) // INLINED!!
        endfunction

        function s__Item__set_components takes integer this,integer value returns nothing
            call SaveInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[this])), (7), ( value)) // INLINED!!
        endfunction

        function s__Item__get_components takes integer this returns integer
            return (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[this])), (7))) // INLINED!!
        endfunction

        function s__Item__set_categories takes integer this,integer category returns nothing
            call SaveInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[this])), (6), ( category)) // INLINED!!
        endfunction 

        function s__Item__get_categories takes integer this returns integer
            return (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[this])), (6))) // INLINED!!
        endfunction

        function s__Item__get_component takes integer this returns integer
            return s__HashTable__getindex(s__Item_itemtype,s__Item_id[this])
        endfunction

        function s__Item__get_counter takes integer this returns integer
            return s__HashTable__getindex(s__Item_counters,s__Item_id[this])
        endfunction

        function s__Item__get_relation takes integer this returns integer
            return s__HashTable__getindex(s__Item_relations,s__Item_id[this])
        endfunction

        function s__Item__get_recipe takes integer this returns integer
            local integer i= 0
            local integer amount= (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(this)])), (1))) // INLINED!!

            if (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(this)])), (7))) > 0 then // INLINED!!
                loop
                    exitwhen i == (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(this)])), (7))) // INLINED!!
                        set amount=amount - (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(sc__Item_get((LoadInteger(Table___ht, ((s__HashTable__getindex(s__Item_itemtype,s__Item_id[(this)]))), (i)))))])), (1))) // INLINED!!
                    set i=i + 1
                endloop

                return amount
            endif

            return 0
        endfunction

        function s__Item_cost takes integer this,unit u returns integer
            local integer amount
            local integer i= 0
            local integer owned= s__Table_create()

            if u == null then
                set amount=(LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(this)])), (1))) // INLINED!!
            else
                loop
                    exitwhen i == UnitInventorySize(u)
                        call SaveInteger(Table___ht, (owned), (GetItemTypeId(UnitItemInSlot(u, i))), ( (LoadInteger(Table___ht, (owned), (GetItemTypeId(UnitItemInSlot(u, i))))) + 1)) // INLINED!!
                    set i=i + 1
                endloop

                set amount=sc__Item_calculate(this,owned)
            endif

            call s__Table_destroy(owned)

            return amount
        endfunction

        function s__Item_count takes integer this,integer id returns integer
            return (LoadInteger(Table___ht, ((s__HashTable__getindex(s__Item_counters,s__Item_id[(this)]))), (id))) // INLINED!!
        endfunction

        function s__Item_remove takes integer this,integer i returns integer
            set s__Item_array[i]=s__Item_array[s__Item_key]
            set s__Item_key=s__Item_key - 1
            set s__Item_unit[this]=null
            set s__Item_item[this]=null

            if s__Item_key == - 1 then
                call PauseTimer(s__Item_timer)
            endif
            
            call sc__Item___IItem_deallocate(this)

            return i - 1
        endfunction

        function s__Item_calculate takes integer this,integer owned returns integer
            local integer piece
            local integer amount
            local integer i= 0

            if (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(this)])), (7))) <= 0 then // INLINED!!
                return (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(this)])), (1))) // INLINED!!
            else
                set amount=s__Item__get_recipe(this)

                loop
                    exitwhen i == (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(this)])), (7))) // INLINED!!
                        set piece=sc__Item_get((LoadInteger(Table___ht, ((s__HashTable__getindex(s__Item_itemtype,s__Item_id[(this)]))), (i)))) // INLINED!!
                    
                        if (LoadInteger(Table___ht, (((owned))), (s__Item_id[piece]))) > 0 then // INLINED!!
                            call SaveInteger(Table___ht, (owned), (s__Item_id[piece]), ( (LoadInteger(Table___ht, (owned), (s__Item_id[piece]))) - 1)) // INLINED!!
                        else
                            set amount=amount + s__Item_calculate(piece,owned)
                        endif
                    set i=i + 1
                endloop

                return amount
            endif
        endfunction

        function s__Item_get takes integer id returns integer
            if id > 0 then
                if (HaveSavedInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,id)), (0))) then // INLINED!!
                    return ((LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,id)), (0)))) // INLINED!!
                else
                    return sc__Item_create(id)
                endif
            endif

            return 0
        endfunction

        function s__Item_addComponents takes integer id,integer a,integer b,integer c,integer d,integer e returns nothing
            local integer this

            if id > 0 then
                set this=s__Item_get(id)
                call s__Item__set_components(this,0)

                call FlushChildHashtable(Table___ht, ((s__HashTable__getindex(s__Item_itemtype,s__Item_id[(this)])))) // INLINED!!
                call FlushChildHashtable(Table___ht, ((s__HashTable__getindex(s__Item_counters,s__Item_id[(this)])))) // INLINED!!
                call sc__Item_save(id , a)
                call sc__Item_save(id , b)
                call sc__Item_save(id , c)
                call sc__Item_save(id , d)
                call sc__Item_save(id , e)
            endif
        endfunction

        function s__Item_totalCost takes integer id returns integer
            local integer old

            call AddItemToStock(s__Item_shop, id, 1, 1)
            call SetPlayerState(s__Item_player, PLAYER_STATE_RESOURCE_GOLD, 9999999)
            set old=GetPlayerState(s__Item_player, PLAYER_STATE_RESOURCE_GOLD)
            call IssueNeutralImmediateOrderById(s__Item_player, s__Item_shop, id)
            call RemoveItemFromStock(s__Item_shop, id)
            call EnumItemsInRect(s__Item_rect, null, function sc__Item_clear)

            return old - GetPlayerState(s__Item_player, PLAYER_STATE_RESOURCE_GOLD)
        endfunction

        function s__Item_hasType takes unit u,integer id returns boolean
            return (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_table,GetHandleId(u))), (id))) > 0 // INLINED!!
        endfunction

        function s__Item_countType takes unit u,integer id returns integer
            return (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_table,GetHandleId(u))), (id))) // INLINED!!
        endfunction

        function s__Item_countComponent takes integer id,integer component returns integer
            local integer this

            if (HaveSavedInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,id)), (0))) then // INLINED!!
                set this=(LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,id)), (0))) // INLINED!!
                return s__Item_count(this,component)
            endif

            return 0
        endfunction

        function s__Item_create takes integer id returns integer
            local integer this= s__Item__allocate()
            local item i

            if id > 0 and not (HaveSavedInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,id)), (0))) then // INLINED!!
                set i=CreateItem(id, 0, 0)

                if i != null then
                    set s__Item_id[this]=id
                    call s__Item__set_components(this,0)
                    call s__Item__set_name(this,GetItemName(i))
                    call s__Item__set_icon(this,BlzGetItemIconPath(i))
                    call s__Item__set_tooltip(this,BlzGetItemExtendedTooltip(i))
                    call s__Item__set_charges(this,GetItemCharges(i))
                    call s__Item__set_gold(this,s__Item_totalCost(id))
                    call SaveInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,id)), (0), ( this)) // INLINED!!

                    call RemoveItem(i)

                    set i=null
                endif
            endif

            return this
        endfunction

        function s__Item_save takes integer id,integer comp returns nothing
            local integer this
            local integer part
            local integer i= 0

            if comp > 0 and comp != id then
                set this=s__Item_get(id)
                set part=s__Item_get(comp)
                call SaveInteger(Table___ht, ((s__HashTable__getindex(s__Item_itemtype,s__Item_id[(this)]))), ((LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(this)])), (7)))), ( comp)) // INLINED!!
                call s__Item__set_components(this,(LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(this)])), (7))) + 1) // INLINED!!
                call SaveInteger(Table___ht, ((s__HashTable__getindex(s__Item_counters,s__Item_id[(this)]))), (comp), ( (LoadInteger(Table___ht, ((s__HashTable__getindex(s__Item_counters,s__Item_id[(this)]))), (comp))) + 1)) // INLINED!!

                loop
                    exitwhen (LoadInteger(Table___ht, ((s__HashTable__getindex(s__Item_relations,s__Item_id[(part)]))), (i))) == id // INLINED!!
                        if not (HaveSavedInteger(Table___ht, ((s__HashTable__getindex(s__Item_relations,s__Item_id[(part)]))), (i))) then // INLINED!!
                            call SaveInteger(Table___ht, ((s__HashTable__getindex(s__Item_relations,s__Item_id[(part)]))), (i), ( id)) // INLINED!!
                            exitwhen true
                        endif
                    set i=i + 1
                endloop
            endif
        endfunction

        function s__Item_clear takes nothing returns nothing
            call RemoveItem(GetEnumItem())
        endfunction

        function s__Item_onPeriod takes nothing returns nothing
            local integer this
            local integer i= 0

            loop
                exitwhen i > s__Item_key
                    set this=s__Item_array[i]

                    if UnitHasItem(s__Item_unit[this], s__Item_item[this]) then
                        call BlzSetItemExtendedTooltip(s__Item_item[this], sc__Item___IItem_onTooltip(s__Item_type[this],s__Item_unit[this] , s__Item_item[this] , s__Item_index[this]))
                    else
                        set i=s__Item_remove(this,i)
                    endif
                set i=i + 1
            endloop
        endfunction

        function s__Item_onPickupItem takes nothing returns nothing
            local unit u= GetManipulatingUnit()
            local item i= GetManipulatedItem()
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,GetItemTypeId(i))), (0))) // INLINED!!
            local integer self

            call SaveInteger(Table___ht, (s__HashTable__getindex(s__Item_table,GetHandleId(u))), (GetItemTypeId(i)), ( (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_table,GetHandleId(u))), (GetItemTypeId(i)))) + 1)) // INLINED!!

            if this != 0 then

                    call s__Bonus_linkItem((u ) , ( BONUS_DAMAGE ) , (( s__Item___IItem_damage[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_ARMOR ) , (( s__Item___IItem_armor[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_DAMAGE_BLOCK ) , (( s__Item___IItem_block[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_AGILITY ) , (( s__Item___IItem_agility[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_STRENGTH ) , (( s__Item___IItem_strength[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_INTELLIGENCE ) , (( s__Item___IItem_intelligence[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_HEALTH ) , (( s__Item___IItem_health[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_MANA ) , (( s__Item___IItem_mana[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_MOVEMENT_SPEED ) , (( s__Item___IItem_movementSpeed[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_SIGHT_RANGE ) , (( s__Item___IItem_sightRange[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_HEALTH_REGEN ) , (( s__Item___IItem_healthRegen[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_MANA_REGEN ) , (( s__Item___IItem_manaRegen[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_ATTACK_SPEED ) , (( s__Item___IItem_attackSpeed[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_MAGIC_RESISTANCE ) , (( s__Item___IItem_magicResistance[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_EVASION_CHANCE ) , (( s__Item___IItem_evasion[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_CRITICAL_DAMAGE ) , (( s__Item___IItem_criticalDamage[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_CRITICAL_CHANCE ) , (( s__Item___IItem_criticalChance[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_LIFE_STEAL ) , (( s__Item___IItem_lifeSteal[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_MISS_CHANCE ) , (( s__Item___IItem_missChance[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_SPELL_POWER ) , (( s__Item___IItem_spellPower[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_SPELL_VAMP ) , (( s__Item___IItem_spellVamp[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_COOLDOWN_REDUCTION ) , (( s__Item___IItem_cooldownReduction[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_COOLDOWN_REDUCTION_FLAT ) , (( s__Item___IItem_cooldownReductionFlat[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_COOLDOWN_OFFSET ) , (( s__Item___IItem_cooldownOffset[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_TENACITY ) , (( s__Item___IItem_tenacity[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_TENACITY_FLAT ) , (( s__Item___IItem_tenacityFlat[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_TENACITY_OFFSET ) , (( s__Item___IItem_tenacityOffset[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_ARMOR_PENETRATION ) , (( s__Item___IItem_armorPenetration[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_ARMOR_PENETRATION_FLAT ) , (( s__Item___IItem_armorPenetrationFlat[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_MAGIC_PENETRATION ) , (( s__Item___IItem_magicPenetration[this] )*1.0) , ( i)) // INLINED!!
                    call s__Bonus_linkItem((u ) , ( BONUS_MAGIC_PENETRATION_FLAT ) , (( s__Item___IItem_magicPenetrationFlat[this] )*1.0) , ( i)) // INLINED!!



                    if (st__Item___IItem_onTooltip[si__Item___IItem_type[this]]!=null) then
                        set self=s__Item__allocate()
                        set s__Item_unit[self]=u
                        set s__Item_item[self]=i
                        set s__Item_index[self]=GetUnitUserData(s__Item_unit[self])
                        set s__Item_type[self]=this
                        set s__Item_key=s__Item_key + 1
                        set s__Item_array[s__Item_key]=self
    
                        if s__Item_key == 0 then
                            call TimerStart(s__Item_timer, Item___PERIOD, true, function s__Item_onPeriod)
                        endif
                    endif


                if (st__Item___IItem_onPickup[si__Item___IItem_type[this]]!=null) then
                    call sc__Item___IItem_onPickup(this,u , i)
                endif
            endif
        endfunction

        function s__Item_onDropItem takes nothing returns nothing
            local integer u= GetHandleId(GetManipulatingUnit())
            local integer i= GetItemTypeId(GetManipulatedItem())
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,GetItemTypeId(GetManipulatedItem()))), (0))) // INLINED!!

            call SaveInteger(Table___ht, (s__HashTable__getindex(s__Item_table,u)), (i), ( (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_table,u)), (i))) - 1)) // INLINED!!

            if this != 0 then
                if (st__Item___IItem_onDrop[si__Item___IItem_type[this]]!=null) then
                    call sc__Item___IItem_onDrop(this,GetManipulatingUnit() , GetManipulatedItem())
                endif
            endif
        endfunction

        function s__Item_onInit takes nothing returns nothing
            set s__Item_rect=Rect(0, 0, 0, 0)
            set s__Item_table=(s__Table_create()) // INLINED!!
            set s__Item_itempool=(s__Table_create()) // INLINED!!
            set s__Item_counters=(s__Table_create()) // INLINED!!
            set s__Item_itemtype=(s__Table_create()) // INLINED!!
            set s__Item_relations=(s__Table_create()) // INLINED!!
            set s__Item_shop=CreateUnit(s__Item_player, 'nmrk', 0, 0, 0)

            call SetRect(s__Item_rect, GetUnitX(s__Item_shop) - 1000, GetUnitY(s__Item_shop) - 1000, GetUnitX(s__Item_shop) + 1000, GetUnitY(s__Item_shop) + 1000)
            call UnitAddAbility(s__Item_shop, 'AInv')
            call IssueNeutralTargetOrder(s__Item_player, s__Item_shop, "smart", s__Item_shop)
            call ShowUnit(s__Item_shop, false)
            call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM , function s__Item_onPickupItem)
            call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_DROP_ITEM , function s__Item_onDropItem)
        endfunction

    
    
    
    function RegisterItem takes integer i,integer a,integer b,integer c,integer d,integer e returns nothing
        call s__Item_addComponents(s__Item_id[i] , a , b , c , d , e)
    endfunction

    function ItemAddComponents takes integer whichItem,integer a,integer b,integer c,integer d,integer e returns nothing
        call s__Item_addComponents(whichItem , a , b , c , d , e)
    endfunction

    function ItemCountComponentOfType takes integer id,integer component returns integer
        return s__Item_countComponent(id , component)
    endfunction

    function UnitHasItemOfType takes unit u,integer id returns boolean
        return s__Item_hasType(u , id)
    endfunction

    function UnitCountItemOfType takes unit u,integer id returns integer
        return s__Item_countType(u , id)
    endfunction

//library Item ends
//library MissileUtils:
    
    // This is a simple Utils library for the Relativistic Missiles system.
    // Credits:
    //     Sevion for the Alloc module
    //         - www.hiveworkshop.com/threads/snippet-alloc.192348/
    
    
    
    
    
    function CreateMissileGroup takes nothing returns integer
        return sc__MissileGroup_create()
    endfunction
    
    function DestroyMissileGroup takes integer missiles returns nothing
        if missiles != 0 then
            call sc__MissileGroup_clear(missiles)
            call sc__MissileGroup_destroy(missiles)
        endif
    endfunction
    
    function MissileGroupGetSize takes integer missiles returns integer
        if missiles != 0 then
            return s__MissileGroup_size[missiles]
        else
            return 0
        endif
    endfunction
    
    function GroupMissileAt takes integer missiles,integer position returns integer
        if missiles != 0 then
            return sc__MissileGroup_missileAt(missiles,position)
        else
            return 0
        endif
    endfunction
    
    function ClearMissileGroup takes integer missiles returns nothing
        if missiles != 0 then
            call sc__MissileGroup_clear(missiles)
        endif
    endfunction
    
    function IsMissileInGroup takes integer missile,integer missiles returns boolean
        if missiles != 0 and missile != 0 then
            if s__MissileGroup_size[missiles] > 0 then
                return sc__MissileGroup_contains(missiles,missile)
            else
                return false
            endif
        else
            return false
        endif
    endfunction
    
    function GroupRemoveMissile takes integer missiles,integer missile returns nothing
        if missiles != 0 and missile != 0 then
            if s__MissileGroup_size[missiles] > 0 then
                call sc__MissileGroup_remove(missiles,missile)
            endif
        endif
    endfunction
    
    function GroupAddMissile takes integer missiles,integer missile returns nothing
        if missiles != 0 and missile != 0 then
            if not sc__MissileGroup_contains(missiles,missile) then
                call sc__MissileGroup_insert(missiles,missile)
            endif
        endif
    endfunction
    
    function GroupPickRandomMissile takes integer missiles returns integer
        if missiles != 0 then
            if s__MissileGroup_size[missiles] > 0 then
                return sc__MissileGroup_missileAt(missiles,GetRandomInt(0, s__MissileGroup_size[missiles] - 1))
            else
                return 0
            endif
        else
            return 0
        endif
    endfunction
    
    function FirstOfMissileGroup takes integer missiles returns integer
        if missiles != 0 then
            if s__MissileGroup_size[missiles] > 0 then
                return s__MissileUtils___MGroup_missile[s__MissileUtils___MGroup_next[s__MissileGroup_group[missiles]]]
            else
                return 0
            endif
        else
            return 0
        endif
    endfunction
    
    function GroupAddMissileGroup takes integer source,integer destiny returns nothing
        if source != 0 and destiny != 0 then
            if s__MissileGroup_size[source] > 0 and source != destiny then
                call sc__MissileGroup_addGroup(destiny,source)
            endif
        endif
    endfunction
    
    function GroupRemoveMissileGroup takes integer source,integer destiny returns nothing
        if source != 0 and destiny != 0 then
            if source == destiny then
                call sc__MissileGroup_clear(source)
            elseif s__MissileGroup_size[source] > 0 then
                call sc__MissileGroup_removeGroup(destiny,source)
            endif
        endif
    endfunction
    
    function GroupEnumMissilesOfType takes integer missiles,integer whichType returns nothing
        local integer i
        local integer missile
        
        if missiles != 0 then
            if s__Missiles_count > - 1 then
                set i=0
                
                if s__MissileGroup_size[missiles] > 0 then
                    call sc__MissileGroup_clear(missiles)
                endif
                
                loop
                    exitwhen i > s__Missiles_count
                        set missile=s__Missiles_collection[i]
                        
                        if s__Missiles_type[missile] == whichType then
                            call sc__MissileGroup_insert(missiles,missile)
                        endif
                    set i=i + 1
                endloop
            endif
        endif
    endfunction
    
    function GroupEnumMissilesOfTypeCounted takes integer missiles,integer whichType,integer amount returns nothing
        local integer i
        local integer j= amount
        local integer missile
        
        if missiles != 0 then
            if s__Missiles_count > - 1 then
                set i=0
                
                if s__MissileGroup_size[missiles] > 0 then
                    call sc__MissileGroup_clear(missiles)
                endif
                
                loop
                    exitwhen i > s__Missiles_count or j == 0
                        set missile=s__Missiles_collection[i]
                        
                        if s__Missiles_type[missile] == whichType then
                            call sc__MissileGroup_insert(missiles,missile)
                        endif
                        set j=j - 1
                    set i=i + 1
                endloop
            endif
        endif
    endfunction
    
    function GroupEnumMissilesOfPlayer takes integer missiles,player p returns nothing
        local integer i
        local integer missile
        
        if missiles != 0 then
            if s__Missiles_count > - 1 then
                set i=0
                
                if s__MissileGroup_size[missiles] > 0 then
                    call sc__MissileGroup_clear(missiles)
                endif
                
                loop
                    exitwhen i > s__Missiles_count
                        set missile=s__Missiles_collection[i]
                        
                        if s__Missiles_owner[missile] == p then
                            call sc__MissileGroup_insert(missiles,missile)
                        endif
                    set i=i + 1
                endloop
            endif
        endif
    endfunction
    
    function GroupEnumMissilesOfPlayerCounted takes integer missiles,player p,integer amount returns nothing
        local integer i
        local integer j= amount
        local integer missile
        
        if missiles != 0 then
            if s__Missiles_count > - 1 then
                set i=0
                
                if s__MissileGroup_size[missiles] > 0 then
                    call sc__MissileGroup_clear(missiles)
                endif
                
                loop
                    exitwhen i > s__Missiles_count or j == 0
                        set missile=s__Missiles_collection[i]
                        
                        if s__Missiles_owner[missile] == p then
                            call sc__MissileGroup_insert(missiles,missile)
                        endif
                        set j=j - 1
                    set i=i + 1
                endloop
            endif
        endif
    endfunction
    
    function GroupEnumMissilesInRect takes integer missiles,rect r returns nothing
        local integer i
        local integer missile
        
        if missiles != 0 and r != null then
            if s__Missiles_count > - 1 then
                set i=0
                
                if s__MissileGroup_size[missiles] > 0 then
                    call sc__MissileGroup_clear(missiles)
                endif
                
                loop
                    exitwhen i > s__Missiles_count
                        set missile=s__Missiles_collection[i]
                        
                        if GetRectMinX(r) <= s__Missiles_x[missile] and s__Missiles_x[missile] <= GetRectMaxX(r) and GetRectMinY(r) <= s__Missiles_y[missile] and s__Missiles_y[missile] <= GetRectMaxY(r) then
                            call sc__MissileGroup_insert(missiles,missile)
                        endif
                    set i=i + 1
                endloop
            endif
        endif
    endfunction
    
    function GroupEnumMissilesInRectCounted takes integer missiles,rect r,integer amount returns nothing
        local integer i
        local integer j= amount
        local integer missile
        
        if missiles != 0 and r != null then
            if s__Missiles_count > - 1 then
                set i=0
                
                if s__MissileGroup_size[missiles] > 0 then
                    call sc__MissileGroup_clear(missiles)
                endif
                
                loop
                    exitwhen i > s__Missiles_count or j == 0
                        set missile=s__Missiles_collection[i]
                        
                        if GetRectMinX(r) <= s__Missiles_x[missile] and s__Missiles_x[missile] <= GetRectMaxX(r) and GetRectMinY(r) <= s__Missiles_y[missile] and s__Missiles_y[missile] <= GetRectMaxY(r) then
                            call sc__MissileGroup_insert(missiles,missile)
                        endif
                        set j=j - 1
                    set i=i + 1
                endloop
            endif
        endif
    endfunction
    
    function GroupEnumMissilesInRangeOfLoc takes integer missiles,location loc,real radius returns nothing
        local real dx
        local real dy
        local integer i
        local integer missile
    
        if missiles != 0 and radius > 0 and loc != null then
            if s__Missiles_count > - 1 then
                set i=0
                
                if s__MissileGroup_size[missiles] > 0 then
                    call sc__MissileGroup_clear(missiles)
                endif
                
                loop
                    exitwhen i > s__Missiles_count
                        set missile=s__Missiles_collection[i]
                        set dx=s__Missiles_x[missile] - GetLocationX(loc)
                        set dy=s__Missiles_y[missile] - GetLocationY(loc)
                        
                        if SquareRoot(dx * dx + dy * dy) <= radius then
                            call sc__MissileGroup_insert(missiles,missile)
                        endif
                    set i=i + 1
                endloop
            endif
        endif
    endfunction
    
    function GroupEnumMissilesInRangeOfLocCounted takes integer missiles,location loc,real radius,integer amount returns nothing
        local real dx
        local real dy
        local integer i
        local integer j= amount
        local integer missile
    
        if missiles != 0 and radius > 0 and loc != null then
            if s__Missiles_count > - 1 then
                set i=0
                
                if s__MissileGroup_size[missiles] > 0 then
                    call sc__MissileGroup_clear(missiles)
                endif
                
                loop
                    exitwhen i > s__Missiles_count or j == 0
                        set missile=s__Missiles_collection[i]
                        set dx=s__Missiles_x[missile] - GetLocationX(loc)
                        set dy=s__Missiles_y[missile] - GetLocationY(loc)
                        
                        if SquareRoot(dx * dx + dy * dy) <= radius then
                            call sc__MissileGroup_insert(missiles,missile)
                        endif
                        set j=j - 1
                    set i=i + 1
                endloop
            endif
        endif
    endfunction
    
    function GroupEnumMissilesInRange takes integer missiles,real x,real y,real radius returns nothing
        local real dx
        local real dy
        local integer i
        local integer missile
    
        if missiles != 0 and radius > 0 then
            if s__Missiles_count > - 1 then
                set i=0
                
                if s__MissileGroup_size[missiles] > 0 then
                    call sc__MissileGroup_clear(missiles)
                endif
                
                loop
                    exitwhen i > s__Missiles_count
                        set missile=s__Missiles_collection[i]
                        set dx=s__Missiles_x[missile] - x
                        set dy=s__Missiles_y[missile] - y
                        
                        if SquareRoot(dx * dx + dy * dy) <= radius then
                            call sc__MissileGroup_insert(missiles,missile)
                        endif
                    set i=i + 1
                endloop
            endif
        endif
    endfunction
    
    function GroupEnumMissilesInRangeCounted takes integer missiles,real x,real y,real radius,integer amount returns nothing
        local real dx
        local real dy
        local integer i
        local integer j= amount
        local integer missile
    
        if missiles != 0 and radius > 0 then
            if s__Missiles_count > - 1 then
                set i=0
                
                if s__MissileGroup_size[missiles] > 0 then
                    call sc__MissileGroup_clear(missiles)
                endif
                
                loop
                    exitwhen i > s__Missiles_count or j == 0
                        set missile=s__Missiles_collection[i]
                        set dx=s__Missiles_x[missile] - x
                        set dy=s__Missiles_y[missile] - y
                        
                        if SquareRoot(dx * dx + dy * dy) <= radius then
                            call sc__MissileGroup_insert(missiles,missile)
                        endif
                        set j=j - 1
                    set i=i + 1
                endloop
            endif
        endif
    endfunction

    
    
    

//Implemented from module MissileUtils___LinkedList:

        function s__MissileUtils___MGroup_init takes integer this returns integer
            set s__MissileUtils___MGroup_next[this]=this
            set s__MissileUtils___MGroup_prev[this]=this

            return this
        endfunction

        function s__MissileUtils___MGroup_pushBack takes integer this,integer node returns integer
            set s__MissileUtils___MGroup_prev[node]=s__MissileUtils___MGroup_prev[this]
            set s__MissileUtils___MGroup_next[node]=this
            set s__MissileUtils___MGroup_next[s__MissileUtils___MGroup_prev[this]]=node
            set s__MissileUtils___MGroup_prev[this]=node

            return node
        endfunction

        function s__MissileUtils___MGroup_pushFront takes integer this,integer node returns integer
            set s__MissileUtils___MGroup_prev[node]=this
            set s__MissileUtils___MGroup_next[node]=s__MissileUtils___MGroup_next[this]
            set s__MissileUtils___MGroup_prev[s__MissileUtils___MGroup_next[this]]=node
            set s__MissileUtils___MGroup_next[this]=node

            return node
        endfunction

        function s__MissileUtils___MGroup_pop takes integer this returns nothing
            set s__MissileUtils___MGroup_next[s__MissileUtils___MGroup_prev[this]]=s__MissileUtils___MGroup_next[this]
            set s__MissileUtils___MGroup_prev[s__MissileUtils___MGroup_next[this]]=s__MissileUtils___MGroup_prev[this]
        endfunction
//Implemented from module Alloc:
   
        function s__MissileUtils___MGroup_allocate takes nothing returns integer
            local integer this
   
            if ( s__MissileUtils___MGroup_Alloc___recycle[(0)] == 0 ) then
                set s__MissileUtils___MGroup_Alloc___instanceCount=s__MissileUtils___MGroup_Alloc___instanceCount + 1
                set this=s__MissileUtils___MGroup_Alloc___instanceCount
            else
                set this=s__MissileUtils___MGroup_Alloc___recycle[(0)]
                set s__MissileUtils___MGroup_Alloc___recycle[(0)]=s__MissileUtils___MGroup_Alloc___recycle[s__MissileUtils___MGroup_Alloc___recycle[(0)]]
            endif

   
            return this
        endfunction
   
        function s__MissileUtils___MGroup_deallocate takes integer this returns nothing
            set s__MissileUtils___MGroup_Alloc___recycle[this]=s__MissileUtils___MGroup_Alloc___recycle[(0)]
            set s__MissileUtils___MGroup_Alloc___recycle[(0)]=this
        endfunction
        
        
        function s__MissileUtils___MGroup_remove takes integer this returns nothing
            call s__MissileUtils___MGroup_pop(this)
            call s__MissileUtils___MGroup_deallocate(this)
        endfunction

        function s__MissileUtils___MGroup_insert takes integer this,integer m returns integer
            local integer node= s__MissileUtils___MGroup_pushBack(this,s__MissileUtils___MGroup_allocate())

            set s__MissileUtils___MGroup_missile[node]=m

            return node
        endfunction
        
        function s__MissileUtils___MGroup_create takes nothing returns integer
            return s__MissileUtils___MGroup_init((s__MissileUtils___MGroup_allocate()))
        endfunction

        
        function s__MissileGroup_destroy takes integer this returns nothing
            call s__MissileUtils___MGroup_deallocate(s__MissileGroup_group[this])
            call s__MissileGroup_deallocate(this)
        endfunction
        
        function s__MissileGroup_missileAt takes integer this,integer i returns integer
            local integer node= s__MissileUtils___MGroup_next[s__MissileGroup_group[this]]
            local integer j= 0
        
            if s__MissileGroup_size[this] > 0 and i <= s__MissileGroup_size[this] - 1 then
                loop
                    exitwhen j == i
                        set node=s__MissileUtils___MGroup_next[node]
                    set j=j + 1
                endloop
                
                return s__MissileUtils___MGroup_missile[node]
            else
                return 0
            endif
        endfunction
        
        function s__MissileGroup_remove takes integer this,integer missile returns nothing
            local integer node= s__MissileUtils___MGroup_next[s__MissileGroup_group[this]]
        
            loop
                exitwhen node == s__MissileGroup_group[this]
                    if s__MissileUtils___MGroup_missile[node] == missile then
                        set s__MissileGroup_size[this]=s__MissileGroup_size[this] - 1
                        call s__MissileUtils___MGroup_remove(node)
                        exitwhen true
                    endif
                set node=s__MissileUtils___MGroup_next[node]
            endloop
        endfunction
        
        function s__MissileGroup_insert takes integer this,integer missile returns nothing
            set s__MissileGroup_size[this]=s__MissileGroup_size[this] + 1
            call s__MissileUtils___MGroup_insert(s__MissileGroup_group[this],missile)
        endfunction
        
        function s__MissileGroup_clear takes integer this returns nothing
            local integer node= s__MissileUtils___MGroup_next[s__MissileGroup_group[this]]
            
            loop
                exitwhen node == s__MissileGroup_group[this]
                    call s__MissileUtils___MGroup_remove(node)
                set node=s__MissileUtils___MGroup_next[node]
            endloop
            
            set s__MissileGroup_size[this]=0
        endfunction
        
        function s__MissileGroup_contains takes integer this,integer missile returns boolean
            local integer node= s__MissileUtils___MGroup_next[s__MissileGroup_group[this]]
            local boolean found= false
        
            loop
                exitwhen node == s__MissileGroup_group[this]
                    if s__MissileUtils___MGroup_missile[node] == missile then
                        set found=true
                        exitwhen true
                    endif
                set node=s__MissileUtils___MGroup_next[node]
            endloop
            
            return found
        endfunction
        
        function s__MissileGroup_addGroup takes integer this,integer source returns nothing
            local integer node= s__MissileUtils___MGroup_next[s__MissileGroup_group[source]]
        
            loop
                exitwhen node == s__MissileGroup_group[source]
                    if not s__MissileGroup_contains(this,s__MissileUtils___MGroup_missile[node]) then
                        call s__MissileGroup_insert(this,s__MissileUtils___MGroup_missile[node])
                    endif
                set node=s__MissileUtils___MGroup_next[node]
            endloop
        endfunction
        
        function s__MissileGroup_removeGroup takes integer this,integer source returns nothing
            local integer node= s__MissileUtils___MGroup_next[s__MissileGroup_group[source]]
        
            loop
                exitwhen node == s__MissileGroup_group[source]
                    if s__MissileGroup_contains(this,s__MissileUtils___MGroup_missile[node]) then
                        call s__MissileGroup_remove(this,s__MissileUtils___MGroup_missile[node])
                    endif
                set node=s__MissileUtils___MGroup_next[node]
            endloop
        endfunction
        
        function s__MissileGroup_create takes nothing returns integer
            local integer this= s__MissileGroup__allocate()
            
            set s__MissileGroup_group[this]=(s__MissileUtils___MGroup_init((s__MissileUtils___MGroup_allocate()))) // INLINED!!
            set s__MissileGroup_size[this]=0
            
            return this
        endfunction

//library MissileUtils ends
//library MoltenShield:
    
    // Credits:
    //     Power            - Shield model
    //     Mythic           - Explosion model
    //     Magtheridon96    - RegisterPlayerUnitEvent
    
    
    
    
    

    function MoltenShield___GetDamage takes unit source,integer level,real stored returns real
        return stored + 0.25 * (s__Bonus_getter((source ) , ( BONUS_SPELL_POWER))) // INLINED!!
    endfunction

    // The amount of movement speed the target of Molten Shield gains
    function MoltenShield___GetMovementBonus takes integer level returns integer
        return 100 * level
    endfunction

    // The percentage of damage reduced to units with molten shield
    function MoltenShield___GetDamageFactor takes integer level returns real
        return 0.5
    endfunction

    // The damage area
    function MoltenShield___GetDamageAoe takes integer level returns real
        return 350. + 50 * level
    endfunction
    
    
    
    


        function s__MoltenShield___MoltenShield_destroy takes integer this returns nothing
            set s__MoltenShield___MoltenShield_unit[this]=null
            set s__MoltenShield___MoltenShield_stored[s__MoltenShield___MoltenShield_id[this]]=0

            call sc__Ability___IAbility_deallocate(this)
        endfunction

        function s__MoltenShield___MoltenShield_onTooltip takes integer this,unit source,integer level returns string
            return "Upon cast engulfs the target in a |cffffcc00Molten shield|r that reduces all damage taken by |cffffcc00" + N2S(MoltenShield___GetDamageFactor(level) * 100 , 1) + "%|r and increases |cffffcc00Movement Speed|r by |cffffcc00" + N2S((100 * (level)) , 0) + "|r for |cffffcc0010|r seconds. All damage reduced by |cffffcc00Molten Shield|r is stored and when depleated all damage stored is dealt as |cff00ffffMagic|r damage, dealing |cff00ffff" + N2S(MoltenShield___GetDamage(source , level , s__MoltenShield___MoltenShield_stored[GetUnitUserData(source)]) , 0) + " Magic|r damage to all enemy units within |cffffcc00" + N2S((350. + 50 * (level)) , 0) + " AoE|r." // INLINED!!
        endfunction

        function s__MoltenShield___MoltenShield_onPeriod takes integer this returns boolean
            if GetUnitAbilityLevel(s__MoltenShield___MoltenShield_unit[this], MoltenShield___BUFF_ID) == 0 then
                if s__MoltenShield___MoltenShield_stored[s__MoltenShield___MoltenShield_id[this]] > 0 then
                    call UnitDamageArea(s__MoltenShield___MoltenShield_unit[this] , GetUnitX(s__MoltenShield___MoltenShield_unit[this]) , GetUnitY(s__MoltenShield___MoltenShield_unit[this]) , (350. + 50 * (s__MoltenShield___MoltenShield_level[this])) , MoltenShield___GetDamage(s__MoltenShield___MoltenShield_unit[this] , s__MoltenShield___MoltenShield_level[this] , s__MoltenShield___MoltenShield_stored[s__MoltenShield___MoltenShield_id[this]]) , MoltenShield___ATTACK_TYPE , MoltenShield___DAMAGE_TYPE , false , false , false) // INLINED!!
                endif

                call DestroyEffect(AddSpecialEffectTarget(MoltenShield___EXPLOSION_EFFECT, s__MoltenShield___MoltenShield_unit[this], MoltenShield___ATTACH_POINT))
                
                return false
            endif

            return true
        endfunction

        function s__MoltenShield___MoltenShield_onCast takes integer this returns nothing
            if GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_target], MoltenShield___BUFF_ID) == 0 then
                set this=s__MoltenShield___MoltenShield__allocate()
                set s__MoltenShield___MoltenShield_id[this]=(GetUnitUserData(s__PluginSpellEffect___Unit_unit[(s__Spell_target)])) // INLINED!!
                set s__MoltenShield___MoltenShield_unit[this]=s__PluginSpellEffect___Unit_unit[s__Spell_target]
                set s__MoltenShield___MoltenShield_level[this]=(GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))) // INLINED!!

                call sc__MoltenShield___MoltenShield_StartTimer(0.03125 , true , this , - 1)
                call s__Bonus_linkBuff((s__PluginSpellEffect___Unit_unit[s__Spell_target] ) , ( BONUS_MOVEMENT_SPEED ) , (( (100 * ((GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))))) )*1.0) , ( MoltenShield___BUFF_ID)) // INLINED!!
            endif
        endfunction

        function s__MoltenShield___MoltenShield_onLevelUp takes nothing returns nothing
            local unit u= GetTriggerUnit()
        
            if MoltenShield___GAIN_AT_LEVEL > 0 then
                if GetUnitTypeId(u) == MoltenShield___RAGNAROS_ID and GetHeroLevel(u) == MoltenShield___GAIN_AT_LEVEL then
                    call UnitAddAbility(u, MoltenShield___ABILITY)
                    call UnitMakeAbilityPermanent(u, true, MoltenShield___ABILITY)
                endif
            endif
        
            set u=null
        endfunction

        function s__MoltenShield___MoltenShield_onDamage takes nothing returns nothing
            local integer level= GetUnitAbilityLevel(s__DamageInterface___Unit_unit[(s__Damage_targets[s__Damage_key])], MoltenShield___BUFF_ID) // INLINED!!

            if level > 0 and (s__Damage_damage[s__Damage_key]) > 0 then // INLINED!!
                call s__Damage__set_amount((s__Damage_damage[s__Damage_key]) * MoltenShield___GetDamageFactor(level)) // INLINED!!
                set s__MoltenShield___MoltenShield_stored[(GetUnitUserData(s__DamageInterface___Unit_unit[((s__Damage_targets[s__Damage_key]))]))]=s__MoltenShield___MoltenShield_stored[(GetUnitUserData(s__DamageInterface___Unit_unit[((s__Damage_targets[s__Damage_key]))]))] + (s__Damage_damage[s__Damage_key]) // INLINED!!
            endif
        endfunction

//Implemented from module Periodic:



        function s__MoltenShield___MoltenShield_Periodic___end takes integer this,integer i,integer id returns integer
            if i >= 0 then
                call SaveInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___key), (id), ( (LoadInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___key), (id))) - 1)) // INLINED!!
                call SaveInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___table), (i), ( (LoadInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___table), ((LoadInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___key), (id)))))))) // INLINED!!

                if (LoadInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___key), (id))) == 0 then // INLINED!!
                    call PauseTimer(GetExpiredTimer())
                endif
            else
                call ReleaseTimer(GetExpiredTimer())
            endif

            if (HaveSavedInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___struct), (s__MoltenShield___MoltenShield_Periodic____unique[this]))) then // INLINED!!
                call RemoveSavedInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___struct), (s__MoltenShield___MoltenShield_Periodic____unique[this])) // INLINED!!
            endif

            if s__MoltenShield___MoltenShield_Periodic____allocated[this] then
                set s__MoltenShield___MoltenShield_Periodic____timer[this]=null
                set s__MoltenShield___MoltenShield_Periodic____allocated[this]=false

                call s__MoltenShield___MoltenShield_destroy(this)
            endif

            return i - 1
        endfunction

        function s__MoltenShield___MoltenShield_Periodic___onTimeout takes nothing returns nothing
            local integer this= (LoadInteger(TimerUtils___ht, 0, GetHandleId((GetExpiredTimer())))) // INLINED!!
            
            if this != 0 then




                call s__MoltenShield___MoltenShield_Periodic___end(this,- 1 , 0)
            endif
        endfunction

        function s__MoltenShield___MoltenShield_Periodic___onPeriodic takes nothing returns nothing
            local integer i= 0
            local integer id= GetHandleId(GetExpiredTimer())
            local integer this= (LoadInteger(TimerUtils___ht, 0, GetHandleId((GetExpiredTimer())))) // INLINED!!
            
            if this != 0 then

                    if not s__MoltenShield___MoltenShield_onPeriod(this) then
                        call s__MoltenShield___MoltenShield_Periodic___end(this,- 1 , 0)
                    endif

            else
                loop
                    exitwhen i == (LoadInteger(Table___ht, (((s__MoltenShield___MoltenShield_Periodic___key))), (id))) // INLINED!!
                        set this=(LoadInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___table), (i))) // INLINED!!

                        if this != 0 then

                                if not s__MoltenShield___MoltenShield_onPeriod(this) then
                                    set i=s__MoltenShield___MoltenShield_Periodic___end(this,i , id)
                                endif

                        endif
                    set i=i + 1
                endloop
            endif
        endfunction

        function s__MoltenShield___MoltenShield_HasStartedTimer takes integer id returns boolean
            return (HaveSavedInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___struct), (id))) // INLINED!!
        endfunction

        function s__MoltenShield___MoltenShield_GetTimerInstance takes integer id returns integer
            return (LoadInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___struct), (id))) // INLINED!!
        endfunction

        function s__MoltenShield___MoltenShield_GetRemainingTime takes integer this returns real
            return TimerGetRemaining(s__MoltenShield___MoltenShield_Periodic____timer[this])
        endfunction

        function s__MoltenShield___MoltenShield_StartTimer takes real timeout,boolean periodic,integer this,integer uniqueId returns nothing
            local integer index= R2I(timeout * 100000)
            local integer id

            if this != 0 then
                set s__MoltenShield___MoltenShield_Periodic____unique[this]=uniqueId
                set s__MoltenShield___MoltenShield_Periodic____allocated[this]=true

                if s__MoltenShield___MoltenShield_Periodic____unique[this] >= 0 and not (HaveSavedInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___struct), (s__MoltenShield___MoltenShield_Periodic____unique[this]))) then // INLINED!!
                    call SaveInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___struct), (s__MoltenShield___MoltenShield_Periodic____unique[this]), ( this)) // INLINED!!
                endif

                if periodic then
                    if timeout <= s__MoltenShield___MoltenShield_Periodic___PERIODIC_THRESHOLD then
                        if not (HaveSavedHandle(Table___ht, (((s__MoltenShield___MoltenShield_Periodic___timers))), (index))) then // INLINED!!
                            call SaveTimerHandle(Table___ht, (((s__MoltenShield___MoltenShield_Periodic___timers))), (index), ( CreateTimer())) // INLINED!!
                        endif

                        set id=GetHandleId((LoadTimerHandle(Table___ht, (((s__MoltenShield___MoltenShield_Periodic___timers))), (index)))) // INLINED!!
                        set s__MoltenShield___MoltenShield_Periodic____timer[this]=(LoadTimerHandle(Table___ht, (((s__MoltenShield___MoltenShield_Periodic___timers))), (index))) // INLINED!!
                        call SaveInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___table), ((LoadInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___key), (id)))), ( this)) // INLINED!!
                        call SaveInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___key), (id), ( (LoadInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___key), (id))) + 1)) // INLINED!!
    
                        if (LoadInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___key), (id))) == 1 then // INLINED!!
                            call TimerStart((LoadTimerHandle(Table___ht, (((s__MoltenShield___MoltenShield_Periodic___timers))), (index))), timeout, periodic, function s__MoltenShield___MoltenShield_Periodic___onPeriodic) // INLINED!!
                        endif
                    else
                        set s__MoltenShield___MoltenShield_Periodic____timer[this]=NewTimerEx(this)
                        call TimerStart(s__MoltenShield___MoltenShield_Periodic____timer[this], timeout, periodic, function s__MoltenShield___MoltenShield_Periodic___onPeriodic)
                    endif
                else
                    set s__MoltenShield___MoltenShield_Periodic____timer[this]=NewTimerEx(this)
                    call TimerStart(s__MoltenShield___MoltenShield_Periodic____timer[this], timeout, periodic, function s__MoltenShield___MoltenShield_Periodic___onTimeout)
                endif
            else
                call BJDebugMsg("Periodic Error: instance not provided")
            endif
        endfunction

        function s__MoltenShield___MoltenShield_Periodic___onInit takes nothing returns nothing
            set s__MoltenShield___MoltenShield_Periodic___key=s__Table_create()
            set s__MoltenShield___MoltenShield_Periodic___table=s__Table_create()
            set s__MoltenShield___MoltenShield_Periodic___struct=s__Table_create()
            set s__MoltenShield___MoltenShield_Periodic___timers=s__Table_create()
        endfunction

        function s__MoltenShield___MoltenShield_onInit takes nothing returns nothing
            call s__Ability_register((s__MoltenShield___MoltenShield__allocate() ) , ( MoltenShield___ABILITY)) // INLINED!!
            call TriggerAddCondition(s__Damage_anyAfter, Filter((function s__MoltenShield___MoltenShield_onDamage))) // INLINED!!
            call RegisterPlayerUnitEvent(EVENT_PLAYER_HERO_LEVEL , function s__MoltenShield___MoltenShield_onLevelUp)
        endfunction

//library MoltenShield ends
//library Sulfuras:
    
    // Credits: 
    //     Blizzard      - icon (Edited by me)
    //     Magtheridon96 - RegisterPlayerUnitEvent
    
    
    
    
    

    //Modify this function to change the amount of damage Ragnaros gains per kill
    function Sulfuras___GetBonus takes unit source,integer level returns integer
        if IsUnitType(source, UNIT_TYPE_HERO) then
            return 5 * level
        else
            return 1
        endif
    endfunction

    // Every GetStackCount number of kills the damage will be increased by GetBonus
    function Sulfuras___GetStackCount takes unit source,integer level returns integer
        return 3 + 0 * level
    endfunction

    //Modify this function to change when Ragnaros gains bonus damage based on the Death Event.
    function Sulfuras___UnitFilter takes player owner,unit target returns boolean
        return IsUnitEnemy(target, owner) and not IsUnitType(target, UNIT_TYPE_STRUCTURE)
    endfunction
    
    
    
    

        function s__Sulfuras_onTooltip takes unit source,integer level returns nothing
            call BlzSetAbilityStringLevelField(BlzGetUnitAbility(source, Sulfuras___ABILITY), ABILITY_SLF_TOOLTIP_NORMAL_EXTENDED, level - 1, "|cffffcc00Ragnaros|r gains |cffffcc001|r damage for every |cffffcc003|r enemy unit killed by him. Hero kills grants |cffffcc005|r bonus damage.\n\nDamage Bonus: |cffffcc00" + I2S(s__Sulfuras_stacks[GetUnitUserData(source)]) + "|r")
        endfunction

        function s__Sulfuras_onDeath takes nothing returns nothing
            local unit source= GetKillingUnit()
            local unit target
            local integer key
            local integer level
            local integer amount

            if GetUnitAbilityLevel(source, Sulfuras___ABILITY) > 0 then
                set target=GetDyingUnit()

                if Sulfuras___UnitFilter(GetOwningPlayer(source) , target) then
                    set key=GetUnitUserData(source)
                    set level=GetUnitAbilityLevel(source, Sulfuras___ABILITY)

                    if IsUnitType(target, UNIT_TYPE_HERO) then
                        set amount=Sulfuras___GetBonus(target , level)
                        set s__Sulfuras_stacks[key]=s__Sulfuras_stacks[key] + amount

call s__Bonus_adder((source ) , ( BONUS_DAMAGE ) , (( amount)*1.0)) // INLINED!!
                    else
                        set s__Sulfuras_count[key]=s__Sulfuras_count[key] + 1

                        if s__Sulfuras_count[key] >= Sulfuras___GetStackCount(source , level) then
                            set s__Sulfuras_count[key]=0
                            set amount=Sulfuras___GetBonus(target , level)
                            set s__Sulfuras_stacks[key]=s__Sulfuras_stacks[key] + amount

call s__Bonus_adder((source ) , ( BONUS_DAMAGE ) , (( amount)*1.0)) // INLINED!!
                        endif
                    endif

                    call s__Sulfuras_onTooltip(source , level)
                endif
            endif

            set source=null
            set target=null
        endfunction

        function s__Sulfuras_onInit takes nothing returns nothing
            call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH , function s__Sulfuras_onDeath)
        endfunction

//library Sulfuras ends
//library ExplosiveRune:
    
    // Credits:
    //     Mythic           - Conflagrate model
    //     JetFangInferno   - FireRune model
    //     Blizzard         - icon (Edited by me)
    //     Magtheridon96    - RegisterPlayerUnitEvent
    //     Bribe            - SpellEffectEvent
    
    
    
    
    

    //The damage amount of the explosion
    function ExplosiveRune___GetDamage takes unit source,integer level returns real

            return ( 50. + 50. * level ) + 0.75 * (s__Bonus_getter((source ) , ( BONUS_SPELL_POWER))) // INLINED!!



    endfunction
    
    
    
    


        function s__ExplosiveRune___ExplosiveRune_destroy takes integer this returns nothing
            set s__ExplosiveRune___ExplosiveRune_unit[this]=null
            call sc__Ability___IAbility_deallocate(this)
        endfunction

        function s__ExplosiveRune___ExplosiveRune_onTooltip takes integer this,unit source,integer level returns string
            return "Ragnaros creates an |cffffcc00Explosive Rune|r in the target location that explodes after |cffffcc00" + N2S(ExplosiveRune___EXPLOSION_DELAY , 1) + "|r seconds, dealing |cff00ffff" + N2S(ExplosiveRune___GetDamage(source , level) , 0) + " Magic|r damage to enemy units within |cffffcc00" + N2S(BlzGetAbilityRealLevelField(BlzGetUnitAbility(source, ExplosiveRune___ABILITY), ABILITY_RLF_AREA_OF_EFFECT, level - 1) , 0) + " AoE|r. Holds up to |cffffcc00" + I2S(ExplosiveRune___CHARGES_COUNT) + "|r charges. Gains |cffffcc001|r charge every |cffffcc00" + N2S(ExplosiveRune___CHARGES_COOLDOWN , 1) + "|r seconds.\n\nCharges: |cffffcc00" + I2S(s__ExplosiveRune___ExplosiveRune_charges[GetUnitUserData(source)]) + "|r"
        endfunction

        function s__ExplosiveRune___ExplosiveRune_onPeriod takes integer this returns boolean
            local integer level= GetUnitAbilityLevel(s__ExplosiveRune___ExplosiveRune_unit[this], ExplosiveRune___ABILITY)

            if level > 0 then
                if s__ExplosiveRune___ExplosiveRune_charges[s__ExplosiveRune___ExplosiveRune_id[this]] < ExplosiveRune___CHARGES_COUNT and s__ExplosiveRune___ExplosiveRune_charges[s__ExplosiveRune___ExplosiveRune_id[this]] >= 0 then
                    set s__ExplosiveRune___ExplosiveRune_charges[s__ExplosiveRune___ExplosiveRune_id[this]]=s__ExplosiveRune___ExplosiveRune_charges[s__ExplosiveRune___ExplosiveRune_id[this]] + 1

                    call BlzEndUnitAbilityCooldown(s__ExplosiveRune___ExplosiveRune_unit[this], ExplosiveRune___ABILITY)
                endif
            else
                set s__ExplosiveRune___ExplosiveRune_charges[s__ExplosiveRune___ExplosiveRune_id[this]]=0
            endif

            return level > 0
        endfunction

        function s__ExplosiveRune___ExplosiveRune_onExpire takes integer this returns nothing

                call Afterburn(s__ExplosiveRune___ExplosiveRune_x[this] , s__ExplosiveRune___ExplosiveRune_y[this] , s__ExplosiveRune___ExplosiveRune_unit[this])


            call UnitDamageArea(s__ExplosiveRune___ExplosiveRune_unit[this] , s__ExplosiveRune___ExplosiveRune_x[this] , s__ExplosiveRune___ExplosiveRune_y[this] , s__ExplosiveRune___ExplosiveRune_aoe[this] , s__ExplosiveRune___ExplosiveRune_damage[this] , ExplosiveRune___ATTACK_TYPE , ExplosiveRune___DAMAGE_TYPE , ExplosiveRune___DAMAGE_STRUCTURES , ExplosiveRune___DAMAGE_MAGIC_IMMUNE , ExplosiveRune___DAMAGE_ALLIES)
            call DestroyEffect(AddSpecialEffect(ExplosiveRune___EXPLOSION_EFFECT, s__ExplosiveRune___ExplosiveRune_x[this], s__ExplosiveRune___ExplosiveRune_y[this]))
        endfunction

        function s__ExplosiveRune___ExplosiveRune_onCast takes integer this returns nothing
            set this=s__ExplosiveRune___ExplosiveRune__allocate()
            
            set s__ExplosiveRune___ExplosiveRune_x[this]=(GetSpellTargetX()) // INLINED!!
            set s__ExplosiveRune___ExplosiveRune_y[this]=(GetSpellTargetY()) // INLINED!!
            set s__ExplosiveRune___ExplosiveRune_id[this]=(GetUnitUserData(s__PluginSpellEffect___Unit_unit[(s__Spell_source)])) // INLINED!!
            set s__ExplosiveRune___ExplosiveRune_unit[this]=s__PluginSpellEffect___Unit_unit[s__Spell_source]
            set s__ExplosiveRune___ExplosiveRune_damage[this]=ExplosiveRune___GetDamage(s__PluginSpellEffect___Unit_unit[s__Spell_source] , (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId())))) // INLINED!!
            set s__ExplosiveRune___ExplosiveRune_aoe[this]=BlzGetAbilityRealLevelField((BlzGetUnitAbility(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))), ABILITY_RLF_AREA_OF_EFFECT, (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))) - 1) // INLINED!!

            if s__ExplosiveRune___ExplosiveRune_charges[s__ExplosiveRune___ExplosiveRune_id[this]] > 0 then
                set s__ExplosiveRune___ExplosiveRune_charges[s__ExplosiveRune___ExplosiveRune_id[this]]=s__ExplosiveRune___ExplosiveRune_charges[s__ExplosiveRune___ExplosiveRune_id[this]] - 1

                if s__ExplosiveRune___ExplosiveRune_charges[s__ExplosiveRune___ExplosiveRune_id[this]] >= 1 then
                    call sc__ResetCooldown_reset((s__ExplosiveRune___ExplosiveRune_unit[this] ) , ( ExplosiveRune___ABILITY)) // INLINED!!
                else

                        call s__CDR_calculateCooldown((s__ExplosiveRune___ExplosiveRune_unit[this] ) , ( ExplosiveRune___ABILITY ) , ( (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))) ) , (( (TimerGetRemaining(s__ExplosiveRune___ExplosiveRune_Periodic____timer[(sc__ExplosiveRune___ExplosiveRune_GetTimerInstance(s__ExplosiveRune___ExplosiveRune_id[this]))])))*1.0)) // INLINED!!





                endif
            endif

            call sc__ExplosiveRune___ExplosiveRune_StartTimer(ExplosiveRune___EXPLOSION_DELAY , false , this , - 1)
        endfunction

        function s__ExplosiveRune___ExplosiveRune_onLearn takes integer this,unit source,integer skill,integer level returns nothing
            local integer id= GetUnitUserData(source)

            if not sc__ExplosiveRune___ExplosiveRune_HasStartedTimer(id) then
                set this=s__ExplosiveRune___ExplosiveRune__allocate()
                set s__ExplosiveRune___ExplosiveRune_id[this]=id
                set s__ExplosiveRune___ExplosiveRune_unit[this]=source
                set s__ExplosiveRune___ExplosiveRune_charges[id]=ExplosiveRune___CHARGES_COUNT

                call sc__ExplosiveRune___ExplosiveRune_StartTimer(ExplosiveRune___CHARGES_COOLDOWN , true , this , id)
            endif
        endfunction

//Implemented from module Periodic:



        function s__ExplosiveRune___ExplosiveRune_Periodic___end takes integer this,integer i,integer id returns integer
            if i >= 0 then
                call SaveInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___key), (id), ( (LoadInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___key), (id))) - 1)) // INLINED!!
                call SaveInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___table), (i), ( (LoadInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___table), ((LoadInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___key), (id)))))))) // INLINED!!

                if (LoadInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___key), (id))) == 0 then // INLINED!!
                    call PauseTimer(GetExpiredTimer())
                endif
            else
                call ReleaseTimer(GetExpiredTimer())
            endif

            if (HaveSavedInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___struct), (s__ExplosiveRune___ExplosiveRune_Periodic____unique[this]))) then // INLINED!!
                call RemoveSavedInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___struct), (s__ExplosiveRune___ExplosiveRune_Periodic____unique[this])) // INLINED!!
            endif

            if s__ExplosiveRune___ExplosiveRune_Periodic____allocated[this] then
                set s__ExplosiveRune___ExplosiveRune_Periodic____timer[this]=null
                set s__ExplosiveRune___ExplosiveRune_Periodic____allocated[this]=false

                call s__ExplosiveRune___ExplosiveRune_destroy(this)
            endif

            return i - 1
        endfunction

        function s__ExplosiveRune___ExplosiveRune_Periodic___onTimeout takes nothing returns nothing
            local integer this= (LoadInteger(TimerUtils___ht, 0, GetHandleId((GetExpiredTimer())))) // INLINED!!
            
            if this != 0 then

                    call s__ExplosiveRune___ExplosiveRune_onExpire(this)


                call s__ExplosiveRune___ExplosiveRune_Periodic___end(this,- 1 , 0)
            endif
        endfunction

        function s__ExplosiveRune___ExplosiveRune_Periodic___onPeriodic takes nothing returns nothing
            local integer i= 0
            local integer id= GetHandleId(GetExpiredTimer())
            local integer this= (LoadInteger(TimerUtils___ht, 0, GetHandleId((GetExpiredTimer())))) // INLINED!!
            
            if this != 0 then

                    if not s__ExplosiveRune___ExplosiveRune_onPeriod(this) then
                        call s__ExplosiveRune___ExplosiveRune_Periodic___end(this,- 1 , 0)
                    endif

            else
                loop
                    exitwhen i == (LoadInteger(Table___ht, (((s__ExplosiveRune___ExplosiveRune_Periodic___key))), (id))) // INLINED!!
                        set this=(LoadInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___table), (i))) // INLINED!!

                        if this != 0 then

                                if not s__ExplosiveRune___ExplosiveRune_onPeriod(this) then
                                    set i=s__ExplosiveRune___ExplosiveRune_Periodic___end(this,i , id)
                                endif

                        endif
                    set i=i + 1
                endloop
            endif
        endfunction

        function s__ExplosiveRune___ExplosiveRune_HasStartedTimer takes integer id returns boolean
            return (HaveSavedInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___struct), (id))) // INLINED!!
        endfunction

        function s__ExplosiveRune___ExplosiveRune_GetTimerInstance takes integer id returns integer
            return (LoadInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___struct), (id))) // INLINED!!
        endfunction

        function s__ExplosiveRune___ExplosiveRune_GetRemainingTime takes integer this returns real
            return TimerGetRemaining(s__ExplosiveRune___ExplosiveRune_Periodic____timer[this])
        endfunction

        function s__ExplosiveRune___ExplosiveRune_StartTimer takes real timeout,boolean periodic,integer this,integer uniqueId returns nothing
            local integer index= R2I(timeout * 100000)
            local integer id

            if this != 0 then
                set s__ExplosiveRune___ExplosiveRune_Periodic____unique[this]=uniqueId
                set s__ExplosiveRune___ExplosiveRune_Periodic____allocated[this]=true

                if s__ExplosiveRune___ExplosiveRune_Periodic____unique[this] >= 0 and not (HaveSavedInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___struct), (s__ExplosiveRune___ExplosiveRune_Periodic____unique[this]))) then // INLINED!!
                    call SaveInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___struct), (s__ExplosiveRune___ExplosiveRune_Periodic____unique[this]), ( this)) // INLINED!!
                endif

                if periodic then
                    if timeout <= s__ExplosiveRune___ExplosiveRune_Periodic___PERIODIC_THRESHOLD then
                        if not (HaveSavedHandle(Table___ht, (((s__ExplosiveRune___ExplosiveRune_Periodic___timers))), (index))) then // INLINED!!
                            call SaveTimerHandle(Table___ht, (((s__ExplosiveRune___ExplosiveRune_Periodic___timers))), (index), ( CreateTimer())) // INLINED!!
                        endif

                        set id=GetHandleId((LoadTimerHandle(Table___ht, (((s__ExplosiveRune___ExplosiveRune_Periodic___timers))), (index)))) // INLINED!!
                        set s__ExplosiveRune___ExplosiveRune_Periodic____timer[this]=(LoadTimerHandle(Table___ht, (((s__ExplosiveRune___ExplosiveRune_Periodic___timers))), (index))) // INLINED!!
                        call SaveInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___table), ((LoadInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___key), (id)))), ( this)) // INLINED!!
                        call SaveInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___key), (id), ( (LoadInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___key), (id))) + 1)) // INLINED!!
    
                        if (LoadInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___key), (id))) == 1 then // INLINED!!
                            call TimerStart((LoadTimerHandle(Table___ht, (((s__ExplosiveRune___ExplosiveRune_Periodic___timers))), (index))), timeout, periodic, function s__ExplosiveRune___ExplosiveRune_Periodic___onPeriodic) // INLINED!!
                        endif
                    else
                        set s__ExplosiveRune___ExplosiveRune_Periodic____timer[this]=NewTimerEx(this)
                        call TimerStart(s__ExplosiveRune___ExplosiveRune_Periodic____timer[this], timeout, periodic, function s__ExplosiveRune___ExplosiveRune_Periodic___onPeriodic)
                    endif
                else
                    set s__ExplosiveRune___ExplosiveRune_Periodic____timer[this]=NewTimerEx(this)
                    call TimerStart(s__ExplosiveRune___ExplosiveRune_Periodic____timer[this], timeout, periodic, function s__ExplosiveRune___ExplosiveRune_Periodic___onTimeout)
                endif
            else
                call BJDebugMsg("Periodic Error: instance not provided")
            endif
        endfunction

        function s__ExplosiveRune___ExplosiveRune_Periodic___onInit takes nothing returns nothing
            set s__ExplosiveRune___ExplosiveRune_Periodic___key=s__Table_create()
            set s__ExplosiveRune___ExplosiveRune_Periodic___table=s__Table_create()
            set s__ExplosiveRune___ExplosiveRune_Periodic___struct=s__Table_create()
            set s__ExplosiveRune___ExplosiveRune_Periodic___timers=s__Table_create()
        endfunction

        function s__ExplosiveRune___ExplosiveRune_onInit takes nothing returns nothing
            call s__Ability_register((s__ExplosiveRune___ExplosiveRune__allocate() ) , ( ExplosiveRune___ABILITY)) // INLINED!!
        endfunction

//library ExplosiveRune ends
//library LavaElemental:
    
    // Credits:
    //     Henry         - Lava Elemental model (warcraft3undergorund.com)
    //     Empyreal      - fire base model (xgmguru.ru)
    //     Mythic        - Pillar of Flame model
    //     Blizzard      - icon (edited by me)
    //     Magtheridon96 - RegisterPlayerUnitEvent
    
    
    
    
    

    // The amount of damage the Lava Elemental has
    function LavaElemental___GetElementalDamage takes unit u,integer level returns integer

            return R2I(50 + 0.25 * level * s__Sulfuras_stacks[GetUnitUserData(u)])



    endfunction

    // The amount of health the Lava Elemental has
    function LavaElemental___GetElementalHealth takes unit u,integer level returns integer
        return R2I(500 * level + BlzGetUnitMaxHP(u) * 0.3)
    endfunction
    
    
    
    


        function s__LavaElemental___LavaElemental_destroy takes integer this returns nothing
            set s__LavaElemental___LavaElemental_unit[this]=null
            set s__LavaElemental___LavaElemental_effect[this]=null
            set s__LavaElemental___LavaElemental_array[s__LavaElemental___LavaElemental_id[this]]=0

            call sc__Ability___IAbility_deallocate(this)
        endfunction

        function s__LavaElemental___LavaElemental_onCast takes integer this returns nothing
            local unit lava

            set this=s__LavaElemental___LavaElemental__allocate()

            if s__PluginSpellEffect___Unit_unit[s__Spell_target] != null then
                set lava=CreateUnit((GetOwningPlayer(s__PluginSpellEffect___Unit_unit[(s__Spell_source)])), LavaElemental___LAVA_ELEMENTAL, (GetUnitX(s__PluginSpellEffect___Unit_unit[(s__Spell_target)])), (GetUnitY(s__PluginSpellEffect___Unit_unit[(s__Spell_target)])), 0) // INLINED!!
                set s__LavaElemental___LavaElemental_id[this]=GetUnitUserData(lava)
                set s__LavaElemental___LavaElemental_unit[this]=s__PluginSpellEffect___Unit_unit[s__Spell_target]
                set s__LavaElemental___LavaElemental_effect[this]=AddSpecialEffect(LavaElemental___FIRA_BASE, (GetUnitX(s__PluginSpellEffect___Unit_unit[(s__Spell_target)])), (GetUnitY(s__PluginSpellEffect___Unit_unit[(s__Spell_target)]))) // INLINED!!
                set s__LavaElemental___LavaElemental_array[s__LavaElemental___LavaElemental_id[this]]=this
                
                call UnitAddAbility(s__PluginSpellEffect___Unit_unit[s__Spell_target], 'Abun')
                call ShowUnit(s__PluginSpellEffect___Unit_unit[s__Spell_target], false)
                call SetUnitInvulnerable(s__PluginSpellEffect___Unit_unit[s__Spell_target], true)
                call SetUnitX(lava, (GetUnitX(s__PluginSpellEffect___Unit_unit[(s__Spell_target)]))) // INLINED!!
                call SetUnitY(lava, (GetUnitY(s__PluginSpellEffect___Unit_unit[(s__Spell_target)]))) // INLINED!!
                call BlzSetUnitMaxHP(lava, LavaElemental___GetElementalHealth(s__PluginSpellEffect___Unit_unit[s__Spell_source] , (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))))) // INLINED!!
                call SetUnitLifePercentBJ(lava, 100)
                call BlzSetUnitBaseDamage(lava, LavaElemental___GetElementalDamage(s__PluginSpellEffect___Unit_unit[s__Spell_source] , (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId())))), 0) // INLINED!!
                call SetUnitPropWindow(lava, 0)
                call BlzSetAbilityRealLevelField((BlzGetUnitAbility(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))), ABILITY_RLF_COOLDOWN, (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))) - 1, LavaElemental___STRUCTURE_COOLDOWN) // INLINED!!
                call IncUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], LavaElemental___ABILITY)
                call DecUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], LavaElemental___ABILITY)
                call DestroyEffect(AddSpecialEffect(LavaElemental___SPAWN_EFFECT, (GetUnitX(s__PluginSpellEffect___Unit_unit[(s__Spell_target)])), (GetUnitY(s__PluginSpellEffect___Unit_unit[(s__Spell_target)])))) // INLINED!!
            else
                set lava=CreateUnit((GetOwningPlayer(s__PluginSpellEffect___Unit_unit[(s__Spell_source)])), LavaElemental___LAVA_ELEMENTAL, (GetSpellTargetX()), (GetSpellTargetY()), 0) // INLINED!!
                set s__LavaElemental___LavaElemental_id[this]=GetUnitUserData(lava)
                set s__LavaElemental___LavaElemental_unit[this]=s__PluginSpellEffect___Unit_unit[s__Spell_target]
                set s__LavaElemental___LavaElemental_effect[this]=AddSpecialEffect(LavaElemental___FIRA_BASE, (GetSpellTargetX()), (GetSpellTargetY())) // INLINED!!
                set s__LavaElemental___LavaElemental_array[s__LavaElemental___LavaElemental_id[this]]=this

                call BlzSetUnitMaxHP(lava, LavaElemental___GetElementalHealth(s__PluginSpellEffect___Unit_unit[s__Spell_source] , (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))))) // INLINED!!
                call SetUnitLifePercentBJ(lava, 100)
                call BlzSetUnitBaseDamage(lava, LavaElemental___GetElementalDamage(s__PluginSpellEffect___Unit_unit[s__Spell_source] , (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId())))), 0) // INLINED!!
                call SetUnitPropWindow(lava, 0)
                call UnitApplyTimedLife(lava, 'BTLF', LavaElemental___ELEMENTAL_DURATION)
                call BlzSetAbilityRealLevelField((BlzGetUnitAbility(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))), ABILITY_RLF_COOLDOWN, (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))) - 1, LavaElemental___NORMAL_COOLDOWN) // INLINED!!
                call IncUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], LavaElemental___ABILITY)
                call DecUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], LavaElemental___ABILITY)
                call DestroyEffect(AddSpecialEffect(LavaElemental___SPAWN_EFFECT, (GetSpellTargetX()), (GetSpellTargetY()))) // INLINED!!
            endif

            set lava=null
        endfunction

        function s__LavaElemental___LavaElemental_onDeath takes nothing returns nothing
            local integer this= s__LavaElemental___LavaElemental_array[GetUnitUserData(GetTriggerUnit())]

            if this != 0 then
                call UnitRemoveAbility(s__LavaElemental___LavaElemental_unit[this], 'Abun')
                call ShowUnit(s__LavaElemental___LavaElemental_unit[this], true)
                call SetUnitInvulnerable(s__LavaElemental___LavaElemental_unit[this], false)
                call DestroyEffect(s__LavaElemental___LavaElemental_effect[this])
                call s__LavaElemental___LavaElemental_destroy(this)
            endif
        endfunction

        function s__LavaElemental___LavaElemental_onInit takes nothing returns nothing
            call s__Ability_register((s__LavaElemental___LavaElemental__allocate() ) , ( LavaElemental___ABILITY)) // INLINED!!
            call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH , function s__LavaElemental___LavaElemental_onDeath)
        endfunction

//library LavaElemental ends
//library LivingMeteor:
    
    // Credits:
    //     Blizzard         - icon (Edited by me)
    //     AZ               - Meteor model
    //     MyPad            - MouseUtils
    
    
    
    
    

    // The roll distance of the meteor
    function LivingMeteor___RollDistance takes integer level returns real
        return 600. + 100. * level
    endfunction

    // The landing damage distance of the meteor
    function LivingMeteor___LandingDamage takes unit source,integer level returns real

            return 50. + 50. * level + 1 * (s__Bonus_getter((source ) , ( BONUS_SPELL_POWER))) // INLINED!!



    endfunction

    // The roll damage distance of the meteor.
    //will do this damage every DAMAGE_INTERVAL
    function LivingMeteor___RollDamage takes unit source,integer level returns real

            return ( 25. * ( level * level - 2 * level + 2 ) ) * LivingMeteor___DAMAGE_INTERVAL + 0.5 * (s__Bonus_getter((source ) , ( BONUS_SPELL_POWER))) * LivingMeteor___DAMAGE_INTERVAL // INLINED!!



    endfunction

    // The size of the area around the impact point where units will be damaged
    // By default it is the Living Meteor ability field Area of Effect
    function LivingMeteor___GetImpactAoE takes unit u,integer level returns real
        return BlzGetAbilityRealLevelField(BlzGetUnitAbility(u, LivingMeteor___ABILITY), ABILITY_RLF_AREA_OF_EFFECT, level - 1)
    endfunction

    // The size of the area of the roll meteor that will damage units
    // every DAMAGE_INTERVAL. by default it is the same as the impact AoE
    function LivingMeteor___GetRollAoE takes unit u,integer level returns real
        return LivingMeteor___GetImpactAoE(u , level)
    endfunction
    
    
    
    


        function s__LivingMeteor___Meteor_onPeriod takes integer this returns boolean
            if s__LivingMeteor___Meteor_rolling[this] then
                set s__LivingMeteor___Meteor_i[this]=s__LivingMeteor___Meteor_i[this] + 1
                set s__LivingMeteor___Meteor_j[this]=s__LivingMeteor___Meteor_j[this] + 1

                if s__LivingMeteor___Meteor_j[this] == 25 then
                    set s__LivingMeteor___Meteor_j[this]=0


                        call Afterburn(s__Missiles_x[this] , s__Missiles_y[this] , s__Missiles_source[this])

                endif

                if s__LivingMeteor___Meteor_i[this] == s__LivingMeteor___Meteor_ticks then
                    set s__LivingMeteor___Meteor_i[this]=0
                    call UnitDamageArea(s__Missiles_source[this] , s__Missiles_x[this] , s__Missiles_y[this] , s__LivingMeteor___Meteor_aoe[this] , s__Missiles_damage[this] , LivingMeteor___ATTACK_TYPE , LivingMeteor___DAMAGE_TYPE , LivingMeteor___DAMAGE_STRUCTURES , LivingMeteor___DAMAGE_ALLIES , LivingMeteor___DAMAGE_MAGIC_IMMUNE)
                endif
            endif

            return false
        endfunction

        function s__LivingMeteor___Meteor_onFinish takes integer this returns boolean
            if not s__LivingMeteor___Meteor_rolling[this] then
                call DestroyEffect(AddSpecialEffect(LivingMeteor___IMPACT_MODEL, s__Missiles_x[this], s__Missiles_y[this]))
                call UnitDamageArea(s__Missiles_source[this] , s__Missiles_x[this] , s__Missiles_y[this] , LivingMeteor___GetImpactAoE(s__Missiles_source[this] , s__LivingMeteor___Meteor_level[this]) , s__Missiles_damage[this] , LivingMeteor___ATTACK_TYPE , LivingMeteor___DAMAGE_TYPE , LivingMeteor___DAMAGE_STRUCTURES , LivingMeteor___DAMAGE_ALLIES , LivingMeteor___DAMAGE_MAGIC_IMMUNE)
                call s__Missiles_deflect(this,s__Missiles_x[this] + s__LivingMeteor___Meteor_distance[this] * Cos(s__LivingMeteor___Meteor_angle[this]) , s__Missiles_y[this] + s__LivingMeteor___Meteor_distance[this] * Sin(s__LivingMeteor___Meteor_angle[this]) , 0)
                

                    call Afterburn(s__Missiles_x[this] , s__Missiles_y[this] , s__Missiles_source[this])


                set s__LivingMeteor___Meteor_rolling[this]=true
                set s__Missiles_damage[this]=LivingMeteor___RollDamage(s__Missiles_source[this] , s__LivingMeteor___Meteor_level[this])
                call s__Missiles__set_duration(this,LivingMeteor___ROLLING_TIME)
            endif

            return false
        endfunction
    

        function s__LivingMeteor___LivingMeteor_destroy takes integer this returns nothing
            set s__LivingMeteor___LivingMeteor_unit[this]=null
            set s__LivingMeteor___LivingMeteor_player[this]=null
            set s__LivingMeteor___LivingMeteor_ability[this]=null

            call sc__Ability___IAbility_deallocate(this)
        endfunction

        function s__LivingMeteor___LivingMeteor_onTooltip takes integer this,unit source,integer level returns string
            return "Ragnaros summon a meteor at the target area that deals |cff00ffff" + N2S(LivingMeteor___LandingDamage(source , level) , 0) + " Magic|r damage on impact, then rolls in that target direction dealing |cff00ffff" + N2S(LivingMeteor___RollDamage(source , level) , 0) + " Magic|r every |cffffcc00" + N2S(LivingMeteor___DAMAGE_INTERVAL , 2) + "|r seconds to enemy units within |cffffcc00250 AoE|r until it reaches it's maximum range of |cffffcc00700 AoE|r from the initial impact point."
        endfunction

        function s__LivingMeteor___LivingMeteor_onExpire takes integer this returns nothing
            local real angle= AngleBetweenCoordinates(s__LivingMeteor___LivingMeteor_x[this] , s__LivingMeteor___LivingMeteor_y[this] , (s__UserMouse_mouseX[s__UserMouse__staticgetindex((s__LivingMeteor___LivingMeteor_player[this]))]) , (s__UserMouse_mouseY[s__UserMouse__staticgetindex((s__LivingMeteor___LivingMeteor_player[this]))])) // INLINED!!
            local integer meteor= s__LivingMeteor___Meteor__allocate(s__LivingMeteor___LivingMeteor_x[this] + LivingMeteor___LAUNCH_OFFSET * Cos(angle + bj_PI) , s__LivingMeteor___LivingMeteor_y[this] + LivingMeteor___LAUNCH_OFFSET * Sin(angle + bj_PI) , LivingMeteor___START_HEIGHT , s__LivingMeteor___LivingMeteor_x[this] , s__LivingMeteor___LivingMeteor_y[this] , 0)
            
            set s__Missiles_source[meteor]=s__LivingMeteor___LivingMeteor_unit[this]
            set s__Missiles_owner[meteor]=s__LivingMeteor___LivingMeteor_player[this]
            call s__Missiles__set_model(meteor,LivingMeteor___METEOR_MODEL)
            call s__Missiles__set_scale(meteor,LivingMeteor___METEOR_SCALE)
            call s__Missiles__set_duration(meteor,LivingMeteor___LANDING_TIME)
            set s__LivingMeteor___Meteor_angle[meteor]=angle
            set s__LivingMeteor___Meteor_level[meteor]=s__LivingMeteor___LivingMeteor_level[this]
            set s__LivingMeteor___Meteor_rolling[meteor]=false
            set s__LivingMeteor___Meteor_aoe[meteor]=(LivingMeteor___GetImpactAoE((s__LivingMeteor___LivingMeteor_unit[this] ) , ( s__LivingMeteor___LivingMeteor_level[this]))) // INLINED!!
            set s__Missiles_damage[meteor]=LivingMeteor___LandingDamage(s__LivingMeteor___LivingMeteor_unit[this] , s__LivingMeteor___LivingMeteor_level[this])
            set s__LivingMeteor___Meteor_distance[meteor]=(600. + 100. * (s__LivingMeteor___LivingMeteor_level[this])) // INLINED!!

            call s__Missiles_launch(meteor)
        endfunction

        function s__LivingMeteor___LivingMeteor_onCast takes integer this returns nothing
            set this=s__LivingMeteor___LivingMeteor__allocate()
            set s__LivingMeteor___LivingMeteor_x[this]=(GetSpellTargetX()) // INLINED!!
            set s__LivingMeteor___LivingMeteor_y[this]=(GetSpellTargetY()) // INLINED!!
            set s__LivingMeteor___LivingMeteor_level[this]=(GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))) // INLINED!!
            set s__LivingMeteor___LivingMeteor_unit[this]=s__PluginSpellEffect___Unit_unit[s__Spell_source]
            set s__LivingMeteor___LivingMeteor_player[this]=(GetOwningPlayer(s__PluginSpellEffect___Unit_unit[(s__Spell_source)])) // INLINED!!

            call sc__LivingMeteor___LivingMeteor_StartTimer(LivingMeteor___DRAG_AND_DROP_TIME , false , this , - 1)
        endfunction

//Implemented from module Periodic:



        function s__LivingMeteor___LivingMeteor_Periodic___end takes integer this,integer i,integer id returns integer
            if i >= 0 then
                call SaveInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___key), (id), ( (LoadInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___key), (id))) - 1)) // INLINED!!
                call SaveInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___table), (i), ( (LoadInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___table), ((LoadInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___key), (id)))))))) // INLINED!!

                if (LoadInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___key), (id))) == 0 then // INLINED!!
                    call PauseTimer(GetExpiredTimer())
                endif
            else
                call ReleaseTimer(GetExpiredTimer())
            endif

            if (HaveSavedInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___struct), (s__LivingMeteor___LivingMeteor_Periodic____unique[this]))) then // INLINED!!
                call RemoveSavedInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___struct), (s__LivingMeteor___LivingMeteor_Periodic____unique[this])) // INLINED!!
            endif

            if s__LivingMeteor___LivingMeteor_Periodic____allocated[this] then
                set s__LivingMeteor___LivingMeteor_Periodic____timer[this]=null
                set s__LivingMeteor___LivingMeteor_Periodic____allocated[this]=false

                call s__LivingMeteor___LivingMeteor_destroy(this)
            endif

            return i - 1
        endfunction

        function s__LivingMeteor___LivingMeteor_Periodic___onTimeout takes nothing returns nothing
            local integer this= (LoadInteger(TimerUtils___ht, 0, GetHandleId((GetExpiredTimer())))) // INLINED!!
            
            if this != 0 then

                    call s__LivingMeteor___LivingMeteor_onExpire(this)


                call s__LivingMeteor___LivingMeteor_Periodic___end(this,- 1 , 0)
            endif
        endfunction

        function s__LivingMeteor___LivingMeteor_Periodic___onPeriodic takes nothing returns nothing
            local integer i= 0
            local integer id= GetHandleId(GetExpiredTimer())
            local integer this= (LoadInteger(TimerUtils___ht, 0, GetHandleId((GetExpiredTimer())))) // INLINED!!
            
            if this != 0 then





            else
                loop
                    exitwhen i == (LoadInteger(Table___ht, (((s__LivingMeteor___LivingMeteor_Periodic___key))), (id))) // INLINED!!
                        set this=(LoadInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___table), (i))) // INLINED!!

                        if this != 0 then





                        endif
                    set i=i + 1
                endloop
            endif
        endfunction

        function s__LivingMeteor___LivingMeteor_HasStartedTimer takes integer id returns boolean
            return (HaveSavedInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___struct), (id))) // INLINED!!
        endfunction

        function s__LivingMeteor___LivingMeteor_GetTimerInstance takes integer id returns integer
            return (LoadInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___struct), (id))) // INLINED!!
        endfunction

        function s__LivingMeteor___LivingMeteor_GetRemainingTime takes integer this returns real
            return TimerGetRemaining(s__LivingMeteor___LivingMeteor_Periodic____timer[this])
        endfunction

        function s__LivingMeteor___LivingMeteor_StartTimer takes real timeout,boolean periodic,integer this,integer uniqueId returns nothing
            local integer index= R2I(timeout * 100000)
            local integer id

            if this != 0 then
                set s__LivingMeteor___LivingMeteor_Periodic____unique[this]=uniqueId
                set s__LivingMeteor___LivingMeteor_Periodic____allocated[this]=true

                if s__LivingMeteor___LivingMeteor_Periodic____unique[this] >= 0 and not (HaveSavedInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___struct), (s__LivingMeteor___LivingMeteor_Periodic____unique[this]))) then // INLINED!!
                    call SaveInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___struct), (s__LivingMeteor___LivingMeteor_Periodic____unique[this]), ( this)) // INLINED!!
                endif

                if periodic then
                    if timeout <= s__LivingMeteor___LivingMeteor_Periodic___PERIODIC_THRESHOLD then
                        if not (HaveSavedHandle(Table___ht, (((s__LivingMeteor___LivingMeteor_Periodic___timers))), (index))) then // INLINED!!
                            call SaveTimerHandle(Table___ht, (((s__LivingMeteor___LivingMeteor_Periodic___timers))), (index), ( CreateTimer())) // INLINED!!
                        endif

                        set id=GetHandleId((LoadTimerHandle(Table___ht, (((s__LivingMeteor___LivingMeteor_Periodic___timers))), (index)))) // INLINED!!
                        set s__LivingMeteor___LivingMeteor_Periodic____timer[this]=(LoadTimerHandle(Table___ht, (((s__LivingMeteor___LivingMeteor_Periodic___timers))), (index))) // INLINED!!
                        call SaveInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___table), ((LoadInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___key), (id)))), ( this)) // INLINED!!
                        call SaveInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___key), (id), ( (LoadInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___key), (id))) + 1)) // INLINED!!
    
                        if (LoadInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___key), (id))) == 1 then // INLINED!!
                            call TimerStart((LoadTimerHandle(Table___ht, (((s__LivingMeteor___LivingMeteor_Periodic___timers))), (index))), timeout, periodic, function s__LivingMeteor___LivingMeteor_Periodic___onPeriodic) // INLINED!!
                        endif
                    else
                        set s__LivingMeteor___LivingMeteor_Periodic____timer[this]=NewTimerEx(this)
                        call TimerStart(s__LivingMeteor___LivingMeteor_Periodic____timer[this], timeout, periodic, function s__LivingMeteor___LivingMeteor_Periodic___onPeriodic)
                    endif
                else
                    set s__LivingMeteor___LivingMeteor_Periodic____timer[this]=NewTimerEx(this)
                    call TimerStart(s__LivingMeteor___LivingMeteor_Periodic____timer[this], timeout, periodic, function s__LivingMeteor___LivingMeteor_Periodic___onTimeout)
                endif
            else
                call BJDebugMsg("Periodic Error: instance not provided")
            endif
        endfunction

        function s__LivingMeteor___LivingMeteor_Periodic___onInit takes nothing returns nothing
            set s__LivingMeteor___LivingMeteor_Periodic___key=s__Table_create()
            set s__LivingMeteor___LivingMeteor_Periodic___table=s__Table_create()
            set s__LivingMeteor___LivingMeteor_Periodic___struct=s__Table_create()
            set s__LivingMeteor___LivingMeteor_Periodic___timers=s__Table_create()
        endfunction

        function s__LivingMeteor___LivingMeteor_onInit takes nothing returns nothing
            call s__Ability_register((s__LivingMeteor___LivingMeteor__allocate() ) , ( LivingMeteor___ABILITY)) // INLINED!!
        endfunction

//library LivingMeteor ends
//library Shop:
    
    // Credits:
    //      Taysen: FDF file and A2S function
    //      Bribe: Table library
    //      Magtheridon: RegisterPlayerUnitEvent library
    //      Hate: Frame border effects
    

    
    
    

    
    
    
    function CreateShop takes integer id,real aoe,real returnRate returns nothing
        call TriggerSleepAction(0) // This is here to ensure that any Item inheritance is initialized before the Shop is created
        call sc__Shop_create(id , aoe , returnRate)
    endfunction
    
    function ShopAddCategory takes integer id,string icon,string description returns integer
        return sc__Shop_addCategory(id , icon , description)
    endfunction

    function ShopAddItem takes integer id,integer itemId,integer categories returns nothing
        call sc__Shop_addItem(id , itemId , categories)
    endfunction

    function ShopFilter takes unit u,player owner,unit shop returns boolean
        return IsUnitOwnedByPlayer(u, owner) and UnitInventorySize(u) > 0 and not IsUnitType(u, UNIT_TYPE_DEAD) and not IsUnitPaused(u) and not IsUnitIllusion(u) and not IsUnitHidden(u)
    endfunction

    function A2S takes integer id returns string
        local string chars= " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
        local string s= ""
        local integer min= ' '
        local integer i

        if id >= min then
            loop
                exitwhen id == 0
                    set i=ModuloInteger(id, 256) - min
                    set s=SubString(chars, i, i + 1) + s
                set id=id / 256
            endloop
        endif

        return s
    endfunction

    
    
    

        function s__Shop___Sound_gold takes player p returns nothing
            if not GetSoundIsPlaying(s__Shop___Sound_noGold[GetHandleId(GetPlayerRace(p))]) then
                call StartSoundForPlayerBJ(p, s__Shop___Sound_noGold[GetHandleId(GetPlayerRace(p))])
            endif
        endfunction

        function s__Shop___Sound_success takes player p returns nothing
            if not GetSoundIsPlaying(s__Shop___Sound_success_sound) then
                call StartSoundForPlayerBJ(p, s__Shop___Sound_success_sound)
            endif
        endfunction

        function s__Shop___Sound_error takes player p returns nothing
            if not GetSoundIsPlaying(s__Shop___Sound_error_sound) then
                call StartSoundForPlayerBJ(p, s__Shop___Sound_error_sound)
            endif
        endfunction

        function s__Shop___Sound_onInit takes nothing returns nothing
            local integer id

            set s__Shop___Sound_success_sound=CreateSound(Shop___SUCCESS_SOUND, false, false, false, 10, 10, "")
            call SetSoundDuration(s__Shop___Sound_success_sound, 1600)
            set s__Shop___Sound_error_sound=CreateSound(Shop___ERROR_SOUND, false, false, false, 10, 10, "")
            call SetSoundDuration(s__Shop___Sound_error_sound, 614)
            set id=GetHandleId(RACE_HUMAN)
            set s__Shop___Sound_noGold[id]=CreateSound("Sound\\Interface\\Warning\\Human\\KnightNoGold1.wav", false, false, false, 10, 10, "")
            call SetSoundParamsFromLabel(s__Shop___Sound_noGold[id], "NoGoldHuman")
            call SetSoundDuration(s__Shop___Sound_noGold[id], 1618)
            set id=GetHandleId(RACE_ORC)
            set s__Shop___Sound_noGold[id]=CreateSound("Sound\\Interface\\Warning\\Orc\\GruntNoGold1.wav", false, false, false, 10, 10, "")
            call SetSoundParamsFromLabel(s__Shop___Sound_noGold[id], "NoGoldOrc")
            call SetSoundDuration(s__Shop___Sound_noGold[id], 1450)
            set id=GetHandleId(RACE_NIGHTELF)
            set s__Shop___Sound_noGold[id]=CreateSound("Sound\\Interface\\Warning\\NightElf\\SentinelNoGold1.wav", false, false, false, 10, 10, "")
            call SetSoundParamsFromLabel(s__Shop___Sound_noGold[id], "NoGoldNightElf")
            call SetSoundDuration(s__Shop___Sound_noGold[id], 1229)
            set id=GetHandleId(RACE_UNDEAD)
            set s__Shop___Sound_noGold[id]=CreateSound("Sound\\Interface\\Warning\\Undead\\NecromancerNoGold1.wav", false, false, false, 10, 10, "")
            call SetSoundParamsFromLabel(s__Shop___Sound_noGold[id], "NoGoldUndead")
            call SetSoundDuration(s__Shop___Sound_noGold[id], 2005)
            set id=GetHandleId(ConvertRace(11))
            set s__Shop___Sound_noGold[id]=CreateSound("Sound\\Interface\\Warning\\Naga\\NagaNoGold1.wav", false, false, false, 10, 10, "")
            call SetSoundParamsFromLabel(s__Shop___Sound_noGold[id], "NoGoldNaga")
            call SetSoundDuration(s__Shop___Sound_noGold[id], 2690)
        endfunction
    



        function s__Shop___Transaction_destroy takes integer this returns nothing
            call s__Table_destroy(s__Shop___Transaction_component[this])
            call s__Shop___Transaction_deallocate(this)

            set s__Shop___Transaction_unit[this]=null
            set s__Shop___Transaction_player[this]=null
        endfunction

        function s__Shop___Transaction_rollback takes integer this returns nothing
            local integer i= 0
            local integer j= 0

            if IsUnitInGroup(s__Shop___Transaction_unit[this], s__Shop_group[s__Shop___Transaction_id[this]]) then
                if s__Shop___Transaction_type[this] == "buy" then
                    if (s__Item_hasType((s__Shop___Transaction_unit[this] ) , ( s__Item_id[s__Shop___Transaction_item[this]]))) then // INLINED!!
                        loop
                            exitwhen i == UnitInventorySize(s__Shop___Transaction_unit[this])
                                if GetItemTypeId(UnitItemInSlot(s__Shop___Transaction_unit[this], i)) == s__Item_id[s__Shop___Transaction_item[this]] then
                                    call RemoveItem(UnitItemInSlot(s__Shop___Transaction_unit[this], i))
                                    exitwhen true
                                endif
                            set i=i + 1
                        endloop

                        set i=0

                        loop
                            exitwhen i == s__Shop___Transaction_index[this]
                                call UnitAddItemById(s__Shop___Transaction_unit[this], s__Item_id[((LoadInteger(Table___ht, (s__Shop___Transaction_component[this]), (i))))]) // INLINED!!
                            set i=i + 1
                        endloop

                        call SetPlayerState(s__Shop___Transaction_player[this], PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(s__Shop___Transaction_player[this], PLAYER_STATE_RESOURCE_GOLD) + s__Shop___Transaction_gold[this])
                        call s__Shop___Sound_success(s__Shop___Transaction_player[this])
                    else
                        call s__Shop___Sound_error(s__Shop___Transaction_player[this])
                    endif
                elseif s__Shop___Transaction_type[this] == "sell" then
                    call UnitAddItemById(s__Shop___Transaction_unit[this], s__Item_id[s__Shop___Transaction_item[this]])
                    call SetPlayerState(s__Shop___Transaction_player[this], PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(s__Shop___Transaction_player[this], PLAYER_STATE_RESOURCE_GOLD) - s__Shop___Transaction_gold[this])
                    call s__Shop___Sound_success(s__Shop___Transaction_player[this])
                else
                    loop
                        exitwhen i == (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(s__Shop___Transaction_item[this])])), (7))) // INLINED!!
                            set j=0

                            loop
                                exitwhen j == UnitInventorySize(s__Shop___Transaction_unit[this])
                                    if GetItemTypeId(UnitItemInSlot(s__Shop___Transaction_unit[this], j)) == s__Item_id[s__Item_get((LoadInteger(Table___ht, ((s__HashTable__getindex(s__Item_itemtype,s__Item_id[(s__Shop___Transaction_item[this])]))), (i))))] then // INLINED!!
                                        call RemoveItem(UnitItemInSlot(s__Shop___Transaction_unit[this], j))
                                        exitwhen true
                                    endif
                                set j=j + 1
                            endloop
                        set i=i + 1
                    endloop

                    call UnitAddItemById(s__Shop___Transaction_unit[this], s__Item_id[s__Shop___Transaction_item[this]])
                    call s__Shop___Sound_success(s__Shop___Transaction_player[this])
                endif
            else
                call s__Shop___Sound_error(s__Shop___Transaction_player[this])
            endif

            call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop___Transaction_counter,s__Shop___Transaction_shop[this])), (s__Shop___Transaction_id[this]), ( (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Transaction_counter,s__Shop___Transaction_shop[this])), (s__Shop___Transaction_id[this]))) - 1)) // INLINED!!
            call RemoveSavedInteger(Table___ht, (((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Transaction_transactions,s__Shop___Transaction_shop[this])), (s__Shop___Transaction_id[this]))))), ((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Transaction_counter,s__Shop___Transaction_shop[this])), (s__Shop___Transaction_id[this]))))) // INLINED!!
            call s__Shop___Transaction_destroy(this)
        endfunction

        function s__Shop___Transaction_add takes integer this,integer i returns nothing
            if i != 0 then
                call SaveInteger(Table___ht, (s__Shop___Transaction_component[this]), (s__Shop___Transaction_index[this]), ( i)) // INLINED!!
                set s__Shop___Transaction_index[this]=s__Shop___Transaction_index[this] + 1
            endif
        endfunction

        function s__Shop___Transaction_last takes integer shop,integer id returns integer
            if sc__Shop___Transaction_count(shop , id) > 0 then
                return ((LoadInteger(Table___ht, (((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Transaction_transactions,shop)), (id))))), ((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Transaction_counter,shop)), (id))) - 1)))) // INLINED!!
            endif

            return 0
        endfunction

        function s__Shop___Transaction_count takes integer shop,integer id returns integer
            return (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Transaction_counter,shop)), (id))) // INLINED!!
        endfunction

        function s__Shop___Transaction_clear takes integer shop,integer id returns nothing
            local integer i= 0

            loop
                exitwhen i == (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Transaction_counter,shop)), (id))) // INLINED!!
                    call s__Shop___Transaction_destroy(((LoadInteger(Table___ht, (((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Transaction_transactions,shop)), (id))))), (i))))) // INLINED!!
                set i=i + 1
            endloop

            call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop___Transaction_counter,shop)), (id), ( 0)) // INLINED!!
            call FlushChildHashtable(Table___ht, (((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Transaction_transactions,shop)), (id)))))) // INLINED!!
        endfunction

        function s__Shop___Transaction_create takes integer shop,unit u,integer i,integer gold,string transaction returns integer
            local integer this= s__Shop___Transaction__allocate()

            set s__Shop___Transaction_item[this]=i
            set s__Shop___Transaction_unit[this]=u
            set s__Shop___Transaction_shop[this]=shop
            set s__Shop___Transaction_gold[this]=gold
            set s__Shop___Transaction_type[this]=transaction
            set s__Shop___Transaction_index[this]=0
            set s__Shop___Transaction_player[this]=GetOwningPlayer(u)
            set s__Shop___Transaction_id[this]=GetPlayerId(s__Shop___Transaction_player[this])
            set s__Shop___Transaction_component[this]=s__Table_create()

            if not (HaveSavedInteger(Table___ht, (s__HashTable__getindex(s__Shop___Transaction_transactions,shop)), (s__Shop___Transaction_id[this]))) then // INLINED!!
                call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop___Transaction_transactions,shop)), (s__Shop___Transaction_id[this]), ( s__Table_create())) // INLINED!!
            endif

            call SaveInteger(Table___ht, (((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Transaction_transactions,shop)), (s__Shop___Transaction_id[this]))))), ((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Transaction_counter,shop)), (s__Shop___Transaction_id[this])))), ( this)) // INLINED!!
            call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop___Transaction_counter,shop)), (s__Shop___Transaction_id[this]), ( (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Transaction_counter,shop)), (s__Shop___Transaction_id[this]))) + 1)) // INLINED!!

            return this
        endfunction

        function s__Shop___Transaction_onInit takes nothing returns nothing
            set s__Shop___Transaction_counter=(s__Table_create()) // INLINED!!
            set s__Shop___Transaction_transactions=(s__Table_create()) // INLINED!!
        endfunction



        function s__Shop___Inventory__set_visible takes integer this,boolean visibility returns nothing
            set s__Shop___Inventory_isVisible[this]=visibility
            call BlzFrameSetVisible(s__Shop___Inventory_frame[this], visibility)
        endfunction

        function s__Shop___Inventory__get_visible takes integer this returns boolean
            return s__Shop___Inventory_isVisible[this]
        endfunction

        function s__Shop___Inventory__getindex takes integer this,integer id returns integer
            return (LoadInteger(Table___ht, (s__Shop___Inventory_selected[this]), (id))) // INLINED!!
        endfunction

        function s__Shop___Inventory_destroy takes integer this returns nothing
            local integer i= 0
            local integer j

            loop
                exitwhen i >= bj_MAX_PLAYER_SLOTS
                    if GetPlayerController(Player(i)) == MAP_CONTROL_USER then
                        set j=0

                        loop
                            exitwhen j == Shop___INVENTORY_COUNT
                                call s__HashTable_remove(Shop___table,(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],i)), (j)))) // INLINED!!
                                call s__Button_destroy(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],i)), (j))))) // INLINED!!
                            set j=j + 1
                        endloop

                        call s__HashTable_remove(s__Shop___Inventory_button[this],i)
                        call s__HashTable_remove(s__Shop___Inventory_item[this],i)
                    endif
                set i=i + 1
            endloop

            call BlzDestroyFrame(s__Shop___Inventory_frame[this])
            call s__Table_destroy(s__Shop___Inventory_selected[this])
            call s__Table_destroy(((s__Shop___Inventory_button[this]))) // INLINED!!
            call s__Table_destroy(((s__Shop___Inventory_item[this]))) // INLINED!!
            call s__Shop___Inventory_deallocate(this)

            set s__Shop___Inventory_frame[this]=null
        endfunction

        function s__Shop___Inventory_has takes integer this,integer id returns boolean
            return (HaveSavedInteger(Table___ht, (s__Shop___Inventory_selected[this]), (id))) // INLINED!!
        endfunction

        function s__Shop___Inventory_move takes integer this,framepointtype point,framehandle relative,framepointtype relativePoint returns nothing
            call BlzFrameClearAllPoints(s__Shop___Inventory_frame[this])
            call BlzFrameSetPoint(s__Shop___Inventory_frame[this], point, relative, relativePoint, 0, 0)
        endfunction

        function s__Shop___Inventory_show takes integer this,unit u returns nothing
            local item i
            local integer j= 0
            local integer id= GetPlayerId(GetOwningPlayer(u))

            if u != null then
                loop
                    exitwhen j == Shop___INVENTORY_COUNT
                        set i=UnitItemInSlot(u, j)

                        if i != null then
                            call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_item[this],id)), (j), ( s__Item_get(GetItemTypeId(i)))) // INLINED!!

                            if GetLocalPlayer() == GetOwningPlayer(u) then
                                call s__Backdrop__set_texture(s__Component_image[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],id)), (j)))))],((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_item[this],id)), (j)))))])))), (4))))) // INLINED!!
                                call s__Tooltip__set_icon(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],id)), (j))))],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_item[this],id)), (j)))))])))), (4)))) // INLINED!!
                                call BlzFrameSetText(s__Tooltip_nameFrame[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],id)), (j))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_item[this],id)), (j)))))])))), (3))))) // INLINED!!
                                call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],id)), (j))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_item[this],id)), (j)))))])))), (5))))) // INLINED!!
                                call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],id)), (j)))),true) // INLINED!!
                                call s__Button__set_highlighted(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],id)), (j)))),false) // INLINED!!
                            endif
                        else
                            call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_item[this],id)), (j), ( 0)) // INLINED!!

                            if GetLocalPlayer() == GetOwningPlayer(u) then
                                call s__Button__set_highlighted(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],id)), (j)))),false) // INLINED!!
                                call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],id)), (j)))),false) // INLINED!!
                            endif
                        endif
                    set j=j + 1
                endloop
            else
                loop
                    exitwhen j == Shop___INVENTORY_COUNT
                        call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_item[this],id)), (j), ( 0)) // INLINED!!

                        if GetLocalPlayer() == GetOwningPlayer(u) then
                            call s__Button__set_highlighted(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],id)), (j)))),false) // INLINED!!
                            call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],id)), (j)))),false) // INLINED!!
                        endif
                    set j=j + 1
                endloop
            endif

            set i=null
        endfunction

        function s__Shop___Inventory_remove takes integer this,integer id returns nothing
            call RemoveSavedInteger(Table___ht, (s__Shop___Inventory_selected[this]), (id)) // INLINED!!
        endfunction

        function s__Shop___Inventory_removeComponents takes integer this,integer i,integer transaction returns nothing
            local integer j= 0
            local integer k= 0
            local integer component

            loop
                exitwhen j == (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) // INLINED!!
                    set component=s__Item_get((LoadInteger(Table___ht, ((s__HashTable__getindex(s__Item_itemtype,s__Item_id[(i)]))), (j)))) // INLINED!!

                    if (s__Item_hasType((s__Shop___Transaction_unit[transaction] ) , ( s__Item_id[component]))) then // INLINED!!
                        set k=0

                        loop
                            exitwhen k == UnitInventorySize(s__Shop___Transaction_unit[transaction])
                                if GetItemTypeId(UnitItemInSlot(s__Shop___Transaction_unit[transaction], k)) == s__Item_id[component] then
                                    call RemoveItem(UnitItemInSlot(s__Shop___Transaction_unit[transaction], k))
                                    exitwhen true
                                endif
                            set k=k + 1
                        endloop

                        call s__Shop___Transaction_add(transaction,component)
                    else
                        call s__Shop___Inventory_removeComponents(this,component , transaction)
                    endif
                set j=j + 1
            endloop
        endfunction

        function s__Shop___Inventory_create takes integer shop returns integer
            local integer this= s__Shop___Inventory__allocate()
            local integer i= 0
            local integer j= 0

            set s__Shop___Inventory_shop[this]=shop
            set s__Shop___Inventory_isVisible[this]=true
            set s__Shop___Inventory_selected[this]=s__Table_create()
            set s__Shop___Inventory_item[this]=(s__Table_create()) // INLINED!!
            set s__Shop___Inventory_button[this]=(s__Table_create()) // INLINED!!
            set s__Shop___Inventory_frame[this]=BlzCreateFrameByType("BACKDROP", "", BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0), "", 0)

            call BlzFrameSetPoint(s__Shop___Inventory_frame[this], FRAMEPOINT_TOPLEFT, (s__Component_Components___Operators____frame[(s__Shop_buyer[shop])]), FRAMEPOINT_TOPLEFT, 0, 0) // INLINED!!
            call BlzFrameSetSize(s__Shop___Inventory_frame[this], Shop___INVENTORY_WIDTH, Shop___INVENTORY_HEIGHT)
            call BlzFrameSetTexture(s__Shop___Inventory_frame[this], Shop___INVENTORY_TEXTURE, 0, false)

            loop
                exitwhen i >= bj_MAX_PLAYER_SLOTS
                    if GetPlayerController(Player(i)) == MAP_CONTROL_USER then
                        set j=0

                        loop
                            exitwhen j == Shop___INVENTORY_COUNT
                                call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],i)), (j), ( s__Button_create(0.0033700 + Shop___INVENTORY_GAP * j , - 0.0037500 , Shop___INVENTORY_SIZE , Shop___INVENTORY_SIZE , s__Shop___Inventory_frame[this] , false))) // INLINED!!
                                call s__Tooltip__set_point(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],i)), (j))))],FRAMEPOINT_BOTTOM) // INLINED!!
                                call s__Component__set_onClick(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],i)), (j)))),function sc__Shop___Inventory_onClick) // INLINED!!
                                call s__Component__set_onDoubleClick(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],i)), (j)))),function sc__Shop___Inventory_onDoubleClick) // INLINED!!
                                call s__Component__set_onRightClick(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],i)), (j)))),function sc__Shop___Inventory_onRightClick) // INLINED!!
                                call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],i)), (j)))),false) // INLINED!!
                                call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],i)), (j))))), (0), ( this)) // INLINED!!
                                call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],i)), (j))))), (1), ( j)) // INLINED!!
                            set j=j + 1
                        endloop
                    endif
                set i=i + 1
            endloop

            return this
        endfunction

        function s__Shop___Inventory_onClick takes nothing returns nothing
            local player p= GetTriggerPlayer()
            local integer b= (s__Component_array[GetPlayerId(GetTriggerPlayer())]) // INLINED!!
            local integer id= GetPlayerId(p)
            local integer i= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (1))) // INLINED!!
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (0))) // INLINED!!

            if this != 0 then
                if GetLocalPlayer() == GetTriggerPlayer() then
                    call s__Button__set_highlighted(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],id)), ((LoadInteger(Table___ht, (s__Shop___Inventory_selected[this]), (id))))))),false) // INLINED!!
                    call s__Button__set_highlighted(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],id)), (i)))),true) // INLINED!!
                endif

                call SaveInteger(Table___ht, (s__Shop___Inventory_selected[this]), (id), ( i)) // INLINED!!
            endif
        endfunction

        function s__Shop___Inventory_onDoubleClick takes nothing returns nothing
            local integer b= (s__Component_array[GetPlayerId(GetTriggerPlayer())]) // INLINED!!
            local player p= GetTriggerPlayer()
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (0))) // INLINED!!
            local integer i= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (1))) // INLINED!!
            local integer id= GetPlayerId(p)

            if this != 0 then
                if sc__Shop_sell(s__Shop___Inventory_shop[this],(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_item[this],id)), (i))) , p , i) then // INLINED!!
                    call s__Shop___Inventory_show(this,sc__Shop___Buyer__getindex(s__Shop_buyer[s__Shop___Inventory_shop[this]],id))
                endif
            endif

            set p=null
        endfunction

        function s__Shop___Inventory_onRightClick takes nothing returns nothing
            local player p= GetTriggerPlayer()
            local integer id= GetPlayerId(p)
            local integer b= (s__Component_array[GetPlayerId(GetTriggerPlayer())]) // INLINED!!
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (0))) // INLINED!!
            local integer i= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (1))) // INLINED!!

            if this != 0 then
                if sc__Shop_sell(s__Shop___Inventory_shop[this],(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_item[this],id)), (i))) , p , i) then // INLINED!!
                    call s__Shop___Inventory_show(this,sc__Shop___Buyer__getindex(s__Shop_buyer[s__Shop___Inventory_shop[this]],id))
                endif
            endif

            set p=null
        endfunction




        function s__Shop___Slot__set_row takes integer this,integer newRow returns nothing
            set s__Shop___Slot_current_row[this]=newRow
            call s__Component__set_y(this,- ( 0.030000 + ( ( Shop___SLOT_HEIGHT + Shop___SLOT_GAP_Y ) * newRow ) ))

            call sc__Shop___Slot_update(this)
        endfunction

        function s__Shop___Slot__get_row takes integer this returns integer
            return s__Shop___Slot_current_row[this]
        endfunction

        function s__Shop___Slot__set_column takes integer this,integer newColumn returns nothing
            set s__Shop___Slot_current_column[this]=newColumn
            call s__Component__set_x(this,0.030000 + ( ( Shop___SLOT_WIDTH + Shop___SLOT_GAP_X ) * newColumn ))

            call sc__Shop___Slot_update(this)
        endfunction

        function s__Shop___Slot__get_column takes integer this returns integer
            return s__Shop___Slot_current_column[this]
        endfunction

        function s__Shop___Slot_destroy takes integer this returns nothing
            call s__Text_destroy(s__Shop___Slot_cost[this])
            call s__Backdrop_destroy(s__Shop___Slot_gold[this])
        endfunction

        function s__Shop___Slot_update takes integer this returns nothing
            if (s__Shop___Slot_current_column[(this)]) <= ( s__Shop_columns[s__Shop___Slot_shop[this]] / 2 ) and (s__Shop___Slot_current_row[(this)]) < 3 then // INLINED!!
                call s__Tooltip__set_point(s__Button_tooltip[this],FRAMEPOINT_TOPLEFT)
            elseif (s__Shop___Slot_current_column[(this)]) >= ( ( s__Shop_columns[s__Shop___Slot_shop[this]] / 2 ) + 1 ) and (s__Shop___Slot_current_row[(this)]) < 3 then // INLINED!!
                call s__Tooltip__set_point(s__Button_tooltip[this],FRAMEPOINT_TOPRIGHT)
            elseif (s__Shop___Slot_current_column[(this)]) <= ( s__Shop_columns[s__Shop___Slot_shop[this]] / 2 ) and (s__Shop___Slot_current_row[(this)]) >= 3 then // INLINED!!
                call s__Tooltip__set_point(s__Button_tooltip[this],FRAMEPOINT_BOTTOMLEFT)
            else
                call s__Tooltip__set_point(s__Button_tooltip[this],FRAMEPOINT_BOTTOMRIGHT)
            endif
        endfunction

        function s__Shop___Slot_move takes integer this,integer row,integer column returns nothing
            call s__Shop___Slot__set_row(this,row)
            call s__Shop___Slot__set_column(this,column)
        endfunction

        function s__Shop___Slot_create takes integer shop,integer i,real x,real y,framehandle parent returns integer
            local integer this= s__Shop___Slot__allocate(x , y , Shop___ITEM_SIZE , Shop___ITEM_SIZE , parent , false)

            call s__Component__set_x(this,x)
            call s__Component__set_y(this,y)
            set s__Shop___Slot_item[this]=i
            set s__Shop___Slot_shop[this]=shop
            set s__Shop___Slot_next[this]=0
            set s__Shop___Slot_prev[this]=0
            set s__Shop___Slot_right[this]=0
            set s__Shop___Slot_left[this]=0
            call s__Tooltip__set_point(s__Button_tooltip[this],FRAMEPOINT_TOPRIGHT)
            set s__Shop___Slot_gold[this]=s__Backdrop_create(0 , - 0.04 , Shop___GOLD_SIZE , Shop___GOLD_SIZE , (s__Component_Components___Operators____frame[(this)]) , Shop___GOLD_ICON) // INLINED!!
            set s__Shop___Slot_cost[this]=s__Text_create(0.01325 , - 0.00193 , Shop___COST_WIDTH , Shop___COST_HEIGHT , Shop___COST_SCALE , false , (s__Backdrop_Components___Operators____frame[(s__Shop___Slot_gold[this])]) , null , TEXT_JUSTIFY_CENTER , TEXT_JUSTIFY_LEFT) // INLINED!!

            if s__Shop___Slot_item[this] != 0 then
                call s__Backdrop__set_texture(s__Component_image[(this)],((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(s__Shop___Slot_item[this])])))), (4))))) // INLINED!!
                call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[this])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(s__Shop___Slot_item[this])])))), (5))))) // INLINED!!
                call BlzFrameSetText(s__Tooltip_nameFrame[(s__Button_tooltip[this])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(s__Shop___Slot_item[this])])))), (3))))) // INLINED!!
                call s__Tooltip__set_icon(s__Button_tooltip[this],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(s__Shop___Slot_item[this])])))), (4)))) // INLINED!!
                call s__Text__set_text(s__Shop___Slot_cost[this],"|cffFFCC00" + I2S((LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(s__Shop___Slot_item[this])])), (1)))) + "|r") // INLINED!!
            endif

            return this
        endfunction

        function s__Shop___Slot_onScroll takes integer this returns nothing
            if GetLocalPlayer() == GetTriggerPlayer() then
                call sc__Shop_onScroll(s__Shop___Slot_shop[this])
            endif
        endfunction

        function s__Shop___Slot_onClick takes integer this returns nothing
            call sc__Shop_detail(s__Shop___Slot_shop[this],s__Shop___Slot_item[this] , GetTriggerPlayer())
        endfunction

        function s__Shop___Slot_onMiddleClick takes integer this returns nothing
            if sc__Shop___Favorites_has(s__Shop_favorites[s__Shop___Slot_shop[this]],s__Item_id[s__Shop___Slot_item[this]] , GetTriggerPlayer()) then
                call sc__Shop___Favorites_remove(s__Shop_favorites[s__Shop___Slot_shop[this]],s__Shop___Slot_item[this] , GetTriggerPlayer())
            else
                call sc__Shop___Favorites_add(s__Shop_favorites[s__Shop___Slot_shop[this]],s__Shop___Slot_item[this] , GetTriggerPlayer())
            endif
        endfunction

        function s__Shop___Slot_onDoubleClick takes integer this returns nothing
            if sc__Shop_buy(s__Shop___Slot_shop[this],s__Shop___Slot_item[this] , GetTriggerPlayer()) then
                if GetLocalPlayer() == GetTriggerPlayer() then
                    call s__Button_play(this,Shop___SPRITE_MODEL , Shop___SPRITE_SCALE , 0)
                endif
            endif
        endfunction

        function s__Shop___Slot_onRightClick takes integer this returns nothing
            if sc__Shop_buy(s__Shop___Slot_shop[this],s__Shop___Slot_item[this] , GetTriggerPlayer()) then
                if GetLocalPlayer() == GetTriggerPlayer() then
                    call s__Button_play(this,Shop___SPRITE_MODEL , Shop___SPRITE_SCALE , 0)
                endif
            endif
        endfunction


        function s__Shop___Detail_destroy takes integer this returns nothing
            local integer i= 0
            local integer j= 0

            loop
                exitwhen i >= bj_MAX_PLAYER_SLOTS
                    if GetPlayerController(Player(i)) == MAP_CONTROL_USER then
                        call s__HashTable_remove(Shop___table,(LoadInteger(Table___ht, (s__Shop___Detail_main[this]), (i)))) // INLINED!!

                        loop
                            exitwhen j == 5
                                call s__HashTable_remove(Shop___table,(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_components[this],i)), (j)))) // INLINED!!
                                call s__Backdrop_destroy((((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_lines[this],i)), (j)))))) // INLINED!!
                                call s__Shop___Slot_destroy(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_components[this],i)), (j))))) // INLINED!!
                            set j=j + 1
                        endloop

                        set j=0

                        loop
                            exitwhen j == Shop___DETAIL_USED_COUNT
                                call s__HashTable_remove(Shop___table,(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],i)), (j)))) // INLINED!!
                                call s__Button_destroy(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],i)), (j))))) // INLINED!!
                            set j=j + 1
                        endloop

                        call s__HashTable_remove(s__Shop___Detail_used[this],i)
                        call s__HashTable_remove(s__Shop___Detail_lines[this],i)
                        call s__HashTable_remove(s__Shop___Detail_button[this],i)
                        call s__HashTable_remove(s__Shop___Detail_components[this],i)
                    endif
                set i=i + 1
            endloop

            call s__Table_destroy(s__Shop___Detail_main[this])
            call s__Table_destroy(s__Shop___Detail_count[this])
            call s__Table_destroy(s__Shop___Detail_item[this])
            call s__Button_destroy(s__Shop___Detail_close[this])
            call s__Button_destroy(s__Shop___Detail_left[this])
            call s__Button_destroy(s__Shop___Detail_right[this])
            call s__Table_destroy(((s__Shop___Detail_used[this]))) // INLINED!!
            call s__Table_destroy(((s__Shop___Detail_lines[this]))) // INLINED!!
            call s__Table_destroy(((s__Shop___Detail_button[this]))) // INLINED!!
            call s__Text_destroy(s__Shop___Detail_usedText[this])
            call s__Table_destroy(((s__Shop___Detail_components[this]))) // INLINED!!
            call s__Backdrop_destroy((s__Shop___Detail_separator[this])) // INLINED!!
            call s__Backdrop_destroy((s__Shop___Detail_vertical[this])) // INLINED!!
            call s__Backdrop_destroy((s__Shop___Detail_horizontal[this])) // INLINED!!
            call s__TextArea_destroy(s___Shop___Detail_description[s__Shop___Detail_description[this]])
            call s__TextArea_destroy(s___Shop___Detail_description[s__Shop___Detail_description[this]+1])
            call s__TextArea_destroy(s___Shop___Detail_description[s__Shop___Detail_description[this]+2])
            call s__TextArea_destroy(s___Shop___Detail_description[s__Shop___Detail_description[this]+3])
        endfunction

        function s__Shop___Detail_shift takes integer this,boolean left,player p returns nothing
            local integer i
            local integer j
            local integer id= GetPlayerId(p)

            if left then
                if (HaveSavedInteger(Table___ht, ((s__HashTable__getindex(s__Item_relations,s__Item_id[(((LoadInteger(Table___ht, (s__Shop___Detail_item[this]), (id)))))]))), ((LoadInteger(Table___ht, (s__Shop___Detail_count[this]), (id)))))) and (LoadInteger(Table___ht, (s__Shop___Detail_count[this]), (id))) >= Shop___DETAIL_USED_COUNT then // INLINED!!
                    set j=0

                    loop
                        exitwhen j == Shop___DETAIL_USED_COUNT - 1
                            call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), (j), ( (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), (j + 1))))) // INLINED!!

                            if GetLocalPlayer() == p then
                                call s__Backdrop__set_texture(s__Component_image[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j)))))],((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), (j)))))])))), (4))))) // INLINED!!
                                call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), (j)))))])))), (5))))) // INLINED!!
                                call BlzFrameSetText(s__Tooltip_nameFrame[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), (j)))))])))), (3))))) // INLINED!!
                                call s__Tooltip__set_icon(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j))))],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), (j)))))])))), (4)))) // INLINED!!
                                call sc__Backdrop__set_visible(s__Button_block[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j)))))],not (sc__Shop_has(s__Shop___Detail_shop[this],s__Item_id[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), (j))))]))) // INLINED!!
                                call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j)))),true) // INLINED!!
                            endif
                        set j=j + 1
                    endloop

                    set i=s__Item_get((LoadInteger(Table___ht, ((s__HashTable__getindex(s__Item_relations,s__Item_id[(((LoadInteger(Table___ht, (s__Shop___Detail_item[this]), (id)))))]))), ((LoadInteger(Table___ht, (s__Shop___Detail_count[this]), (id))))))) // INLINED!!

                    if i != 0 then
                        call SaveInteger(Table___ht, (s__Shop___Detail_count[this]), (id), ( (LoadInteger(Table___ht, (s__Shop___Detail_count[this]), (id))) + 1)) // INLINED!!
                        call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), (j), ( i)) // INLINED!!

                        if GetLocalPlayer() == p then
                            call s__Backdrop__set_texture(s__Component_image[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j)))))],((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (4))))) // INLINED!!
                            call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (5))))) // INLINED!!
                            call BlzFrameSetText(s__Tooltip_nameFrame[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (3))))) // INLINED!!
                            call s__Tooltip__set_icon(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j))))],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (4)))) // INLINED!!
                            call sc__Backdrop__set_visible(s__Button_block[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j)))))],not (sc__Shop_has(s__Shop___Detail_shop[this],s__Item_id[i]))) // INLINED!!
                            call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j)))),true) // INLINED!!
                        endif
                    endif
                endif
            else
                if (LoadInteger(Table___ht, (((s__Shop___Detail_count[this]))), (id))) > Shop___DETAIL_USED_COUNT then // INLINED!!
                    set j=Shop___DETAIL_USED_COUNT - 1

                    loop
                        exitwhen j == 0
                            call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), (j), ( (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), (j - 1))))) // INLINED!!

                            if GetLocalPlayer() == p then
                                call s__Backdrop__set_texture(s__Component_image[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j)))))],((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), (j)))))])))), (4))))) // INLINED!!
                                call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), (j)))))])))), (5))))) // INLINED!!
                                call BlzFrameSetText(s__Tooltip_nameFrame[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), (j)))))])))), (3))))) // INLINED!!
                                call s__Tooltip__set_icon(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j))))],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), (j)))))])))), (4)))) // INLINED!!
                                call sc__Backdrop__set_visible(s__Button_block[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j)))))],not (sc__Shop_has(s__Shop___Detail_shop[this],s__Item_id[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), (j))))]))) // INLINED!!
                                call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j)))),true) // INLINED!!
                            endif
                        set j=j - 1
                    endloop
                    
                    set i=s__Item_get((LoadInteger(Table___ht, ((s__HashTable__getindex(s__Item_relations,s__Item_id[(((LoadInteger(Table___ht, (s__Shop___Detail_item[this]), (id)))))]))), ((LoadInteger(Table___ht, (s__Shop___Detail_count[this]), (id))) - Shop___DETAIL_USED_COUNT - 1)))) // INLINED!!

                    if i != 0 then
                        call SaveInteger(Table___ht, (s__Shop___Detail_count[this]), (id), ( (LoadInteger(Table___ht, (s__Shop___Detail_count[this]), (id))) - 1)) // INLINED!!
                        call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), (j), ( i)) // INLINED!!

                        if GetLocalPlayer() == p then
                            call s__Backdrop__set_texture(s__Component_image[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j)))))],((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (4))))) // INLINED!!
                            call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (5))))) // INLINED!!
                            call BlzFrameSetText(s__Tooltip_nameFrame[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (3))))) // INLINED!!
                            call s__Tooltip__set_icon(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j))))],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (4)))) // INLINED!!
                            call sc__Backdrop__set_visible(s__Button_block[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j)))))],not (sc__Shop_has(s__Shop___Detail_shop[this],s__Item_id[i]))) // INLINED!!
                            call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j)))),true) // INLINED!!
                        endif
                    endif
                endif
            endif
        endfunction

        function s__Shop___Detail_showUsed takes integer this,player p returns nothing
            local integer i
            local integer j= 0
            local integer id= GetPlayerId(p)

            loop
                exitwhen j == Shop___DETAIL_USED_COUNT
                    set i=s__Item_get((LoadInteger(Table___ht, ((s__HashTable__getindex(s__Item_relations,s__Item_id[(((LoadInteger(Table___ht, (s__Shop___Detail_item[this]), (id)))))]))), (j)))) // INLINED!!

                    if i != 0 and j < Shop___DETAIL_USED_COUNT then
                        call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), (j), ( i)) // INLINED!!

                        if GetLocalPlayer() == p then
                            call s__Backdrop__set_texture(s__Component_image[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), ((LoadInteger(Table___ht, (s__Shop___Detail_count[this]), (id))))))))],((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (4))))) // INLINED!!
                            call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), ((LoadInteger(Table___ht, (s__Shop___Detail_count[this]), (id)))))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (5))))) // INLINED!!
                            call BlzFrameSetText(s__Tooltip_nameFrame[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), ((LoadInteger(Table___ht, (s__Shop___Detail_count[this]), (id)))))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (3))))) // INLINED!!
                            call s__Tooltip__set_icon(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), ((LoadInteger(Table___ht, (s__Shop___Detail_count[this]), (id)))))))],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (4)))) // INLINED!!
                            call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), ((LoadInteger(Table___ht, (s__Shop___Detail_count[this]), (id))))))),true) // INLINED!!
                            call sc__Backdrop__set_visible(s__Button_block[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), ((LoadInteger(Table___ht, (s__Shop___Detail_count[this]), (id))))))))],not (sc__Shop_has(s__Shop___Detail_shop[this],s__Item_id[i]))) // INLINED!!
                        endif

                        call SaveInteger(Table___ht, (s__Shop___Detail_count[this]), (id), ( (LoadInteger(Table___ht, (s__Shop___Detail_count[this]), (id))) + 1)) // INLINED!!
                    else
                        call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), (j)))),false) // INLINED!!
                    endif
                set j=j + 1
            endloop
        endfunction

        function s__Shop___Detail_refresh takes integer this,player p returns nothing
            local integer id= GetPlayerId(p)

            if sc__Component__get_visible(this) and (LoadInteger(Table___ht, (s__Shop___Detail_item[this]), (id))) != 0 then // INLINED!!
                call sc__Shop___Detail_show(this,(LoadInteger(Table___ht, (s__Shop___Detail_item[this]), (id))) , p) // INLINED!!
            endif
        endfunction

        function s__Shop___Detail_show takes integer this,integer i,player p returns nothing
            local integer counter= s__Table_create()
            local integer id= GetPlayerId(p)
            local integer j= 0
            local integer cost
            local integer component
            local integer slot

            if i != 0 then
                set cost=(LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (1))) // INLINED!!
                set s__Shop___Slot_item[((LoadInteger(Table___ht, (s__Shop___Detail_main[this]), (id))))]=i // INLINED!!
                call s__Backdrop__set_texture(s__Component_image[(((LoadInteger(Table___ht, (s__Shop___Detail_main[this]), (id)))))],((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (4))))) // INLINED!!
                call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[((LoadInteger(Table___ht, (s__Shop___Detail_main[this]), (id))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (5))))) // INLINED!!
                call BlzFrameSetText(s__Tooltip_nameFrame[(s__Button_tooltip[((LoadInteger(Table___ht, (s__Shop___Detail_main[this]), (id))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (3))))) // INLINED!!
                call s__Tooltip__set_icon(s__Button_tooltip[((LoadInteger(Table___ht, (s__Shop___Detail_main[this]), (id))))],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (4)))) // INLINED!!
                call sc__Backdrop__set_visible(s__Button_block[(((LoadInteger(Table___ht, (s__Shop___Detail_main[this]), (id)))))],not (sc__Shop_has(s__Shop___Detail_shop[this],s__Item_id[i]))) // INLINED!!

                if i != (LoadInteger(Table___ht, (s__Shop___Detail_item[this]), (id))) then // INLINED!!
                    call SaveInteger(Table___ht, (s__Shop___Detail_item[this]), (id), ( i)) // INLINED!!
                    call SaveInteger(Table___ht, (s__Shop___Detail_count[this]), (id), ( 0)) // INLINED!!

                    call s__Shop___Detail_showUsed(this,p)
                endif

                if GetLocalPlayer() == p then
                    call sc__Component__set_visible(this,true)
                    call sc__Component__set_visible(s__Shop___Detail_uses[this],(LoadInteger(Table___ht, (s__Shop___Detail_count[this]), (id))) > 0) // INLINED!!
                    call sc__Backdrop__set_visible(s__Shop___Detail_vertical[this],(LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) > 0) // INLINED!!
                    call sc__Backdrop__set_visible(s__Shop___Detail_horizontal[this],(LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) > 1) // INLINED!!
                    call s__TextArea__set_text(s___Shop___Detail_description[s__Shop___Detail_description[this]],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (5)))) // INLINED!!
                    call s__TextArea__set_text(s___Shop___Detail_description[s__Shop___Detail_description[this]+1],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (5)))) // INLINED!!
                    call s__TextArea__set_text(s___Shop___Detail_description[s__Shop___Detail_description[this]+2],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (5)))) // INLINED!!
                    call s__TextArea__set_text(s___Shop___Detail_description[s__Shop___Detail_description[this]+3],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (5)))) // INLINED!!
                    call s__TextArea__set_visible(s___Shop___Detail_description[s__Shop___Detail_description[this]],sc__Component__get_visible(s__Shop___Detail_uses[this]) and (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) > 0) // INLINED!!
                    call s__TextArea__set_visible(s___Shop___Detail_description[s__Shop___Detail_description[this]+1],sc__Component__get_visible(s__Shop___Detail_uses[this]) and (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) == 0) // INLINED!!
                    call s__TextArea__set_visible(s___Shop___Detail_description[s__Shop___Detail_description[this]+2],not sc__Component__get_visible(s__Shop___Detail_uses[this]) and (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) > 0) // INLINED!!
                    call s__TextArea__set_visible(s___Shop___Detail_description[s__Shop___Detail_description[this]+3],not sc__Component__get_visible(s__Shop___Detail_uses[this]) and (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) == 0) // INLINED!!
                    call s__Text__set_text(s__Shop___Slot_cost[((LoadInteger(Table___ht, (s__Shop___Detail_main[this]), (id))))],"|cffFFCC00" + I2S(s__Item_cost(i,sc__Shop___Buyer__getindex(s__Shop_buyer[s__Shop___Detail_shop[this]],id))) + "|r") // INLINED!!
                endif

                if (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) > 0 then // INLINED!!
                    loop
                        exitwhen j == 5
                            set component=s__Item_get((LoadInteger(Table___ht, ((s__HashTable__getindex(s__Item_itemtype,s__Item_id[(i)]))), (j)))) // INLINED!!

                            if component != 0 then
                                set slot=(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_components[this],id)), (j))) // INLINED!!

                                if GetLocalPlayer() == p then
                                    if (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) == 1 then // INLINED!!
                                        call s__Component__set_x(slot,0.13725)
                                    elseif (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) == 2 then // INLINED!!
                                        call s__Component__set_x(slot,0.08725 + 0.1 * j)
                                    elseif (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) == 3 then // INLINED!!
                                        call s__Component__set_x(slot,0.03725 + 0.1 * j)
                                    elseif (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) == 4 then // INLINED!!
                                        call s__Component__set_x(slot,0.03725 + 0.06525 * j)
                                    else
                                        call s__Component__set_x(slot,0.03725 + 0.05 * j)
                                    endif

                                    call sc__Component__set_visible(slot,true)
                                endif

                                set s__Shop___Slot_item[slot]=component
                                call s__Backdrop__set_texture(s__Component_image[(slot)],((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(component)])))), (4))))) // INLINED!!
                                call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[slot])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(component)])))), (5))))) // INLINED!!
                                call BlzFrameSetText(s__Tooltip_nameFrame[(s__Button_tooltip[slot])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(component)])))), (3))))) // INLINED!!
                                call s__Tooltip__set_icon(s__Button_tooltip[slot],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(component)])))), (4)))) // INLINED!!
                                call sc__Backdrop__set_visible(s__Button_block[(slot)],not (sc__Shop_has(s__Shop___Detail_shop[this],s__Item_id[component]))) // INLINED!!
                                call s__Text__set_text(s__Shop___Slot_cost[slot],"|cffFFCC00" + I2S(s__Item_cost(component,sc__Shop___Buyer__getindex(s__Shop_buyer[s__Shop___Detail_shop[this]],id))) + "|r")
                                
                                if sc__Shop___Buyer__getindex(s__Shop_buyer[s__Shop___Detail_shop[this]],id) != null then
                                    if (s__Item_hasType((sc__Shop___Buyer__getindex(s__Shop_buyer[s__Shop___Detail_shop[this]],id) ) , ( s__Item_id[component]))) then // INLINED!!
                                        if (s__Item_countType((sc__Shop___Buyer__getindex(s__Shop_buyer[s__Shop___Detail_shop[this]],id) ) , ( s__Item_id[component]))) >= s__Item_count(i,s__Item_id[component]) then // INLINED!!
                                            call sc__Backdrop__set_visible(s__Button_check[(slot)],(true)) // INLINED!!
                                        else
                                            call SaveInteger(Table___ht, (counter), (s__Item_id[component]), ( (LoadInteger(Table___ht, (counter), (s__Item_id[component]))) + 1)) // INLINED!!
                                            call sc__Backdrop__set_visible(s__Button_check[(slot)],((LoadInteger(Table___ht, (counter), (s__Item_id[component]))) <= (s__Item_countType((sc__Shop___Buyer__getindex(s__Shop_buyer[s__Shop___Detail_shop[this]],id) ) , ( s__Item_id[component]))))) // INLINED!!
                                        endif
                                    else
                                        call sc__Backdrop__set_visible(s__Button_check[(slot)],(false)) // INLINED!!
                                    endif
                                else
                                    call sc__Backdrop__set_visible(s__Button_check[(slot)],(false)) // INLINED!!
                                endif

                                if (sc__Backdrop__get_visible(s__Button_check[(slot)])) then // INLINED!!
                                    set cost=cost - (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(component)])), (1))) // INLINED!!
                                endif
                            else
                                if GetLocalPlayer() == p then
                                    call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_components[this],id)), (j)))),false) // INLINED!!
                                endif
                            endif
                        set j=j + 1
                    endloop

                    if GetLocalPlayer() == p then
                        call s__Backdrop__set_width(s__Shop___Detail_horizontal[this],0.2)
                        call s__Backdrop__set_x(s__Shop___Detail_horizontal[this],(s__Component_Components___Operators____x[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_components[this],id)), (0)))))]) + Shop___ITEM_SIZE / 2) // INLINED!!

                        if (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) == 2 then // INLINED!!
                            call s__Backdrop__set_width(s__Shop___Detail_horizontal[this],0.1)
                        elseif (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) == 4 then // INLINED!!
                            call s__Backdrop__set_width(s__Shop___Detail_horizontal[this],0.19575)
                        endif
                    endif
                else
                    loop
                        exitwhen j == 5
                            if GetLocalPlayer() == p then
                                call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_components[this],id)), (j)))),false) // INLINED!!
                            endif
                        set j=j + 1
                    endloop
                endif
            endif

            call s__Table_destroy(counter)
        endfunction

        function s__Shop___Detail_create takes integer shop returns integer
            local integer this= s__Shop___Detail__allocate(Shop___WIDTH - Shop___DETAIL_WIDTH , 0 , Shop___DETAIL_WIDTH , Shop___DETAIL_HEIGHT , (s__Component_Components___Operators____frame[(shop)]) , "EscMenuBackdrop") // INLINED!!
            local integer i= 0
            local integer j= 0

            set s__Shop___Detail_shop[this]=shop
            set s__Shop___Detail_item[this]=s__Table_create()
            set s__Shop___Detail_count[this]=s__Table_create()
            set s__Shop___Detail_main[this]=s__Table_create()
            set s__Shop___Detail_used[this]=(s__Table_create()) // INLINED!!
            set s__Shop___Detail_lines[this]=(s__Table_create()) // INLINED!!
            set s__Shop___Detail_button[this]=(s__Table_create()) // INLINED!!
            set s__Shop___Detail_components[this]=(s__Table_create()) // INLINED!!
            set s___Shop___Detail_description[s__Shop___Detail_description[this]]=s__TextArea_create(0.0275 , - 0.16 , 0.31 , 0.16 , (s__Component_Components___Operators____frame[(this)]) , "DescriptionArea") // INLINED!!
            set s___Shop___Detail_description[s__Shop___Detail_description[this]+1]=s__TextArea_create(0.0275 , - 0.09 , 0.31 , 0.23 , (s__Component_Components___Operators____frame[(this)]) , "DescriptionArea") // INLINED!!
            set s___Shop___Detail_description[s__Shop___Detail_description[this]+2]=s__TextArea_create(0.0275 , - 0.16 , 0.31 , 0.22 , (s__Component_Components___Operators____frame[(this)]) , "DescriptionArea") // INLINED!!
            set s___Shop___Detail_description[s__Shop___Detail_description[this]+3]=s__TextArea_create(0.0275 , - 0.09 , 0.31 , 0.29 , (s__Component_Components___Operators____frame[(this)]) , "DescriptionArea") // INLINED!!
            set s__Shop___Detail_horizontal[this]=(s__Line__allocate(((0.03725 + Shop___ITEM_SIZE / 2 )*1.0) , (( - 0.09 )*1.0) , (( 0.05 )*1.0) , (( 0.001 )*1.0) , ( (s__Component_Components___Operators____frame[(this)]) ) , ( "replaceabletextures\\teamcolor\\teamcolor08"))) // INLINED!!
            call sc__Backdrop__set_visible(s__Shop___Detail_horizontal[this],false)
            set s__Shop___Detail_vertical[this]=(s__Line__allocate(((0.13725 + Shop___ITEM_SIZE / 2 )*1.0) , (( - 0.08 )*1.0) , (( 0.001 )*1.0) , (( 0.01 )*1.0) , ( (s__Component_Components___Operators____frame[(this)]) ) , ( "replaceabletextures\\teamcolor\\teamcolor08"))) // INLINED!!
            call sc__Backdrop__set_visible(s__Shop___Detail_vertical[this],false)
            set s__Shop___Detail_uses[this]=(s__Panel__allocate(((0.0225 )*1.0) , (( - 0.3155 )*1.0) , (( 0.2675 )*1.0) , (( 0.061 )*1.0) , ( (s__Component_Components___Operators____frame[(this)]) ) , "PanelFrame" , ( "TransparentBackdrop"))) // INLINED!!
            call s__Component__set_onScroll(s__Shop___Detail_uses[this],function sc__Shop___Detail_onScrolled)
            set s__Shop___Detail_separator[this]=(s__Line__allocate(((0 )*1.0) , (( 0 )*1.0) , (( (s__Component_Components___Operators____width[(s__Shop___Detail_uses[this])]) )*1.0) , (( 0.001 )*1.0) , ( (s__Component_Components___Operators____frame[(s__Shop___Detail_uses[this])]) ) , ( "replaceabletextures\\teamcolor\\teamcolor08"))) // INLINED!!
            set s__Shop___Detail_usedText[this]=s__Text_create(0.115 , - 0.0025 , 0.04 , 0.012 , 1 , false , (s__Component_Components___Operators____frame[(s__Shop___Detail_uses[this])]) , "|cffFFCC00 Used in|r" , TEXT_JUSTIFY_TOP , TEXT_JUSTIFY_LEFT) // INLINED!!
            set s__Shop___Detail_close[this]=s__Button_create(0.26676 , - 0.025 , Shop___DETAIL_CLOSE_BUTTON_SIZE , Shop___DETAIL_CLOSE_BUTTON_SIZE , (s__Component_Components___Operators____frame[(this)]) , true) // INLINED!!
            call s__Backdrop__set_texture(s__Component_image[(s__Shop___Detail_close[this])],(Shop___CLOSE_ICON)) // INLINED!!
            call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[s__Shop___Detail_close[this]])], ("Close")) // INLINED!!
            call s__Component__set_onClick(s__Shop___Detail_close[this],function sc__Shop___Detail_onClicked)
            set s__Shop___Detail_left[this]=s__Button_create(0.005 , - 0.0025 , Shop___DETAIL_SHIFT_BUTTON_SIZE , Shop___DETAIL_SHIFT_BUTTON_SIZE , (s__Component_Components___Operators____frame[(s__Shop___Detail_uses[this])]) , true) // INLINED!!
            call s__Backdrop__set_texture(s__Component_image[(s__Shop___Detail_left[this])],(Shop___USED_LEFT)) // INLINED!!
            call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[s__Shop___Detail_left[this]])], ("Scroll Left")) // INLINED!!
            call s__Component__set_onClick(s__Shop___Detail_left[this],function sc__Shop___Detail_onClicked)
            set s__Shop___Detail_right[this]=s__Button_create(0.248 , - 0.0025 , Shop___DETAIL_SHIFT_BUTTON_SIZE , Shop___DETAIL_SHIFT_BUTTON_SIZE , (s__Component_Components___Operators____frame[(s__Shop___Detail_uses[this])]) , true) // INLINED!!
            call s__Backdrop__set_texture(s__Component_image[(s__Shop___Detail_right[this])],(Shop___USED_RIGHT)) // INLINED!!
            call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[s__Shop___Detail_right[this]])], ("Scroll Right")) // INLINED!!
            call s__Component__set_onClick(s__Shop___Detail_right[this],function sc__Shop___Detail_onClicked)
            call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,s__Shop___Detail_close[this])), (0), ( this)) // INLINED!!
            call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,s__Shop___Detail_left[this])), (0), ( this)) // INLINED!!
            call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,s__Shop___Detail_right[this])), (0), ( this)) // INLINED!!
            call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,s__Shop___Detail_uses[this])), (0), ( this)) // INLINED!!

            loop
                exitwhen i >= bj_MAX_PLAYER_SLOTS
                    if GetPlayerController(Player(i)) == MAP_CONTROL_USER then
                        set j=0
                        call SaveInteger(Table___ht, (s__Shop___Detail_main[this]), (i), ( s__Shop___Slot_create(shop , 0 , 0.13725 , - 0.03 , (s__Component_Components___Operators____frame[(this)])))) // INLINED!!
                        call sc__Component__set_visible(((LoadInteger(Table___ht, (s__Shop___Detail_main[this]), (i)))),GetLocalPlayer() == Player(i)) // INLINED!!
                        call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,(LoadInteger(Table___ht, (s__Shop___Detail_main[this]), (i))))), (0), ( this)) // INLINED!!

                        loop
                            exitwhen j == 5
                                call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_components[this],i)), (j), ( s__Shop___Slot_create(shop , 0 , 0.03725 + 0.05 * j , - 0.1 , (s__Component_Components___Operators____frame[(this)])))) // INLINED!!
                                call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_lines[this],i)), (j), ( (s__Line__allocate((((s__Component_Components___Operators____width[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_components[this],i)), (j)))))]) / 2 )*1.0) , (( 0.01 )*1.0) , (( 0.001 )*1.0) , (( 0.01 )*1.0) , ( (s__Component_Components___Operators____frame[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_components[this],i)), (j)))))]) ) , ( "replaceabletextures\\teamcolor\\teamcolor08"))))) // INLINED!!
                                call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_components[this],i)), (j)))),false) // INLINED!!
                                call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_components[this],i)), (j))))), (0), ( this)) // INLINED!!
                            set j=j + 1
                        endloop

                        set j=0

                        loop
                            exitwhen j == Shop___DETAIL_USED_COUNT
                                call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],i)), (j), ( s__Button_create(0.0050000 + Shop___DETAIL_BUTTON_GAP * j , - 0.019500 , Shop___DETAIL_BUTTON_SIZE , Shop___DETAIL_BUTTON_SIZE , (s__Component_Components___Operators____frame[(s__Shop___Detail_uses[this])]) , false))) // INLINED!!
                                call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],i)), (j)))),false) // INLINED!!
                                call s__Tooltip__set_point(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],i)), (j))))],FRAMEPOINT_BOTTOMRIGHT) // INLINED!!
                                call s__Component__set_onClick(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],i)), (j)))),function sc__Shop___Detail_onClicked) // INLINED!!
                                call s__Component__set_onScroll(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],i)), (j)))),function sc__Shop___Detail_onScrolled) // INLINED!!
                                call s__Component__set_onRightClick(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],i)), (j)))),function sc__Shop___Detail_onRightClicked) // INLINED!!
                                call s__Component__set_onMiddleClick(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],i)), (j)))),function sc__Shop___Detail_onMiddleClicked) // INLINED!!
                                call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],i)), (j))))), (0), ( this)) // INLINED!!
                                call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],i)), (j))))), (1), ( j)) // INLINED!!
                            set j=j + 1
                        endloop
                    endif
                set i=i + 1
            endloop

            call sc__Component__set_visible(this,false)

            return this
        endfunction

        function s__Shop___Detail_onScroll takes integer this returns nothing
            if GetLocalPlayer() == GetTriggerPlayer() then
                call sc__Shop_onScroll(s__Shop___Detail_shop[this])
            endif
        endfunction

        function s__Shop___Detail_onClicked takes nothing returns nothing
            local integer b= (s__Component_array[GetPlayerId(GetTriggerPlayer())]) // INLINED!!
            local player p= GetTriggerPlayer()
            local integer id= GetPlayerId(p)
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (0))) // INLINED!!

            if this != 0 then
                if b == s__Shop___Detail_close[this] then
                    call sc__Shop_detail(s__Shop___Detail_shop[this],0 , p)
                elseif b == s__Shop___Detail_left[this] or b == s__Shop___Detail_right[this] then
                    call s__Shop___Detail_shift(this,b == s__Shop___Detail_right[this] , p)
                else
                    call sc__Shop_detail(s__Shop___Detail_shop[this],(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (1)))))) , p) // INLINED!!
                endif
            endif

            set p=null
        endfunction

        function s__Shop___Detail_onScrolled takes nothing returns nothing
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!

            if this != 0 then
                call s__Shop___Detail_shift(this,BlzGetTriggerFrameValue() < 0 , GetTriggerPlayer())
            endif
        endfunction

        function s__Shop___Detail_onMiddleClicked takes nothing returns nothing
            local integer b= (s__Component_array[GetPlayerId(GetTriggerPlayer())]) // INLINED!!
            local player p= GetTriggerPlayer()
            local integer id= GetPlayerId(p)
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (0))) // INLINED!!

            if this != 0 then
                if sc__Shop___Favorites_has(s__Shop_favorites[s__Shop___Detail_shop[this]],s__Item_id[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (1)))))))] , p) then // INLINED!!
                    call sc__Shop___Favorites_remove(s__Shop_favorites[s__Shop___Detail_shop[this]],(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (1)))))) , p) // INLINED!!
                else
                    call sc__Shop___Favorites_add(s__Shop_favorites[s__Shop___Detail_shop[this]],(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (1)))))) , p) // INLINED!!
                endif
            endif

            set p=null
        endfunction

        function s__Shop___Detail_onRightClicked takes nothing returns nothing
            local integer b= (s__Component_array[GetPlayerId(GetTriggerPlayer())]) // INLINED!!
            local player p= GetTriggerPlayer()
            local integer id= GetPlayerId(p)
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (0))) // INLINED!!

            if this != 0 then
                if sc__Shop_buy(s__Shop___Detail_shop[this],(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (1)))))) , p) then // INLINED!!
                    if GetLocalPlayer() == GetTriggerPlayer() then
                        call s__Button_play(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (1))))))),Shop___SPRITE_MODEL , Shop___SPRITE_SCALE , 0) // INLINED!!
                    endif
                endif
            endif

            set p=null
        endfunction




        function s__Shop___Buyer__set_visible takes integer this,boolean visibility returns nothing
            local integer i= 0
            local integer id= GetPlayerId(GetLocalPlayer())

            set s__Shop___Buyer_isVisible[this]=visibility
            call s__Shop___Inventory__set_visible(s__Shop___Buyer_inventory[this],visibility)

            if s__Shop___Buyer_isVisible[this] then
                loop
                    exitwhen i == Shop___BUYER_COUNT
                        if (LoadUnitHandle(Table___ht, (((s__HashTable__getindex(s__Shop___Buyer_unit[this],id)))), (i))) == (LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id))) then // INLINED!!
                            call s__Shop___Inventory_move(s__Shop___Buyer_inventory[this],FRAMEPOINT_TOP , (s__Component_Components___Operators____frame[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))))]) , FRAMEPOINT_BOTTOM) // INLINED!!
                            exitwhen true
                        endif
                    set i=i + 1
                endloop
            endif

            call BlzFrameSetVisible((s__Component_Components___Operators____frame[(this)]), visibility) // INLINED!!
        endfunction

        function s__Shop___Buyer__get_visible takes integer this returns boolean
            return s__Shop___Buyer_isVisible[this]
        endfunction

        function s__Shop___Buyer__getindex takes integer this,integer id returns unit
            return (LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id))) // INLINED!!
        endfunction

        function s__Shop___Buyer_destroy takes integer this returns nothing
            local integer i= 0
            local integer j

            loop
                exitwhen i >= bj_MAX_PLAYER_SLOTS
                    if GetPlayerController(Player(i)) == MAP_CONTROL_USER then
                        set j=0

                        loop
                            exitwhen j == Shop___BUYER_COUNT
                                call s__HashTable_remove(Shop___table,(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],i)), (j)))) // INLINED!!
                                call s__Button_destroy(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],i)), (j))))) // INLINED!!
                            set j=j + 1
                        endloop

                        call s__HashTable_remove(s__Shop___Buyer_button[this],i)
                        call s__HashTable_remove(s__Shop___Buyer_unit[this],i)
                    endif
                set i=i + 1
            endloop

            call s__Table_destroy(((s__Shop___Buyer_button[this]))) // INLINED!!
            call s__Table_destroy(((s__Shop___Buyer_unit[this]))) // INLINED!!
            call s__Table_destroy(s__Shop___Buyer_last[this])
            call s__Table_destroy(s__Shop___Buyer_index[this])
            call s__Table_destroy(s__Shop___Buyer_size[this])
            call s__Table_destroy(s__Shop___Buyer_selected[this])
            call s__Button_destroy(s__Shop___Buyer_left[this])
            call s__Button_destroy(s__Shop___Buyer_right[this])
            call s__Shop___Inventory_destroy(s__Shop___Buyer_inventory[this])
        endfunction

        function s__Shop___Buyer_shift takes integer this,boolean left,player p returns nothing
            local integer id= GetPlayerId(p)
            local boolean flag= false
            local integer i
            local unit u
            
            if left then
                if ( (LoadInteger(Table___ht, (s__Shop___Buyer_index[this]), (id))) + 1 + Shop___BUYER_COUNT ) <= (LoadInteger(Table___ht, (s__Shop___Buyer_size[this]), (id))) and (LoadInteger(Table___ht, (s__Shop___Buyer_size[this]), (id))) > 0 then // INLINED!!
                    call SaveInteger(Table___ht, (s__Shop___Buyer_index[this]), (id), ( (LoadInteger(Table___ht, (s__Shop___Buyer_index[this]), (id))) + 1)) // INLINED!!
                    set i=0

                    loop
                        exitwhen i == Shop___BUYER_COUNT - 1
                            call SaveUnitHandle(Table___ht, (((s__HashTable__getindex(s__Shop___Buyer_unit[this],id)))), (i), ( (LoadUnitHandle(Table___ht, (((s__HashTable__getindex(s__Shop___Buyer_unit[this],id)))), (i + 1))))) // INLINED!!

                            if GetLocalPlayer() == p then
                                call s__Backdrop__set_texture(s__Component_image[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))))],((s__Backdrop_path[(s__Component_image[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i + 1)))))])]))) // INLINED!!
                                call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i))))])], ((BlzFrameGetText(s__Tooltip_tooltip[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i + 1))))])])))) // INLINED!!
                                call s__Button__set_highlighted(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))),(LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id))) == (LoadUnitHandle(Table___ht, (((s__HashTable__getindex(s__Shop___Buyer_unit[this],id)))), (i)))) // INLINED!!
                                call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))),true) // INLINED!!

                                if (s__Button_isHighlighted[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))))]) then // INLINED!!
                                    set flag=true
                                    call s__Shop___Inventory_move(s__Shop___Buyer_inventory[this],FRAMEPOINT_TOP , (s__Component_Components___Operators____frame[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))))]) , FRAMEPOINT_BOTTOM) // INLINED!!
                                endif
                            endif
                        set i=i + 1
                    endloop

                    set u=BlzGroupUnitAt(s__Shop_group[id], (LoadInteger(Table___ht, (s__Shop___Buyer_index[this]), (id))) + Shop___BUYER_COUNT) // INLINED!!

                    if u != null then
                        call SaveUnitHandle(Table___ht, (((s__HashTable__getindex(s__Shop___Buyer_unit[this],id)))), (i), ( u)) // INLINED!!

                        if GetLocalPlayer() == p then
                            call s__Backdrop__set_texture(s__Component_image[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))))],(BlzGetAbilityIcon(GetUnitTypeId(u)))) // INLINED!!
                            call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i))))])], (GetUnitName(u))) // INLINED!!
                            call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))),true) // INLINED!!
                            call s__Button__set_highlighted(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))),(LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id))) == (LoadUnitHandle(Table___ht, (((s__HashTable__getindex(s__Shop___Buyer_unit[this],id)))), (i)))) // INLINED!!

                            if (s__Button_isHighlighted[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))))]) then // INLINED!!
                                set flag=true
                                call s__Shop___Inventory_move(s__Shop___Buyer_inventory[this],FRAMEPOINT_TOP , (s__Component_Components___Operators____frame[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))))]) , FRAMEPOINT_BOTTOM) // INLINED!!
                            endif
                        endif
                    endif

                    if GetLocalPlayer() == p then
                        call s__Shop___Inventory__set_visible(s__Shop___Buyer_inventory[this],flag)
                    endif
                endif
            else
                if (LoadInteger(Table___ht, (s__Shop___Buyer_index[this]), (id))) - 1 >= 0 and (LoadInteger(Table___ht, (s__Shop___Buyer_size[this]), (id))) > 0 then // INLINED!!
                    call SaveInteger(Table___ht, (s__Shop___Buyer_index[this]), (id), ( (LoadInteger(Table___ht, (s__Shop___Buyer_index[this]), (id))) - 1)) // INLINED!!
                    set i=Shop___BUYER_COUNT - 1

                    loop
                        exitwhen i == 0
                            call SaveUnitHandle(Table___ht, (((s__HashTable__getindex(s__Shop___Buyer_unit[this],id)))), (i), ( (LoadUnitHandle(Table___ht, (((s__HashTable__getindex(s__Shop___Buyer_unit[this],id)))), (i - 1))))) // INLINED!!

                            if GetLocalPlayer() == p then
                                call s__Backdrop__set_texture(s__Component_image[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))))],((s__Backdrop_path[(s__Component_image[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i - 1)))))])]))) // INLINED!!
                                call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i))))])], ((BlzFrameGetText(s__Tooltip_tooltip[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i - 1))))])])))) // INLINED!!
                                call s__Button__set_highlighted(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))),(LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id))) == (LoadUnitHandle(Table___ht, (((s__HashTable__getindex(s__Shop___Buyer_unit[this],id)))), (i)))) // INLINED!!
                                call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))),true) // INLINED!!

                                if (s__Button_isHighlighted[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))))]) then // INLINED!!
                                    set flag=true
                                    call s__Shop___Inventory_move(s__Shop___Buyer_inventory[this],FRAMEPOINT_TOP , (s__Component_Components___Operators____frame[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))))]) , FRAMEPOINT_BOTTOM) // INLINED!!
                                endif
                            endif
                        set i=i - 1
                    endloop
                    
                    set u=BlzGroupUnitAt(s__Shop_group[id], (LoadInteger(Table___ht, (s__Shop___Buyer_index[this]), (id)))) // INLINED!!

                    if u != null then
                        call SaveUnitHandle(Table___ht, (((s__HashTable__getindex(s__Shop___Buyer_unit[this],id)))), (i), ( u)) // INLINED!!

                        if GetLocalPlayer() == p then
                            call s__Backdrop__set_texture(s__Component_image[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))))],(BlzGetAbilityIcon(GetUnitTypeId(u)))) // INLINED!!
                            call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i))))])], (GetUnitName(u))) // INLINED!!
                            call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))),true) // INLINED!!
                            call s__Button__set_highlighted(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))),(LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id))) == (LoadUnitHandle(Table___ht, (((s__HashTable__getindex(s__Shop___Buyer_unit[this],id)))), (i)))) // INLINED!!

                            if (s__Button_isHighlighted[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))))]) then // INLINED!!
                                set flag=true
                                call s__Shop___Inventory_move(s__Shop___Buyer_inventory[this],FRAMEPOINT_TOP , (s__Component_Components___Operators____frame[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))))]) , FRAMEPOINT_BOTTOM) // INLINED!!
                            endif
                        endif
                    endif

                    if GetLocalPlayer() == p then
                        call s__Shop___Inventory__set_visible(s__Shop___Buyer_inventory[this],flag)
                    endif
                endif
            endif
        endfunction

        function s__Shop___Buyer_update takes integer this,group g,integer id returns nothing
            local integer i= 0
            local integer j
            local unit u
            
            call SaveInteger(Table___ht, (s__Shop___Buyer_size[this]), (id), ( BlzGroupGetSize(g))) // INLINED!!
            
            if (LoadInteger(Table___ht, (s__Shop___Buyer_size[this]), (id))) > 0 then // INLINED!!
                if ( (LoadInteger(Table___ht, (((s__Shop___Buyer_index[this]))), (id))) + Shop___BUYER_COUNT ) > (LoadInteger(Table___ht, (((s__Shop___Buyer_size[this]))), (id))) then // INLINED!!
                    call SaveInteger(Table___ht, (s__Shop___Buyer_index[this]), (id), ( 0)) // INLINED!!
                endif

                if not IsUnitInGroup((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id))), g) then // INLINED!!
                    call SaveInteger(Table___ht, (s__Shop___Buyer_index[this]), (id), ( 0)) // INLINED!!
                    call RemoveSavedInteger(Table___ht, (s__Shop___Buyer_current), (GetHandleId((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id)))))) // INLINED!!
                    call SaveUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id), ( FirstOfGroup(g))) // INLINED!!
                    call SaveInteger(Table___ht, (s__Shop___Buyer_current), (GetHandleId((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id))))), ( this)) // INLINED!!
                    call IssueNeutralTargetOrder(Player(id), s__Shop_unit[id], "smart", (LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id)))) // INLINED!!
                    call s__Shop___Inventory_show(s__Shop___Buyer_inventory[this],(LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id)))) // INLINED!!

                    if GetLocalPlayer() == Player(id) then
                        call s__Shop___Inventory_move(s__Shop___Buyer_inventory[this],FRAMEPOINT_TOP , (s__Component_Components___Operators____frame[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (0)))))]) , FRAMEPOINT_BOTTOM) // INLINED!!
                        call s__Shop___Detail_refresh(s__Shop_details[s__Shop___Buyer_shop[this]],Player(id))
                    endif
                endif
                
                set j=(LoadInteger(Table___ht, (s__Shop___Buyer_index[this]), (id))) // INLINED!!

                loop
                    exitwhen i == Shop___BUYER_COUNT
                        if j >= (LoadInteger(Table___ht, (s__Shop___Buyer_size[this]), (id))) then // INLINED!!
                            call SaveUnitHandle(Table___ht, (((s__HashTable__getindex(s__Shop___Buyer_unit[this],id)))), (i), ( null)) // INLINED!!

                            if GetLocalPlayer() == Player(id) then
                                call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))),false) // INLINED!!
                            endif
                        else
                            set u=BlzGroupUnitAt(g, j)
                            call SaveUnitHandle(Table___ht, (((s__HashTable__getindex(s__Shop___Buyer_unit[this],id)))), (i), ( u)) // INLINED!!

                            if (LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id))) == u then // INLINED!!
                                call SaveInteger(Table___ht, (s__Shop___Buyer_last[this]), (id), ( (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i))))) // INLINED!!
                            endif

                            if GetLocalPlayer() == Player(id) then
                                call s__Backdrop__set_texture(s__Component_image[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))))],(BlzGetAbilityIcon(GetUnitTypeId(u)))) // INLINED!!
                                call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i))))])], (GetUnitName(u))) // INLINED!!
                                call s__Button__set_highlighted(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))),(LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id))) == u) // INLINED!!
                                call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))),true) // INLINED!!

                                if (s__Button_isHighlighted[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))))]) then // INLINED!!
                                    call s__Shop___Inventory__set_visible(s__Shop___Buyer_inventory[this],true)
                                    call s__Shop___Inventory_move(s__Shop___Buyer_inventory[this],FRAMEPOINT_TOP , (s__Component_Components___Operators____frame[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))))]) , FRAMEPOINT_BOTTOM) // INLINED!!
                                endif
                            endif

                            set j=j + 1
                        endif
                    set i=i + 1
                endloop
            else
                call RemoveSavedInteger(Table___ht, (s__Shop___Buyer_current), (GetHandleId((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id)))))) // INLINED!!

                call SaveInteger(Table___ht, (s__Shop___Buyer_index[this]), (id), ( 0)) // INLINED!!
                call RemoveSavedHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id)) // INLINED!!

                if GetLocalPlayer() == Player(id) then
                    call s__Shop___Inventory__set_visible(s__Shop___Buyer_inventory[this],false)

                    loop
                        exitwhen i == Shop___BUYER_COUNT
                            call SaveUnitHandle(Table___ht, (((s__HashTable__getindex(s__Shop___Buyer_unit[this],id)))), (i), ( null)) // INLINED!!
                            call s__Button__set_highlighted(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))),false) // INLINED!!
                            call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))),false) // INLINED!!
                        set i=i + 1
                    endloop

                    call s__Shop___Detail_refresh(s__Shop_details[s__Shop___Buyer_shop[this]],Player(id))
                endif
            endif
        endfunction

        function s__Shop___Buyer_create takes integer shop returns integer
            local integer this= s__Shop___Buyer__allocate(Shop___WIDTH / 2 - Shop___BUYER_WIDTH / 2 , Shop___HEIGHT / 2 - 0.015 , Shop___BUYER_WIDTH , Shop___BUYER_HEIGHT , BlzGetOriginFrame(ORIGIN_FRAME_GAME_UI, 0) , "EscMenuBackdrop")
            local integer i= 0
            local integer j= 0

            set s__Shop___Buyer_shop[this]=shop
            set s__Shop___Buyer_last[this]=s__Table_create()
            set s__Shop___Buyer_size[this]=s__Table_create()
            set s__Shop___Buyer_index[this]=s__Table_create()
            set s__Shop___Buyer_selected[this]=s__Table_create()
            set s__Shop___Buyer_button[this]=(s__Table_create()) // INLINED!!
            set s__Shop___Buyer_unit[this]=(s__Table_create()) // INLINED!!
            set s__Shop___Buyer_inventory[this]=s__Shop___Inventory_create(shop)
            set s__Shop___Buyer_left[this]=s__Button_create(0.027500 , - 0.032500 , Shop___BUYER_SHIFT_BUTTON_SIZE , Shop___BUYER_SHIFT_BUTTON_SIZE , (s__Component_Components___Operators____frame[(this)]) , true) // INLINED!!
            call s__Backdrop__set_texture(s__Component_image[(s__Shop___Buyer_left[this])],(Shop___BUYER_LEFT)) // INLINED!!
            call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[s__Shop___Buyer_left[this]])], ("Scroll Left")) // INLINED!!
            call s__Component__set_onClick(s__Shop___Buyer_left[this],function sc__Shop___Buyer_onClicked)
            set s__Shop___Buyer_right[this]=s__Button_create(0.36350 , - 0.032500 , Shop___BUYER_SHIFT_BUTTON_SIZE , Shop___BUYER_SHIFT_BUTTON_SIZE , (s__Component_Components___Operators____frame[(this)]) , true) // INLINED!!
            call s__Backdrop__set_texture(s__Component_image[(s__Shop___Buyer_right[this])],(Shop___BUYER_RIGHT)) // INLINED!!
            call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[s__Shop___Buyer_right[this]])], ("Scroll Right")) // INLINED!!
            call s__Component__set_onClick(s__Shop___Buyer_right[this],function sc__Shop___Buyer_onClicked)
            call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,s__Shop___Buyer_left[this])), (0), ( this)) // INLINED!!
            call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,s__Shop___Buyer_right[this])), (0), ( this)) // INLINED!!

            loop
                exitwhen i >= bj_MAX_PLAYER_SLOTS
                    if GetPlayerController(Player(i)) == MAP_CONTROL_USER then
                        set j=0

                        loop
                            exitwhen j == Shop___BUYER_COUNT
                                call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],i)), (j), ( s__Button_create(0.045000 + Shop___BUYER_GAP * j , - 0.023000 , Shop___BUYER_SIZE , Shop___BUYER_SIZE , (s__Component_Components___Operators____frame[(this)]) , true))) // INLINED!!
                                call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],i)), (j)))),false) // INLINED!!
                                call s__Component__set_onClick(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],i)), (j)))),function sc__Shop___Buyer_onClicked) // INLINED!!
                                call s__Component__set_onScroll(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],i)), (j)))),function sc__Shop___Buyer_onScrolled) // INLINED!!
                                call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],i)), (j))))), (0), ( this)) // INLINED!!
                                call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],i)), (j))))), (1), ( j)) // INLINED!!
                            set j=j + 1
                        endloop
                    endif
                set i=i + 1
            endloop

            return this
        endfunction

        function s__Shop___Buyer_onScroll takes integer this returns nothing
            call s__Shop___Buyer_shift(this,BlzGetTriggerFrameValue() < 0 , GetTriggerPlayer())
        endfunction

        function s__Shop___Buyer_onScrolled takes nothing returns nothing
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!

            if this != 0 then
                call s__Shop___Buyer_shift(this,BlzGetTriggerFrameValue() < 0 , GetTriggerPlayer())
            endif
        endfunction

        function s__Shop___Buyer_onClicked takes nothing returns nothing
            local integer b= (s__Component_array[GetPlayerId(GetTriggerPlayer())]) // INLINED!!
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (0))) // INLINED!!
            local integer i= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (1))) // INLINED!!
            local integer id= GetPlayerId(GetTriggerPlayer())

            if this != 0 then
                if b == s__Shop___Buyer_left[this] then
                    call s__Shop___Buyer_shift(this,false , GetTriggerPlayer())
                elseif b == s__Shop___Buyer_right[this] then
                    call s__Shop___Buyer_shift(this,true , GetTriggerPlayer())
                else
                    call RemoveSavedInteger(Table___ht, (s__Shop___Buyer_current), (GetHandleId((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id)))))) // INLINED!!
                    call SaveUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id), ( (LoadUnitHandle(Table___ht, (((s__HashTable__getindex(s__Shop___Buyer_unit[this],id)))), (i))))) // INLINED!!
                    call SaveInteger(Table___ht, (s__Shop___Buyer_current), (GetHandleId((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id))))), ( this)) // INLINED!!
                    call IssueNeutralTargetOrder(GetTriggerPlayer(), s__Shop_unit[id], "smart", (LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id)))) // INLINED!!
                    call s__Shop___Inventory_show(s__Shop___Buyer_inventory[this],(LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id)))) // INLINED!!
                    call RemoveSavedInteger(Table___ht, (s__Shop___Inventory_selected[(s__Shop___Buyer_inventory[this])]), ((id))) // INLINED!!

                    if GetLocalPlayer() == GetTriggerPlayer() then
                        call s__Button__set_highlighted(((LoadInteger(Table___ht, (s__Shop___Buyer_last[this]), (id)))),false) // INLINED!!
                        call s__Button__set_highlighted(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))),true) // INLINED!!
                        call SaveInteger(Table___ht, (s__Shop___Buyer_last[this]), (id), ( (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i))))) // INLINED!!
                        
                        call s__Shop___Inventory_move(s__Shop___Buyer_inventory[this],FRAMEPOINT_TOP , (s__Component_Components___Operators____frame[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))))]) , FRAMEPOINT_BOTTOM) // INLINED!!
                        call s__Shop___Detail_refresh(s__Shop_details[s__Shop___Buyer_shop[this]],GetTriggerPlayer())
                    endif
                endif
            endif
        endfunction

        function s__Shop___Buyer_onPickup takes nothing returns nothing
            local unit u= GetManipulatingUnit()
            local integer i= GetPlayerId(GetOwningPlayer(u))
            local integer this= (LoadInteger(Table___ht, (s__Shop___Buyer_current), (GetHandleId(u)))) // INLINED!!

            if this != 0 then
                if s__Shop_unit[i] != null then
                    if (LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (i))) == u and IsUnitInRange(u, s__Shop_unit[i], s__Shop_aoe[s__Shop___Buyer_shop[this]]) then // INLINED!!
                        call s__Shop___Inventory_show(s__Shop___Buyer_inventory[this],u)
                        call s__Shop___Detail_refresh(s__Shop_details[s__Shop___Buyer_shop[this]],GetOwningPlayer(u))
                    endif
                endif
            endif

            set u=null
        endfunction

        function s__Shop___Buyer_onDrop takes nothing returns nothing
            local unit u= GetManipulatingUnit()
            local integer i= GetPlayerId(GetOwningPlayer(u))
            local integer this= (LoadInteger(Table___ht, (s__Shop___Buyer_current), (GetHandleId(u)))) // INLINED!!

            if this != 0 then
                if s__Shop_unit[i] != null then
                    if (LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (i))) == u and IsUnitInRange(u, s__Shop_unit[i], s__Shop_aoe[s__Shop___Buyer_shop[this]]) then // INLINED!!
                        call s__Shop___Detail_refresh(s__Shop_details[s__Shop___Buyer_shop[this]],GetOwningPlayer(u))
                    endif
                endif
            endif

            set u=null
        endfunction

        function s__Shop___Buyer_onInit takes nothing returns nothing
            set s__Shop___Buyer_current=s__Table_create()

            call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM , function s__Shop___Buyer_onPickup)
            call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_DROP_ITEM , function s__Shop___Buyer_onDrop)
        endfunction


        function s__Shop___Favorites_destroy takes integer this returns nothing
            local integer i= 0
            local integer j

            loop
                exitwhen i >= bj_MAX_PLAYER_SLOTS
                    if GetPlayerController(Player(i)) == MAP_CONTROL_USER then
                        set j=0

                        loop
                            exitwhen j == Shop___CATEGORY_COUNT
                                call s__HashTable_remove(Shop___table,(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],i)), (j)))) // INLINED!!
                                call s__Button_destroy(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],i)), (j))))) // INLINED!!
                            set j=j + 1
                        endloop

                        call s__HashTable_remove(s__Shop___Favorites_button[this],i)
                        call s__HashTable_remove(s__Shop___Favorites_item[this],i)
                    endif
                set i=i + 1
            endloop

            call s__Button_destroy(s__Shop___Favorites_clear[this])
            call s__Table_destroy(s__Shop___Favorites_count[this])
            call s__Table_destroy(((s__Shop___Favorites_item[this]))) // INLINED!!
            call s__Table_destroy(((s__Shop___Favorites_button[this]))) // INLINED!!
        endfunction

        function s__Shop___Favorites_has takes integer this,integer id,player p returns boolean
            local integer i= 0
            local integer pid= GetPlayerId(p)

            loop
                exitwhen i > (LoadInteger(Table___ht, (((s__Shop___Favorites_count[this]))), (pid))) // INLINED!!
                    if s__Item_id[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],pid)), (i))))] == id then // INLINED!!
                        return true
                    endif
                set i=i + 1
            endloop

            return false
        endfunction

        function s__Shop___Favorites_reset takes integer this,player p returns nothing
            local integer id= GetPlayerId(p)

            loop
                exitwhen (LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id))) == - 1 // INLINED!!
                    if GetLocalPlayer() == p then
                        call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],id)), ((LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id))))))),false) // INLINED!!
                        call s__Button_tag(((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,s__Shop___Favorites_shop[this])), (s__Item_id[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],id)), ((LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id)))))))])))),null , 0 , 0 , 0) // INLINED!!
                    endif
                call SaveInteger(Table___ht, (s__Shop___Favorites_count[this]), (id), ( (LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id))) - 1)) // INLINED!!
            endloop
        endfunction

        function s__Shop___Favorites_remove takes integer this,integer i,player p returns nothing
            local integer j= 0
            local integer k= 0
            local integer id= GetPlayerId(p)

            if s__Shop___Favorites_has(this,s__Item_id[i] , p) then
                loop
                    exitwhen j > (LoadInteger(Table___ht, (((s__Shop___Favorites_count[this]))), (id))) // INLINED!!
                        if s__Item_id[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],id)), (j))))] == s__Item_id[i] then // INLINED!!
                            set k=j

                            if GetLocalPlayer() == p then
                                call s__Button_tag(((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,s__Shop___Favorites_shop[this])), (s__Item_id[i])))),null , 0 , 0 , 0) // INLINED!!
                            endif
                
                            loop
                                exitwhen k >= (LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id))) // INLINED!!
                                    call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],id)), (k), ( (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],id)), (k + 1))))) // INLINED!!
                
                                    if GetLocalPlayer() == p then
                                        call s__Backdrop__set_texture(s__Component_image[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],id)), (k)))))],((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],id)), (k)))))])))), (4))))) // INLINED!!
                                        call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],id)), (k))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],id)), (k)))))])))), (5))))) // INLINED!!
                                        call BlzFrameSetText(s__Tooltip_nameFrame[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],id)), (k))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],id)), (k)))))])))), (3))))) // INLINED!!
                                        call s__Tooltip__set_icon(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],id)), (k))))],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],id)), (k)))))])))), (4)))) // INLINED!!
                                    endif
                                set k=k + 1
                            endloop
                
                            if GetLocalPlayer() == p then
                                call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],id)), ((LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id))))))),false) // INLINED!!
                            endif
                            
                            call SaveInteger(Table___ht, (s__Shop___Favorites_count[this]), (id), ( (LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id))) - 1)) // INLINED!!
                            exitwhen true
                        endif
                    set j=j + 1
                endloop
            endif
        endfunction

        function s__Shop___Favorites_add takes integer this,integer i,player p returns nothing
            local integer id= GetPlayerId(p)

            if (LoadInteger(Table___ht, (((s__Shop___Favorites_count[this]))), (id))) < Shop___CATEGORY_COUNT - 1 then // INLINED!!
                if not s__Shop___Favorites_has(this,s__Item_id[i] , p) then
                    call SaveInteger(Table___ht, (s__Shop___Favorites_count[this]), (id), ( (LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id))) + 1)) // INLINED!!
                    call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],id)), ((LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id)))), ( i)) // INLINED!!

                    if GetLocalPlayer() == p then
                        call s__Backdrop__set_texture(s__Component_image[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],id)), ((LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id))))))))],((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (4))))) // INLINED!!
                        call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],id)), ((LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id)))))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (5))))) // INLINED!!
                        call BlzFrameSetText(s__Tooltip_nameFrame[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],id)), ((LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id)))))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (3))))) // INLINED!!
                        call s__Tooltip__set_icon(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],id)), ((LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id)))))))],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (4)))) // INLINED!!
                        call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],id)), ((LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id))))))),true) // INLINED!!
                        call s__Button_tag(((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,s__Shop___Favorites_shop[this])), (s__Item_id[i])))),Shop___TAG_MODEL , Shop___TAG_SCALE , Shop___TAG_XOFFSET , Shop___TAG_YOFFSET) // INLINED!!
                    endif
                endif
            endif
        endfunction

        function s__Shop___Favorites_create takes integer shop returns integer
            local integer this= s__Shop___Favorites__allocate(Shop___X + ( Shop___WIDTH - 0.027 ) , 0 , Shop___SIDE_WIDTH , Shop___SIDE_HEIGHT , (s__Component_Components___Operators____frame[(shop)]) , "EscMenuBackdrop") // INLINED!!
            local integer i= 0
            local integer j
            
            set s__Shop___Favorites_shop[this]=shop
            set s__Shop___Favorites_count[this]=s__Table_create()
            set s__Shop___Favorites_item[this]=(s__Table_create()) // INLINED!!
            set s__Shop___Favorites_button[this]=(s__Table_create()) // INLINED!!
            set s__Shop___Favorites_clear[this]=s__Button_create(0.027 , 0.015 , Shop___TOOLBAR_BUTTON_SIZE , Shop___TOOLBAR_BUTTON_SIZE , (s__Component_Components___Operators____frame[(this)]) , true) // INLINED!!
            call s__Backdrop__set_texture(s__Component_image[(s__Shop___Favorites_clear[this])],(Shop___CLEAR_ICON)) // INLINED!!
            call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[s__Shop___Favorites_clear[this]])], ("Clear")) // INLINED!!
            call s__Component__set_onClick(s__Shop___Favorites_clear[this],function sc__Shop___Favorites_onClear)
            call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,s__Shop___Favorites_clear[this])), (0), ( this)) // INLINED!!
            
            loop
                exitwhen i >= bj_MAX_PLAYER_SLOTS
                    if GetPlayerController(Player(i)) == MAP_CONTROL_USER then
                        set j=0
                        call SaveInteger(Table___ht, (s__Shop___Favorites_count[this]), (i), ( - 1)) // INLINED!!

                        loop
                            exitwhen j == Shop___CATEGORY_COUNT
                                call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],i)), (j), ( s__Button_create(0.023750 , - ( 0.021500 + Shop___CATEGORY_SIZE * j + Shop___CATEGORY_GAP ) , Shop___CATEGORY_SIZE , Shop___CATEGORY_SIZE , (s__Component_Components___Operators____frame[(this)]) , false))) // INLINED!!
                                call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],i)), (j)))),false) // INLINED!!
                                call s__Tooltip__set_point(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],i)), (j))))],FRAMEPOINT_TOPRIGHT) // INLINED!!
                                call s__Component__set_onClick(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],i)), (j)))),function sc__Shop___Favorites_onClicked) // INLINED!!
                                call s__Component__set_onRightClick(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],i)), (j)))),function sc__Shop___Favorites_onRightClicked) // INLINED!!
                                call s__Component__set_onMiddleClick(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],i)), (j)))),function sc__Shop___Favorites_onMiddleClicked) // INLINED!!
                                call s__Component__set_onDoubleClick(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],i)), (j)))),function sc__Shop___Favorites_onDoubleClicked) // INLINED!!
                                call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],i)), (j))))), (0), ( this)) // INLINED!!
                                call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],i)), (j))))), (1), ( j)) // INLINED!!
            
                                if j > 6 then
                                    call s__Tooltip__set_point(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],i)), (j))))],FRAMEPOINT_BOTTOMRIGHT) // INLINED!!
                                endif
                            set j=j + 1
                        endloop
                    endif
                set i=i + 1
            endloop

            return this
        endfunction

        function s__Shop___Favorites_onClear takes nothing returns nothing
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!

            if this != 0 then
                call s__Shop___Favorites_reset(this,GetTriggerPlayer())
            endif
        endfunction

        function s__Shop___Favorites_onClicked takes nothing returns nothing
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!

            if this != 0 then
                call sc__Shop_detail(s__Shop___Favorites_shop[this],(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],GetPlayerId(GetTriggerPlayer()))), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (1)))))) , GetTriggerPlayer()) // INLINED!!
            endif
        endfunction

        function s__Shop___Favorites_onMiddleClicked takes nothing returns nothing
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!

            if this != 0 then
                call s__Shop___Favorites_remove(this,(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],GetPlayerId(GetTriggerPlayer()))), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (1)))))) , GetTriggerPlayer()) // INLINED!!
            endif
        endfunction

        function s__Shop___Favorites_onDoubleClicked takes nothing returns nothing
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!

            if this != 0 then
                if sc__Shop_buy(s__Shop___Favorites_shop[this],(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],GetPlayerId(GetTriggerPlayer()))), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (1)))))) , GetTriggerPlayer()) then // INLINED!!
                    if GetLocalPlayer() == GetTriggerPlayer() then
                        call s__Button_play(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],GetPlayerId(GetTriggerPlayer()))), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (1))))))),Shop___SPRITE_MODEL , Shop___SPRITE_SCALE , 0) // INLINED!!
                    endif
                endif
            endif
        endfunction

        function s__Shop___Favorites_onRightClicked takes nothing returns nothing
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!

            if this != 0 then
                if sc__Shop_buy(s__Shop___Favorites_shop[this],(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],GetPlayerId(GetTriggerPlayer()))), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (1)))))) , GetTriggerPlayer()) then // INLINED!!
                    if GetLocalPlayer() == GetTriggerPlayer() then
                        call s__Button_play(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],GetPlayerId(GetTriggerPlayer()))), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (1))))))),Shop___SPRITE_MODEL , Shop___SPRITE_SCALE , 0) // INLINED!!
                    endif
                endif
            endif
        endfunction


        function s__Shop___Category_destroy takes integer this returns nothing
            call s__Button_destroy(s__Shop___Category_clear[this])
            call s__Button_destroy(s__Shop___Category_logic[this])

            loop
                exitwhen s__Shop___Category_count[this] == - 1
                    call s__HashTable_remove(Shop___table,s___Shop___Category_button[s__Shop___Category_button[this]+s__Shop___Category_count[this]])
                    call s__Button_destroy(s___Shop___Category_button[s__Shop___Category_button[this]+s__Shop___Category_count[this]])
                set s__Shop___Category_count[this]=s__Shop___Category_count[this] - 1
            endloop
        endfunction

        function s__Shop___Category_reset takes integer this returns nothing
            local integer i= 0

            set s__Shop___Category_active[this]=0

            loop
                exitwhen i == Shop___CATEGORY_COUNT
                    call s__Component__set_active(s___Shop___Category_button[s__Shop___Category_button[this]+i],false)
                set i=i + 1
            endloop

            call sc__Shop_filter(s__Shop___Category_shop[this],s__Shop___Category_active[this] , s__Shop___Category_andLogic[this])
        endfunction

        function s__Shop___Category_add takes integer this,string icon,string description returns integer
            if s__Shop___Category_count[this] < Shop___CATEGORY_COUNT then
                set s__Shop___Category_count[this]=s__Shop___Category_count[this] + 1
                set s___Shop___Category_value[s__Shop___Category_value[this]+s__Shop___Category_count[this]]=R2I(Pow(2, s__Shop___Category_count[this]))
                set s___Shop___Category_button[s__Shop___Category_button[this]+s__Shop___Category_count[this]]=s__Button_create(0.023750 , - ( 0.021500 + Shop___CATEGORY_SIZE * s__Shop___Category_count[this] + Shop___CATEGORY_GAP ) , Shop___CATEGORY_SIZE , Shop___CATEGORY_SIZE , (s__Component_Components___Operators____frame[(this)]) , true) // INLINED!!
                call s__Backdrop__set_texture(s__Component_image[(s___Shop___Category_button[s__Shop___Category_button[this]+s__Shop___Category_count[this]])],(icon)) // INLINED!!
                call s__Component__set_active(s___Shop___Category_button[s__Shop___Category_button[this]+s__Shop___Category_count[this]],false)
                call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[s___Shop___Category_button[s__Shop___Category_button[this]+s__Shop___Category_count[this]]])], (description)) // INLINED!!
                call s__Component__set_onClick(s___Shop___Category_button[s__Shop___Category_button[this]+s__Shop___Category_count[this]],function sc__Shop___Category_onClicked)
                call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,s___Shop___Category_button[s__Shop___Category_button[this]+s__Shop___Category_count[this]])), (0), ( this)) // INLINED!!
                call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,s___Shop___Category_button[s__Shop___Category_button[this]+s__Shop___Category_count[this]])), (1), ( s__Shop___Category_count[this])) // INLINED!!

                return s___Shop___Category_value[s__Shop___Category_value[this]+s__Shop___Category_count[this]]
            else
                call BJDebugMsg("Maximum number os categories reached.")
            endif

            return 0
        endfunction

        function s__Shop___Category_create takes integer shop returns integer
            local integer this= s__Shop___Category__allocate(Shop___X - 0.048 , 0 , Shop___SIDE_WIDTH , Shop___SIDE_HEIGHT , (s__Component_Components___Operators____frame[(shop)]) , "EscMenuBackdrop") // INLINED!!

            set s__Shop___Category_count[this]=- 1
            set s__Shop___Category_active[this]=0
            set s__Shop___Category_shop[this]=shop
            set s__Shop___Category_andLogic[this]=true
            set s__Shop___Category_clear[this]=s__Button_create(0.028 , 0.015 , Shop___TOOLBAR_BUTTON_SIZE , Shop___TOOLBAR_BUTTON_SIZE , (s__Component_Components___Operators____frame[(this)]) , true) // INLINED!!
            call s__Backdrop__set_texture(s__Component_image[(s__Shop___Category_clear[this])],(Shop___CLEAR_ICON)) // INLINED!!
            call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[s__Shop___Category_clear[this]])], ("Clear")) // INLINED!!
            call s__Component__set_onClick(s__Shop___Category_clear[this],function sc__Shop___Category_onClear)
            set s__Shop___Category_logic[this]=s__Button_create(Shop___X + 0.048 , 0.015 , Shop___TOOLBAR_BUTTON_SIZE , Shop___TOOLBAR_BUTTON_SIZE , (s__Component_Components___Operators____frame[(this)]) , true) // INLINED!!
            call s__Backdrop__set_texture(s__Component_image[(s__Shop___Category_logic[this])],(Shop___LOGIC_ICON)) // INLINED!!
            call s__Component__set_active(s__Shop___Category_logic[this],false)
            call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[s__Shop___Category_logic[this]])], ("AND")) // INLINED!!
            call s__Component__set_onClick(s__Shop___Category_logic[this],function sc__Shop___Category_onLogic)
            call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,s__Shop___Category_clear[this])), (0), ( this)) // INLINED!!
            call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,s__Shop___Category_logic[this])), (0), ( this)) // INLINED!!

            return this
        endfunction

        function s__Shop___Category_onClicked takes nothing returns nothing
            local integer category= (s__Component_array[GetPlayerId(GetTriggerPlayer())]) // INLINED!!
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,category)), (0))) // INLINED!!

            if this != 0 and GetLocalPlayer() == GetTriggerPlayer() then
                call s__Component__set_active(category,not (s__Component_isActive[(category)])) // INLINED!!

                if (s__Component_isActive[(category)]) then // INLINED!!
                    set s__Shop___Category_active[this]=s__Shop___Category_active[this] + s___Shop___Category_value[s__Shop___Category_value[this]+(LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,category)), (1)))] // INLINED!!
                else
                    set s__Shop___Category_active[this]=s__Shop___Category_active[this] - s___Shop___Category_value[s__Shop___Category_value[this]+(LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,category)), (1)))] // INLINED!!
                endif

                call sc__Shop_filter(s__Shop___Category_shop[this],s__Shop___Category_active[this] , s__Shop___Category_andLogic[this])
            endif
        endfunction

        function s__Shop___Category_onClear takes nothing returns nothing
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!

            if this != 0 and GetLocalPlayer() == GetTriggerPlayer() then
                call s__Shop___Category_reset(this)
            endif
        endfunction

        function s__Shop___Category_onLogic takes nothing returns nothing
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!

            if this != 0 and GetLocalPlayer() == GetTriggerPlayer() then
                call s__Component__set_active(s__Shop___Category_logic[this],not (s__Component_isActive[(s__Shop___Category_logic[this])])) // INLINED!!
                set s__Shop___Category_andLogic[this]=not s__Shop___Category_andLogic[this]

                if s__Shop___Category_andLogic[this] then
                    call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[s__Shop___Category_logic[this]])], ("AND")) // INLINED!!
                else
                    call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[s__Shop___Category_logic[this]])], ("OR")) // INLINED!!
                endif

                call sc__Shop_filter(s__Shop___Category_shop[this],s__Shop___Category_active[this] , s__Shop___Category_andLogic[this])
            endif
        endfunction
    



        function s__Shop__set_visible takes integer this,boolean visibility returns nothing
            set s__Shop_isVisible[this]=visibility
            call s__Shop___Buyer__set_visible(s__Shop_buyer[this],visibility)

            if not visibility then
                set s__Shop___Buyer_index[s__Shop_buyer[this]]=0
            else
                if sc__Component__get_visible(s__Shop_details[this]) then
                    call s__Shop___Detail_refresh(s__Shop_details[this],GetLocalPlayer())
                endif
            endif
            
            call BlzFrameSetVisible((s__Component_Components___Operators____frame[(this)]), visibility) // INLINED!!
        endfunction

        function s__Shop__get_visible takes integer this returns boolean
            return s__Shop_isVisible[this]
        endfunction

        function s__Shop_destroy takes integer this returns nothing
            local integer i= 0
            local integer slot= (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop_itempool,this)), (0))) // INLINED!!

            loop
                exitwhen i >= bj_MAX_PLAYER_SLOTS
                    if GetPlayerController(Player(i)) == MAP_CONTROL_USER then
                        call s__Shop___Transaction_clear(this , i)
                    endif
                set i=i + 1
            endloop

            loop
                exitwhen slot == 0
                    call s__Shop___Slot_destroy(slot)
                set slot=s__Shop___Slot_next[slot]
            endloop

            call s__HashTable_remove(Shop___table,s__Shop_id[this])
            call s__HashTable_remove(Shop___table,this)
            call s__HashTable_remove(s__Shop_itempool,this)
            call s__Button_destroy(s__Shop_break[this])
            call s__Button_destroy(s__Shop_revert[this])
            call s__Shop___Category_destroy(s__Shop_category[this])
            call s__Shop___Favorites_destroy(s__Shop_favorites[this])
            call s__Shop___Detail_destroy(s__Shop_details[this])
            call s__Shop___Buyer_destroy(s__Shop_buyer[this])
        endfunction

        function s__Shop_canBuy takes integer this,integer i,player p returns boolean
            local integer component
            local boolean flag= true
            local integer j= 0


            if i != 0 and sc__Shop_has(this,s__Item_id[i]) and (LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((GetPlayerId(p))))) != null then // INLINED!!
                if (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) > 0 then // INLINED!!
                    loop
                        exitwhen j == (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) or not flag // INLINED!!
                            set flag=s__Shop_canBuy(this,s__Item_get((LoadInteger(Table___ht, ((s__HashTable__getindex(s__Item_itemtype,s__Item_id[(i)]))), (j)))) , p) // INLINED!!
                        set j=j + 1
                    endloop
                endif

                return flag
            endif

            return false
        endfunction

        function s__Shop_buy takes integer this,integer i,player p returns boolean
            local integer id= GetPlayerId(p)
            local integer cost= s__Item_cost(i,(LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id))))) // INLINED!!
            local item new
            
            if s__Shop_canBuy(this,i , p) and cost <= GetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD) then
                set new=CreateItem(s__Item_id[i], GetUnitX((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id))))), GetUnitY((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))))) // INLINED!!

                call s__Shop___Inventory_removeComponents(s__Shop___Buyer_inventory[s__Shop_buyer[this]],i , s__Shop___Transaction_create(this , (LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))) , i , cost , "buy")) // INLINED!!

                if not UnitAddItem((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))), new) then // INLINED!!
                    call IssueTargetItemOrder((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))), "smart", new) // INLINED!!
                endif

                call s__Shop___Inventory_show(s__Shop___Buyer_inventory[s__Shop_buyer[this]],(LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id))))) // INLINED!!
                call s__Shop___Detail_refresh(s__Shop_details[this],p)
                call SetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD) - cost)
                call s__Shop___Sound_success(p)

                set new=null

                return true
            else
                if cost > GetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD) then
                    call s__Shop___Sound_gold(p)
                else
                    call s__Shop___Sound_error(p)
                endif

                return false
            endif

            return false
        endfunction

        function s__Shop_sell takes integer this,integer i,player p,integer slot returns boolean
            local integer cost
            local integer gold
            local integer charges
            local integer id= GetPlayerId(p)
            local boolean sold= false

            if i != 0 and (LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))) != null then // INLINED!!
                set charges=GetItemCharges(UnitItemInSlot((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))), slot)) // INLINED!!

                if charges == 0 then
                    set charges=1
                endif

                set gold=GetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD)
                set cost=R2I(R2I((LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (1))) / (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (2)))) * charges * s__Shop_tax[this]) // INLINED!!

                if GetItemTypeId(UnitItemInSlot((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))), slot)) == s__Item_id[i] then // INLINED!!
                    set sold=true

                    call s__Shop___Transaction_create(this , (LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))) , i , cost , "sell") // INLINED!!
                    call RemoveItem(UnitItemInSlot((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))), slot)) // INLINED!!
                    call SetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD, gold + cost)
                    call s__Shop___Inventory_show(s__Shop___Buyer_inventory[s__Shop_buyer[this]],(LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id))))) // INLINED!!
                    call s__Shop___Detail_refresh(s__Shop_details[this],p)
                endif

                call s__Shop___Sound_success(p)
            else
                call s__Shop___Sound_error(p)
            endif

            return sold
        endfunction

        function s__Shop_dismantle takes integer this,integer i,player p,integer slot returns nothing
            local integer j= 0
            local integer slots= 0
            local integer id= GetPlayerId(p)

            if i != 0 and (LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))) != null then // INLINED!!
                if (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) > 0 then // INLINED!!
                    loop
                        exitwhen j == UnitInventorySize((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id))))) // INLINED!!
                            if UnitItemInSlot((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))), j) == null then // INLINED!!
                                set slots=slots + 1
                            endif
                        set j=j + 1
                    endloop

                    if ( slots + 1 ) >= (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) then // INLINED!!
                        set j=0

                        call s__Shop___Transaction_create(this , (LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))) , i , 0 , "dismantle") // INLINED!!
                        call RemoveItem(UnitItemInSlot((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))), slot)) // INLINED!!

                        loop
                            exitwhen j == (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) // INLINED!!
                                call UnitAddItemById((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))), s__Item_id[s__Item_get((LoadInteger(Table___ht, ((s__HashTable__getindex(s__Item_itemtype,s__Item_id[(i)]))), (j))))]) // INLINED!!
                            set j=j + 1
                        endloop

                        call s__Shop___Sound_success(p)
                        call s__Shop___Inventory_show(s__Shop___Buyer_inventory[s__Shop_buyer[this]],(LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id))))) // INLINED!!
                        call s__Shop___Detail_refresh(s__Shop_details[this],p)
                    else
                        call s__Shop___Sound_error(p)
                    endif
                else
                    call s__Shop___Sound_error(p)
                endif
            else
                call s__Shop___Sound_error(p)
            endif
        endfunction

        function s__Shop_undo takes integer this,player p returns nothing
            local integer id= GetPlayerId(p)

            if s__Shop___Transaction_count(this , id) > 0 then
                call s__Shop___Transaction_rollback(s__Shop___Transaction_last(this , id))
                call s__Shop___Inventory_show(s__Shop___Buyer_inventory[s__Shop_buyer[this]],(LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id))))) // INLINED!!
                call s__Shop___Detail_refresh(s__Shop_details[this],p)
            else
                call s__Shop___Sound_error(p)
            endif
        endfunction

        function s__Shop_scroll takes integer this,boolean down returns boolean
            local integer slot= s__Shop_first[this]
            
            if ( down and s__Shop_tail[this] != s__Shop_last[this] ) or ( not down and s__Shop_head[this] != s__Shop_first[this] ) then
                loop
                    exitwhen slot == 0
                        if down then
                            call s__Shop___Slot_move(slot,(s__Shop___Slot_current_row[(slot)]) - 1 , (s__Shop___Slot_current_column[(slot)])) // INLINED!!
                        else
                            call s__Shop___Slot_move(slot,(s__Shop___Slot_current_row[(slot)]) + 1 , (s__Shop___Slot_current_column[(slot)])) // INLINED!!
                        endif

                        call sc__Component__set_visible(slot,(s__Shop___Slot_current_row[(slot)]) >= 0 and (s__Shop___Slot_current_row[(slot)]) <= s__Shop_rows[this] - 1 and (s__Shop___Slot_current_column[(slot)]) >= 0 and (s__Shop___Slot_current_column[(slot)]) <= s__Shop_columns[this] - 1) // INLINED!!

                        if (s__Shop___Slot_current_row[(slot)]) == 0 and (s__Shop___Slot_current_column[(slot)]) == 0 then // INLINED!!
                            set s__Shop_head[this]=slot
                        endif

                        if ( (s__Shop___Slot_current_row[(slot)]) == s__Shop_rows[this] - 1 and (s__Shop___Slot_current_column[(slot)]) == s__Shop_columns[this] - 1 ) or ( slot == s__Shop_last[this] and sc__Component__get_visible(slot) ) then // INLINED!!
                            set s__Shop_tail[this]=slot
                        endif
                    set slot=s__Shop___Slot_right[slot]
                endloop

                return true
            endif

            return false
        endfunction

        function s__Shop_scrollTo takes integer this,integer i,player p returns nothing
            local integer slot

            if i != 0 and GetLocalPlayer() == p then
                set slot=((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,this)), (s__Item_id[i])))) // INLINED!!
    
                loop
                    exitwhen sc__Component__get_visible(slot) or not s__Shop_scroll(this,true)
                endloop
            endif
        endfunction

        function s__Shop_filter takes integer this,integer categories,boolean andLogic returns nothing
            local integer slot= (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop_itempool,this)), (0))) // INLINED!!
            local boolean process
            local integer i= - 1

            set s__Shop_size[this]=0
            set s__Shop_first[this]=0
            set s__Shop_last[this]=0
            set s__Shop_head[this]=0
            set s__Shop_tail[this]=0

            loop
                exitwhen slot == 0
                    if andLogic then
                        set process=categories == 0 or BlzBitAnd((LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(s__Shop___Slot_item[slot])])), (6))), categories) >= categories // INLINED!!
                    else
                        set process=categories == 0 or BlzBitAnd((LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(s__Shop___Slot_item[slot])])), (6))), categories) > 0 // INLINED!!
                    endif

                    if s__EditBox__get_text(s__Shop_edit[this]) != "" and s__EditBox__get_text(s__Shop_edit[this]) != null then
                        set process=process and sc__Shop_find(this,StringCase((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(s__Shop___Slot_item[slot])])))), (3))), false) , StringCase(s__EditBox__get_text(s__Shop_edit[this]), false)) // INLINED!!
                    endif

                    if process then
                        set i=i + 1
                        set s__Shop_size[this]=s__Shop_size[this] + 1
                        call s__Shop___Slot_move(slot,R2I(i / s__Shop_columns[this]) , ModuloInteger(i, s__Shop_columns[this]))
                        call sc__Component__set_visible(slot,(s__Shop___Slot_current_row[(slot)]) >= 0 and (s__Shop___Slot_current_row[(slot)]) <= s__Shop_rows[this] - 1 and (s__Shop___Slot_current_column[(slot)]) >= 0 and (s__Shop___Slot_current_column[(slot)]) <= s__Shop_columns[this] - 1) // INLINED!!
                    
                        if i > 0 then
                            set s__Shop___Slot_left[slot]=s__Shop_last[this]
                            set s__Shop___Slot_right[s__Shop_last[this]]=slot
                        else
                            set s__Shop_first[this]=slot
                            set s__Shop_head[this]=s__Shop_first[this]
                        endif

                        if sc__Component__get_visible(slot) then
                            set s__Shop_tail[this]=slot
                        endif

                        set s__Shop_last[this]=slot
                    else
                        call sc__Component__set_visible(slot,false)
                    endif
                set slot=s__Shop___Slot_next[slot]
            endloop
        endfunction

        function s__Shop_select takes integer this,integer i,player p returns nothing
            local integer id= GetPlayerId(p)

            if i != 0 and GetLocalPlayer() == p then
                if (HaveSavedInteger(Table___ht, (s__HashTable__getindex(Shop___table,this)), (id))) then // INLINED!!
                    call s__Button_display(((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,this)), (id)))),null , 0 , 0 , 0) // INLINED!!
                endif

                call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,this)), (id), ( ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,this)), (s__Item_id[i])))))) // INLINED!!
                call s__Button_display(((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,this)), (id)))),Shop___ITEM_HIGHLIGHT , Shop___HIGHLIGHT_SCALE , Shop___HIGHLIGHT_XOFFSET , Shop___HIGHLIGHT_YOFFSET) // INLINED!!
            endif
        endfunction

        function s__Shop_detail takes integer this,integer i,player p returns nothing
            if i != 0 then
                if GetLocalPlayer() == p then
                    set s__Shop_rows[this]=Shop___DETAILED_ROWS
                    set s__Shop_columns[this]=Shop___DETAILED_COLUMNS

                    if not s__Shop_detailed[this] then
                        set s__Shop_detailed[this]=true
                        call s__Shop_filter(this,s__Shop___Category_active[s__Shop_category[this]] , s__Shop___Category_andLogic[s__Shop_category[this]])
                    endif
                endif

                if not sc__Component__get_visible(s__Shop_details[this]) then
                    call s__Shop_scrollTo(this,i , p)
                endif

                call s__Shop_select(this,i , p)
                call s__Shop___Detail_show(s__Shop_details[this],i , p)
            else
                if GetLocalPlayer() == p then
                    set s__Shop_rows[this]=Shop___ROWS
                    set s__Shop_columns[this]=Shop___COLUMNS
                    set s__Shop_detailed[this]=false
                    call sc__Component__set_visible(s__Shop_details[this],false)
                    call s__Shop_filter(this,s__Shop___Category_active[s__Shop_category[this]] , s__Shop___Category_andLogic[s__Shop_category[this]])
                    call s__Shop_scrollTo(this,s__Shop___Slot_item[((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,this)), (GetPlayerId(p)))))] , p) // INLINED!!
                endif
            endif
        endfunction

        function s__Shop_has takes integer this,integer id returns boolean
            return (HaveSavedInteger(Table___ht, (s__HashTable__getindex(Shop___table,this)), (id))) // INLINED!!
        endfunction

        function s__Shop_find takes integer this,string source,string target returns boolean
            local integer sourceLength= StringLength(source)
            local integer targetLenght= StringLength(target)
            local integer i= 0

            if targetLenght <= sourceLength then
                loop
                    exitwhen i > sourceLength - targetLenght
                        if SubString(source, i, i + targetLenght) == target then
                            return true
                        endif
                    set i=i + 1
                endloop
            endif

            return false
        endfunction

        function s__Shop_addCategory takes integer id,string icon,string description returns integer
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,id)), (0))) // INLINED!!

            if this != 0 then
                return s__Shop___Category_add(s__Shop_category[this],icon , description)
            endif

            return 0
        endfunction

        function s__Shop_addItem takes integer id,integer itemId,integer categories returns nothing
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,id)), (0))) // INLINED!!
            local integer slot
            local integer i

            if this != 0 then
                if not (HaveSavedInteger(Table___ht, (s__HashTable__getindex(Shop___table,this)), (itemId))) then // INLINED!!
                    set i=s__Item_get(itemId)

                    if i != 0 then
                        set s__Shop_size[this]=s__Shop_size[this] + 1
                        set s__Shop_index[this]=s__Shop_index[this] + 1
                        call s__Item__set_categories(i,categories)
                        set slot=s__Shop___Slot_create(this , i , 0 , 0 , (s__Component_Components___Operators____frame[(this)])) // INLINED!!
                        call s__Shop___Slot__set_row(slot,R2I(s__Shop_index[this] / Shop___COLUMNS))
                        call s__Shop___Slot__set_column(slot,ModuloInteger(s__Shop_index[this], Shop___COLUMNS))
                        call sc__Component__set_visible(slot,(s__Shop___Slot_current_row[(slot)]) >= 0 and (s__Shop___Slot_current_row[(slot)]) <= Shop___ROWS - 1 and (s__Shop___Slot_current_column[(slot)]) >= 0 and (s__Shop___Slot_current_column[(slot)]) <= Shop___COLUMNS - 1) // INLINED!!

                        if s__Shop_index[this] > 0 then
                            set s__Shop___Slot_prev[slot]=s__Shop_last[this]
                            set s__Shop___Slot_left[slot]=s__Shop_last[this]
                            set s__Shop___Slot_next[s__Shop_last[this]]=slot
                            set s__Shop___Slot_right[s__Shop_last[this]]=slot
                        else
                            set s__Shop_first[this]=slot
                            set s__Shop_head[this]=slot
                        endif

                        if sc__Component__get_visible(slot) then
                            set s__Shop_tail[this]=slot
                        endif

                        set s__Shop_last[this]=slot
                        call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,this)), (itemId), ( slot)) // INLINED!!
                        call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop_itempool,this)), (s__Shop_index[this]), ( slot)) // INLINED!!
                    else
                        call BJDebugMsg("Invalid item code: " + A2S(itemId))
                    endif
                else
                    call BJDebugMsg("The item " + GetObjectName(itemId) + " is already registered for the shop " + GetObjectName(id))
                endif
            endif
        endfunction

        function s__Shop_create takes integer id,real aoe,real tax returns integer
            local integer this
            local integer i= 0

            if not (HaveSavedInteger(Table___ht, (s__HashTable__getindex(Shop___table,id)), (0))) then // INLINED!!
                set this=s__Shop__allocate(Shop___X , Shop___Y , Shop___WIDTH , Shop___HEIGHT , BlzGetFrameByName("ConsoleUIBackdrop", 0) , "EscMenuBackdrop")
                set s__Shop_id[this]=id
                set s__Shop_aoe[this]=aoe
                set s__Shop_tax[this]=tax
                set s__Shop_first[this]=0
                set s__Shop_last[this]=0
                set s__Shop_head[this]=0
                set s__Shop_tail[this]=0
                set s__Shop_size[this]=0
                set s__Shop_index[this]=- 1
                set s__Shop_rows[this]=Shop___ROWS
                set s__Shop_columns[this]=Shop___COLUMNS
                set s__Shop_count=s__Shop_count + 1
                set s__Shop_detailed[this]=false
                set s__Shop_scrolls[this]=(s__Table_create()) // INLINED!!
                set s__Shop_buyer[this]=s__Shop___Buyer_create(this)
                set s__Shop_details[this]=s__Shop___Detail_create(this)
                set s__Shop_category[this]=s__Shop___Category_create(this)
                set s__Shop_favorites[this]=s__Shop___Favorites_create(this)
                set s__Shop_edit[this]=s__EditBox_create(0.021 , 0.02 , Shop___EDIT_WIDTH , Shop___EDIT_HEIGHT , (s__Component_Components___Operators____frame[(this)]) , "EscMenuEditBoxTemplate") // INLINED!!
                call s__EditBox__set_onText(s__Shop_edit[this],function sc__Shop_onSearch)
                set s__Shop_close[this]=s__Button_create(( Shop___WIDTH - 2 * Shop___TOOLBAR_BUTTON_SIZE ) , 0.015000 , Shop___TOOLBAR_BUTTON_SIZE , Shop___TOOLBAR_BUTTON_SIZE , (s__Component_Components___Operators____frame[(this)]) , true) // INLINED!!
                call s__Backdrop__set_texture(s__Component_image[(s__Shop_close[this])],(Shop___CLOSE_ICON)) // INLINED!!
                call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[s__Shop_close[this]])], ("Close")) // INLINED!!
                call s__Component__set_onClick(s__Shop_close[this],function sc__Shop_onClose)
                set s__Shop_break[this]=s__Button_create(( Shop___WIDTH - 2 * Shop___TOOLBAR_BUTTON_SIZE - 0.0205 ) , 0.015000 , Shop___TOOLBAR_BUTTON_SIZE , Shop___TOOLBAR_BUTTON_SIZE , (s__Component_Components___Operators____frame[(this)]) , true) // INLINED!!
                call s__Backdrop__set_texture(s__Component_image[(s__Shop_break[this])],(Shop___DISMANTLE_ICON)) // INLINED!!
                call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[s__Shop_break[this]])], ("Dismantle")) // INLINED!!
                call s__Component__set_onClick(s__Shop_break[this],function sc__Shop_onDismantle)
                set s__Shop_revert[this]=s__Button_create(( Shop___WIDTH - 2 * Shop___TOOLBAR_BUTTON_SIZE - 0.0410 ) , 0.015000 , Shop___TOOLBAR_BUTTON_SIZE , Shop___TOOLBAR_BUTTON_SIZE , (s__Component_Components___Operators____frame[(this)]) , true) // INLINED!!
                call s__Backdrop__set_texture(s__Component_image[(s__Shop_revert[this])],(Shop___UNDO_ICON)) // INLINED!!
                call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[s__Shop_revert[this]])], ("Undo")) // INLINED!!
                call s__Component__set_onClick(s__Shop_revert[this],function sc__Shop_onUndo)
                call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,id)), (0), ( this)) // INLINED!!
                call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,s__Shop_edit[this])), (0), ( this)) // INLINED!!
                call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,s__Shop_close[this])), (0), ( this)) // INLINED!!
                call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,s__Shop_break[this])), (0), ( this)) // INLINED!!
                call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,s__Shop_revert[this])), (0), ( this)) // INLINED!!

                loop
                    exitwhen i >= bj_MAX_PLAYER_SLOTS
                        if GetPlayerController(Player(i)) == MAP_CONTROL_USER then
                            call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,GetHandleId(Player(i)))), (id), ( this)) // INLINED!!
                            call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,GetHandleId(Player(i)))), (s__Shop_count), ( id)) // INLINED!!
                        endif
                    set i=i + 1
                endloop

                call s__Shop__set_visible(this,false)
            endif

            return this
        endfunction

        function s__Shop_onScroll takes integer this returns nothing
            local integer id= GetPlayerId(GetTriggerPlayer())
            local integer direction= R2I(BlzGetTriggerFrameValue())

            if (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop_scrolls[this],id)), (0))) != direction then // INLINED!!
                call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop_scrolls[this],id)), (0), ( direction)) // INLINED!!
                call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop_scrolls[this],id)), (1), ( 0)) // INLINED!!
            else
                call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop_scrolls[this],id)), (1), ( (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop_scrolls[this],id)), (1))) + 1)) // INLINED!!
            endif

            if GetLocalPlayer() == GetTriggerPlayer() then
                if (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop_scrolls[this],id)), (1))) == 1 then // INLINED!!
                    call s__Shop_scroll(this,direction < 0)
                else
                    call s__Shop_scroll(this,direction < 0)
                endif
            endif
        endfunction

        function s__Shop_onExpire takes nothing returns nothing
            local integer id= GetPlayerId(GetLocalPlayer())
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,GetUnitTypeId(s__Shop_unit[id]))), (0))) // INLINED!!

            if this != 0 then
                call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop_scrolls[this],id)), (1), ( (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop_scrolls[this],id)), (1))) - 1)) // INLINED!!

                if (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop_scrolls[this],id)), (1))) > 0 then // INLINED!!
                    call s__Shop_scroll(this,(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop_scrolls[this],id)), (0))) < 0) // INLINED!!
                else
                    call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop_scrolls[this],id)), (1), ( 0)) // INLINED!!
                endif
            endif
        endfunction

        function s__Shop_onPeriod takes nothing returns nothing
            local integer this
            local unit shop
            local unit u
            local group g
            local integer i= 0

            loop
                exitwhen i >= bj_MAX_PLAYER_SLOTS
                    if GetPlayerController(Player(i)) == MAP_CONTROL_USER then
                        set g=CreateGroup()
                        set shop=s__Shop_unit[i]
                        set this=(LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,GetUnitTypeId(shop))), (0))) // INLINED!!

                        if this != 0 then
                            call GroupClear(s__Shop_group[i])
                            call GroupEnumUnitsInRange(g, GetUnitX(shop), GetUnitY(shop), s__Shop_aoe[this], null)
                            
                            loop
                                set u=FirstOfGroup(g)
                                exitwhen u == null
                                    if ShopFilter(u , Player(i) , shop) then
                                        call GroupAddUnit(s__Shop_group[i], u)
                                    endif
                                call GroupRemoveUnit(g, u)
                            endloop

                            call s__Shop___Buyer_update(s__Shop_buyer[this],s__Shop_group[i] , i)
                        endif

                        call DestroyGroup(g)
                    endif
                set i=i + 1
            endloop

            set g=null
            set shop=null
        endfunction

        function s__Shop_onSearch takes nothing returns nothing
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(sc__EditBox_get()))), (0))) // INLINED!!

            if this != 0 and GetLocalPlayer() == GetTriggerPlayer() then
                call s__Shop_filter(this,s__Shop___Category_active[s__Shop_category[this]] , s__Shop___Category_andLogic[s__Shop_category[this]])
            endif
        endfunction

        function s__Shop_onClose takes nothing returns nothing
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!
            local integer id= GetPlayerId(GetTriggerPlayer())

            if this != 0 then
                set s__Shop_unit[id]=null

                if GetLocalPlayer() == GetTriggerPlayer() then
                    call s__Shop__set_visible(this,false)
                endif

                call s__Shop___Transaction_clear(this , id)
            endif
        endfunction

        function s__Shop_onDismantle takes nothing returns nothing
            local integer id= GetPlayerId(GetTriggerPlayer())
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!

            if this != 0 then
                if (HaveSavedInteger(Table___ht, (s__Shop___Inventory_selected[(s__Shop___Buyer_inventory[s__Shop_buyer[this]])]), ((id)))) then // INLINED!!
                    call s__Shop_dismantle(this,((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_item[s__Shop___Buyer_inventory[s__Shop_buyer[this]]],id)), ((LoadInteger(Table___ht, (s__Shop___Inventory_selected[(s__Shop___Buyer_inventory[s__Shop_buyer[this]])]), ((id)))))))) , GetTriggerPlayer() , (LoadInteger(Table___ht, (s__Shop___Inventory_selected[(s__Shop___Buyer_inventory[s__Shop_buyer[this]])]), ((id))))) // INLINED!!
                else
                    call s__Shop___Sound_error(GetTriggerPlayer())
                endif
            endif
        endfunction

        function s__Shop_onUndo takes nothing returns nothing
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!

            if this != 0 then
                call s__Shop_undo(this,GetTriggerPlayer())
            endif
        endfunction

        function s__Shop_onSelect takes nothing returns nothing
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,GetUnitTypeId(GetTriggerUnit()))), (0))) // INLINED!!
            local integer id= GetPlayerId(GetTriggerPlayer())

            if this != 0 then
                if GetLocalPlayer() == GetTriggerPlayer() then
                    call s__Shop__set_visible(this,GetTriggerEventId() == EVENT_PLAYER_UNIT_SELECTED)
                endif

                if GetTriggerEventId() == EVENT_PLAYER_UNIT_SELECTED then
                    set s__Shop_unit[id]=GetTriggerUnit()
                    call s__Shop___Inventory_show(s__Shop___Buyer_inventory[s__Shop_buyer[this]],(LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id))))) // INLINED!!
                else
                    set s__Shop_unit[id]=null
                    call s__Shop___Transaction_clear(this , id)
                endif
            endif
        endfunction

        function s__Shop_onEsc takes nothing returns nothing
            local player p= GetTriggerPlayer()
            local integer id= GetPlayerId(p)
            local integer i= GetHandleId(p)
            local integer j= 0
            local integer this

            loop
                exitwhen j > s__Shop_count
                    set this=(LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,i)), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,i)), (j)))))) // INLINED!!

                    if this != 0 then
                        set s__Shop_unit[id]=null

                        if GetLocalPlayer() == GetTriggerPlayer() then
                            call s__Shop__set_visible(this,false)
                        endif

                        call s__Shop___Transaction_clear(this , id)
                    endif
                set j=j + 1
            endloop

            set p=null
        endfunction

        function s__Shop_onInit takes nothing returns nothing
            local integer i= 0
            local trigger escape= CreateTrigger()

            set Shop___table=(s__Table_create()) // INLINED!!
            set s__Shop_itempool=(s__Table_create()) // INLINED!!

            loop
                exitwhen i >= bj_MAX_PLAYER_SLOTS
                    if GetPlayerController(Player(i)) == MAP_CONTROL_USER then
                        set s__Shop_group[i]=CreateGroup()
                        call TriggerRegisterPlayerEventEndCinematic(escape, Player(i))
                    endif
                set i=i + 1
            endloop

            if Shop___SCROLL_DELAY > 0 then
                call TimerStart(CreateTimer(), Shop___SCROLL_DELAY, true, function s__Shop_onExpire)
            endif

            call TriggerAddCondition(escape, Condition(function s__Shop_onEsc))
            call TimerStart(CreateTimer(), Shop___UPDATE_PERIOD, true, function s__Shop_onPeriod)
            call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_SELECTED , function s__Shop_onSelect)
            call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_DESELECTED , function s__Shop_onSelect)
        endfunction

//library Shop ends
//library SulfurasSmash:
    
    // Credtis:
    //     Systemfre1       - Sulfuras model
    //     AZ               - crack model
    //     Blizzard         - icon (edited by me)
    //     TriggerHappy     - TimedHandles
    
    
    
    
    

    // The stun time for units at the center of impact
    function SulfurasSmash___GetStunTime takes unit u returns real

            return 1 + 0.25 * R2I(s__Sulfuras_stacks[GetUnitUserData(u)] * 0.05)



    endfunction
    
    // The AoE for damage, by default is the AoE editor field of the ability
    function SulfurasSmash___GetNormalAoE takes unit u,integer level returns real
        return BlzGetAbilityRealLevelField(BlzGetUnitAbility(u, SulfurasSmash___ABILITY), ABILITY_RLF_AREA_OF_EFFECT, level - 1)
    endfunction

    // The AoE for enemies in the center of impact that will be stunned and take doubled damage
    function SulfurasSmash___GetCenterAoE takes integer level returns real
        return 200. + 0 * level
    endfunction

    // Ability impact damage
    function SulfurasSmash___GetDamage takes unit u,integer level returns real

            return 250 * level + ( 0.8 + 0.2 * level ) * (s__Bonus_getter((u ) , ( BONUS_SPELL_POWER))) // INLINED!!



    endfunction

    // Filter for units that will be damage on impact
    function SulfurasSmash___DamageFilter takes unit source,unit target returns boolean
        return UnitAlive(target) and IsUnitEnemy(target, GetOwningPlayer(source)) and not IsUnitType(target, UNIT_TYPE_MAGIC_IMMUNE)
    endfunction
    
    
    
    

        function s__SulfurasSmash___Hammer_onFinish takes integer this returns boolean
            local group g= CreateGroup()
            local unit u

            call GroupEnumUnitsInRange(g, s__Missiles_x[this], s__Missiles_y[this], SulfurasSmash___GetNormalAoE(s__Missiles_source[this] , s__SulfurasSmash___Hammer_level[this]), null)

            loop
                set u=FirstOfGroup(g)
                exitwhen u == null
                    if SulfurasSmash___DamageFilter(s__Missiles_source[this] , u) then
                        if DistanceBetweenCoordinates(s__Missiles_x[this] , s__Missiles_y[this] , GetUnitX(u) , GetUnitY(u)) <= s__SulfurasSmash___Hammer_aoe[this] then
                            if UnitDamageTarget(s__Missiles_source[this], u, 2 * s__Missiles_damage[this], false, false, SulfurasSmash___ATTACK_TYPE, SulfurasSmash___DAMAGE_TYPE, null) then
                                call sc__CrowdControl_stun((u ) , (( s__SulfurasSmash___Hammer_stun[this] )*1.0) , ( SulfurasSmash___STUN_MODEL ) , ( SulfurasSmash___STUN_POINT ) , ( false)) // INLINED!!
                            endif
                        else
                            call UnitDamageTarget(s__Missiles_source[this], u, s__Missiles_damage[this], false, false, SulfurasSmash___ATTACK_TYPE, SulfurasSmash___DAMAGE_TYPE, null)
                        endif
                    endif
                call GroupRemoveUnit(g, u)
            endloop

            call DestroyGroup(g)
call s__effectTimed_create((AddSpecialEffectEx(SulfurasSmash___IMPACT_MODEL , s__Missiles_x[this] , s__Missiles_y[this] , 0 , SulfurasSmash___IMPACT_SCALE) ) , (( SulfurasSmash___IMPACT_DURATION)*1.0)) // INLINED!!
            

                call Afterburn(s__Missiles_x[this] , s__Missiles_y[this] , s__Missiles_source[this])


            set g=null

            return true
        endfunction

        function s__SulfurasSmash___SulfurasSmash_onTooltip takes integer this,unit source,integer level returns string
            return "|cffffcc00Ragnaros|r hurls |cffffcc00Sulfuras|r at the target area, landing after |cffffcc00" + N2S(SulfurasSmash___LANDING_TIME , 2) + " seconds|r and damaging enemy units for |cff00ffff" + N2S(SulfurasSmash___GetDamage(source , level) , 0) + " Magic|r damage. Enemy units in the center are stunned for |cffffcc00" + N2S((1 + 0.25 * R2I(s__Sulfuras_stacks[GetUnitUserData((source))] * 0.05)) , 2) + "|r seconds and take twice as much damage." // INLINED!!
        endfunction

        function s__SulfurasSmash___SulfurasSmash_onCast takes integer this returns nothing
            local real angle= AngleBetweenCoordinates((GetSpellTargetX()) , (GetSpellTargetY()) , GetUnitX(s__PluginSpellEffect___Unit_unit[s__Spell_source]) , GetUnitY(s__PluginSpellEffect___Unit_unit[s__Spell_source])) // INLINED!!
            local integer sulfuras= s__SulfurasSmash___Hammer__allocate((GetSpellTargetX()) + SulfurasSmash___LAUNCH_OFFSET * Cos(angle) , (GetSpellTargetY()) + SulfurasSmash___LAUNCH_OFFSET * Sin(angle) , SulfurasSmash___START_HEIGHT , (GetSpellTargetX()) , (GetSpellTargetY()) , 0) // INLINED!!
            
            call s__Missiles__set_model(sulfuras,SulfurasSmash___SULFURAS_MODEL)
            call s__Missiles__set_scale(sulfuras,SulfurasSmash___SULFURAS_SCALE)
            call s__Missiles__set_duration(sulfuras,SulfurasSmash___LANDING_TIME)
            set s__Missiles_source[sulfuras]=s__PluginSpellEffect___Unit_unit[s__Spell_source]
            set s__SulfurasSmash___Hammer_level[sulfuras]=(GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))) // INLINED!!
            set s__Missiles_owner[sulfuras]=(GetOwningPlayer(s__PluginSpellEffect___Unit_unit[(s__Spell_source)])) // INLINED!!
            set s__Missiles_damage[sulfuras]=SulfurasSmash___GetDamage(s__PluginSpellEffect___Unit_unit[s__Spell_source] , (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId())))) // INLINED!!
            set s__SulfurasSmash___Hammer_stun[sulfuras]=(1 + 0.25 * R2I(s__Sulfuras_stacks[GetUnitUserData((s__PluginSpellEffect___Unit_unit[s__Spell_source]))] * 0.05)) // INLINED!!
            set s__SulfurasSmash___Hammer_aoe[sulfuras]=(200. + 0 * ((GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))))) // INLINED!!

            call s__Missiles_launch(sulfuras)
        endfunction

        function s__SulfurasSmash___SulfurasSmash_onInit takes nothing returns nothing
            call s__Ability_register((s__SulfurasSmash___SulfurasSmash__allocate() ) , ( SulfurasSmash___ABILITY)) // INLINED!!
        endfunction

//library SulfurasSmash ends
//===========================================================================
// 
// Ragnaros Hero Concept
// 
//   Warcraft III map script
//   Generated by the Warcraft III World Editor
//   Map Author: Chopinski
// 
//===========================================================================

//***************************************************************************
//*
//*  Global Variables
//*
//***************************************************************************


function InitGlobals takes nothing returns nothing
endfunction

//***************************************************************************
//*
//*  Custom Script Code
//*
//***************************************************************************
//***************************************************************************
//*  Item
//***************************************************************************
//*  Ability
//***************************************************************************
//*  Bonus
//***************************************************************************
//*  Miss
// scope MissChance begins
    
        function s__MissChance___Miss_get takes integer this,unit u returns real
            return (s__Evasion_miss[GetUnitUserData(((u)))]) // INLINED!!
        endfunction

        function s__MissChance___Miss_Set takes integer this,unit u,real value returns real
            return (sc__Evasion_setMissChance((u ) , (( value)*1.0))) // INLINED!!
        endfunction

        function s__MissChance___Miss_add takes integer this,unit u,real value returns real
            call s__MissChance___Miss_Set(this,u , s__MissChance___Miss_get(this,u) + value)

            return value
        endfunction
    
        function s__MissChance___Miss_onInit takes nothing returns nothing
            set BONUS_MISS_CHANCE=(s__Bonus_register((s__MissChance___Miss__allocate()))) // INLINED!!
        endfunction
// scope MissChance ends
//***************************************************************************
//*  Armor
// scope Armor begins
    
    
        function s__Armor___Armor_get takes integer this,unit u returns real
            if GetUnitAbilityLevel(u, s__Armor___Armor_ability) == 0 then
                call UnitAddAbility(u, s__Armor___Armor_ability)
                call UnitMakeAbilityPermanent(u, true, s__Armor___Armor_ability)
            endif

            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Armor___Armor_ability), s__Armor___Armor_field, 0))
        endfunction

        function s__Armor___Armor_Set takes integer this,unit u,real value returns real
            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Armor___Armor_ability), s__Armor___Armor_field, 0, R2I(value)) then
                call IncUnitAbilityLevel(u, s__Armor___Armor_ability)
                call DecUnitAbilityLevel(u, s__Armor___Armor_ability)
            endif
        
            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Armor___Armor_ability), s__Armor___Armor_field, 0))
        endfunction

        function s__Armor___Armor_add takes integer this,unit u,real value returns real
            set value=s__Bonus_overflow(this,s__Armor___Armor_get(this,u) , value)
            
            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Armor___Armor_ability), s__Armor___Armor_field, 0, BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Armor___Armor_ability), s__Armor___Armor_field, 0) + R2I(value)) then
                call IncUnitAbilityLevel(u, s__Armor___Armor_ability)
                call DecUnitAbilityLevel(u, s__Armor___Armor_ability)

                return value
            else
                return 0.
            endif
        endfunction
    
        function s__Armor___Armor_onInit takes nothing returns nothing
            set BONUS_ARMOR=(s__Bonus_register((s__Armor___Armor__allocate()))) // INLINED!!
        endfunction
// scope Armor ends
//***************************************************************************
//*  Block
// scope Block begins
    






        function s__Block___Block_get takes integer this,unit u returns real

                return s__Block___Block_block[GetUnitUserData(u)]



        endfunction

        function s__Block___Block_Set takes integer this,unit u,real value returns real

                set s__Block___Block_block[GetUnitUserData(u)]=value

                return value













        endfunction

        function s__Block___Block_add takes integer this,unit u,real value returns real
            call s__Block___Block_Set(this,u , s__Block___Block_get(this,u) + value)

            return value
        endfunction

        function s__Block___Block_onDamage takes nothing returns nothing

                if (s__Damage_damage[s__Damage_key]) > 0 and s__Block___Block_block[(GetUnitUserData(s__DamageInterface___Unit_unit[((s__Damage_sources[s__Damage_key]))]))] > 0 then // INLINED!!
                    if (s__Damage_damage[s__Damage_key]) > s__Block___Block_block[(GetUnitUserData(s__DamageInterface___Unit_unit[((s__Damage_sources[s__Damage_key]))]))] then // INLINED!!
                        call s__Damage__set_amount((s__Damage_damage[s__Damage_key]) - s__Block___Block_block[(GetUnitUserData(s__DamageInterface___Unit_unit[((s__Damage_sources[s__Damage_key]))]))]) // INLINED!!
                    else
                        call s__Damage__set_amount(0)
                    endif
                endif

        endfunction

        function s__Block___Block_onInit takes nothing returns nothing
            set BONUS_DAMAGE_BLOCK=(s__Bonus_register((s__Block___Block__allocate()))) // INLINED!!


                call TriggerAddCondition(s__Damage_anyAfter, Filter((function s__Block___Block_onDamage))) // INLINED!!

        endfunction
// scope Block ends
//***************************************************************************
//*  Mana
// scope Mana begins
    
    
        function s__Mana___Mana_get takes integer this,unit u returns real
            if GetUnitAbilityLevel(u, s__Mana___Mana_ability) == 0 then
                call UnitAddAbility(u, s__Mana___Mana_ability)
                call UnitMakeAbilityPermanent(u, true, s__Mana___Mana_ability)
            endif

            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Mana___Mana_ability), s__Mana___Mana_field, 0))
        endfunction

        function s__Mana___Mana_Set takes integer this,unit u,real value returns real
            local real percentage= GetUnitManaPercent(u)

            call BlzSetUnitMaxMana(u, R2I(BlzGetUnitMaxMana(u) - s__Mana___Mana_get(this,u)))
            call BlzSetUnitMaxMana(u, R2I(BlzGetUnitMaxMana(u) + value))
            call SetUnitManaPercentBJ(u, percentage)

            if GetUnitAbilityLevel(u, s__Mana___Mana_ability) == 0 then
                call UnitAddAbility(u, s__Mana___Mana_ability)
                call UnitMakeAbilityPermanent(u, true, s__Mana___Mana_ability)
            endif
            
            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Mana___Mana_ability), s__Mana___Mana_field, 0, R2I(value)) then
                call IncUnitAbilityLevel(u, s__Mana___Mana_ability)
                call DecUnitAbilityLevel(u, s__Mana___Mana_ability)
            endif

            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Mana___Mana_ability), s__Mana___Mana_field, 0))
        endfunction

        function s__Mana___Mana_add takes integer this,unit u,real value returns real
            local real percentage= GetUnitManaPercent(u)

            set value=s__Bonus_overflow(this,s__Mana___Mana_get(this,u) , value)
            
            call BlzSetUnitMaxMana(u, R2I(BlzGetUnitMaxMana(u) + value))
            call SetUnitManaPercentBJ(u, percentage)

            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Mana___Mana_ability), s__Mana___Mana_field, 0, BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Mana___Mana_ability), s__Mana___Mana_field, 0) + R2I(value)) then
                call IncUnitAbilityLevel(u, s__Mana___Mana_ability)
                call DecUnitAbilityLevel(u, s__Mana___Mana_ability)

                return value
            else
                return 0.
            endif
        endfunction
    
        function s__Mana___Mana_onInit takes nothing returns nothing
            set BONUS_MANA=(s__Bonus_register((s__Mana___Mana__allocate()))) // INLINED!!
        endfunction
// scope Mana ends
//***************************************************************************
//*  Agility
// scope Agility begins
    
    
        function s__Agility___Agility_get takes integer this,unit u returns real
            if GetUnitAbilityLevel(u, s__Agility___Agility_ability) == 0 then
                call UnitAddAbility(u, s__Agility___Agility_ability)
                call UnitMakeAbilityPermanent(u, true, s__Agility___Agility_ability)
            endif

            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Agility___Agility_ability), s__Agility___Agility_field, 0))
        endfunction

        function s__Agility___Agility_Set takes integer this,unit u,real value returns real
            if GetUnitAbilityLevel(u, s__Agility___Agility_ability) == 0 then
                call UnitAddAbility(u, s__Agility___Agility_ability)
                call UnitMakeAbilityPermanent(u, true, s__Agility___Agility_ability)
            endif
            
            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Agility___Agility_ability), s__Agility___Agility_field, 0, R2I(value)) then
                call IncUnitAbilityLevel(u, s__Agility___Agility_ability)
                call DecUnitAbilityLevel(u, s__Agility___Agility_ability)
            endif
        
            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Agility___Agility_ability), s__Agility___Agility_field, 0))
        endfunction

        function s__Agility___Agility_add takes integer this,unit u,real value returns real
            set value=s__Bonus_overflow(this,s__Agility___Agility_get(this,u) , value)
            
            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Agility___Agility_ability), s__Agility___Agility_field, 0, BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Agility___Agility_ability), s__Agility___Agility_field, 0) + R2I(value)) then
                call IncUnitAbilityLevel(u, s__Agility___Agility_ability)
                call DecUnitAbilityLevel(u, s__Agility___Agility_ability)

                return value
            else
                return 0.
            endif
        endfunction
    
        function s__Agility___Agility_onInit takes nothing returns nothing
            set BONUS_AGILITY=(s__Bonus_register((s__Agility___Agility__allocate()))) // INLINED!!
        endfunction
// scope Agility ends
//***************************************************************************
//*  Health
// scope Health begins
    
    
        function s__Health___Health_get takes integer this,unit u returns real
            if GetUnitAbilityLevel(u, s__Health___Health_ability) == 0 then
                call UnitAddAbility(u, s__Health___Health_ability)
                call UnitMakeAbilityPermanent(u, true, s__Health___Health_ability)
            endif

            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Health___Health_ability), s__Health___Health_field, 0))
        endfunction

        function s__Health___Health_Set takes integer this,unit u,real value returns real
            local real percentage= GetUnitLifePercent(u)

            call BlzSetUnitMaxHP(u, R2I(BlzGetUnitMaxHP(u) - s__Health___Health_get(this,u)))
            call BlzSetUnitMaxHP(u, R2I(BlzGetUnitMaxHP(u) + value))
            call SetUnitLifePercentBJ(u, percentage)

            if GetUnitAbilityLevel(u, s__Health___Health_ability) == 0 then
                call UnitAddAbility(u, s__Health___Health_ability)
                call UnitMakeAbilityPermanent(u, true, s__Health___Health_ability)
            endif
            
            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Health___Health_ability), s__Health___Health_field, 0, R2I(value)) then
                call IncUnitAbilityLevel(u, s__Health___Health_ability)
                call DecUnitAbilityLevel(u, s__Health___Health_ability)
            endif

            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Health___Health_ability), s__Health___Health_field, 0))
        endfunction

        function s__Health___Health_add takes integer this,unit u,real value returns real
            local real percentage= GetUnitLifePercent(u)

            set value=s__Bonus_overflow(this,s__Health___Health_get(this,u) , value)
            
            call BlzSetUnitMaxHP(u, R2I(BlzGetUnitMaxHP(u) + value))
            call SetUnitLifePercentBJ(u, percentage)

            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Health___Health_ability), s__Health___Health_field, 0, BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Health___Health_ability), s__Health___Health_field, 0) + R2I(value)) then
                call IncUnitAbilityLevel(u, s__Health___Health_ability)
                call DecUnitAbilityLevel(u, s__Health___Health_ability)

                return value
            else
                return 0.
            endif
        endfunction
    
        function s__Health___Health_onInit takes nothing returns nothing
            set BONUS_HEALTH=(s__Bonus_register((s__Health___Health__allocate()))) // INLINED!!
        endfunction
// scope Health ends
//***************************************************************************
//*  Evasion
// scope EvasionChance begins
    
    
        function s__EvasionChance___Evasion_get takes integer this,unit u returns real

                return (s__Evasion_evasion[GetUnitUserData(((u)))]) // INLINED!!



        endfunction

        function s__EvasionChance___Evasion_Set takes integer this,unit u,real value returns real

                return (sc__Evasion_setEvasionChance((u ) , (( value)*1.0))) // INLINED!!













        endfunction

        function s__EvasionChance___Evasion_add takes integer this,unit u,real value returns real
            call s__EvasionChance___Evasion_Set(this,u , s__EvasionChance___Evasion_get(this,u) + value)

            return value
        endfunction
    
        function s__EvasionChance___Evasion_onInit takes nothing returns nothing
            set BONUS_EVASION_CHANCE=(s__Bonus_register((s__EvasionChance___Evasion__allocate()))) // INLINED!!
        endfunction
// scope EvasionChance ends
//***************************************************************************
//*  Damage
// scope DamageBonus begins
    
    
        function s__DamageBonus___Damage_get takes integer this,unit u returns real
            if GetUnitAbilityLevel(u, s__DamageBonus___Damage_ability) == 0 then
                call UnitAddAbility(u, s__DamageBonus___Damage_ability)
                call UnitMakeAbilityPermanent(u, true, s__DamageBonus___Damage_ability)
            endif

            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__DamageBonus___Damage_ability), s__DamageBonus___Damage_field, 0))
        endfunction

        function s__DamageBonus___Damage_Set takes integer this,unit u,real value returns real
            if GetUnitAbilityLevel(u, s__DamageBonus___Damage_ability) == 0 then
                call UnitAddAbility(u, s__DamageBonus___Damage_ability)
                call UnitMakeAbilityPermanent(u, true, s__DamageBonus___Damage_ability)
            endif
            
            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__DamageBonus___Damage_ability), s__DamageBonus___Damage_field, 0, R2I(value)) then
                call IncUnitAbilityLevel(u, s__DamageBonus___Damage_ability)
                call DecUnitAbilityLevel(u, s__DamageBonus___Damage_ability)
            endif
        
            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__DamageBonus___Damage_ability), s__DamageBonus___Damage_field, 0))
        endfunction
        
        function s__DamageBonus___Damage_add takes integer this,unit u,real value returns real
            set value=s__Bonus_overflow(this,s__DamageBonus___Damage_get(this,u) , value)
            
            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__DamageBonus___Damage_ability), s__DamageBonus___Damage_field, 0, BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__DamageBonus___Damage_ability), s__DamageBonus___Damage_field, 0) + R2I(value)) then
                call IncUnitAbilityLevel(u, s__DamageBonus___Damage_ability)
                call DecUnitAbilityLevel(u, s__DamageBonus___Damage_ability)

                return value
            else
                return 0.
            endif
        endfunction
    
        function s__DamageBonus___Damage_onInit takes nothing returns nothing
            set BONUS_DAMAGE=(s__Bonus_register((s__DamageBonus___Damage__allocate()))) // INLINED!!
        endfunction
// scope DamageBonus ends
//***************************************************************************
//*  Strength
// scope Strength begins
    
    
        function s__Strength___Strength_get takes integer this,unit u returns real
            if GetUnitAbilityLevel(u, s__Strength___Strength_ability) == 0 then
                call UnitAddAbility(u, s__Strength___Strength_ability)
                call UnitMakeAbilityPermanent(u, true, s__Strength___Strength_ability)
            endif

            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Strength___Strength_ability), s__Strength___Strength_field, 0))
        endfunction

        function s__Strength___Strength_Set takes integer this,unit u,real value returns real
            if GetUnitAbilityLevel(u, s__Strength___Strength_ability) == 0 then
                call UnitAddAbility(u, s__Strength___Strength_ability)
                call UnitMakeAbilityPermanent(u, true, s__Strength___Strength_ability)
            endif
            
            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Strength___Strength_ability), s__Strength___Strength_field, 0, R2I(value)) then
                call IncUnitAbilityLevel(u, s__Strength___Strength_ability)
                call DecUnitAbilityLevel(u, s__Strength___Strength_ability)
            endif
        
            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Strength___Strength_ability), s__Strength___Strength_field, 0))
        endfunction

        function s__Strength___Strength_add takes integer this,unit u,real value returns real
            set value=s__Bonus_overflow(this,s__Strength___Strength_get(this,u) , value)
            
            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Strength___Strength_ability), s__Strength___Strength_field, 0, BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Strength___Strength_ability), s__Strength___Strength_field, 0) + R2I(value)) then
                call IncUnitAbilityLevel(u, s__Strength___Strength_ability)
                call DecUnitAbilityLevel(u, s__Strength___Strength_ability)

                return value
            else
                return 0.
            endif
        endfunction
    
        function s__Strength___Strength_onInit takes nothing returns nothing
            set BONUS_STRENGTH=(s__Bonus_register((s__Strength___Strength__allocate()))) // INLINED!!
        endfunction
// scope Strength ends
//***************************************************************************
//*  Tenacity
// scope TenacityBonus begins
    
        function s__TenacityBonus___Tenacity_get takes integer this,unit u returns real
            return (sc__Tenacity_get((u) , 0)) // INLINED!!
        endfunction

        function s__TenacityBonus___Tenacity_Set takes integer this,unit u,real value returns real
            call sc__Tenacity_Set((u ) , (( value)*1.0) , 0) // INLINED!!
            
            return value
        endfunction

        function s__TenacityBonus___Tenacity_add takes integer this,unit u,real value returns real
            if not (sc__Tenacity_remove((u ) , (( - value)*1.0))) then // INLINED!!
                call sc__Tenacity_add((u ) , (( value)*1.0) , 0) // INLINED!!
            endif

            return value
        endfunction
    
        function s__TenacityBonus___Tenacity_onInit takes nothing returns nothing
            set BONUS_TENACITY=(s__Bonus_register((s__TenacityBonus___Tenacity__allocate()))) // INLINED!!
        endfunction
// scope TenacityBonus ends
//***************************************************************************
//*  LifeSteal
// scope LifeSteal begins
    






        function s__LifeSteal___LifeSteal_get takes integer this,unit u returns real

                return s__LifeSteal___LifeSteal_steal[GetUnitUserData(u)]



        endfunction

        function s__LifeSteal___LifeSteal_Set takes integer this,unit u,real value returns real

                set s__LifeSteal___LifeSteal_steal[GetUnitUserData(u)]=value

                return value


















        endfunction

        function s__LifeSteal___LifeSteal_add takes integer this,unit u,real value returns real
            call s__LifeSteal___LifeSteal_Set(this,u , s__LifeSteal___LifeSteal_get(this,u) + value)

            return value
        endfunction

        function s__LifeSteal___LifeSteal_onDamage takes nothing returns nothing

                if (s__Damage_damage[s__Damage_key]) > 0 and ((s__Damage_damageType[s__Damage_key]) == DAMAGE_TYPE_NORMAL or BlzGetEventIsAttack()) and s__LifeSteal___LifeSteal_steal[(GetUnitUserData(s__DamageInterface___Unit_unit[((s__Damage_sources[s__Damage_key]))]))] > 0 and not (IsUnitType(s__DamageInterface___Unit_unit[((s__Damage_targets[s__Damage_key]))], UNIT_TYPE_STRUCTURE)) then // INLINED!!
                    call SetWidgetLife(s__DamageInterface___Unit_unit[(s__Damage_sources[s__Damage_key])], ( GetWidgetLife(s__DamageInterface___Unit_unit[(s__Damage_sources[s__Damage_key])]) + ( (s__Damage_damage[s__Damage_key]) * s__LifeSteal___LifeSteal_steal[(GetUnitUserData(s__DamageInterface___Unit_unit[((s__Damage_sources[s__Damage_key]))]))] ) )) // INLINED!!
                    call DestroyEffect(AddSpecialEffectTarget(s__LifeSteal___LifeSteal_effect, s__DamageInterface___Unit_unit[(s__Damage_sources[s__Damage_key])], "origin")) // INLINED!!
                endif

        endfunction

        function s__LifeSteal___LifeSteal_onInit takes nothing returns nothing
            set BONUS_LIFE_STEAL=(s__Bonus_register((s__LifeSteal___LifeSteal__allocate()))) // INLINED!!


                call TriggerAddCondition(s__Damage_anyAfter, Filter((function s__LifeSteal___LifeSteal_onDamage))) // INLINED!!

        endfunction
// scope LifeSteal ends
//***************************************************************************
//*  SpellVamp
// scope SpellVamp begins
    

        function s__SpellVamp___SpellVamp_get takes integer this,unit u returns real
            return s__SpellVamp___SpellVamp_vamp[GetUnitUserData(u)]
        endfunction

        function s__SpellVamp___SpellVamp_Set takes integer this,unit u,real value returns real
            set s__SpellVamp___SpellVamp_vamp[GetUnitUserData(u)]=value

            return value
        endfunction  

        function s__SpellVamp___SpellVamp_add takes integer this,unit u,real value returns real
            call s__SpellVamp___SpellVamp_Set(this,u , s__SpellVamp___SpellVamp_get(this,u) + value)

            return value
        endfunction

        function s__SpellVamp___SpellVamp_onDamage takes nothing returns nothing
            if (s__Damage_damage[s__Damage_key]) > 0 and ((s__Damage_attackType[s__Damage_key]) == ATTACK_TYPE_NORMAL) and s__SpellVamp___SpellVamp_vamp[(GetUnitUserData(s__DamageInterface___Unit_unit[((s__Damage_sources[s__Damage_key]))]))] > 0 and not (IsUnitType(s__DamageInterface___Unit_unit[((s__Damage_targets[s__Damage_key]))], UNIT_TYPE_STRUCTURE)) then // INLINED!!
                call SetWidgetLife(s__DamageInterface___Unit_unit[(s__Damage_sources[s__Damage_key])], ( GetWidgetLife(s__DamageInterface___Unit_unit[(s__Damage_sources[s__Damage_key])]) + ( (s__Damage_damage[s__Damage_key]) * s__SpellVamp___SpellVamp_vamp[(GetUnitUserData(s__DamageInterface___Unit_unit[((s__Damage_sources[s__Damage_key]))]))] ) )) // INLINED!!
            endif
        endfunction

        function s__SpellVamp___SpellVamp_onInit takes nothing returns nothing
            set BONUS_SPELL_VAMP=(s__Bonus_register((s__SpellVamp___SpellVamp__allocate()))) // INLINED!!
            call TriggerAddCondition(s__Damage_anyAfter, Filter((function s__SpellVamp___SpellVamp_onDamage))) // INLINED!!
        endfunction
// scope SpellVamp ends
//***************************************************************************
//*  SpellPower
// scope SpellPower begins
    

        function s__SpellPower___SpellPower_get takes integer this,unit u returns real
            return s__SpellPower___SpellPower_power[GetUnitUserData(u)]
        endfunction

        function s__SpellPower___SpellPower_Set takes integer this,unit u,real value returns real
            set s__SpellPower___SpellPower_power[GetUnitUserData(u)]=value

            return value
        endfunction

        function s__SpellPower___SpellPower_add takes integer this,unit u,real value returns real
            call s__SpellPower___SpellPower_Set(this,u , s__SpellPower___SpellPower_get(this,u) + value)

            return value
        endfunction

        function s__SpellPower___SpellPower_onInit takes nothing returns nothing
            set BONUS_SPELL_POWER=(s__Bonus_register((s__SpellPower___SpellPower__allocate()))) // INLINED!!
        endfunction
// scope SpellPower ends
//***************************************************************************
//*  Intelligence
// scope Intelligence begins
    
    
        function s__Intelligence___Intelligence_get takes integer this,unit u returns real
            if GetUnitAbilityLevel(u, s__Intelligence___Intelligence_ability) == 0 then
                call UnitAddAbility(u, s__Intelligence___Intelligence_ability)
                call UnitMakeAbilityPermanent(u, true, s__Intelligence___Intelligence_ability)
            endif

            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Intelligence___Intelligence_ability), s__Intelligence___Intelligence_field, 0))
        endfunction

        function s__Intelligence___Intelligence_Set takes integer this,unit u,real value returns real
            if GetUnitAbilityLevel(u, s__Intelligence___Intelligence_ability) == 0 then
                call UnitAddAbility(u, s__Intelligence___Intelligence_ability)
                call UnitMakeAbilityPermanent(u, true, s__Intelligence___Intelligence_ability)
            endif
            
            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Intelligence___Intelligence_ability), s__Intelligence___Intelligence_field, 0, R2I(value)) then
                call IncUnitAbilityLevel(u, s__Intelligence___Intelligence_ability)
                call DecUnitAbilityLevel(u, s__Intelligence___Intelligence_ability)
            endif
        
            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Intelligence___Intelligence_ability), s__Intelligence___Intelligence_field, 0))
        endfunction

        function s__Intelligence___Intelligence_add takes integer this,unit u,real value returns real
            set value=s__Bonus_overflow(this,s__Intelligence___Intelligence_get(this,u) , value)
            
            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Intelligence___Intelligence_ability), s__Intelligence___Intelligence_field, 0, BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__Intelligence___Intelligence_ability), s__Intelligence___Intelligence_field, 0) + R2I(value)) then
                call IncUnitAbilityLevel(u, s__Intelligence___Intelligence_ability)
                call DecUnitAbilityLevel(u, s__Intelligence___Intelligence_ability)

                return value
            else
                return 0.
            endif
        endfunction
    
        function s__Intelligence___Intelligence_onInit takes nothing returns nothing
            set BONUS_INTELLIGENCE=(s__Bonus_register((s__Intelligence___Intelligence__allocate()))) // INLINED!!
        endfunction
// scope Intelligence ends
//***************************************************************************
//*  SightRange
// scope SightRange begins
    
    
        function s__SightRange___SightRange_get takes integer this,unit u returns real
            if GetUnitAbilityLevel(u, s__SightRange___SightRange_ability) == 0 then
                call UnitAddAbility(u, s__SightRange___SightRange_ability)
                call UnitMakeAbilityPermanent(u, true, s__SightRange___SightRange_ability)
            endif

            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__SightRange___SightRange_ability), s__SightRange___SightRange_field, 0))
        endfunction

        function s__SightRange___SightRange_Set takes integer this,unit u,real value returns real
            call BlzSetUnitRealField(u, UNIT_RF_SIGHT_RADIUS, ( BlzGetUnitRealField(u, UNIT_RF_SIGHT_RADIUS) - s__SightRange___SightRange_get(this,u) ))
            call BlzSetUnitRealField(u, UNIT_RF_SIGHT_RADIUS, ( BlzGetUnitRealField(u, UNIT_RF_SIGHT_RADIUS) + value ))

            if GetUnitAbilityLevel(u, s__SightRange___SightRange_ability) == 0 then
                call UnitAddAbility(u, s__SightRange___SightRange_ability)
                call UnitMakeAbilityPermanent(u, true, s__SightRange___SightRange_ability)
            endif
            
            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__SightRange___SightRange_ability), s__SightRange___SightRange_field, 0, R2I(value)) then
                call IncUnitAbilityLevel(u, s__SightRange___SightRange_ability)
                call DecUnitAbilityLevel(u, s__SightRange___SightRange_ability)
            endif
        
            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__SightRange___SightRange_ability), s__SightRange___SightRange_field, 0))
        endfunction

        function s__SightRange___SightRange_add takes integer this,unit u,real value returns real
            set value=s__Bonus_overflow(this,s__SightRange___SightRange_get(this,u) , value)
            
            call BlzSetUnitRealField(u, UNIT_RF_SIGHT_RADIUS, ( BlzGetUnitRealField(u, UNIT_RF_SIGHT_RADIUS) + value ))

            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__SightRange___SightRange_ability), s__SightRange___SightRange_field, 0, BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__SightRange___SightRange_ability), s__SightRange___SightRange_field, 0) + R2I(value)) then
                call IncUnitAbilityLevel(u, s__SightRange___SightRange_ability)
                call DecUnitAbilityLevel(u, s__SightRange___SightRange_ability)

                return value
            else
                return 0.
            endif
        endfunction
    
        function s__SightRange___SightRange_onInit takes nothing returns nothing
            set BONUS_SIGHT_RANGE=(s__Bonus_register((s__SightRange___SightRange__allocate()))) // INLINED!!
        endfunction
// scope SightRange ends
//***************************************************************************
//*  TenacityFlat
// scope TenacityFlat begins
    
        function s__TenacityFlat___TenacityFlat_get takes integer this,unit u returns real
            return (sc__Tenacity_get((u) , 1)) // INLINED!!
        endfunction

        function s__TenacityFlat___TenacityFlat_Set takes integer this,unit u,real value returns real
            call sc__Tenacity_Set((u ) , (( value)*1.0) , 1) // INLINED!!
            
            return value
        endfunction

        function s__TenacityFlat___TenacityFlat_add takes integer this,unit u,real value returns real
            call s__TenacityFlat___TenacityFlat_Set(this,u , s__TenacityFlat___TenacityFlat_get(this,u) + value)

            return value
        endfunction
    
        function s__TenacityFlat___TenacityFlat_onInit takes nothing returns nothing
            set BONUS_TENACITY_FLAT=(s__Bonus_register((s__TenacityFlat___TenacityFlat__allocate()))) // INLINED!!
        endfunction
// scope TenacityFlat ends
//***************************************************************************
//*  AttackSpeed
// scope AttackSpeed begins
    
    
        function s__AttackSpeed___AttackSpeed_get takes integer this,unit u returns real
            return BlzGetAbilityRealLevelField(BlzGetUnitAbility(u, s__AttackSpeed___AttackSpeed_ability), s__AttackSpeed___AttackSpeed_field, 0)
        endfunction

        function s__AttackSpeed___AttackSpeed_Set takes integer this,unit u,real value returns real
            if GetUnitAbilityLevel(u, s__AttackSpeed___AttackSpeed_ability) == 0 then
                call UnitAddAbility(u, s__AttackSpeed___AttackSpeed_ability)
                call UnitMakeAbilityPermanent(u, true, s__AttackSpeed___AttackSpeed_ability)
            endif
            
            if BlzSetAbilityRealLevelField(BlzGetUnitAbility(u, s__AttackSpeed___AttackSpeed_ability), s__AttackSpeed___AttackSpeed_field, 0, R2I(value)) then
                call IncUnitAbilityLevel(u, s__AttackSpeed___AttackSpeed_ability)
                call DecUnitAbilityLevel(u, s__AttackSpeed___AttackSpeed_ability)
            endif
        
            return BlzGetAbilityRealLevelField(BlzGetUnitAbility(u, s__AttackSpeed___AttackSpeed_ability), s__AttackSpeed___AttackSpeed_field, 0)
        endfunction

        function s__AttackSpeed___AttackSpeed_add takes integer this,unit u,real value returns real
            call s__AttackSpeed___AttackSpeed_Set(this,u , s__AttackSpeed___AttackSpeed_get(this,u) + value)

            return value
        endfunction
    
        function s__AttackSpeed___AttackSpeed_onInit takes nothing returns nothing
            set BONUS_ATTACK_SPEED=(s__Bonus_register((s__AttackSpeed___AttackSpeed__allocate()))) // INLINED!!
        endfunction
// scope AttackSpeed ends
//***************************************************************************
//*  CriticalChance
// scope CriticalChance begins
    
    
        function s__CriticalChance___CriticalChance_get takes integer this,unit u returns real

                return (s__Critical_chance[GetUnitUserData(((u)))]) // INLINED!!



        endfunction

        function s__CriticalChance___CriticalChance_Set takes integer this,unit u,real value returns real

                return (sc__Critical_setChance((u ) , (( value)*1.0))) // INLINED!!













        endfunction

        function s__CriticalChance___CriticalChance_add takes integer this,unit u,real value returns real
            call s__CriticalChance___CriticalChance_Set(this,u , s__CriticalChance___CriticalChance_get(this,u) + value)

            return value
        endfunction
    
        function s__CriticalChance___CriticalChance_onInit takes nothing returns nothing
            set BONUS_CRITICAL_CHANCE=(s__Bonus_register((s__CriticalChance___CriticalChance__allocate()))) // INLINED!!
        endfunction
// scope CriticalChance ends
//***************************************************************************
//*  CriticalDamage
// scope CriticalDamage begins
    
    
        function s__CriticalDamage___CriticalDamage_get takes integer this,unit u returns real

                return (s__Critical_multiplier[GetUnitUserData(((u)))]) // INLINED!!



        endfunction

        function s__CriticalDamage___CriticalDamage_Set takes integer this,unit u,real value returns real

                return (sc__Critical_setMultiplier((u ) , (( value)*1.0))) // INLINED!!

















        endfunction

        function s__CriticalDamage___CriticalDamage_add takes integer this,unit u,real value returns real
            call s__CriticalDamage___CriticalDamage_Set(this,u , s__CriticalDamage___CriticalDamage_get(this,u) + value)

            return value
        endfunction
    
        function s__CriticalDamage___CriticalDamage_onInit takes nothing returns nothing
            set BONUS_CRITICAL_DAMAGE=(s__Bonus_register((s__CriticalDamage___CriticalDamage__allocate()))) // INLINED!!
        endfunction
// scope CriticalDamage ends
//***************************************************************************
//*  TenacityOffset
// scope TenacityOffset begins
    
        function s__TenacityOffset___TenacityOffset_get takes integer this,unit u returns real
            return (sc__Tenacity_get((u) , 2)) // INLINED!!
        endfunction

        function s__TenacityOffset___TenacityOffset_Set takes integer this,unit u,real value returns real
            call sc__Tenacity_Set((u ) , (( value)*1.0) , 2) // INLINED!!
            
            return value
        endfunction

        function s__TenacityOffset___TenacityOffset_add takes integer this,unit u,real value returns real
            call s__TenacityOffset___TenacityOffset_Set(this,u , s__TenacityOffset___TenacityOffset_get(this,u) + value)

            return value
        endfunction
    
        function s__TenacityOffset___TenacityOffset_onInit takes nothing returns nothing
            set BONUS_TENACITY_OFFSET=(s__Bonus_register((s__TenacityOffset___TenacityOffset__allocate()))) // INLINED!!
        endfunction
// scope TenacityOffset ends
//***************************************************************************
//*  CooldownOffset
// scope CooldownOffset begins
    
        function s__CooldownOffset___CooldownOffset_get takes integer this,unit u returns real
            return (s__CDR_get((u) , 2)) // INLINED!!
        endfunction

        function s__CooldownOffset___CooldownOffset_Set takes integer this,unit u,real value returns real
            call s__CDR_Set((u ) , (( value)*1.0) , 2) // INLINED!!
            
            return value
        endfunction

        function s__CooldownOffset___CooldownOffset_add takes integer this,unit u,real value returns real
            call s__CooldownOffset___CooldownOffset_Set(this,u , s__CooldownOffset___CooldownOffset_get(this,u) + value)

            return value
        endfunction
    
        function s__CooldownOffset___CooldownOffset_onInit takes nothing returns nothing
            set BONUS_COOLDOWN_OFFSET=(s__Bonus_register((s__CooldownOffset___CooldownOffset__allocate()))) // INLINED!!
        endfunction
// scope CooldownOffset ends
//***************************************************************************
//*  ArmorPenetration
// scope ArmorPenetration begins
    
        function s__ArmorPenetration___ArmorPenetration_get takes integer this,unit u returns real
            return (sc__ArmorPenetration_get((u ) , ( false))) // INLINED!!
        endfunction

        function s__ArmorPenetration___ArmorPenetration_Set takes integer this,unit u,real value returns real
            return (sc__ArmorPenetration_Set((u ) , (( value )*1.0) , ( false))) // INLINED!!
        endfunction

        function s__ArmorPenetration___ArmorPenetration_add takes integer this,unit u,real value returns real
            call s__ArmorPenetration___ArmorPenetration_Set(this,u , s__ArmorPenetration___ArmorPenetration_get(this,u) + value)

            return value
        endfunction

        function s__ArmorPenetration___ArmorPenetration_onInit takes nothing returns nothing
            set BONUS_ARMOR_PENETRATION=(s__Bonus_register((s__ArmorPenetration___ArmorPenetration__allocate()))) // INLINED!!
        endfunction
// scope ArmorPenetration ends
//***************************************************************************
//*  MovementSpeed
// scope MovementSpeed begins
    
    
        function s__MovementSpeed___MovementSpeed_get takes integer this,unit u returns real
            if GetUnitAbilityLevel(u, s__MovementSpeed___MovementSpeed_ability) == 0 then
                call UnitAddAbility(u, s__MovementSpeed___MovementSpeed_ability)
                call UnitMakeAbilityPermanent(u, true, s__MovementSpeed___MovementSpeed_ability)
            endif

            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__MovementSpeed___MovementSpeed_ability), s__MovementSpeed___MovementSpeed_field, 0))
        endfunction

        function s__MovementSpeed___MovementSpeed_Set takes integer this,unit u,real value returns real
            if GetUnitAbilityLevel(u, s__MovementSpeed___MovementSpeed_ability) == 0 then
                call UnitAddAbility(u, s__MovementSpeed___MovementSpeed_ability)
                call UnitMakeAbilityPermanent(u, true, s__MovementSpeed___MovementSpeed_ability)
            endif
            
            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__MovementSpeed___MovementSpeed_ability), s__MovementSpeed___MovementSpeed_field, 0, R2I(value)) then
                call IncUnitAbilityLevel(u, s__MovementSpeed___MovementSpeed_ability)
                call DecUnitAbilityLevel(u, s__MovementSpeed___MovementSpeed_ability)
            endif
        
            return I2R(BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__MovementSpeed___MovementSpeed_ability), s__MovementSpeed___MovementSpeed_field, 0))
        endfunction

        function s__MovementSpeed___MovementSpeed_add takes integer this,unit u,real value returns real
            set value=s__Bonus_overflow(this,s__MovementSpeed___MovementSpeed_get(this,u) , value)
            
            if BlzSetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__MovementSpeed___MovementSpeed_ability), s__MovementSpeed___MovementSpeed_field, 0, BlzGetAbilityIntegerLevelField(BlzGetUnitAbility(u, s__MovementSpeed___MovementSpeed_ability), s__MovementSpeed___MovementSpeed_field, 0) + R2I(value)) then
                call IncUnitAbilityLevel(u, s__MovementSpeed___MovementSpeed_ability)
                call DecUnitAbilityLevel(u, s__MovementSpeed___MovementSpeed_ability)

                return value
            else
                return 0.
            endif
        endfunction
    
        function s__MovementSpeed___MovementSpeed_onInit takes nothing returns nothing
            set BONUS_MOVEMENT_SPEED=(s__Bonus_register((s__MovementSpeed___MovementSpeed__allocate()))) // INLINED!!
        endfunction
// scope MovementSpeed ends
//***************************************************************************
//*  MagicResistence
// scope MagicResistence begins
    
    
        function s__MagicResistence___MagicResistence_get takes integer this,unit u returns real

                return (sc__MagicResistance_get((u))) // INLINED!!



        endfunction

        function s__MagicResistence___MagicResistence_Set takes integer this,unit u,real value returns real

                return (sc__MagicResistance_Set((u ) , (( value)*1.0))) // INLINED!!













        endfunction

        function s__MagicResistence___MagicResistence_add takes integer this,unit u,real value returns real
            call s__MagicResistence___MagicResistence_Set(this,u , s__MagicResistence___MagicResistence_get(this,u) + value)

            return value
        endfunction
    
        function s__MagicResistence___MagicResistence_onInit takes nothing returns nothing
            set BONUS_MAGIC_RESISTANCE=(s__Bonus_register((s__MagicResistence___MagicResistence__allocate()))) // INLINED!!
        endfunction
// scope MagicResistence ends
//***************************************************************************
//*  MagicPenetration
// scope MagicPenetration begins
    
        function s__MagicPenetration___MagicPenetration_get takes integer this,unit u returns real
            return (sc__MagicPenetration_get((u ) , ( false))) // INLINED!!
        endfunction

        function s__MagicPenetration___MagicPenetration_Set takes integer this,unit u,real value returns real
            return (sc__MagicPenetration_Set((u ) , (( value )*1.0) , ( false))) // INLINED!!
        endfunction

        function s__MagicPenetration___MagicPenetration_add takes integer this,unit u,real value returns real
            call s__MagicPenetration___MagicPenetration_Set(this,u , s__MagicPenetration___MagicPenetration_get(this,u) + value)

            return value
        endfunction

        function s__MagicPenetration___MagicPenetration_onInit takes nothing returns nothing
            set BONUS_MAGIC_PENETRATION=(s__Bonus_register((s__MagicPenetration___MagicPenetration__allocate()))) // INLINED!!
        endfunction
// scope MagicPenetration ends
//***************************************************************************
//*  ManaRegeneration
// scope ManaRegeneration begins
    
    
        function s__ManaRegeneration___ManaRegeneration_get takes integer this,unit u returns real
            return BlzGetAbilityRealLevelField(BlzGetUnitAbility(u, s__ManaRegeneration___ManaRegeneration_ability), s__ManaRegeneration___ManaRegeneration_field, 0)
        endfunction

        function s__ManaRegeneration___ManaRegeneration_Set takes integer this,unit u,real value returns real
            if GetUnitAbilityLevel(u, s__ManaRegeneration___ManaRegeneration_ability) == 0 then
                call UnitAddAbility(u, s__ManaRegeneration___ManaRegeneration_ability)
                call UnitMakeAbilityPermanent(u, true, s__ManaRegeneration___ManaRegeneration_ability)
            endif
            
            if BlzSetAbilityRealLevelField(BlzGetUnitAbility(u, s__ManaRegeneration___ManaRegeneration_ability), s__ManaRegeneration___ManaRegeneration_field, 0, R2I(value)) then
                call IncUnitAbilityLevel(u, s__ManaRegeneration___ManaRegeneration_ability)
                call DecUnitAbilityLevel(u, s__ManaRegeneration___ManaRegeneration_ability)
            endif
        
            return BlzGetAbilityRealLevelField(BlzGetUnitAbility(u, s__ManaRegeneration___ManaRegeneration_ability), s__ManaRegeneration___ManaRegeneration_field, 0)
        endfunction

        function s__ManaRegeneration___ManaRegeneration_add takes integer this,unit u,real value returns real
            call s__ManaRegeneration___ManaRegeneration_Set(this,u , s__ManaRegeneration___ManaRegeneration_get(this,u) + value)

            return value
        endfunction
    
        function s__ManaRegeneration___ManaRegeneration_onInit takes nothing returns nothing
            set BONUS_MANA_REGEN=(s__Bonus_register((s__ManaRegeneration___ManaRegeneration__allocate()))) // INLINED!!
        endfunction
// scope ManaRegeneration ends
//***************************************************************************
//*  HealthRegeneration
// scope HealthRegeneration begins
    
    
        function s__HealthRegeneration___HealthRegeneration_get takes integer this,unit u returns real
            return BlzGetAbilityRealLevelField(BlzGetUnitAbility(u, s__HealthRegeneration___HealthRegeneration_ability), s__HealthRegeneration___HealthRegeneration_field, 0)
        endfunction

        function s__HealthRegeneration___HealthRegeneration_Set takes integer this,unit u,real value returns real
            if GetUnitAbilityLevel(u, s__HealthRegeneration___HealthRegeneration_ability) == 0 then
                call UnitAddAbility(u, s__HealthRegeneration___HealthRegeneration_ability)
                call UnitMakeAbilityPermanent(u, true, s__HealthRegeneration___HealthRegeneration_ability)
            endif
            
            if BlzSetAbilityRealLevelField(BlzGetUnitAbility(u, s__HealthRegeneration___HealthRegeneration_ability), s__HealthRegeneration___HealthRegeneration_field, 0, R2I(value)) then
                call IncUnitAbilityLevel(u, s__HealthRegeneration___HealthRegeneration_ability)
                call DecUnitAbilityLevel(u, s__HealthRegeneration___HealthRegeneration_ability)
            endif
        
            return BlzGetAbilityRealLevelField(BlzGetUnitAbility(u, s__HealthRegeneration___HealthRegeneration_ability), s__HealthRegeneration___HealthRegeneration_field, 0)
        endfunction

        function s__HealthRegeneration___HealthRegeneration_add takes integer this,unit u,real value returns real
            call s__HealthRegeneration___HealthRegeneration_Set(this,u , s__HealthRegeneration___HealthRegeneration_get(this,u) + value)

            return value
        endfunction
    
        function s__HealthRegeneration___HealthRegeneration_onInit takes nothing returns nothing
            set BONUS_HEALTH_REGEN=(s__Bonus_register((s__HealthRegeneration___HealthRegeneration__allocate()))) // INLINED!!
        endfunction
// scope HealthRegeneration ends
//***************************************************************************
//*  CooldownReduction
// scope CooldownReductionBonus begins
    
        function s__CooldownReductionBonus___CooldownReduction_get takes integer this,unit u returns real
            return (1 - s__CDR_get((u) , 0)) // INLINED!!
        endfunction

        function s__CooldownReductionBonus___CooldownReduction_Set takes integer this,unit u,real value returns real
            call s__CDR_Set((u ) , (( value)*1.0) , 0) // INLINED!!

            return value
        endfunction

        function s__CooldownReductionBonus___CooldownReduction_add takes integer this,unit u,real value returns real
            if not (s__CDR_remove((u ) , (( - value)*1.0))) then // INLINED!!
                call s__CDR_add((u ) , (( value)*1.0)) // INLINED!!
            endif

            return value
        endfunction
    
        function s__CooldownReductionBonus___CooldownReduction_onInit takes nothing returns nothing
            set BONUS_COOLDOWN_REDUCTION=(s__Bonus_register((s__CooldownReductionBonus___CooldownReduction__allocate()))) // INLINED!!
        endfunction
// scope CooldownReductionBonus ends
//***************************************************************************
//*  ArmorPenetrationFlat
// scope ArmorPenetrationFlat begins
    
        function s__ArmorPenetrationFlat___ArmorPenetrationFlat_get takes integer this,unit u returns real
            return (sc__ArmorPenetration_get((u ) , ( true))) // INLINED!!
        endfunction

        function s__ArmorPenetrationFlat___ArmorPenetrationFlat_Set takes integer this,unit u,real value returns real
            return (sc__ArmorPenetration_Set((u ) , (( value )*1.0) , ( true))) // INLINED!!
        endfunction

        function s__ArmorPenetrationFlat___ArmorPenetrationFlat_add takes integer this,unit u,real value returns real
            call s__ArmorPenetrationFlat___ArmorPenetrationFlat_Set(this,u , s__ArmorPenetrationFlat___ArmorPenetrationFlat_get(this,u) + value)

            return value
        endfunction

        function s__ArmorPenetrationFlat___ArmorPenetrationFlat_onInit takes nothing returns nothing
            set BONUS_ARMOR_PENETRATION_FLAT=(s__Bonus_register((s__ArmorPenetrationFlat___ArmorPenetrationFlat__allocate()))) // INLINED!!
        endfunction
// scope ArmorPenetrationFlat ends
//***************************************************************************
//*  MagicPenetrationFlat
// scope MagicPenetrationFlat begins
    
        function s__MagicPenetrationFlat___MagicPenetrationFlat_get takes integer this,unit u returns real
            return (sc__MagicPenetration_get((u ) , ( true))) // INLINED!!
        endfunction

        function s__MagicPenetrationFlat___MagicPenetrationFlat_Set takes integer this,unit u,real value returns real
            return (sc__MagicPenetration_Set((u ) , (( value )*1.0) , ( true))) // INLINED!!
        endfunction

        function s__MagicPenetrationFlat___MagicPenetrationFlat_add takes integer this,unit u,real value returns real
            call s__MagicPenetrationFlat___MagicPenetrationFlat_Set(this,u , s__MagicPenetrationFlat___MagicPenetrationFlat_get(this,u) + value)

            return value
        endfunction

        function s__MagicPenetrationFlat___MagicPenetrationFlat_onInit takes nothing returns nothing
            set BONUS_MAGIC_PENETRATION_FLAT=(s__Bonus_register((s__MagicPenetrationFlat___MagicPenetrationFlat__allocate()))) // INLINED!!
        endfunction
// scope MagicPenetrationFlat ends
//***************************************************************************
//*  CooldownReductionFlat
// scope CooldownReductionFlat begins
    
        function s__CooldownReductionFlat___CooldownReductionFlat_get takes integer this,unit u returns real
            return (s__CDR_get((u) , 1)) // INLINED!!
        endfunction

        function s__CooldownReductionFlat___CooldownReductionFlat_Set takes integer this,unit u,real value returns real
            call s__CDR_Set((u ) , (( value)*1.0) , 1) // INLINED!!
            
            return value
        endfunction

        function s__CooldownReductionFlat___CooldownReductionFlat_add takes integer this,unit u,real value returns real
            call s__CooldownReductionFlat___CooldownReductionFlat_Set(this,u , s__CooldownReductionFlat___CooldownReductionFlat_get(this,u) + value)

            return value
        endfunction
    
        function s__CooldownReductionFlat___CooldownReductionFlat_onInit takes nothing returns nothing
            set BONUS_COOLDOWN_REDUCTION_FLAT=(s__Bonus_register((s__CooldownReductionFlat___CooldownReductionFlat__allocate()))) // INLINED!!
        endfunction
// scope CooldownReductionFlat ends
//***************************************************************************
//*  Periodic


//***************************************************************************
//*
//*  Unit Creation
//*
//***************************************************************************

//===========================================================================
function CreateBuildingsForPlayer0 takes nothing returns nothing
    local player p= Player(0)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=BlzCreateUnitWithSkin(p, 'hgtw', 256.0, 256.0, 270.000, 'hgtw')
    set u=BlzCreateUnitWithSkin(p, 'hgtw', - 256.0, 256.0, 270.000, 'hgtw')
    set u=BlzCreateUnitWithSkin(p, 'hgtw', - 256.0, - 256.0, 270.000, 'hgtw')
    set u=BlzCreateUnitWithSkin(p, 'hgtw', 256.0, - 256.0, 270.000, 'hgtw')
endfunction

//===========================================================================
function CreateUnitsForPlayer0 takes nothing returns nothing
    local player p= Player(0)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=BlzCreateUnitWithSkin(p, 'H001', 0.8, - 50.2, 281.314, 'H001')
    call SetUnitState(u, UNIT_STATE_MANA, 510)
endfunction

//===========================================================================
function CreateBuildingsForPlayer1 takes nothing returns nothing
    local player p= Player(1)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=BlzCreateUnitWithSkin(p, 'unp2', - 2496.0, - 3008.0, 270.000, 'unp2')
    set u=BlzCreateUnitWithSkin(p, 'uzg1', - 2080.0, - 2976.0, 270.000, 'uzg1')
    set u=BlzCreateUnitWithSkin(p, 'uzg1', - 2592.0, - 2528.0, 270.000, 'uzg1')
    set u=BlzCreateUnitWithSkin(p, 'hcas', - 2496.0, 2560.0, 270.000, 'hcas')
    set u=BlzCreateUnitWithSkin(p, 'hgtw', - 1984.0, 2560.0, 270.000, 'hgtw')
    set u=BlzCreateUnitWithSkin(p, 'hgtw', - 2496.0, 2048.0, 270.000, 'hgtw')
    set u=BlzCreateUnitWithSkin(p, 'ofrt', 2496.0, 2432.0, 270.000, 'ofrt')
    set u=BlzCreateUnitWithSkin(p, 'owtw', 2048.0, 2432.0, 270.000, 'owtw')
    set u=BlzCreateUnitWithSkin(p, 'owtw', 2432.0, 1920.0, 270.000, 'owtw')
    set u=BlzCreateUnitWithSkin(p, 'etoe', 2560.0, - 3072.0, 270.000, 'etoe')
    set u=BlzCreateUnitWithSkin(p, 'etrp', 2592.0, - 2528.0, 270.000, 'etrp')
    set u=BlzCreateUnitWithSkin(p, 'etrp', 2016.0, - 2912.0, 270.000, 'etrp')
endfunction

//===========================================================================
function CreateUnitsForPlayer1 takes nothing returns nothing
    local player p= Player(1)
    local unit u
    local integer unitID
    local trigger t
    local real life

    set u=BlzCreateUnitWithSkin(p, 'Ulic', - 394.3, - 2845.8, 84.993, 'Ulic')
    set u=BlzCreateUnitWithSkin(p, 'Udea', - 196.6, - 2826.0, 87.628, 'Udea')
    set u=BlzCreateUnitWithSkin(p, 'Udre', - 22.8, - 2829.9, 89.973, 'Udre')
    set u=BlzCreateUnitWithSkin(p, 'Ucrl', 173.0, - 2818.0, 92.620, 'Ucrl')
    set u=BlzCreateUnitWithSkin(p, 'ucry', - 330.1, - 3144.5, 86.121, 'ucry')
    set u=BlzCreateUnitWithSkin(p, 'ucry', - 197.8, - 3165.2, 87.788, 'ucry')
    set u=BlzCreateUnitWithSkin(p, 'ucry', - 76.6, - 3148.4, 89.300, 'ucry')
    set u=BlzCreateUnitWithSkin(p, 'ucry', 48.0, - 3169.1, 90.860, 'ucry')
    set u=BlzCreateUnitWithSkin(p, 'ucry', 164.1, - 3160.1, 92.314, 'ucry')
    set u=BlzCreateUnitWithSkin(p, 'ugho', - 326.3, - 3001.9, 86.045, 'ugho')
    set u=BlzCreateUnitWithSkin(p, 'ugho', - 219.1, - 3004.8, 87.432, 'ugho')
    set u=BlzCreateUnitWithSkin(p, 'ugho', - 98.7, - 3004.8, 88.991, 'ugho')
    set u=BlzCreateUnitWithSkin(p, 'ugho', 4.6, - 3010.4, 90.329, 'ugho')
    set u=BlzCreateUnitWithSkin(p, 'ugho', 118.7, - 3011.8, 91.804, 'ugho')
    set u=BlzCreateUnitWithSkin(p, 'uabo', - 623.2, - 2924.1, 82.100, 'uabo')
    set u=BlzCreateUnitWithSkin(p, 'uabo', 464.9, - 2896.7, 95.653, 'uabo')
    set u=BlzCreateUnitWithSkin(p, 'Hamg', - 2452.6, 288.8, 358.497, 'Hamg')
    set u=BlzCreateUnitWithSkin(p, 'Hmkg', - 2447.1, 136.0, 0.608, 'Hmkg')
    set u=BlzCreateUnitWithSkin(p, 'Hblm', - 2428.7, - 42.6, 3.090, 'Hblm')
    set u=BlzCreateUnitWithSkin(p, 'Hpal', - 2464.4, 468.6, 356.030, 'Hpal')
    set u=BlzCreateUnitWithSkin(p, 'hrif', - 2718.7, 468.6, 356.258, 'hrif')
    set u=BlzCreateUnitWithSkin(p, 'hrif', - 2712.9, 330.4, 358.045, 'hrif')
    set u=BlzCreateUnitWithSkin(p, 'hrif', - 2716.8, 216.3, 359.528, 'hrif')
    set u=BlzCreateUnitWithSkin(p, 'hrif', - 2711.2, 107.4, 0.944, 'hrif')
    set u=BlzCreateUnitWithSkin(p, 'hrif', - 2710.4, - 28.0, 2.703, 'hrif')
    set u=BlzCreateUnitWithSkin(p, 'hfoo', - 2601.2, 451.3, 356.386, 'hfoo')
    set u=BlzCreateUnitWithSkin(p, 'hkni', - 2505.9, - 237.2, 5.671, 'hkni')
    set u=BlzCreateUnitWithSkin(p, 'hkni', - 2547.9, 620.1, 354.281, 'hkni')
    set u=BlzCreateUnitWithSkin(p, 'hfoo', - 2571.1, - 44.9, 3.017, 'hfoo')
    set u=BlzCreateUnitWithSkin(p, 'hfoo', - 2573.8, 84.3, 1.284, 'hfoo')
    set u=BlzCreateUnitWithSkin(p, 'hfoo', - 2582.6, 183.2, 359.957, 'hfoo')
    set u=BlzCreateUnitWithSkin(p, 'hfoo', - 2584.4, 319.7, 358.130, 'hfoo')
    set u=BlzCreateUnitWithSkin(p, 'Oshd', 283.3, 2324.1, 264.566, 'Oshd')
    set u=BlzCreateUnitWithSkin(p, 'Otch', 74.9, 2368.5, 267.901, 'Otch')
    set u=BlzCreateUnitWithSkin(p, 'Ofar', - 110.3, 2360.4, 270.897, 'Ofar')
    set u=BlzCreateUnitWithSkin(p, 'Obla', - 265.3, 2356.7, 274.237, 'Obla')
    set u=BlzCreateUnitWithSkin(p, 'otau', - 495.3, 2490.9, 276.512, 'otau')
    set u=BlzCreateUnitWithSkin(p, 'otau', 449.4, 2470.8, 262.673, 'otau')
    set u=BlzCreateUnitWithSkin(p, 'ohun', 252.6, 2694.5, 265.974, 'ohun')
    set u=BlzCreateUnitWithSkin(p, 'ohun', 109.2, 2696.6, 268.156, 'ohun')
    set u=BlzCreateUnitWithSkin(p, 'ohun', - 30.1, 2702.9, 270.277, 'ohun')
    set u=BlzCreateUnitWithSkin(p, 'ohun', - 147.3, 2709.2, 272.055, 'ohun')
    set u=BlzCreateUnitWithSkin(p, 'ohun', - 269.5, 2717.6, 273.898, 'ohun')
    set u=BlzCreateUnitWithSkin(p, 'ogru', 243.7, 2544.4, 265.948, 'ogru')
    set u=BlzCreateUnitWithSkin(p, 'ogru', 125.6, 2539.5, 267.815, 'ogru')
    set u=BlzCreateUnitWithSkin(p, 'ogru', 8.8, 2544.4, 269.671, 'ogru')
    set u=BlzCreateUnitWithSkin(p, 'ogru', - 134.7, 2552.4, 271.946, 'ogru')
    set u=BlzCreateUnitWithSkin(p, 'ogru', - 261.8, 2547.6, 273.958, 'ogru')
    set u=BlzCreateUnitWithSkin(p, 'emtg', 2460.6, - 289.0, 171.094, 'emtg')
    set u=BlzCreateUnitWithSkin(p, 'emtg', 2480.8, 674.9, 184.881, 'emtg')
    set u=BlzCreateUnitWithSkin(p, 'esen', 2566.0, - 63.5, 174.633, 'esen')
    set u=BlzCreateUnitWithSkin(p, 'esen', 2568.2, 58.4, 176.490, 'esen')
    set u=BlzCreateUnitWithSkin(p, 'esen', 2567.1, 192.7, 178.266, 'esen')
    set u=BlzCreateUnitWithSkin(p, 'esen', 2571.4, 321.0, 180.001, 'esen')
    set u=BlzCreateUnitWithSkin(p, 'esen', 2562.7, 443.4, 181.660, 'esen')
    set u=BlzCreateUnitWithSkin(p, 'earc', 2708.5, - 56.6, 175.066, 'earc')
    set u=BlzCreateUnitWithSkin(p, 'earc', 2713.6, 59.0, 176.578, 'earc')
    set u=BlzCreateUnitWithSkin(p, 'earc', 2708.1, 196.1, 178.365, 'earc')
    set u=BlzCreateUnitWithSkin(p, 'earc', 2697.3, 333.4, 180.165, 'earc')
    set u=BlzCreateUnitWithSkin(p, 'earc', 2694.6, 466.2, 181.909, 'earc')
    set u=BlzCreateUnitWithSkin(p, 'Ekee', 2381.5, 447.4, 181.506, 'Ekee')
    set u=BlzCreateUnitWithSkin(p, 'Emoo', 2388.1, 283.7, 179.455, 'Emoo')
    set u=BlzCreateUnitWithSkin(p, 'Edem', 2371.4, 95.5, 177.306, 'Edem')
    set u=BlzCreateUnitWithSkin(p, 'Ewar', 2375.8, - 49.8, 174.971, 'Ewar')
endfunction

//===========================================================================
function CreatePlayerBuildings takes nothing returns nothing
    call CreateBuildingsForPlayer0()
    call CreateBuildingsForPlayer1()
endfunction

//===========================================================================
function CreatePlayerUnits takes nothing returns nothing
    call CreateUnitsForPlayer0()
    call CreateUnitsForPlayer1()
endfunction

//===========================================================================
function CreateAllUnits takes nothing returns nothing
    call CreatePlayerBuildings()
    call CreatePlayerUnits()
endfunction

//***************************************************************************
//*
//*  Regions
//*
//***************************************************************************

function CreateRegions takes nothing returns nothing
    local weathereffect we

    set gg_rct_Human=Rect(- 2816.0, 1600.0, - 1408.0, 2816.0)
    set gg_rct_Undead=Rect(- 2816.0, - 3328.0, - 1536.0, - 1728.0)
    set gg_rct_NightElf=Rect(1536.0, - 3328.0, 2816.0, - 1696.0)
    set gg_rct_Orc=Rect(1472.0, 1600.0, 2816.0, 2816.0)
    set gg_rct_Attack=Rect(- 448.0, - 448.0, 448.0, 448.0)
endfunction

//***************************************************************************
//*
//*  Triggers
//*
//***************************************************************************

//===========================================================================
// Trigger: Shop
//===========================================================================
//===========================================================================
// Trigger: Components
//===========================================================================
//===========================================================================
// Trigger: Alloc
//===========================================================================
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~ Alloc ~~ By Sevion ~~ Version 1.09 ~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
//  What is Alloc?
//         - Alloc implements an intuitive allocation method for array structs
//
//    =Pros=
//         - Efficient.
//         - Simple.
//         - Less overhead than regular structs.
//
//    =Cons=
//         - Must use array structs (hardly a con).
//         - Must manually call OnDestroy.
//         - Must use Delegates for inheritance.
//         - No default values for variables (use onInit instead).
//         - No array members (use another Alloc struct as a linked list or type declaration).
//
//    Methods:
//         - struct.allocate()
//         - struct.deallocate()
//
//           These methods are used just as they should be used in regular structs.
//
//    Modules:
//         - Alloc
//           Implements the most basic form of Alloc. Includes only create and destroy
//           methods.
//
//  Details:
//         - Less overhead than regular structs
//
//         - Use array structs when using Alloc. Put the implement at the top of the struct.
//
//         - Alloc operates almost exactly the same as default structs in debug mode with the exception of onDestroy.
//
//  How to import:
//         - Create a trigger named Alloc.
//         - Convert it to custom text and replace the whole trigger text with this.
//
//  Thanks:
//         - Nestharus for the method of allocation and suggestions on further merging.
//         - Bribe for suggestions like the static if and method names.
//         - PurgeandFire111 for some suggestions like the merging of Alloc and AllocX as well as OnDestroy stuff.
//
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//===========================================================================
// Trigger: Table
//===========================================================================
//===========================================================================
// Trigger: Utilities
//===========================================================================
//===========================================================================
// Trigger: Indexer
//===========================================================================
//===========================================================================
// Trigger: TimerUtils
//===========================================================================

//===========================================================================
// Trigger: MouseUtils
//===========================================================================
//===========================================================================
// Trigger: WorldBounds
//===========================================================================
//===========================================================================
// Trigger: LineSegment
//===========================================================================
//===========================================================================
// Trigger: TimedHandles
//===========================================================================
//===========================================================================
// Trigger: SpellEffectPlugin
//===========================================================================
//===========================================================================
// Trigger: SpellEffectEvent
//===========================================================================
//============================================================================
// SpellEffectEvent
// - Version 1.1.0.0
//
// API
// ---
//     RegisterSpellEffectEvent(integer abil, code onCast)
//
// Requires
// --------
//     RegisterPlayerUnitEvent: hiveworkshop.com/forums/showthread.php?t=203338
//
// Optional
// --------
//     Table: hiveworkshop.com/forums/showthread.php?t=188084
//
//===========================================================================
// Trigger: DestructableHider
//
// ids:
// id, 0, count
// id, -1, visibility state square
// id, count+1, destructable
// GetHandleId(d), 0, pos
//===========================================================================
//===========================================================================
// Trigger: ArcingFloatingText
//===========================================================================

//===========================================================================
// Trigger: GetMainSelectedUnit
//===========================================================================
//===========================================================================
// Trigger: RegisterPlayerUnitEvent
//===========================================================================

//===========================================================================
// Trigger: MissileEffect
//===========================================================================
//===========================================================================
// Trigger: MissileUtils
//===========================================================================
//===========================================================================
// Trigger: Missiles
//===========================================================================
//===========================================================================
// Trigger: Damage
//===========================================================================
//===========================================================================
// Trigger: Tenacity
//===========================================================================

//===========================================================================
// Trigger: TenacityUtils
//===========================================================================

//===========================================================================
// Trigger: CrowdControl
//===========================================================================

//===========================================================================
// Trigger: CooldownReduction
//===========================================================================
//===========================================================================
// Trigger: CooldownReductionUtils
//===========================================================================
//===========================================================================
// Trigger: Sulfuras
//===========================================================================
//===========================================================================
// Trigger: Explosive Rune
//===========================================================================
//===========================================================================
// Trigger: LivingMeteor
//===========================================================================
//===========================================================================
// Trigger: Afterburner
//===========================================================================
//===========================================================================
// Trigger: LavaElemental
//===========================================================================
//===========================================================================
// Trigger: SulfurasSmash
//===========================================================================
//===========================================================================
// Trigger: MoltenShield
//===========================================================================
//===========================================================================
// Trigger: Initialization
//===========================================================================
function Trig_Initialization_Actions takes nothing returns nothing
    call DisplayTextToForce(GetPlayersAll(), "TRIGSTR_174")
endfunction

//===========================================================================
function InitTrig_Initialization takes nothing returns nothing
    set gg_trg_Initialization=CreateTrigger()
    call TriggerAddAction(gg_trg_Initialization, function Trig_Initialization_Actions)
endfunction

//===========================================================================
// Trigger: Revive
//===========================================================================
// scope Revive begins
        function s__Revive___Revive_onDeath takes nothing returns nothing
            local unit d= GetTriggerUnit()
            local real x= GetUnitX(d)
            local real y= GetUnitY(d)

            if GetOwningPlayer(d) == Player(0) and IsUnitType(d, UNIT_TYPE_HERO) then
                call ReviveHero(d, x, y, true)
            endif

            set d=null
        endfunction

        function s__Revive___Revive_onInit takes nothing returns nothing
            call RegisterPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH , function s__Revive___Revive_onDeath)
        endfunction
// scope Revive ends
//===========================================================================
// Trigger: Refresh
//===========================================================================
function Trig_Refresh_Func002001002 takes nothing returns boolean
    return ( IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO) == true )
endfunction

function Trig_Refresh_Func002Func004C takes nothing returns boolean
    if ( not ( GetHeroLevel(GetEnumUnit()) < 20 ) ) then
        return false
    endif
    return true
endfunction

function Trig_Refresh_Func002A takes nothing returns nothing
    call SetUnitLifePercentBJ(GetEnumUnit(), 100.00)
    call SetUnitManaPercentBJ(GetEnumUnit(), 100.00)
    call UnitResetCooldown(GetEnumUnit())
    if ( Trig_Refresh_Func002Func004C() ) then
        call SetHeroLevelBJ(GetEnumUnit(), ( GetHeroLevel(GetEnumUnit()) + 1 ), true)
    else
    endif
endfunction

function Trig_Refresh_Actions takes nothing returns nothing
    call ClearTextMessagesBJ(GetPlayersAll())
    call ForGroupBJ(GetUnitsOfPlayerMatching(Player(0), Condition(function Trig_Refresh_Func002001002)), function Trig_Refresh_Func002A)
endfunction

//===========================================================================
function InitTrig_Refresh takes nothing returns nothing
    set gg_trg_Refresh=CreateTrigger()
    call TriggerRegisterPlayerEventEndCinematic(gg_trg_Refresh, Player(0))
    call TriggerAddAction(gg_trg_Refresh, function Trig_Refresh_Actions)
endfunction

//===========================================================================
// Trigger: Spawn
//===========================================================================
// scope Spawn begins

        function s__Spawn___Revive_Spawn takes real x,real y,integer melee,integer ranged returns nothing
            local integer i= 0
            local unit u

            loop
                exitwhen i > 3
                    if i < 3 then
                        set u=CreateUnit(Player(1), melee, x, y, 0)
                    else
                        set u=CreateUnit(Player(1), ranged, x, y, 0)
                    endif
                    call IssuePointOrderById(u, 851983, s__Spawn___Revive_centerX, s__Spawn___Revive_centerY)
                set i=i + 1
            endloop

            set u=null
        endfunction

        function s__Spawn___Revive_onPeriod takes nothing returns nothing
            local integer i= 0

            loop
                exitwhen i > 3
                    if i == 0 then
                        call s__Spawn___Revive_Spawn(GetRectCenterX(gg_rct_Human) , GetRectCenterY(gg_rct_Human) , 'hfoo' , 'hrif')
                    elseif i == 1 then
                        call s__Spawn___Revive_Spawn(GetRectCenterX(gg_rct_NightElf) , GetRectCenterY(gg_rct_NightElf) , 'esen' , 'earc')
                    elseif i == 2 then
                        call s__Spawn___Revive_Spawn(GetRectCenterX(gg_rct_Undead) , GetRectCenterY(gg_rct_Undead) , 'ugho' , 'ucry')
                    elseif i == 3 then
                        call s__Spawn___Revive_Spawn(GetRectCenterX(gg_rct_Orc) , GetRectCenterY(gg_rct_Orc) , 'ogru' , 'ohun')
                    endif
                set i=i + 1
            endloop
        endfunction

        function s__Spawn___Revive_onInit takes nothing returns nothing
            local trigger t= CreateTrigger()
            call TriggerRegisterTimerEventPeriodic(t, 45.00)
            call TriggerAddAction(t, function s__Spawn___Revive_onPeriod)
        endfunction
// scope Spawn ends
//===========================================================================
// Trigger: OnDamage
//===========================================================================
// scope OnDamage begins
        function s__OnDamage___OnDamage_onDamage takes nothing returns nothing
            local string text= N2S((s__Damage_damage[s__Damage_key]) , 0) // INLINED!!

            if (s__Damage_damage[s__Damage_key]) > 0 and (IsUnitType(s__DamageInterface___Unit_unit[((s__Damage_sources[s__Damage_key]))], UNIT_TYPE_HERO)) then // INLINED!!
                if (s__Damage_damageType[s__Damage_key]) == DAMAGE_TYPE_NORMAL then // INLINED!!
                    call s__ArcingTextTag_create("|cffff0000" + text + "|r" , s__DamageInterface___Unit_unit[(s__Damage_targets[s__Damage_key])]) // INLINED!!
                elseif (s__Damage_attackType[s__Damage_key]) == ATTACK_TYPE_NORMAL then // INLINED!!
                    call s__ArcingTextTag_create("|cff00ffff" + text + "|r" , s__DamageInterface___Unit_unit[(s__Damage_targets[s__Damage_key])]) // INLINED!!
                elseif (s__Damage_damageType[s__Damage_key]) == DAMAGE_TYPE_ENHANCED then // INLINED!!
                    call s__ArcingTextTag_create("|cff00ff00" + text + "|r" , s__DamageInterface___Unit_unit[(s__Damage_targets[s__Damage_key])]) // INLINED!!
                elseif (s__Damage_damageType[s__Damage_key]) == DAMAGE_TYPE_UNIVERSAL then // INLINED!!
                    call s__ArcingTextTag_create(text , s__DamageInterface___Unit_unit[(s__Damage_targets[s__Damage_key])]) // INLINED!!
                else
                    call s__ArcingTextTag_create("|cffe4fd00" + text + "|r" , s__DamageInterface___Unit_unit[(s__Damage_targets[s__Damage_key])]) // INLINED!!
                endif
            elseif (s__Damage_damage[s__Damage_key]) < 0 then // INLINED!!
                call s__ArcingTextTag_create("|cff00ff00 +" + text + "|r" , s__DamageInterface___Unit_unit[(s__Damage_targets[s__Damage_key])]) // INLINED!!
            endif
        endfunction

        function s__OnDamage___OnDamage_onInit takes nothing returns nothing
            call TriggerAddCondition(s__Damage_anyAfter, Filter((function s__OnDamage___OnDamage_onDamage))) // INLINED!!
        endfunction
// scope OnDamage ends
//===========================================================================
function InitCustomTriggers takes nothing returns nothing
    //Function not found: call InitTrig_Shop()
    //Function not found: call InitTrig_Components()
    //Function not found: call InitTrig_Alloc()
    //Function not found: call InitTrig_Table()
    //Function not found: call InitTrig_Utilities()
    //Function not found: call InitTrig_Indexer()
    //Function not found: call InitTrig_TimerUtils()
    //Function not found: call InitTrig_MouseUtils()
    //Function not found: call InitTrig_WorldBounds()
    //Function not found: call InitTrig_LineSegment()
    //Function not found: call InitTrig_TimedHandles()
    //Function not found: call InitTrig_SpellEffectPlugin()
    //Function not found: call InitTrig_SpellEffectEvent()
    //Function not found: call InitTrig_DestructableHider()
    //Function not found: call InitTrig_ArcingFloatingText()
    //Function not found: call InitTrig_GetMainSelectedUnit()
    //Function not found: call InitTrig_RegisterPlayerUnitEvent()
    //Function not found: call InitTrig_MissileEffect()
    //Function not found: call InitTrig_MissileUtils()
    //Function not found: call InitTrig_Missiles()
    //Function not found: call InitTrig_Damage()
    //Function not found: call InitTrig_Tenacity()
    //Function not found: call InitTrig_TenacityUtils()
    //Function not found: call InitTrig_CrowdControl()
    //Function not found: call InitTrig_CooldownReduction()
    //Function not found: call InitTrig_CooldownReductionUtils()
    //Function not found: call InitTrig_Sulfuras()
    //Function not found: call InitTrig_Explosive_Rune()
    //Function not found: call InitTrig_LivingMeteor()
    //Function not found: call InitTrig_Afterburner()
    //Function not found: call InitTrig_LavaElemental()
    //Function not found: call InitTrig_SulfurasSmash()
    //Function not found: call InitTrig_MoltenShield()
    call InitTrig_Initialization()
    //Function not found: call InitTrig_Revive()
    call InitTrig_Refresh()
    //Function not found: call InitTrig_Spawn()
    //Function not found: call InitTrig_OnDamage()
endfunction

//===========================================================================
function RunInitializationTriggers takes nothing returns nothing
    call ConditionalTriggerExecute(gg_trg_Initialization)
endfunction

//***************************************************************************
//*
//*  Players
//*
//***************************************************************************

function InitCustomPlayerSlots takes nothing returns nothing

    // Player 0
    call SetPlayerStartLocation(Player(0), 0)
    call SetPlayerColor(Player(0), ConvertPlayerColor(0))
    call SetPlayerRacePreference(Player(0), RACE_PREF_HUMAN)
    call SetPlayerRaceSelectable(Player(0), true)
    call SetPlayerController(Player(0), MAP_CONTROL_USER)

endfunction

function InitCustomTeams takes nothing returns nothing
    // Force: TRIGSTR_002
    call SetPlayerTeam(Player(0), 0)

endfunction

//***************************************************************************
//*
//*  Main Initialization
//*
//***************************************************************************

//===========================================================================
function main takes nothing returns nothing
    call SetCameraBounds(- 3328.0 + GetCameraMargin(CAMERA_MARGIN_LEFT), - 3584.0 + GetCameraMargin(CAMERA_MARGIN_BOTTOM), 3328.0 - GetCameraMargin(CAMERA_MARGIN_RIGHT), 3072.0 - GetCameraMargin(CAMERA_MARGIN_TOP), - 3328.0 + GetCameraMargin(CAMERA_MARGIN_LEFT), 3072.0 - GetCameraMargin(CAMERA_MARGIN_TOP), 3328.0 - GetCameraMargin(CAMERA_MARGIN_RIGHT), - 3584.0 + GetCameraMargin(CAMERA_MARGIN_BOTTOM))
    call SetDayNightModels("Environment\\DNC\\DNCLordaeron\\DNCLordaeronTerrain\\DNCLordaeronTerrain.mdl", "Environment\\DNC\\DNCLordaeron\\DNCLordaeronUnit\\DNCLordaeronUnit.mdl")
    call NewSoundEnvironment("Default")
    call SetAmbientDaySound("LordaeronSummerDay")
    call SetAmbientNightSound("LordaeronSummerNight")
    call SetMapMusic("Music", true, 0)
    call CreateRegions()
    call CreateAllUnits()
    call InitBlizzard()

call ExecuteFunc("jasshelper__initstructs91083484")
call ExecuteFunc("DestructableHider___init")
call ExecuteFunc("GetMainSelectedUnit___init_function")
call ExecuteFunc("TimerUtils___init")

    call InitGlobals()
    call InitCustomTriggers()
    call ConditionalTriggerExecute(gg_trg_Initialization) // INLINED!!

endfunction

//***************************************************************************
//*
//*  Map Configuration
//*
//***************************************************************************

function config takes nothing returns nothing
    call SetMapName("TRIGSTR_003")
    call SetMapDescription("")
    call SetPlayers(1)
    call SetTeams(1)
    call SetGamePlacement(MAP_PLACEMENT_USE_MAP_SETTINGS)

    call DefineStartLocation(0, 0.0, - 64.0)

    // Player setup
    call InitCustomPlayerSlots()
    call SetPlayerSlotAvailable(Player(0), MAP_CONTROL_USER)
    call InitGenericPlayerSlots()
endfunction




//Struct method generated initializers/callers:

//Functions for BigArrays:
function sa__Shop___Inventory_onClick takes nothing returns boolean

            local player p= GetTriggerPlayer()
            local integer b= (s__Component_array[GetPlayerId(GetTriggerPlayer())]) // INLINED!!
            local integer id= GetPlayerId(p)
            local integer i= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (1))) // INLINED!!
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (0))) // INLINED!!
            if this != 0 then
                if GetLocalPlayer() == GetTriggerPlayer() then
                    call s__Button__set_highlighted(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],id)), ((LoadInteger(Table___ht, (s__Shop___Inventory_selected[this]), (id))))))),false) // INLINED!!
                    call s__Button__set_highlighted(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_button[this],id)), (i)))),true) // INLINED!!
                endif
                call SaveInteger(Table___ht, (s__Shop___Inventory_selected[this]), (id), ( i)) // INLINED!!
            endif
   return true
endfunction
function sa__Shop___Inventory_onDoubleClick takes nothing returns boolean

            local integer b= (s__Component_array[GetPlayerId(GetTriggerPlayer())]) // INLINED!!
            local player p= GetTriggerPlayer()
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (0))) // INLINED!!
            local integer i= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (1))) // INLINED!!
            local integer id= GetPlayerId(p)
            if this != 0 then
                if sc__Shop_sell(s__Shop___Inventory_shop[this],(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_item[this],id)), (i))) , p , i) then // INLINED!!
                    call s__Shop___Inventory_show(this,sc__Shop___Buyer__getindex(s__Shop_buyer[s__Shop___Inventory_shop[this]],id))
                endif
            endif
            set p=null
   return true
endfunction
function sa__Shop___Inventory_onRightClick takes nothing returns boolean

            local player p= GetTriggerPlayer()
            local integer id= GetPlayerId(p)
            local integer b= (s__Component_array[GetPlayerId(GetTriggerPlayer())]) // INLINED!!
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (0))) // INLINED!!
            local integer i= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (1))) // INLINED!!
            if this != 0 then
                if sc__Shop_sell(s__Shop___Inventory_shop[this],(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_item[this],id)), (i))) , p , i) then // INLINED!!
                    call s__Shop___Inventory_show(this,sc__Shop___Buyer__getindex(s__Shop_buyer[s__Shop___Inventory_shop[this]],id))
                endif
            endif
            set p=null
   return true
endfunction
function sa__Shop___Transaction_count takes nothing returns boolean
local integer shop=f__arg_integer1
local integer id=f__arg_integer2
set f__result_integer= (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Transaction_counter,shop)), (id))) // INLINED!!
   return true
endfunction
function sa__MissileGroup_destroy takes nothing returns boolean
local integer this=f__arg_this
            call s__MissileUtils___MGroup_deallocate(s__MissileGroup_group[this])
            call s__MissileGroup_deallocate(this)
   return true
endfunction
function sa__MissileGroup_missileAt takes nothing returns boolean
local integer this=f__arg_this
local integer i=f__arg_integer1
            local integer node= s__MissileUtils___MGroup_next[s__MissileGroup_group[this]]
            local integer j= 0
            if s__MissileGroup_size[this] > 0 and i <= s__MissileGroup_size[this] - 1 then
                loop
                    exitwhen j == i
                        set node=s__MissileUtils___MGroup_next[node]
                    set j=j + 1
                endloop
set f__result_integer= s__MissileUtils___MGroup_missile[node]
return true
            else
set f__result_integer= 0
return true
            endif
   return true
endfunction
function sa__MissileGroup_remove takes nothing returns boolean
local integer this=f__arg_this
local integer missile=f__arg_integer1
            local integer node= s__MissileUtils___MGroup_next[s__MissileGroup_group[this]]
            loop
                exitwhen node == s__MissileGroup_group[this]
                    if s__MissileUtils___MGroup_missile[node] == missile then
                        set s__MissileGroup_size[this]=s__MissileGroup_size[this] - 1
                        call s__MissileUtils___MGroup_remove(node)
                        exitwhen true
                    endif
                set node=s__MissileUtils___MGroup_next[node]
            endloop
   return true
endfunction
function sa__MissileGroup_insert takes nothing returns boolean
local integer this=f__arg_this
local integer missile=f__arg_integer1
            set s__MissileGroup_size[this]=s__MissileGroup_size[this] + 1
            call s__MissileUtils___MGroup_insert(s__MissileGroup_group[this],missile)
   return true
endfunction
function sa__MissileGroup_clear takes nothing returns boolean
local integer this=f__arg_this
            local integer node= s__MissileUtils___MGroup_next[s__MissileGroup_group[this]]
            loop
                exitwhen node == s__MissileGroup_group[this]
                    call s__MissileUtils___MGroup_remove(node)
                set node=s__MissileUtils___MGroup_next[node]
            endloop
            set s__MissileGroup_size[this]=0
   return true
endfunction
function sa__MissileGroup_contains takes nothing returns boolean
local integer this=f__arg_this
local integer missile=f__arg_integer1
            local integer node= s__MissileUtils___MGroup_next[s__MissileGroup_group[this]]
            local boolean found= false
            loop
                exitwhen node == s__MissileGroup_group[this]
                    if s__MissileUtils___MGroup_missile[node] == missile then
                        set found=true
                        exitwhen true
                    endif
                set node=s__MissileUtils___MGroup_next[node]
            endloop
set f__result_boolean= found
   return true
endfunction
function sa__MissileGroup_addGroup takes nothing returns boolean
local integer this=f__arg_this
local integer source=f__arg_integer1
            local integer node= s__MissileUtils___MGroup_next[s__MissileGroup_group[source]]
            loop
                exitwhen node == s__MissileGroup_group[source]
                    if not s__MissileGroup_contains(this,s__MissileUtils___MGroup_missile[node]) then
                        call s__MissileGroup_insert(this,s__MissileUtils___MGroup_missile[node])
                    endif
                set node=s__MissileUtils___MGroup_next[node]
            endloop
   return true
endfunction
function sa__MissileGroup_removeGroup takes nothing returns boolean
local integer this=f__arg_this
local integer source=f__arg_integer1
            local integer node= s__MissileUtils___MGroup_next[s__MissileGroup_group[source]]
            loop
                exitwhen node == s__MissileGroup_group[source]
                    if s__MissileGroup_contains(this,s__MissileUtils___MGroup_missile[node]) then
                        call s__MissileGroup_remove(this,s__MissileUtils___MGroup_missile[node])
                    endif
                set node=s__MissileUtils___MGroup_next[node]
            endloop
   return true
endfunction
function sa__MissileGroup_create takes nothing returns boolean

            local integer this= s__MissileGroup__allocate()
            set s__MissileGroup_group[this]=(s__MissileUtils___MGroup_init((s__MissileUtils___MGroup_allocate()))) // INLINED!!
            set s__MissileGroup_size[this]=0
set f__result_integer= this
   return true
endfunction
function sa__CrowdControl_silence takes nothing returns boolean
    call s__CrowdControl_cast(null , (f__arg_unit1) , 0 , 0 , 0 , 0 , ((f__arg_real1)*1.0) , (f__arg_string1) , (f__arg_string2) , (f__arg_boolean1) , false , false , false , CROWD_CONTROL_SILENCE) // INLINED!!
   return true
endfunction
function sa__CrowdControl_silenced takes nothing returns boolean
    set f__result_boolean=(GetUnitAbilityLevel((f__arg_unit1), CrowdControl___SILENCE_BUFF) > 0) // INLINED!!
   return true
endfunction
function sa__CrowdControl_stun takes nothing returns boolean
    call s__CrowdControl_cast(null , (f__arg_unit1) , 0 , 0 , 0 , 0 , ((f__arg_real1)*1.0) , (f__arg_string1) , (f__arg_string2) , (f__arg_boolean1) , false , false , false , CROWD_CONTROL_STUN) // INLINED!!
   return true
endfunction
function sa__CrowdControl_stunned takes nothing returns boolean
    set f__result_boolean=(GetUnitAbilityLevel((f__arg_unit1), CrowdControl___STUN_BUFF) > 0) // INLINED!!
   return true
endfunction
function sa__CrowdControl_slow takes nothing returns boolean
    call s__CrowdControl_cast(null , (f__arg_unit1) , ((f__arg_real1)*1.0) , 0 , 0 , 0 , ((f__arg_real2)*1.0) , (f__arg_string1) , (f__arg_string2) , (f__arg_boolean1) , false , false , false , CROWD_CONTROL_SLOW) // INLINED!!
   return true
endfunction
function sa__CrowdControl_slowed takes nothing returns boolean
    set f__result_boolean=(GetUnitAbilityLevel((f__arg_unit1), CrowdControl___MOVEMENT_SLOW_BUFF) > 0) // INLINED!!
   return true
endfunction
function sa__CrowdControl_slowAttack takes nothing returns boolean
    call s__CrowdControl_cast(null , (f__arg_unit1) , ((f__arg_real1)*1.0) , 0 , 0 , 0 , ((f__arg_real2)*1.0) , (f__arg_string1) , (f__arg_string2) , (f__arg_boolean1) , false , false , false , CROWD_CONTROL_SLOW_ATTACK) // INLINED!!
   return true
endfunction
function sa__CrowdControl_attackSlowed takes nothing returns boolean
    set f__result_boolean=(GetUnitAbilityLevel((f__arg_unit1), CrowdControl___ATTACK_SLOW_BUFF) > 0) // INLINED!!
   return true
endfunction
function sa__CrowdControl_banish takes nothing returns boolean
    call s__CrowdControl_cast(null , (f__arg_unit1) , 0 , 0 , 0 , 0 , ((f__arg_real1)*1.0) , (f__arg_string1) , (f__arg_string2) , (f__arg_boolean1) , false , false , false , CROWD_CONTROL_BANISH) // INLINED!!
   return true
endfunction
function sa__CrowdControl_banished takes nothing returns boolean
    set f__result_boolean=(GetUnitAbilityLevel((f__arg_unit1), CrowdControl___BANISH_BUFF) > 0) // INLINED!!
   return true
endfunction
function sa__CrowdControl_ensnare takes nothing returns boolean
    call s__CrowdControl_cast(null , (f__arg_unit1) , 0 , 0 , 0 , 0 , ((f__arg_real1)*1.0) , (f__arg_string1) , (f__arg_string2) , (f__arg_boolean1) , false , false , false , CROWD_CONTROL_ENSNARE) // INLINED!!
   return true
endfunction
function sa__CrowdControl_ensnared takes nothing returns boolean
    set f__result_boolean=(GetUnitAbilityLevel((f__arg_unit1), CrowdControl___ENSNARE_BUFF) > 0) // INLINED!!
   return true
endfunction
function sa__CrowdControl_purge takes nothing returns boolean
    call s__CrowdControl_cast(null , (f__arg_unit1) , 0 , 0 , 0 , 0 , ((f__arg_real1)*1.0) , (f__arg_string1) , (f__arg_string2) , (f__arg_boolean1) , false , false , false , CROWD_CONTROL_PURGE) // INLINED!!
   return true
endfunction
function sa__CrowdControl_purged takes nothing returns boolean
    set f__result_boolean=(GetUnitAbilityLevel((f__arg_unit1), CrowdControl___PURGE_BUFF) > 0) // INLINED!!
   return true
endfunction
function sa__CrowdControl_hex takes nothing returns boolean
    call s__CrowdControl_cast(null , (f__arg_unit1) , 0 , 0 , 0 , 0 , ((f__arg_real1)*1.0) , (f__arg_string1) , (f__arg_string2) , (f__arg_boolean1) , false , false , false , CROWD_CONTROL_HEX) // INLINED!!
   return true
endfunction
function sa__CrowdControl_hexed takes nothing returns boolean
    set f__result_boolean=(GetUnitAbilityLevel((f__arg_unit1), CrowdControl___HEX_BUFF) > 0) // INLINED!!
   return true
endfunction
function sa__CrowdControl_sleep takes nothing returns boolean
    call s__CrowdControl_cast(null , (f__arg_unit1) , 0 , 0 , 0 , 0 , ((f__arg_real1)*1.0) , (f__arg_string1) , (f__arg_string2) , (f__arg_boolean1) , false , false , false , CROWD_CONTROL_SLEEP) // INLINED!!
   return true
endfunction
function sa__CrowdControl_sleeping takes nothing returns boolean
    set f__result_boolean=(GetUnitAbilityLevel((f__arg_unit1), CrowdControl___SLEEP_BUFF) > 0) // INLINED!!
   return true
endfunction
function sa__CrowdControl_cyclone takes nothing returns boolean
    call s__CrowdControl_cast(null , (f__arg_unit1) , 0 , 0 , 0 , 0 , ((f__arg_real1)*1.0) , (f__arg_string1) , (f__arg_string2) , (f__arg_boolean1) , false , false , false , CROWD_CONTROL_CYCLONE) // INLINED!!
   return true
endfunction
function sa__CrowdControl_cycloned takes nothing returns boolean
    set f__result_boolean=(GetUnitAbilityLevel((f__arg_unit1), CrowdControl___CYCLONE_BUFF) > 0) // INLINED!!
   return true
endfunction
function sa__CrowdControl_entangle takes nothing returns boolean
    call s__CrowdControl_cast(null , (f__arg_unit1) , 0 , 0 , 0 , 0 , ((f__arg_real1)*1.0) , (f__arg_string1) , (f__arg_string2) , (f__arg_boolean1) , false , false , false , CROWD_CONTROL_ENTANGLE) // INLINED!!
   return true
endfunction
function sa__CrowdControl_entangled takes nothing returns boolean
    set f__result_boolean=(GetUnitAbilityLevel((f__arg_unit1), CrowdControl___ENTANGLE_BUFF) > 0) // INLINED!!
   return true
endfunction
function sa__CrowdControl_knockback takes nothing returns boolean
    call s__CrowdControl_knockback(f__arg_unit1,f__arg_real1,f__arg_real2,f__arg_real3,f__arg_string1,f__arg_string2,f__arg_boolean1,f__arg_boolean2,f__arg_boolean3,f__arg_boolean4)
   return true
endfunction
function sa__CrowdControl_knockedback takes nothing returns boolean
    set f__result_boolean=(s__Knockback_struct[GetUnitUserData(((f__arg_unit1)))] != 0) // INLINED!!
   return true
endfunction
function sa__CrowdControl_knockup takes nothing returns boolean
    call s__CrowdControl_cast(null , (f__arg_unit1) , 0 , 0 , 0 , ((f__arg_real1)*1.0) , ((f__arg_real2)*1.0) , (f__arg_string1) , (f__arg_string2) , (f__arg_boolean1) , false , false , false , CROWD_CONTROL_KNOCKUP) // INLINED!!
   return true
endfunction
function sa__CrowdControl_knockedup takes nothing returns boolean
    set f__result_boolean=(s__Knockup_knocked[GetUnitUserData(((f__arg_unit1)))] > 0) // INLINED!!
   return true
endfunction
function sa__CrowdControl_fear takes nothing returns boolean
    call s__CrowdControl_cast(null , (f__arg_unit1) , 0 , 0 , 0 , 0 , ((f__arg_real1)*1.0) , (f__arg_string1) , (f__arg_string2) , (f__arg_boolean1) , false , false , false , CROWD_CONTROL_FEAR) // INLINED!!
   return true
endfunction
function sa__CrowdControl_feared takes nothing returns boolean
    set f__result_boolean=(GetUnitAbilityLevel(((f__arg_unit1)), CrowdControl___FEAR_BUFF) > 0) // INLINED!!
   return true
endfunction
function sa__CrowdControl_disarm takes nothing returns boolean
    call s__CrowdControl_cast(null , (f__arg_unit1) , 0 , 0 , 0 , 0 , ((f__arg_real1)*1.0) , (f__arg_string1) , (f__arg_string2) , (f__arg_boolean1) , false , false , false , CROWD_CONTROL_DISARM) // INLINED!!
   return true
endfunction
function sa__CrowdControl_disarmed takes nothing returns boolean
    set f__result_boolean=(GetUnitAbilityLevel((f__arg_unit1), CrowdControl___DISARM_BUFF) > 0) // INLINED!!
   return true
endfunction
function sa__CrowdControl_taunt takes nothing returns boolean
    call s__CrowdControl_cast((f__arg_unit1) , (f__arg_unit2) , 0 , 0 , 0 , 0 , ((f__arg_real1)*1.0) , (f__arg_string1) , (f__arg_string2) , (f__arg_boolean1) , false , false , false , CROWD_CONTROL_TAUNT) // INLINED!!
   return true
endfunction
function sa__CrowdControl_taunted takes nothing returns boolean
    set f__result_boolean=(GetUnitAbilityLevel(((f__arg_unit1)), CrowdControl___TAUNT_BUFF) > 0) // INLINED!!
   return true
endfunction
function sa__CrowdControl_dispel takes nothing returns boolean
    call s__CrowdControl_dispel(f__arg_unit1,f__arg_integer1)
   return true
endfunction
function sa__CrowdControl_dispelAll takes nothing returns boolean
    call s__CrowdControl_dispelAll(f__arg_unit1)
   return true
endfunction
function sa__CrowdControl_remaining takes nothing returns boolean
    set f__result_real=(TimerGetRemaining(LoadTimerHandle(s__CrowdControl_timer, GetHandleId((f__arg_unit1)), (f__arg_integer1)))) // INLINED!!
   return true
endfunction
function sa__CrowdControl_register takes nothing returns boolean
local integer id=f__arg_integer1
local code c=f__arg_code1
            if id >= CROWD_CONTROL_SILENCE and id <= CROWD_CONTROL_KNOCKUP then
                if s__CrowdControl_event[id] == null then
                    set s__CrowdControl_event[id]=CreateTrigger()
                endif
                call TriggerAddCondition(s__CrowdControl_event[id], Filter(c))
            else
                call TriggerAddCondition(s__CrowdControl_trigger, Filter(c))
            endif
   return true
endfunction
function sa__TimedPause_create takes nothing returns boolean
    set f__result_integer=s__TimedPause_create(f__arg_unit1,f__arg_real1,f__arg_boolean1)
   return true
endfunction
function sa__TimedDestructable_create takes nothing returns boolean
    set f__result_integer=s__TimedDestructable_create(f__arg_destructable1,f__arg_real1)
   return true
endfunction
function sa__AbilityCooldown_start takes nothing returns boolean
    call s__AbilityCooldown_start(f__arg_unit1,f__arg_integer1,f__arg_real1)
   return true
endfunction
function sa__EffectLink_BuffLink takes nothing returns boolean
    call s__EffectLink_BuffLink(f__arg_unit1,f__arg_integer1,f__arg_string1,f__arg_string2)
   return true
endfunction
function sa__EffectLink_ItemLink takes nothing returns boolean
    call s__EffectLink_ItemLink(f__arg_unit1,f__arg_item1,f__arg_string1,f__arg_string2)
   return true
endfunction
function sa__DummyPool_recycle takes nothing returns boolean
    call s__DummyPool_recycle(f__arg_unit1)
   return true
endfunction
function sa__DummyPool_retrieve takes nothing returns boolean
local player owner=f__arg_player1
local real x=f__arg_real1
local real y=f__arg_real2
local real z=f__arg_real3
local real face=f__arg_real4
            if BlzGroupGetSize(s__DummyPool_group) > 0 then
                set bj_lastCreatedUnit=FirstOfGroup(s__DummyPool_group)
                call BlzPauseUnitEx(bj_lastCreatedUnit, false)
                call ShowUnit(bj_lastCreatedUnit, true)
                call GroupRemoveUnit(s__DummyPool_group, bj_lastCreatedUnit)
                call SetUnitX(bj_lastCreatedUnit, x)
                call SetUnitY(bj_lastCreatedUnit, y)
                call SetUnitFlyHeight(bj_lastCreatedUnit, z, 0)
                call BlzSetUnitFacingEx(bj_lastCreatedUnit, face * bj_RADTODEG)
                call SetUnitOwner(bj_lastCreatedUnit, owner, false)
            else
                set bj_lastCreatedUnit=CreateUnit(owner, Utilities_DUMMY, x, y, face * bj_RADTODEG)
                call SetUnitFlyHeight(bj_lastCreatedUnit, z, 0)
            endif
set f__result_unit= bj_lastCreatedUnit
   return true
endfunction
function sa__DummyPool_recycleTimed takes nothing returns boolean
    call s__DummyPool_recycleTimed(f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__ChainLightning_create takes nothing returns boolean
    set f__result_integer=s__ChainLightning_create(f__arg_unit1,f__arg_unit2,f__arg_real1,f__arg_real2,f__arg_real3,f__arg_real4,f__arg_integer1,f__arg_attacktype1,f__arg_damagetype1,f__arg_string1,f__arg_string2,f__arg_string3,f__arg_boolean1)
   return true
endfunction
function sa__EffectSpam_spam takes nothing returns boolean
    call s__EffectSpam_spam(f__arg_unit1,f__arg_string1,f__arg_string2,f__arg_real1,f__arg_real2,f__arg_real3,f__arg_real4,f__arg_real5,f__arg_integer1)
   return true
endfunction
function sa__TimedAbility_add takes nothing returns boolean
    call s__TimedAbility_add(f__arg_unit1,f__arg_integer1,f__arg_real1,f__arg_integer2,f__arg_boolean1)
   return true
endfunction
function sa__ResetCooldown_reset takes nothing returns boolean
    call s__ResetCooldown_reset(f__arg_unit1,f__arg_integer1)
   return true
endfunction
function sa__ArcingTextTag_StartTimer takes nothing returns boolean
local real timeout=f__arg_real1
local boolean periodic=f__arg_boolean1
local integer this=f__arg_integer1
local integer uniqueId=f__arg_integer2
            local integer index= R2I(timeout * 100000)
            local integer id
            if this != 0 then
                set s__ArcingTextTag_Periodic____unique[this]=uniqueId
                set s__ArcingTextTag_Periodic____allocated[this]=true
                if s__ArcingTextTag_Periodic____unique[this] >= 0 and not (HaveSavedInteger(Table___ht, (s__ArcingTextTag_Periodic___struct), (s__ArcingTextTag_Periodic____unique[this]))) then // INLINED!!
                    call SaveInteger(Table___ht, (s__ArcingTextTag_Periodic___struct), (s__ArcingTextTag_Periodic____unique[this]), ( this)) // INLINED!!
                endif
                if periodic then
                    if timeout <= s__ArcingTextTag_Periodic___PERIODIC_THRESHOLD then
                        if not (HaveSavedHandle(Table___ht, (((s__ArcingTextTag_Periodic___timers))), (index))) then // INLINED!!
                            call SaveTimerHandle(Table___ht, (((s__ArcingTextTag_Periodic___timers))), (index), ( CreateTimer())) // INLINED!!
                        endif
                        set id=GetHandleId((LoadTimerHandle(Table___ht, (((s__ArcingTextTag_Periodic___timers))), (index)))) // INLINED!!
                        set s__ArcingTextTag_Periodic____timer[this]=(LoadTimerHandle(Table___ht, (((s__ArcingTextTag_Periodic___timers))), (index))) // INLINED!!
                        call SaveInteger(Table___ht, (s__ArcingTextTag_Periodic___table), ((LoadInteger(Table___ht, (s__ArcingTextTag_Periodic___key), (id)))), ( this)) // INLINED!!
                        call SaveInteger(Table___ht, (s__ArcingTextTag_Periodic___key), (id), ( (LoadInteger(Table___ht, (s__ArcingTextTag_Periodic___key), (id))) + 1)) // INLINED!!
                        if (LoadInteger(Table___ht, (s__ArcingTextTag_Periodic___key), (id))) == 1 then // INLINED!!
                            call TimerStart((LoadTimerHandle(Table___ht, (((s__ArcingTextTag_Periodic___timers))), (index))), timeout, periodic, function s__ArcingTextTag_Periodic___onPeriodic) // INLINED!!
                        endif
                    else
                        set s__ArcingTextTag_Periodic____timer[this]=NewTimerEx(this)
                        call TimerStart(s__ArcingTextTag_Periodic____timer[this], timeout, periodic, function s__ArcingTextTag_Periodic___onPeriodic)
                    endif
                else
                    set s__ArcingTextTag_Periodic____timer[this]=NewTimerEx(this)
                    call TimerStart(s__ArcingTextTag_Periodic____timer[this], timeout, periodic, function s__ArcingTextTag_Periodic___onTimeout)
                endif
            else
                call BJDebugMsg("Periodic Error: instance not provided")
            endif
   return true
endfunction
function sa__Tenacity_get takes nothing returns boolean
    set f__result_real=s__Tenacity_get(f__arg_unit1,f__arg_integer1)
   return true
endfunction
function sa__Tenacity_Set takes nothing returns boolean
    call s__Tenacity_Set(f__arg_unit1,f__arg_real1,f__arg_integer1)
   return true
endfunction
function sa__Tenacity_add takes nothing returns boolean
    call s__Tenacity_add(f__arg_unit1,f__arg_real1,f__arg_integer1)
   return true
endfunction
function sa__Tenacity_remove takes nothing returns boolean
    set f__result_boolean=s__Tenacity_remove(f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__Tenacity_calculate takes nothing returns boolean
    set f__result_real=s__Tenacity_calculate(f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__Tenacity_register takes nothing returns boolean
    set f__result_integer=s__Tenacity_register(f__arg_unit1)
   return true
endfunction
function sa__Tenacity_print takes nothing returns boolean
    call s__Tenacity_print(f__arg_unit1)
   return true
endfunction
function sa__Tenacity___List_update takes nothing returns boolean
local integer this=f__arg_this
            local integer node= s__Tenacity___List_next[this]
            local integer i= 0
            if s__Tenacity___List_size[this] > 0 then
                loop
                    exitwhen node == this
                        if i > 0 then
                            set s__Tenacity___List_tenacity[this]=s__Tenacity___List_tenacity[this] * ( 1 - s__Tenacity___List_value[node] )
                        else
                            set s__Tenacity___List_tenacity[this]=1 - s__Tenacity___List_value[node]
                        endif
                        set i=i + 1
                    set node=s__Tenacity___List_next[node]
                endloop
            endif
   return true
endfunction
function sa__MagicResistance_get takes nothing returns boolean
    set f__result_real=s__MagicResistance_get(f__arg_unit1)
   return true
endfunction
function sa__MagicResistance_Set takes nothing returns boolean
    set f__result_real=s__MagicResistance_Set(f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__MagicPenetration_get takes nothing returns boolean
    set f__result_real=s__MagicPenetration_get(f__arg_unit1,f__arg_boolean1)
   return true
endfunction
function sa__MagicPenetration_Set takes nothing returns boolean
    set f__result_real=s__MagicPenetration_Set(f__arg_unit1,f__arg_real1,f__arg_boolean1)
   return true
endfunction
function sa__ArmorPenetration_get takes nothing returns boolean
    set f__result_real=s__ArmorPenetration_get(f__arg_unit1,f__arg_boolean1)
   return true
endfunction
function sa__ArmorPenetration_Set takes nothing returns boolean
    set f__result_real=s__ArmorPenetration_Set(f__arg_unit1,f__arg_real1,f__arg_boolean1)
   return true
endfunction
function sa__Critical_getChance takes nothing returns boolean
    set f__result_real=(s__Critical_chance[GetUnitUserData((f__arg_unit1))]) // INLINED!!
   return true
endfunction
function sa__Critical_getMultiplier takes nothing returns boolean
    set f__result_real=(s__Critical_multiplier[GetUnitUserData((f__arg_unit1))]) // INLINED!!
   return true
endfunction
function sa__Critical_setChance takes nothing returns boolean
    set f__result_real=s__Critical_setChance(f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__Critical_setMultiplier takes nothing returns boolean
    set f__result_real=s__Critical_setMultiplier(f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__Critical_add takes nothing returns boolean
    call s__Critical_add(f__arg_unit1,f__arg_real1,f__arg_real2)
   return true
endfunction
function sa__Critical_register takes nothing returns boolean
local code c=f__arg_code1
            call TriggerAddCondition(s__Critical_trigger, Filter(c))
   return true
endfunction
function sa__Evasion_getEvasionChance takes nothing returns boolean
    set f__result_real=(s__Evasion_evasion[GetUnitUserData((f__arg_unit1))]) // INLINED!!
   return true
endfunction
function sa__Evasion_getMissChance takes nothing returns boolean
    set f__result_real=(s__Evasion_miss[GetUnitUserData((f__arg_unit1))]) // INLINED!!
   return true
endfunction
function sa__Evasion_setEvasionChance takes nothing returns boolean
    set f__result_real=s__Evasion_setEvasionChance(f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__Evasion_setMissChance takes nothing returns boolean
    set f__result_real=s__Evasion_setMissChance(f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__Evasion_register takes nothing returns boolean
local code c=f__arg_code1
            call TriggerAddCondition(s__Evasion_trigger, Filter(c))
   return true
endfunction
function sa__Evasion__get_evade takes nothing returns boolean

            local texttag text
            local boolean should= false
            if (s__Damage_damage[s__Damage_key]) > 0 and not ( s__Evasion_pierce[(GetUnitUserData(s__DamageInterface___Unit_unit[((s__Damage_sources[s__Damage_key]))]))] > 0 ) then // INLINED!!
                set text=CreateTextTag()
                set should=GetRandomReal(0, 1) <= s__Evasion_evasion[(GetUnitUserData(s__DamageInterface___Unit_unit[((s__Damage_targets[s__Damage_key]))]))] or GetRandomReal(0, 1) <= s__Evasion_miss[(GetUnitUserData(s__DamageInterface___Unit_unit[((s__Damage_sources[s__Damage_key]))]))] // INLINED!!
                if should then
                    set s__Evasion_source=(s__Damage_sources[s__Damage_key]) // INLINED!!
                    set s__Evasion_target=(s__Damage_targets[s__Damage_key]) // INLINED!!
                    set s__Evasion_damage=(s__Damage_damage[s__Damage_key]) // INLINED!!
                    call s__Damage__set_amount(0)
                    call s__Damage__set_weapontype(WEAPON_TYPE_WHOKNOWS)
                    call TriggerEvaluate(s__Evasion_trigger)
                    call SetTextTagText(text, "miss", 0.016)
                    call SetTextTagPosUnit(text, s__DamageInterface___Unit_unit[s__Evasion_source], 0)
                    call SetTextTagColor(text, 255, 0, 0, 255)
                    call SetTextTagLifespan(text, 1.5)
                    call SetTextTagVelocity(text, 0.0, 0.0355)
                    call SetTextTagPermanent(text, false)
                    set s__Evasion_damage=0
                    set s__Evasion_source=0
                    set s__Evasion_target=0
                endif
            endif
            set text=null
set f__result_boolean= should
   return true
endfunction
function sa__Damage_register takes nothing returns boolean
local attacktype attack=f__arg_attacktype1
local damagetype damage=f__arg_damagetype1
local code c=f__arg_code1
local boolean posmitigation=f__arg_boolean1
            local integer i= GetHandleId(attack)
            local integer j= GetHandleId(damage)
            if posmitigation then
                if not (HaveSavedHandle(Table___ht, (((s__HashTable__getindex(s__Damage_after,i)))), (j))) then // INLINED!!
                    call SaveTriggerHandle(Table___ht, (((s__HashTable__getindex(s__Damage_after,i)))), (j), ( CreateTrigger())) // INLINED!!
                endif
                call TriggerAddCondition((LoadTriggerHandle(Table___ht, (((s__HashTable__getindex(s__Damage_after,i)))), (j))), Filter(c)) // INLINED!!
            else
                if not (HaveSavedHandle(Table___ht, (((s__HashTable__getindex(s__Damage_before,i)))), (j))) then // INLINED!!
                    call SaveTriggerHandle(Table___ht, (((s__HashTable__getindex(s__Damage_before,i)))), (j), ( CreateTrigger())) // INLINED!!
                endif
                call TriggerAddCondition((LoadTriggerHandle(Table___ht, (((s__HashTable__getindex(s__Damage_before,i)))), (j))), Filter(c)) // INLINED!!
            endif
   return true
endfunction
function sa__Backdrop__set_visible takes nothing returns boolean
local integer this=f__arg_this
local boolean visibility=f__arg_boolean1
            set s__Backdrop_Components___Operators____visible[this]=visibility
            call BlzFrameSetVisible((s__Backdrop_Components___Operators____frame[(this)]), visibility) // INLINED!!
   return true
endfunction
function sa__Backdrop__get_visible takes nothing returns boolean
local integer this=f__arg_this
set f__result_boolean= s__Backdrop_Components___Operators____visible[this]
   return true
endfunction
function sa__Backdrop__get_frame takes nothing returns boolean
local integer this=f__arg_this
set f__result_framehandle= s__Backdrop_Components___Operators____frame[this]
   return true
endfunction
function sa__Backdrop_create takes nothing returns boolean
local real x=f__arg_real1
local real y=f__arg_real2
local real width=f__arg_real3
local real height=f__arg_real4
local framehandle parent=f__arg_framehandle1
local string texture=f__arg_string1
            local integer this= s__Backdrop__allocate()
            if parent == null then
                set parent=Components___CONSOLE
            endif
            call s__Backdrop__set_x(this,x)
            call s__Backdrop__set_y(this,y)
            call s__Backdrop__set_width(this,width)
            call s__Backdrop__set_height(this,height)
            set s__Backdrop_parent[this]=parent
            call s__Backdrop__set_texture(this,texture)
            set s__Backdrop_Components___Operators____frame[(this)]=(BlzCreateFrameByType("BACKDROP", "", parent, "", 0)) // INLINED!!
            if parent == Components___CONSOLE or parent == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Backdrop_Components___Operators____frame[(this)]), (s__Backdrop_Components___Operators____point[(this)]), x, y) // INLINED!!
            else
                call BlzFrameSetPoint((s__Backdrop_Components___Operators____frame[(this)]), (s__Backdrop_Components___Operators____point[(this)]), parent, (s__Backdrop_Components___Operators____relative[(this)]), x, y) // INLINED!!
            endif
            call BlzFrameSetSize((s__Backdrop_Components___Operators____frame[(this)]), width, height) // INLINED!!
            call BlzFrameSetTexture((s__Backdrop_Components___Operators____frame[(this)]), texture, 0, true) // INLINED!!
set f__result_integer= this
   return true
endfunction
function sa__Slider__set_visible takes nothing returns boolean
local integer this=f__arg_this
local boolean visibility=f__arg_boolean1
            set s__Slider_Components___Operators____visible[this]=visibility
            call BlzFrameSetVisible((s__Slider_Components___Operators____frame[(this)]), visibility) // INLINED!!
   return true
endfunction
function sa__Slider__get_visible takes nothing returns boolean
local integer this=f__arg_this
set f__result_boolean= s__Slider_Components___Operators____visible[this]
   return true
endfunction
function sa__Slider__get_frame takes nothing returns boolean
local integer this=f__arg_this
set f__result_framehandle= s__Slider_Components___Operators____frame[this]
   return true
endfunction
function sa__Slider_get takes nothing returns boolean

set f__result_integer= (LoadInteger(Table___ht, (s__Slider_table), (GetHandleId(BlzGetTriggerFrame())))) // INLINED!!
   return true
endfunction
function sa__CheckBox__disposeArrays takes nothing returns boolean
 local integer this=f__arg_this
 local integer kthis
    set si__CheckBox_arrN=si__CheckBox_arrN+1
    set kthis=si__CheckBox_arr[this]
    set si__CheckBox_arrV[si__CheckBox_arrN]=kthis
 return true
endfunction
function sa__CheckBox__set_visible takes nothing returns boolean
local integer this=f__arg_this
local boolean visibility=f__arg_boolean1
            set s__CheckBox_Components___Operators____visible[this]=visibility
            call BlzFrameSetVisible((s__CheckBox_Components___Operators____frame[(this)]), visibility) // INLINED!!
   return true
endfunction
function sa__CheckBox__get_visible takes nothing returns boolean
local integer this=f__arg_this
set f__result_boolean= s__CheckBox_Components___Operators____visible[this]
   return true
endfunction
function sa__CheckBox__get_frame takes nothing returns boolean
local integer this=f__arg_this
set f__result_framehandle= s__CheckBox_Components___Operators____frame[this]
   return true
endfunction
function sa__CheckBox_get takes nothing returns boolean

set f__result_integer= (LoadInteger(Table___ht, (s__CheckBox_table), (GetHandleId(BlzGetTriggerFrame())))) // INLINED!!
   return true
endfunction
function sa__EditBox__set_visible takes nothing returns boolean
local integer this=f__arg_this
local boolean visibility=f__arg_boolean1
            set s__EditBox_Components___Operators____visible[this]=visibility
            call BlzFrameSetVisible((s__EditBox_Components___Operators____frame[(this)]), visibility) // INLINED!!
   return true
endfunction
function sa__EditBox__get_visible takes nothing returns boolean
local integer this=f__arg_this
set f__result_boolean= s__EditBox_Components___Operators____visible[this]
   return true
endfunction
function sa__EditBox__get_frame takes nothing returns boolean
local integer this=f__arg_this
set f__result_framehandle= s__EditBox_Components___Operators____frame[this]
   return true
endfunction
function sa__EditBox_get takes nothing returns boolean

set f__result_integer= (LoadInteger(Table___ht, (s__EditBox_table), (GetHandleId(BlzGetTriggerFrame())))) // INLINED!!
   return true
endfunction
function sa__Component__set_visible takes nothing returns boolean
local integer this=f__arg_this
local boolean visibility=f__arg_boolean1
            set s__Component_Components___Operators____visible[this]=visibility
            call BlzFrameSetVisible((s__Component_Components___Operators____frame[(this)]), visibility) // INLINED!!
   return true
endfunction
function sa__Component__get_visible takes nothing returns boolean
local integer this=f__arg_this
set f__result_boolean= s__Component_Components___Operators____visible[this]
   return true
endfunction
function sa__Component__get_frame takes nothing returns boolean
local integer this=f__arg_this
set f__result_framehandle= s__Component_Components___Operators____frame[this]
   return true
endfunction
function sa__Component_get takes nothing returns boolean

set f__result_integer= s__Component_array[GetPlayerId(GetTriggerPlayer())]
   return true
endfunction
function sa__Component_create takes nothing returns boolean
local real x=f__arg_real1
local real y=f__arg_real2
local real width=f__arg_real3
local real height=f__arg_real4
local framehandle parent=f__arg_framehandle1
local string frameType=f__arg_string1
local string template=f__arg_string2
            local integer this= s__Component__allocate()
            if parent == null then
                set parent=Components___CONSOLE
            endif
            if template == "" or template == null then
                set template="TransparentBackdrop"
            endif
            call s__Component__set_x(this,x)
            call s__Component__set_y(this,y)
            call s__Component__set_width(this,width)
            call s__Component__set_height(this,height)
            set s__Component_parent[this]=parent
            set s__Component_Components___Operators____frame[(this)]=(BlzCreateFrame(template, parent, 0, 0)) // INLINED!!
            set s__Component_listener[this]=BlzCreateFrame(frameType, (s__Component_Components___Operators____frame[(this)]), 0, 0) // INLINED!!
            set s__Component_button[this]=BlzFrameGetChild(s__Component_listener[this], 0)
            set s__Component_image[this]=s__Backdrop_create(0 , 0 , width , height , s__Component_listener[this] , null)
            call sc__Backdrop__set_visible(s__Component_image[this],false)
            call SaveInteger(Table___ht, (s__Component_table), (GetHandleId(s__Component_listener[this])), ( this)) // INLINED!!
            call SaveInteger(Table___ht, (s__Component_table), (GetHandleId(s__Component_button[this])), ( this)) // INLINED!!
            if parent == Components___CONSOLE or parent == Components___WORLD then
                call BlzFrameSetAbsPoint((s__Component_Components___Operators____frame[(this)]), (s__Component_Components___Operators____point[(this)]), x, y) // INLINED!!
            else
                call BlzFrameSetPoint((s__Component_Components___Operators____frame[(this)]), (s__Component_Components___Operators____point[(this)]), parent, (s__Component_Components___Operators____relative[(this)]), x, y) // INLINED!!
            endif
            call BlzFrameSetSize((s__Component_Components___Operators____frame[(this)]), width, height) // INLINED!!
            call BlzFrameSetAllPoints(s__Component_listener[this], (s__Component_Components___Operators____frame[(this)])) // INLINED!!
            call BlzTriggerRegisterFrameEvent(s__Component_enter, s__Component_listener[this], FRAMEEVENT_MOUSE_ENTER)
            call BlzTriggerRegisterFrameEvent(s__Component_leave, s__Component_listener[this], FRAMEEVENT_MOUSE_LEAVE)
            call BlzTriggerRegisterFrameEvent(s__Component_scroll, s__Component_button[this], FRAMEEVENT_MOUSE_WHEEL)
set f__result_integer= this
   return true
endfunction
function sa__StatusBar__set_visible takes nothing returns boolean
local integer this=f__arg_this
local boolean visibility=f__arg_boolean1
            set s__StatusBar_Components___Operators____visible[this]=visibility
            call BlzFrameSetVisible((s__StatusBar_Components___Operators____frame[(this)]), visibility) // INLINED!!
   return true
endfunction
function sa__StatusBar__get_visible takes nothing returns boolean
local integer this=f__arg_this
set f__result_boolean= s__StatusBar_Components___Operators____visible[this]
   return true
endfunction
function sa__StatusBar__get_frame takes nothing returns boolean
local integer this=f__arg_this
set f__result_framehandle= s__StatusBar_Components___Operators____frame[this]
   return true
endfunction
function sa__TextArea__set_visible takes nothing returns boolean
local integer this=f__arg_this
local boolean visibility=f__arg_boolean1
            set s__TextArea_Components___Operators____visible[this]=visibility
            call BlzFrameSetVisible((s__TextArea_Components___Operators____frame[(this)]), visibility) // INLINED!!
   return true
endfunction
function sa__TextArea__get_visible takes nothing returns boolean
local integer this=f__arg_this
set f__result_boolean= s__TextArea_Components___Operators____visible[this]
   return true
endfunction
function sa__TextArea__get_frame takes nothing returns boolean
local integer this=f__arg_this
set f__result_framehandle= s__TextArea_Components___Operators____frame[this]
   return true
endfunction
function sa__Text__set_visible takes nothing returns boolean
local integer this=f__arg_this
local boolean visibility=f__arg_boolean1
            set s__Text_Components___Operators____visible[this]=visibility
            call BlzFrameSetVisible((s__Text_Components___Operators____frame[(this)]), visibility) // INLINED!!
   return true
endfunction
function sa__Text__get_visible takes nothing returns boolean
local integer this=f__arg_this
set f__result_boolean= s__Text_Components___Operators____visible[this]
   return true
endfunction
function sa__Text__get_frame takes nothing returns boolean
local integer this=f__arg_this
set f__result_framehandle= s__Text_Components___Operators____frame[this]
   return true
endfunction
function sa__Sprite__set_visible takes nothing returns boolean
local integer this=f__arg_this
local boolean visibility=f__arg_boolean1
            set s__Sprite_Components___Operators____visible[this]=visibility
            call BlzFrameSetVisible((s__Sprite_Components___Operators____frame[(this)]), visibility) // INLINED!!
   return true
endfunction
function sa__Sprite__get_visible takes nothing returns boolean
local integer this=f__arg_this
set f__result_boolean= s__Sprite_Components___Operators____visible[this]
   return true
endfunction
function sa__Sprite__get_frame takes nothing returns boolean
local integer this=f__arg_this
set f__result_framehandle= s__Sprite_Components___Operators____frame[this]
   return true
endfunction
function sa__Item_calculate takes nothing returns boolean
local integer this=f__arg_this
local integer owned=f__arg_integer1
            local integer piece
            local integer amount
            local integer i= 0
            if (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(this)])), (7))) <= 0 then // INLINED!!
set f__result_integer= (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(this)])), (1))) // INLINED!!
return true
            else
                set amount=s__Item__get_recipe(this)
                loop
                    exitwhen i == (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(this)])), (7))) // INLINED!!
                        set piece=sc__Item_get((LoadInteger(Table___ht, ((s__HashTable__getindex(s__Item_itemtype,s__Item_id[(this)]))), (i)))) // INLINED!!
                        if (LoadInteger(Table___ht, (((owned))), (s__Item_id[piece]))) > 0 then // INLINED!!
                            call SaveInteger(Table___ht, (owned), (s__Item_id[piece]), ( (LoadInteger(Table___ht, (owned), (s__Item_id[piece]))) - 1)) // INLINED!!
                        else
                            set amount=amount + s__Item_calculate(piece,owned)
                        endif
                    set i=i + 1
                endloop
set f__result_integer= amount
return true
            endif
   return true
endfunction
function sa__Item_get takes nothing returns boolean
local integer id=f__arg_integer1
            if id > 0 then
                if (HaveSavedInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,id)), (0))) then // INLINED!!
set f__result_integer= ((LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,id)), (0)))) // INLINED!!
return true
                else
set f__result_integer= sc__Item_create(id)
return true
                endif
            endif
set f__result_integer= 0
   return true
endfunction
function sa__Item_create takes nothing returns boolean
local integer id=f__arg_integer1
            local integer this= s__Item__allocate()
            local item i
            if id > 0 and not (HaveSavedInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,id)), (0))) then // INLINED!!
                set i=CreateItem(id, 0, 0)
                if i != null then
                    set s__Item_id[this]=id
                    call s__Item__set_components(this,0)
                    call s__Item__set_name(this,GetItemName(i))
                    call s__Item__set_icon(this,BlzGetItemIconPath(i))
                    call s__Item__set_tooltip(this,BlzGetItemExtendedTooltip(i))
                    call s__Item__set_charges(this,GetItemCharges(i))
                    call s__Item__set_gold(this,s__Item_totalCost(id))
                    call SaveInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,id)), (0), ( this)) // INLINED!!
                    call RemoveItem(i)
                    set i=null
                endif
            endif
set f__result_integer= this
   return true
endfunction
function sa__Item_save takes nothing returns boolean
local integer id=f__arg_integer1
local integer comp=f__arg_integer2
            local integer this
            local integer part
            local integer i= 0
            if comp > 0 and comp != id then
                set this=s__Item_get(id)
                set part=s__Item_get(comp)
                call SaveInteger(Table___ht, ((s__HashTable__getindex(s__Item_itemtype,s__Item_id[(this)]))), ((LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(this)])), (7)))), ( comp)) // INLINED!!
                call s__Item__set_components(this,(LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(this)])), (7))) + 1) // INLINED!!
                call SaveInteger(Table___ht, ((s__HashTable__getindex(s__Item_counters,s__Item_id[(this)]))), (comp), ( (LoadInteger(Table___ht, ((s__HashTable__getindex(s__Item_counters,s__Item_id[(this)]))), (comp))) + 1)) // INLINED!!
                loop
                    exitwhen (LoadInteger(Table___ht, ((s__HashTable__getindex(s__Item_relations,s__Item_id[(part)]))), (i))) == id // INLINED!!
                        if not (HaveSavedInteger(Table___ht, ((s__HashTable__getindex(s__Item_relations,s__Item_id[(part)]))), (i))) then // INLINED!!
                            call SaveInteger(Table___ht, ((s__HashTable__getindex(s__Item_relations,s__Item_id[(part)]))), (i), ( id)) // INLINED!!
                            exitwhen true
                        endif
                    set i=i + 1
                endloop
            endif
   return true
endfunction
function sa__Item_clear takes nothing returns boolean

            call RemoveItem(GetEnumItem())
   return true
endfunction
function sa__Button_create takes nothing returns boolean
local real x=f__arg_real1
local real y=f__arg_real2
local real width=f__arg_real3
local real height=f__arg_real4
local framehandle parent=f__arg_framehandle1
local boolean simpleTooltip=f__arg_boolean1
            local integer this= s__Button__allocate(x , y , width , height , parent , "ComponentFrame" , null)
            set s__Button_check[this]=s__Backdrop_create(0 , 0 , width , height , (s__Component_Components___Operators____frame[(this)]) , Components___CHECKED_BUTTON) // INLINED!!
            set s__Button_block[this]=s__Backdrop_create(0 , 0 , width , height , (s__Component_Components___Operators____frame[(this)]) , Components___UNAVAILABLE_BUTTON) // INLINED!!
            set s__Button_sprite[this]=s__Sprite_create(0 , 0 , width , height , (s__Component_Components___Operators____frame[(this)]) , FRAMEPOINT_CENTER , FRAMEPOINT_CENTER) // INLINED!!
            set s__Button_tagger[this]=s__Sprite_create(0 , 0 , 0.00001 , 0.00001 , (s__Component_Components___Operators____frame[(this)]) , FRAMEPOINT_BOTTOMLEFT , FRAMEPOINT_BOTTOMLEFT) // INLINED!!
            set s__Button_player[this]=s__Sprite_create(0 , 0 , 0.00001 , 0.00001 , (s__Component_Components___Operators____frame[(this)]) , FRAMEPOINT_BOTTOMLEFT , FRAMEPOINT_BOTTOMLEFT) // INLINED!!
            set s__Button_tooltip[this]=s__Tooltip_create((s__Component_Components___Operators____frame[(this)]) , Components___TOOLTIP_SIZE , FRAMEPOINT_TOPLEFT , simpleTooltip) // INLINED!!
            set s__Button_highlight[this]=BlzCreateFrame("HighlightFrame", (s__Component_Components___Operators____frame[(this)]), 0, 0) // INLINED!!
            call sc__Backdrop__set_visible(s__Button_check[(this)],(false)) // INLINED!!
            call sc__Backdrop__set_visible(s__Button_block[(this)],not (true)) // INLINED!!
            call s__Button__set_highlighted(this,false)
            call BlzFrameSetTooltip((s__Component_listener[(this)]), s__Tooltip_frame[s__Button_tooltip[this]]) // INLINED!!
            call BlzFrameSetPoint(s__Button_highlight[this], FRAMEPOINT_TOPLEFT, (s__Component_Components___Operators____frame[(this)]), FRAMEPOINT_TOPLEFT, - 0.004, 0.0045) // INLINED!!
            call BlzFrameSetSize(s__Button_highlight[this], width + 0.0085, height + 0.0085)
            call BlzFrameSetTexture(s__Button_highlight[this], Components___HIGHLIGHT, 0, true)
set f__result_integer= this
   return true
endfunction
function sa__Panel_create takes nothing returns boolean
local real x=f__arg_real1
local real y=f__arg_real2
local real width=f__arg_real3
local real height=f__arg_real4
local framehandle parent=f__arg_framehandle1
local string template=f__arg_string1
set f__result_integer= s__Panel__allocate(x , y , width , height , parent , "PanelFrame" , template)
   return true
endfunction
function sa__Ability_onCasting takes nothing returns boolean

            local integer this= (LoadInteger(Table___ht, (s__Ability_struct), ((GetSpellAbilityId())))) // INLINED!!
            local integer spell
            local string tooltip
            if this != 0 then
                if (st__Ability___IAbility_onCast[si__Ability___IAbility_type[this]]!=null) then
                    call sc__Ability___IAbility_onCast(this)
                endif
                if (st__Ability___IAbility_onTooltip[si__Ability___IAbility_type[this]]!=null) then
                    set tooltip=sc__Ability___IAbility_onTooltip(this,s__PluginSpellEffect___Unit_unit[s__Spell_source] , (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId())))) // INLINED!!
                    call BlzSetAbilityExtendedTooltip((GetSpellAbilityId()), tooltip, (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))) - 1) // INLINED!!
                    call BlzSetAbilityStringLevelField((BlzGetUnitAbility(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))), ABILITY_SLF_TOOLTIP_NORMAL_EXTENDED, (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))) - 1, tooltip) // INLINED!!
                    if not (HaveSavedInteger(Table___ht, (s__HashTable__getindex(s__Ability_learned,(GetSpellAbilityId()))), ((GetUnitUserData(s__PluginSpellEffect___Unit_unit[(s__Spell_source)]))))) then // INLINED!!
                        set spell=s__Ability__allocate()
                        set s__Ability_type[spell]=this
                        set s__Ability_id[spell]=(GetSpellAbilityId()) // INLINED!!
                        set s__Ability_unit[spell]=s__PluginSpellEffect___Unit_unit[s__Spell_source]
                        set s__Ability_ability[spell]=(BlzGetUnitAbility(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))) // INLINED!!
                        set s__Ability_key=s__Ability_key + 1
                        set s__Ability_array[s__Ability_key]=spell
                        call SaveInteger(Table___ht, (s__HashTable__getindex(s__Ability_learned,(GetSpellAbilityId()))), ((GetUnitUserData(s__PluginSpellEffect___Unit_unit[(s__Spell_source)]))), ( 1)) // INLINED!!
                        if s__Ability_key == 0 then
                            call TimerStart(s__Ability_timer, 1, true, function s__Ability_onPeriod)
                        endif
                    endif
                endif
            endif
   return true
endfunction
function sa__Missiles_terminate takes nothing returns boolean
local integer this=f__arg_this
        local integer aux
        if s__Missiles_allocated[this] and s__Missiles_launched[this] then
            set s__Missiles_allocated[this]=false
            if s__Missiles_pkey[this] != - 1 then
                set aux=s__Missiles_frozen[s__Missiles_pid]
                set s__Missiles_pkey[aux]=s__Missiles_pkey[this]
                set s__Missiles_frozen[s__Missiles_pkey[this]]=s__Missiles_frozen[s__Missiles_pid]
                set s__Missiles_pid=s__Missiles_pid - 1
                set s__Missiles_pkey[this]=- 1
            endif
            if (st__Missiles___MissileEvents_onRemove[si__Missiles___MissileEvents_type[this]]!=null) then
                call sc__Missiles___MissileEvents_onRemove(this)
            endif
            if s__Missiles_dummy[this] != null then
                call s__Missiles___Pool_recycle(s__Missiles_dummy[this])
            endif
            set aux=s__Missiles_collection[s__Missiles_count]
            set s__Missiles_index[aux]=s__Missiles_index[this]
            set s__Missiles_collection[s__Missiles_index[this]]=s__Missiles_collection[s__Missiles_count]
            set s__Missiles_count=s__Missiles_count - 1
            set s__Missiles_index[this]=- 1
            call s__Missiles___Coordinates_deallocate((s__Missiles_origin[this])) // INLINED!!
            call s__Missiles___Coordinates_deallocate((s__Missiles_impact[this])) // INLINED!!
            call s__MissileEffect_destroy(s__Missiles_effect[this])
            call sc__Missiles_reset(this)
            call FlushChildHashtable(s__Missiles_table, this)
        endif
   return true
endfunction
function sa__Missiles_reset takes nothing returns boolean
local integer this=f__arg_this
            set s__Missiles_launched[this]=false
            set s__Missiles_finished[this]=false
            set s__Missiles_collideZ[this]=false
            set s__Missiles_paused[this]=false
            set s__Missiles_roll[this]=false
            set s__Missiles_source[this]=null
            set s__Missiles_target[this]=null
            set s__Missiles_owner[this]=null
            set s__Missiles_dummy[this]=null
            set s__Missiles_open[this]=0.
            set s__Missiles_height[this]=0.
            set s__Missiles_veloc[this]=0.
            set s__Missiles_acceleration[this]=0.
            set s__Missiles_collision[this]=0.
            set s__Missiles_damage[this]=0.
            set s__Missiles_travel[this]=0.
            set s__Missiles_turn[this]=0.
            set s__Missiles_time[this]=0.
            set s__Missiles_sight[this]=0.
            set s__Missiles_data[this]=0
            set s__Missiles_type[this]=0
            set s__Missiles_tileset[this]=0
            set s__Missiles_pkey[this]=- 1
            set s__Missiles_index[this]=- 1
   return true
endfunction
function sa__Missiles_move takes nothing returns boolean

            local integer j= 0
            local integer i
            local integer k
            local unit u
            local real a
            local real d
            local real s
            local real h
            local real c
            local real dx
            local real dy
            local real vel
            local real yaw
            local real pitch
            local integer missile
            local integer o
            local integer this
            if Missiles_SWEET_SPOT > 0 then
                set i=s__Missiles_last
            else
                set i=0
            endif
            loop
                exitwhen ( ( j >= Missiles_SWEET_SPOT and Missiles_SWEET_SPOT > 0 ) or j > s__Missiles_id )
                    set this=s__Missiles_missiles[i]
                    set s__Missiles_temp=this
                    if s__Missiles_allocated[this] and not s__Missiles_paused[this] then
        set o=s__Missiles_origin[this]
        set h=s__Missiles_height[this]
        set c=s__Missiles_open[this]
        set d=s__Missiles___Coordinates_distance[o]
        if (st__Missiles___MissileEvents_onHit[si__Missiles___MissileEvents_type[this]]!=null) then
            if s__Missiles_allocated[this] and s__Missiles_collision[this] > 0 then
                call GroupEnumUnitsInRange(s__Missiles_group, s__Missiles_x[this], s__Missiles_y[this], s__Missiles_collision[this] + Missiles___COLLISION_SIZE, null)
                loop
                    set u=FirstOfGroup(s__Missiles_group)
                    exitwhen u == null
                        if not HaveSavedBoolean(s__Missiles_table, this, GetHandleId(u)) then
                            if IsUnitInRangeXY(u, s__Missiles_x[this], s__Missiles_y[this], s__Missiles_collision[this]) then
                                if s__Missiles_collideZ[this] then
                                    set dx=Missiles___GetLocZ(GetUnitX(u) , GetUnitY(u)) + GetUnitFlyHeight(u)
                                    set dy=BlzGetUnitCollisionSize(u)
                                    if dx + dy >= s__Missiles_z[this] - s__Missiles_collision[this] and dx <= s__Missiles_z[this] + s__Missiles_collision[this] then
                                        call SaveBoolean(s__Missiles_table, this, GetHandleId(u), true)
                                        if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onHit(this,u) then
                                            call s__Missiles_terminate(this)
                                            exitwhen true
                                        endif
                                    endif
                                else
                                    call SaveBoolean(s__Missiles_table, this, GetHandleId(u), true)
                                    if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onHit(this,u) then
                                        call s__Missiles_terminate(this)
                                        exitwhen true
                                    endif
                                endif
                            endif
                        endif
                    call GroupRemoveUnit(s__Missiles_group, u)
                endloop
            endif
        endif
        if (st__Missiles___MissileEvents_onMissile[si__Missiles___MissileEvents_type[this]]!=null) then
            if s__Missiles_allocated[this] and s__Missiles_collision[this] > 0 then
                set k=0
                loop
                    exitwhen k > s__Missiles_count
                        set missile=s__Missiles_collection[k]
                        if missile != this then
                            if not HaveSavedBoolean(s__Missiles_table, this, missile) then
                                set dx=s__Missiles_x[missile] - s__Missiles_x[this]
                                set dy=s__Missiles_y[missile] - s__Missiles_y[this]
                                if SquareRoot(dx * dx + dy * dy) <= s__Missiles_collision[this] then
                                    call SaveBoolean(s__Missiles_table, this, missile, true)
                                    if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onMissile(this,missile) then
                                        call s__Missiles_terminate(this)
                                        exitwhen true
                                    endif
                                endif
                            endif
                        endif
                    set k=k + 1
                endloop
            endif
        endif
        if (st__Missiles___MissileEvents_onDestructable[si__Missiles___MissileEvents_type[this]]!=null) then
            if s__Missiles_allocated[this] and s__Missiles_collision[this] > 0 then
                set dx=s__Missiles_collision[this]
                call SetRect(s__Missiles_rect, s__Missiles_x[this] - dx, s__Missiles_y[this] - dx, s__Missiles_x[this] + dx, s__Missiles_y[this] + dx)
                call EnumDestructablesInRect(s__Missiles_rect, null, function s__Missiles_onDest)
            endif
        endif
        if (st__Missiles___MissileEvents_onItem[si__Missiles___MissileEvents_type[this]]!=null) then
            if s__Missiles_allocated[this] and s__Missiles_collision[this] > 0 then
                set dx=s__Missiles_collision[this]
                call SetRect(s__Missiles_rect, s__Missiles_x[this] - dx, s__Missiles_y[this] - dx, s__Missiles_x[this] + dx, s__Missiles_y[this] + dx)
                call EnumItemsInRect(s__Missiles_rect, null, function s__Missiles_onItems)
            endif
        endif
        if (st__Missiles___MissileEvents_onCliff[si__Missiles___MissileEvents_type[this]]!=null) then
            set dx=GetTerrainCliffLevel(s__Missiles_nextX[this], s__Missiles_nextY[this])
            set dy=GetTerrainCliffLevel(s__Missiles_x[this], s__Missiles_y[this])
            if dy < dx and s__Missiles_z[this] < ( dx - (GetTerrainCliffLevel(s__WorldBounds_maxX, s__WorldBounds_maxY)) ) * bj_CLIFFHEIGHT then // INLINED!!
                if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onCliff(this) then
                    call s__Missiles_terminate(this)
                endif
            endif
        endif
        if (st__Missiles___MissileEvents_onTerrain[si__Missiles___MissileEvents_type[this]]!=null) then
            if Missiles___GetLocZ(s__Missiles_x[this] , s__Missiles_y[this]) > s__Missiles_z[this] then
                if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onTerrain(this) then
                    call s__Missiles_terminate(this)
                endif
            endif
        endif
        if (st__Missiles___MissileEvents_onTileset[si__Missiles___MissileEvents_type[this]]!=null) then
            set k=GetTerrainType(s__Missiles_x[this], s__Missiles_y[this])
            if k != s__Missiles_tileset[this] then
                if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onTileset(this,k) then
                    call s__Missiles_terminate(this)
                endif
            endif
            set s__Missiles_tileset[this]=k
        endif
        if (st__Missiles___MissileEvents_onPeriod[si__Missiles___MissileEvents_type[this]]!=null) then
            if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onPeriod(this) then
                call s__Missiles_terminate(this)
            endif
        endif
        set u=s__Missiles_target[this]
        if u != null and GetUnitTypeId(u) != 0 then
            call s__Missiles___Coordinates_move(s__Missiles_impact[this],GetUnitX(u) , GetUnitY(u) , GetUnitFlyHeight(u) + s__Missiles_toZ[this])
            set dx=s__Missiles___Coordinates_x[s__Missiles_impact[this]] - s__Missiles_nextX[this]
            set dy=s__Missiles___Coordinates_y[s__Missiles_impact[this]] - s__Missiles_nextY[this]
            set a=Atan2(dy, dx)
            set s__Missiles_travel[this]=s__Missiles___Coordinates_distance[o] - SquareRoot(dx * dx + dy * dy)
        else
            set a=s__Missiles___Coordinates_angle[o]
            set s__Missiles_target[this]=null
        endif
        if s__Missiles_turn[this] != 0 and not ( Cos(s__Missiles_cA[this] - a) >= Cos(s__Missiles_turn[this]) ) then
            if Sin(a - s__Missiles_cA[this]) >= 0 then
                set s__Missiles_cA[this]=s__Missiles_cA[this] + s__Missiles_turn[this]
            else
                set s__Missiles_cA[this]=s__Missiles_cA[this] - s__Missiles_turn[this]
            endif
        else
            set s__Missiles_cA[this]=a
        endif
        set vel=s__Missiles_veloc[this] * s__Missiles_dilation
        set yaw=s__Missiles_cA[this]
        set s=s__Missiles_travel[this] + vel
        set s__Missiles_veloc[this]=s__Missiles_veloc[this] + s__Missiles_acceleration[this]
        set s__Missiles_travel[this]=s
        set pitch=s__Missiles___Coordinates_alpha[o]
        set s__Missiles_prevX[this]=s__Missiles_x[this]
        set s__Missiles_prevY[this]=s__Missiles_y[this]
        set s__Missiles_prevZ[this]=s__Missiles_z[this]
        set s__Missiles_x[this]=s__Missiles_nextX[this]
        set s__Missiles_y[this]=s__Missiles_nextY[this]
        set s__Missiles_z[this]=s__Missiles_nextZ[this]
        set s__Missiles_nextX[this]=s__Missiles_x[this] + vel * Cos(yaw)
        set s__Missiles_nextY[this]=s__Missiles_y[this] + vel * Sin(yaw)
        if h != 0 or s__Missiles___Coordinates_slope[o] != 0 then
            set s__Missiles_nextZ[this]=4 * h * s * ( d - s ) / ( d * d ) + s__Missiles___Coordinates_slope[o] * s + s__Missiles___Coordinates_z[o]
            set pitch=pitch - Atan(( ( 4 * h ) * ( 2 * s - d ) ) / ( d * d ))
        endif
        if c != 0 then
            set dx=4 * c * s * ( d - s ) / ( d * d )
            set a=yaw + bj_PI / 2
            set s__Missiles_x[this]=s__Missiles_x[this] + dx * Cos(a)
            set s__Missiles_y[this]=s__Missiles_y[this] + dx * Sin(a)
            set yaw=yaw + Atan(- ( ( 4 * c ) * ( 2 * s - d ) ) / ( d * d ))
        endif
        if s >= d - 0.0001 then
            set s__Missiles_finished[this]=true
            if (st__Missiles___MissileEvents_onFinish[si__Missiles___MissileEvents_type[this]]!=null) then
                if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onFinish(this) then
                    call s__Missiles_terminate(this)
                else
                    if s__Missiles_travel[this] > 0 and not s__Missiles_paused[this] then
                        call s__Missiles_terminate(this)
                    endif
                endif
            else
                call s__Missiles_terminate(this)
            endif
        else
            if not s__Missiles_roll[this] then
                call s__MissileEffect_orient(s__Missiles_effect[this],yaw , - pitch , 0)
            else
                call s__MissileEffect_orient(s__Missiles_effect[this],yaw , - pitch , Atan2(c, h))
            endif
        endif
        if not s__MissileEffect_move(s__Missiles_effect[this],s__Missiles_x[this] , s__Missiles_y[this] , s__Missiles_z[this]) then
            if (st__Missiles___MissileEvents_onBoundaries[si__Missiles___MissileEvents_type[this]]!=null) then
                if s__Missiles_allocated[this] and sc__Missiles___MissileEvents_onBoundaries(this) then
                    call s__Missiles_terminate(this)
                endif
            endif
        else
            if s__Missiles_dummy[this] != null then
                call SetUnitX(s__Missiles_dummy[this], s__Missiles_x[this])
                call SetUnitY(s__Missiles_dummy[this], s__Missiles_y[this])
            endif
        endif
                    else
                        set i=s__Missiles_remove(this,i)
                        set j=j - 1
                    endif
                set i=i + 1
                set j=j + 1
                if i > s__Missiles_id and Missiles_SWEET_SPOT > 0 then
                    set i=0
                endif
            endloop
            set s__Missiles_last=i
            set u=null
   return true
endfunction
function sa__Missiles_create takes nothing returns boolean
local real x=f__arg_real1
local real y=f__arg_real2
local real z=f__arg_real3
local real toX=f__arg_real4
local real toY=f__arg_real5
local real toZ=f__arg_real6
            local integer this= s__Missiles__allocate()
            call s__Missiles_reset(this)
            set s__Missiles_origin[this]=s__Missiles___Coordinates_create(x , y , z)
            set s__Missiles_impact[this]=s__Missiles___Coordinates_create(toX , toY , toZ)
            set s__Missiles_effect[this]=s__MissileEffect_create(x , y , s__Missiles___Coordinates_z[s__Missiles_origin[this]])
            call s__Missiles___Coordinates_link(s__Missiles_origin[this] , s__Missiles_impact[this])
            set s__Missiles_allocated[this]=true
            set s__Missiles_cA[this]=s__Missiles___Coordinates_angle[s__Missiles_origin[this]]
            set s__Missiles_x[this]=x
            set s__Missiles_y[this]=y
            set s__Missiles_z[this]=s__Missiles___Coordinates_z[s__Missiles_impact[this]]
            set s__Missiles_prevX[this]=x
            set s__Missiles_prevY[this]=y
            set s__Missiles_prevZ[this]=s__Missiles___Coordinates_z[s__Missiles_impact[this]]
            set s__Missiles_nextX[this]=x
            set s__Missiles_nextY[this]=y
            set s__Missiles_nextZ[this]=s__Missiles___Coordinates_z[s__Missiles_impact[this]]
            set s__Missiles_toZ[this]=toZ
set f__result_integer= this
   return true
endfunction
function sa__Bonus_adder takes nothing returns boolean
    set f__result_real=s__Bonus_adder(f__arg_unit1,f__arg_integer1,f__arg_real1)
   return true
endfunction
function sa__Bonus_onEvent takes nothing returns boolean
local integer key=f__arg_integer1
            set s__Bonus_key=s__Bonus_key + 1
            if key <= NewBonus___RECURSION_LIMIT then
                if s__Bonus_event[s__Bonus_type[key]] != null then
                    call TriggerEvaluate(s__Bonus_event[s__Bonus_type[key]])
                endif
                call TriggerEvaluate(s__Bonus_trigger)
            endif
            set s__Bonus_key=s__Bonus_key - 1
   return true
endfunction
function sa__Bonus_StartTimer takes nothing returns boolean
local real timeout=f__arg_real1
local boolean periodic=f__arg_boolean1
local integer this=f__arg_integer1
local integer uniqueId=f__arg_integer2
            local integer index= R2I(timeout * 100000)
            local integer id
            if this != 0 then
                set s__Bonus_Periodic____unique[this]=uniqueId
                set s__Bonus_Periodic____allocated[this]=true
                if s__Bonus_Periodic____unique[this] >= 0 and not (HaveSavedInteger(Table___ht, (s__Bonus_Periodic___struct), (s__Bonus_Periodic____unique[this]))) then // INLINED!!
                    call SaveInteger(Table___ht, (s__Bonus_Periodic___struct), (s__Bonus_Periodic____unique[this]), ( this)) // INLINED!!
                endif
                if periodic then
                    if timeout <= s__Bonus_Periodic___PERIODIC_THRESHOLD then
                        if not (HaveSavedHandle(Table___ht, (((s__Bonus_Periodic___timers))), (index))) then // INLINED!!
                            call SaveTimerHandle(Table___ht, (((s__Bonus_Periodic___timers))), (index), ( CreateTimer())) // INLINED!!
                        endif
                        set id=GetHandleId((LoadTimerHandle(Table___ht, (((s__Bonus_Periodic___timers))), (index)))) // INLINED!!
                        set s__Bonus_Periodic____timer[this]=(LoadTimerHandle(Table___ht, (((s__Bonus_Periodic___timers))), (index))) // INLINED!!
                        call SaveInteger(Table___ht, (s__Bonus_Periodic___table), ((LoadInteger(Table___ht, (s__Bonus_Periodic___key), (id)))), ( this)) // INLINED!!
                        call SaveInteger(Table___ht, (s__Bonus_Periodic___key), (id), ( (LoadInteger(Table___ht, (s__Bonus_Periodic___key), (id))) + 1)) // INLINED!!
                        if (LoadInteger(Table___ht, (s__Bonus_Periodic___key), (id))) == 1 then // INLINED!!
                            call TimerStart((LoadTimerHandle(Table___ht, (((s__Bonus_Periodic___timers))), (index))), timeout, periodic, function s__Bonus_Periodic___onPeriodic) // INLINED!!
                        endif
                    else
                        set s__Bonus_Periodic____timer[this]=NewTimerEx(this)
                        call TimerStart(s__Bonus_Periodic____timer[this], timeout, periodic, function s__Bonus_Periodic___onPeriodic)
                    endif
                else
                    set s__Bonus_Periodic____timer[this]=NewTimerEx(this)
                    call TimerStart(s__Bonus_Periodic____timer[this], timeout, periodic, function s__Bonus_Periodic___onTimeout)
                endif
            else
                call BJDebugMsg("Periodic Error: instance not provided")
            endif
   return true
endfunction
function sa__TenacityUtils_addTimed takes nothing returns boolean
    call s__TenacityUtils_addTimed(f__arg_unit1,f__arg_real1,f__arg_real2,f__arg_integer1)
   return true
endfunction
function sa__Afterburner___Afterburner_onTooltip takes nothing returns boolean
    set f__result_string=s__Afterburner___Afterburner_onTooltip(f__arg_this,f__arg_unit1,f__arg_integer1)
   return true
endfunction
function sa__Afterburner___Afterburner_StartTimer takes nothing returns boolean
local real timeout=f__arg_real1
local boolean periodic=f__arg_boolean1
local integer this=f__arg_integer1
local integer uniqueId=f__arg_integer2
            local integer index= R2I(timeout * 100000)
            local integer id
            if this != 0 then
                set s__Afterburner___Afterburner_Periodic____unique[this]=uniqueId
                set s__Afterburner___Afterburner_Periodic____allocated[this]=true
                if s__Afterburner___Afterburner_Periodic____unique[this] >= 0 and not (HaveSavedInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___struct), (s__Afterburner___Afterburner_Periodic____unique[this]))) then // INLINED!!
                    call SaveInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___struct), (s__Afterburner___Afterburner_Periodic____unique[this]), ( this)) // INLINED!!
                endif
                if periodic then
                    if timeout <= s__Afterburner___Afterburner_Periodic___PERIODIC_THRESHOLD then
                        if not (HaveSavedHandle(Table___ht, (((s__Afterburner___Afterburner_Periodic___timers))), (index))) then // INLINED!!
                            call SaveTimerHandle(Table___ht, (((s__Afterburner___Afterburner_Periodic___timers))), (index), ( CreateTimer())) // INLINED!!
                        endif
                        set id=GetHandleId((LoadTimerHandle(Table___ht, (((s__Afterburner___Afterburner_Periodic___timers))), (index)))) // INLINED!!
                        set s__Afterburner___Afterburner_Periodic____timer[this]=(LoadTimerHandle(Table___ht, (((s__Afterburner___Afterburner_Periodic___timers))), (index))) // INLINED!!
                        call SaveInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___table), ((LoadInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___key), (id)))), ( this)) // INLINED!!
                        call SaveInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___key), (id), ( (LoadInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___key), (id))) + 1)) // INLINED!!
                        if (LoadInteger(Table___ht, (s__Afterburner___Afterburner_Periodic___key), (id))) == 1 then // INLINED!!
                            call TimerStart((LoadTimerHandle(Table___ht, (((s__Afterburner___Afterburner_Periodic___timers))), (index))), timeout, periodic, function s__Afterburner___Afterburner_Periodic___onPeriodic) // INLINED!!
                        endif
                    else
                        set s__Afterburner___Afterburner_Periodic____timer[this]=NewTimerEx(this)
                        call TimerStart(s__Afterburner___Afterburner_Periodic____timer[this], timeout, periodic, function s__Afterburner___Afterburner_Periodic___onPeriodic)
                    endif
                else
                    set s__Afterburner___Afterburner_Periodic____timer[this]=NewTimerEx(this)
                    call TimerStart(s__Afterburner___Afterburner_Periodic____timer[this], timeout, periodic, function s__Afterburner___Afterburner_Periodic___onTimeout)
                endif
            else
                call BJDebugMsg("Periodic Error: instance not provided")
            endif
   return true
endfunction
function sa__CooldownReductionFlat___CooldownReductionFlat_get takes nothing returns boolean
    set f__result_real=s__CooldownReductionFlat___CooldownReductionFlat_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__CooldownReductionFlat___CooldownReductionFlat_Set takes nothing returns boolean
    set f__result_real=s__CooldownReductionFlat___CooldownReductionFlat_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__CooldownReductionFlat___CooldownReductionFlat_add takes nothing returns boolean
    set f__result_real=s__CooldownReductionFlat___CooldownReductionFlat_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__MoltenShield___MoltenShield_onTooltip takes nothing returns boolean
    set f__result_string=s__MoltenShield___MoltenShield_onTooltip(f__arg_this,f__arg_unit1,f__arg_integer1)
   return true
endfunction
function sa__MoltenShield___MoltenShield_onCast takes nothing returns boolean
local integer this=f__arg_this
            if GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_target], MoltenShield___BUFF_ID) == 0 then
                set this=s__MoltenShield___MoltenShield__allocate()
                set s__MoltenShield___MoltenShield_id[this]=(GetUnitUserData(s__PluginSpellEffect___Unit_unit[(s__Spell_target)])) // INLINED!!
                set s__MoltenShield___MoltenShield_unit[this]=s__PluginSpellEffect___Unit_unit[s__Spell_target]
                set s__MoltenShield___MoltenShield_level[this]=(GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))) // INLINED!!
                call sc__MoltenShield___MoltenShield_StartTimer(0.03125 , true , this , - 1)
                call s__Bonus_linkBuff((s__PluginSpellEffect___Unit_unit[s__Spell_target] ) , ( BONUS_MOVEMENT_SPEED ) , (( (100 * ((GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))))) )*1.0) , ( MoltenShield___BUFF_ID)) // INLINED!!
            endif
   return true
endfunction
function sa__MoltenShield___MoltenShield_StartTimer takes nothing returns boolean
local real timeout=f__arg_real1
local boolean periodic=f__arg_boolean1
local integer this=f__arg_integer1
local integer uniqueId=f__arg_integer2
            local integer index= R2I(timeout * 100000)
            local integer id
            if this != 0 then
                set s__MoltenShield___MoltenShield_Periodic____unique[this]=uniqueId
                set s__MoltenShield___MoltenShield_Periodic____allocated[this]=true
                if s__MoltenShield___MoltenShield_Periodic____unique[this] >= 0 and not (HaveSavedInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___struct), (s__MoltenShield___MoltenShield_Periodic____unique[this]))) then // INLINED!!
                    call SaveInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___struct), (s__MoltenShield___MoltenShield_Periodic____unique[this]), ( this)) // INLINED!!
                endif
                if periodic then
                    if timeout <= s__MoltenShield___MoltenShield_Periodic___PERIODIC_THRESHOLD then
                        if not (HaveSavedHandle(Table___ht, (((s__MoltenShield___MoltenShield_Periodic___timers))), (index))) then // INLINED!!
                            call SaveTimerHandle(Table___ht, (((s__MoltenShield___MoltenShield_Periodic___timers))), (index), ( CreateTimer())) // INLINED!!
                        endif
                        set id=GetHandleId((LoadTimerHandle(Table___ht, (((s__MoltenShield___MoltenShield_Periodic___timers))), (index)))) // INLINED!!
                        set s__MoltenShield___MoltenShield_Periodic____timer[this]=(LoadTimerHandle(Table___ht, (((s__MoltenShield___MoltenShield_Periodic___timers))), (index))) // INLINED!!
                        call SaveInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___table), ((LoadInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___key), (id)))), ( this)) // INLINED!!
                        call SaveInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___key), (id), ( (LoadInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___key), (id))) + 1)) // INLINED!!
                        if (LoadInteger(Table___ht, (s__MoltenShield___MoltenShield_Periodic___key), (id))) == 1 then // INLINED!!
                            call TimerStart((LoadTimerHandle(Table___ht, (((s__MoltenShield___MoltenShield_Periodic___timers))), (index))), timeout, periodic, function s__MoltenShield___MoltenShield_Periodic___onPeriodic) // INLINED!!
                        endif
                    else
                        set s__MoltenShield___MoltenShield_Periodic____timer[this]=NewTimerEx(this)
                        call TimerStart(s__MoltenShield___MoltenShield_Periodic____timer[this], timeout, periodic, function s__MoltenShield___MoltenShield_Periodic___onPeriodic)
                    endif
                else
                    set s__MoltenShield___MoltenShield_Periodic____timer[this]=NewTimerEx(this)
                    call TimerStart(s__MoltenShield___MoltenShield_Periodic____timer[this], timeout, periodic, function s__MoltenShield___MoltenShield_Periodic___onTimeout)
                endif
            else
                call BJDebugMsg("Periodic Error: instance not provided")
            endif
   return true
endfunction
function sa__ExplosiveRune___ExplosiveRune_onTooltip takes nothing returns boolean
    set f__result_string=s__ExplosiveRune___ExplosiveRune_onTooltip(f__arg_this,f__arg_unit1,f__arg_integer1)
   return true
endfunction
function sa__ExplosiveRune___ExplosiveRune_onCast takes nothing returns boolean
local integer this=f__arg_this
            set this=s__ExplosiveRune___ExplosiveRune__allocate()
            set s__ExplosiveRune___ExplosiveRune_x[this]=(GetSpellTargetX()) // INLINED!!
            set s__ExplosiveRune___ExplosiveRune_y[this]=(GetSpellTargetY()) // INLINED!!
            set s__ExplosiveRune___ExplosiveRune_id[this]=(GetUnitUserData(s__PluginSpellEffect___Unit_unit[(s__Spell_source)])) // INLINED!!
            set s__ExplosiveRune___ExplosiveRune_unit[this]=s__PluginSpellEffect___Unit_unit[s__Spell_source]
            set s__ExplosiveRune___ExplosiveRune_damage[this]=ExplosiveRune___GetDamage(s__PluginSpellEffect___Unit_unit[s__Spell_source] , (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId())))) // INLINED!!
            set s__ExplosiveRune___ExplosiveRune_aoe[this]=BlzGetAbilityRealLevelField((BlzGetUnitAbility(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))), ABILITY_RLF_AREA_OF_EFFECT, (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))) - 1) // INLINED!!
            if s__ExplosiveRune___ExplosiveRune_charges[s__ExplosiveRune___ExplosiveRune_id[this]] > 0 then
                set s__ExplosiveRune___ExplosiveRune_charges[s__ExplosiveRune___ExplosiveRune_id[this]]=s__ExplosiveRune___ExplosiveRune_charges[s__ExplosiveRune___ExplosiveRune_id[this]] - 1
                if s__ExplosiveRune___ExplosiveRune_charges[s__ExplosiveRune___ExplosiveRune_id[this]] >= 1 then
                    call sc__ResetCooldown_reset((s__ExplosiveRune___ExplosiveRune_unit[this] ) , ( ExplosiveRune___ABILITY)) // INLINED!!
                else
                        call s__CDR_calculateCooldown((s__ExplosiveRune___ExplosiveRune_unit[this] ) , ( ExplosiveRune___ABILITY ) , ( (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))) ) , (( (TimerGetRemaining(s__ExplosiveRune___ExplosiveRune_Periodic____timer[(sc__ExplosiveRune___ExplosiveRune_GetTimerInstance(s__ExplosiveRune___ExplosiveRune_id[this]))])))*1.0)) // INLINED!!
                endif
            endif
            call sc__ExplosiveRune___ExplosiveRune_StartTimer(ExplosiveRune___EXPLOSION_DELAY , false , this , - 1)
   return true
endfunction
function sa__ExplosiveRune___ExplosiveRune_onLearn takes nothing returns boolean
    call s__ExplosiveRune___ExplosiveRune_onLearn(f__arg_this,f__arg_unit1,f__arg_integer1,f__arg_integer2)
   return true
endfunction
function sa__ExplosiveRune___ExplosiveRune_HasStartedTimer takes nothing returns boolean
local integer id=f__arg_integer1
set f__result_boolean= (HaveSavedInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___struct), (id))) // INLINED!!
   return true
endfunction
function sa__ExplosiveRune___ExplosiveRune_GetTimerInstance takes nothing returns boolean
local integer id=f__arg_integer1
set f__result_integer= (LoadInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___struct), (id))) // INLINED!!
   return true
endfunction
function sa__ExplosiveRune___ExplosiveRune_GetRemainingTime takes nothing returns boolean
local integer this=f__arg_integer1
set f__result_real= TimerGetRemaining(s__ExplosiveRune___ExplosiveRune_Periodic____timer[this])
   return true
endfunction
function sa__ExplosiveRune___ExplosiveRune_StartTimer takes nothing returns boolean
local real timeout=f__arg_real1
local boolean periodic=f__arg_boolean1
local integer this=f__arg_integer1
local integer uniqueId=f__arg_integer2
            local integer index= R2I(timeout * 100000)
            local integer id
            if this != 0 then
                set s__ExplosiveRune___ExplosiveRune_Periodic____unique[this]=uniqueId
                set s__ExplosiveRune___ExplosiveRune_Periodic____allocated[this]=true
                if s__ExplosiveRune___ExplosiveRune_Periodic____unique[this] >= 0 and not (HaveSavedInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___struct), (s__ExplosiveRune___ExplosiveRune_Periodic____unique[this]))) then // INLINED!!
                    call SaveInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___struct), (s__ExplosiveRune___ExplosiveRune_Periodic____unique[this]), ( this)) // INLINED!!
                endif
                if periodic then
                    if timeout <= s__ExplosiveRune___ExplosiveRune_Periodic___PERIODIC_THRESHOLD then
                        if not (HaveSavedHandle(Table___ht, (((s__ExplosiveRune___ExplosiveRune_Periodic___timers))), (index))) then // INLINED!!
                            call SaveTimerHandle(Table___ht, (((s__ExplosiveRune___ExplosiveRune_Periodic___timers))), (index), ( CreateTimer())) // INLINED!!
                        endif
                        set id=GetHandleId((LoadTimerHandle(Table___ht, (((s__ExplosiveRune___ExplosiveRune_Periodic___timers))), (index)))) // INLINED!!
                        set s__ExplosiveRune___ExplosiveRune_Periodic____timer[this]=(LoadTimerHandle(Table___ht, (((s__ExplosiveRune___ExplosiveRune_Periodic___timers))), (index))) // INLINED!!
                        call SaveInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___table), ((LoadInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___key), (id)))), ( this)) // INLINED!!
                        call SaveInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___key), (id), ( (LoadInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___key), (id))) + 1)) // INLINED!!
                        if (LoadInteger(Table___ht, (s__ExplosiveRune___ExplosiveRune_Periodic___key), (id))) == 1 then // INLINED!!
                            call TimerStart((LoadTimerHandle(Table___ht, (((s__ExplosiveRune___ExplosiveRune_Periodic___timers))), (index))), timeout, periodic, function s__ExplosiveRune___ExplosiveRune_Periodic___onPeriodic) // INLINED!!
                        endif
                    else
                        set s__ExplosiveRune___ExplosiveRune_Periodic____timer[this]=NewTimerEx(this)
                        call TimerStart(s__ExplosiveRune___ExplosiveRune_Periodic____timer[this], timeout, periodic, function s__ExplosiveRune___ExplosiveRune_Periodic___onPeriodic)
                    endif
                else
                    set s__ExplosiveRune___ExplosiveRune_Periodic____timer[this]=NewTimerEx(this)
                    call TimerStart(s__ExplosiveRune___ExplosiveRune_Periodic____timer[this], timeout, periodic, function s__ExplosiveRune___ExplosiveRune_Periodic___onTimeout)
                endif
            else
                call BJDebugMsg("Periodic Error: instance not provided")
            endif
   return true
endfunction
function sa__LavaElemental___LavaElemental_onCast takes nothing returns boolean
local integer this=f__arg_this
            local unit lava
            set this=s__LavaElemental___LavaElemental__allocate()
            if s__PluginSpellEffect___Unit_unit[s__Spell_target] != null then
                set lava=CreateUnit((GetOwningPlayer(s__PluginSpellEffect___Unit_unit[(s__Spell_source)])), LavaElemental___LAVA_ELEMENTAL, (GetUnitX(s__PluginSpellEffect___Unit_unit[(s__Spell_target)])), (GetUnitY(s__PluginSpellEffect___Unit_unit[(s__Spell_target)])), 0) // INLINED!!
                set s__LavaElemental___LavaElemental_id[this]=GetUnitUserData(lava)
                set s__LavaElemental___LavaElemental_unit[this]=s__PluginSpellEffect___Unit_unit[s__Spell_target]
                set s__LavaElemental___LavaElemental_effect[this]=AddSpecialEffect(LavaElemental___FIRA_BASE, (GetUnitX(s__PluginSpellEffect___Unit_unit[(s__Spell_target)])), (GetUnitY(s__PluginSpellEffect___Unit_unit[(s__Spell_target)]))) // INLINED!!
                set s__LavaElemental___LavaElemental_array[s__LavaElemental___LavaElemental_id[this]]=this
                call UnitAddAbility(s__PluginSpellEffect___Unit_unit[s__Spell_target], 'Abun')
                call ShowUnit(s__PluginSpellEffect___Unit_unit[s__Spell_target], false)
                call SetUnitInvulnerable(s__PluginSpellEffect___Unit_unit[s__Spell_target], true)
                call SetUnitX(lava, (GetUnitX(s__PluginSpellEffect___Unit_unit[(s__Spell_target)]))) // INLINED!!
                call SetUnitY(lava, (GetUnitY(s__PluginSpellEffect___Unit_unit[(s__Spell_target)]))) // INLINED!!
                call BlzSetUnitMaxHP(lava, LavaElemental___GetElementalHealth(s__PluginSpellEffect___Unit_unit[s__Spell_source] , (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))))) // INLINED!!
                call SetUnitLifePercentBJ(lava, 100)
                call BlzSetUnitBaseDamage(lava, LavaElemental___GetElementalDamage(s__PluginSpellEffect___Unit_unit[s__Spell_source] , (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId())))), 0) // INLINED!!
                call SetUnitPropWindow(lava, 0)
                call BlzSetAbilityRealLevelField((BlzGetUnitAbility(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))), ABILITY_RLF_COOLDOWN, (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))) - 1, LavaElemental___STRUCTURE_COOLDOWN) // INLINED!!
                call IncUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], LavaElemental___ABILITY)
                call DecUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], LavaElemental___ABILITY)
                call DestroyEffect(AddSpecialEffect(LavaElemental___SPAWN_EFFECT, (GetUnitX(s__PluginSpellEffect___Unit_unit[(s__Spell_target)])), (GetUnitY(s__PluginSpellEffect___Unit_unit[(s__Spell_target)])))) // INLINED!!
            else
                set lava=CreateUnit((GetOwningPlayer(s__PluginSpellEffect___Unit_unit[(s__Spell_source)])), LavaElemental___LAVA_ELEMENTAL, (GetSpellTargetX()), (GetSpellTargetY()), 0) // INLINED!!
                set s__LavaElemental___LavaElemental_id[this]=GetUnitUserData(lava)
                set s__LavaElemental___LavaElemental_unit[this]=s__PluginSpellEffect___Unit_unit[s__Spell_target]
                set s__LavaElemental___LavaElemental_effect[this]=AddSpecialEffect(LavaElemental___FIRA_BASE, (GetSpellTargetX()), (GetSpellTargetY())) // INLINED!!
                set s__LavaElemental___LavaElemental_array[s__LavaElemental___LavaElemental_id[this]]=this
                call BlzSetUnitMaxHP(lava, LavaElemental___GetElementalHealth(s__PluginSpellEffect___Unit_unit[s__Spell_source] , (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))))) // INLINED!!
                call SetUnitLifePercentBJ(lava, 100)
                call BlzSetUnitBaseDamage(lava, LavaElemental___GetElementalDamage(s__PluginSpellEffect___Unit_unit[s__Spell_source] , (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId())))), 0) // INLINED!!
                call SetUnitPropWindow(lava, 0)
                call UnitApplyTimedLife(lava, 'BTLF', LavaElemental___ELEMENTAL_DURATION)
                call BlzSetAbilityRealLevelField((BlzGetUnitAbility(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))), ABILITY_RLF_COOLDOWN, (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))) - 1, LavaElemental___NORMAL_COOLDOWN) // INLINED!!
                call IncUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], LavaElemental___ABILITY)
                call DecUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], LavaElemental___ABILITY)
                call DestroyEffect(AddSpecialEffect(LavaElemental___SPAWN_EFFECT, (GetSpellTargetX()), (GetSpellTargetY()))) // INLINED!!
            endif
            set lava=null
   return true
endfunction
function sa__LivingMeteor___Meteor_onPeriod takes nothing returns boolean
local integer this=f__arg_this
            if s__LivingMeteor___Meteor_rolling[this] then
                set s__LivingMeteor___Meteor_i[this]=s__LivingMeteor___Meteor_i[this] + 1
                set s__LivingMeteor___Meteor_j[this]=s__LivingMeteor___Meteor_j[this] + 1
                if s__LivingMeteor___Meteor_j[this] == 25 then
                    set s__LivingMeteor___Meteor_j[this]=0
                        call Afterburn(s__Missiles_x[this] , s__Missiles_y[this] , s__Missiles_source[this])
                endif
                if s__LivingMeteor___Meteor_i[this] == s__LivingMeteor___Meteor_ticks then
                    set s__LivingMeteor___Meteor_i[this]=0
                    call UnitDamageArea(s__Missiles_source[this] , s__Missiles_x[this] , s__Missiles_y[this] , s__LivingMeteor___Meteor_aoe[this] , s__Missiles_damage[this] , LivingMeteor___ATTACK_TYPE , LivingMeteor___DAMAGE_TYPE , LivingMeteor___DAMAGE_STRUCTURES , LivingMeteor___DAMAGE_ALLIES , LivingMeteor___DAMAGE_MAGIC_IMMUNE)
                endif
            endif
set f__result_boolean= false
   return true
endfunction
function sa__LivingMeteor___Meteor_onFinish takes nothing returns boolean
local integer this=f__arg_this
            if not s__LivingMeteor___Meteor_rolling[this] then
                call DestroyEffect(AddSpecialEffect(LivingMeteor___IMPACT_MODEL, s__Missiles_x[this], s__Missiles_y[this]))
                call UnitDamageArea(s__Missiles_source[this] , s__Missiles_x[this] , s__Missiles_y[this] , LivingMeteor___GetImpactAoE(s__Missiles_source[this] , s__LivingMeteor___Meteor_level[this]) , s__Missiles_damage[this] , LivingMeteor___ATTACK_TYPE , LivingMeteor___DAMAGE_TYPE , LivingMeteor___DAMAGE_STRUCTURES , LivingMeteor___DAMAGE_ALLIES , LivingMeteor___DAMAGE_MAGIC_IMMUNE)
                call s__Missiles_deflect(this,s__Missiles_x[this] + s__LivingMeteor___Meteor_distance[this] * Cos(s__LivingMeteor___Meteor_angle[this]) , s__Missiles_y[this] + s__LivingMeteor___Meteor_distance[this] * Sin(s__LivingMeteor___Meteor_angle[this]) , 0)
                    call Afterburn(s__Missiles_x[this] , s__Missiles_y[this] , s__Missiles_source[this])
                set s__LivingMeteor___Meteor_rolling[this]=true
                set s__Missiles_damage[this]=LivingMeteor___RollDamage(s__Missiles_source[this] , s__LivingMeteor___Meteor_level[this])
                call s__Missiles__set_duration(this,LivingMeteor___ROLLING_TIME)
            endif
set f__result_boolean= false
   return true
endfunction
function sa__LivingMeteor___LivingMeteor_onTooltip takes nothing returns boolean
    set f__result_string=s__LivingMeteor___LivingMeteor_onTooltip(f__arg_this,f__arg_unit1,f__arg_integer1)
   return true
endfunction
function sa__LivingMeteor___LivingMeteor_onCast takes nothing returns boolean
local integer this=f__arg_this
            set this=s__LivingMeteor___LivingMeteor__allocate()
            set s__LivingMeteor___LivingMeteor_x[this]=(GetSpellTargetX()) // INLINED!!
            set s__LivingMeteor___LivingMeteor_y[this]=(GetSpellTargetY()) // INLINED!!
            set s__LivingMeteor___LivingMeteor_level[this]=(GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))) // INLINED!!
            set s__LivingMeteor___LivingMeteor_unit[this]=s__PluginSpellEffect___Unit_unit[s__Spell_source]
            set s__LivingMeteor___LivingMeteor_player[this]=(GetOwningPlayer(s__PluginSpellEffect___Unit_unit[(s__Spell_source)])) // INLINED!!
            call sc__LivingMeteor___LivingMeteor_StartTimer(LivingMeteor___DRAG_AND_DROP_TIME , false , this , - 1)
   return true
endfunction
function sa__LivingMeteor___LivingMeteor_StartTimer takes nothing returns boolean
local real timeout=f__arg_real1
local boolean periodic=f__arg_boolean1
local integer this=f__arg_integer1
local integer uniqueId=f__arg_integer2
            local integer index= R2I(timeout * 100000)
            local integer id
            if this != 0 then
                set s__LivingMeteor___LivingMeteor_Periodic____unique[this]=uniqueId
                set s__LivingMeteor___LivingMeteor_Periodic____allocated[this]=true
                if s__LivingMeteor___LivingMeteor_Periodic____unique[this] >= 0 and not (HaveSavedInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___struct), (s__LivingMeteor___LivingMeteor_Periodic____unique[this]))) then // INLINED!!
                    call SaveInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___struct), (s__LivingMeteor___LivingMeteor_Periodic____unique[this]), ( this)) // INLINED!!
                endif
                if periodic then
                    if timeout <= s__LivingMeteor___LivingMeteor_Periodic___PERIODIC_THRESHOLD then
                        if not (HaveSavedHandle(Table___ht, (((s__LivingMeteor___LivingMeteor_Periodic___timers))), (index))) then // INLINED!!
                            call SaveTimerHandle(Table___ht, (((s__LivingMeteor___LivingMeteor_Periodic___timers))), (index), ( CreateTimer())) // INLINED!!
                        endif
                        set id=GetHandleId((LoadTimerHandle(Table___ht, (((s__LivingMeteor___LivingMeteor_Periodic___timers))), (index)))) // INLINED!!
                        set s__LivingMeteor___LivingMeteor_Periodic____timer[this]=(LoadTimerHandle(Table___ht, (((s__LivingMeteor___LivingMeteor_Periodic___timers))), (index))) // INLINED!!
                        call SaveInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___table), ((LoadInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___key), (id)))), ( this)) // INLINED!!
                        call SaveInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___key), (id), ( (LoadInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___key), (id))) + 1)) // INLINED!!
                        if (LoadInteger(Table___ht, (s__LivingMeteor___LivingMeteor_Periodic___key), (id))) == 1 then // INLINED!!
                            call TimerStart((LoadTimerHandle(Table___ht, (((s__LivingMeteor___LivingMeteor_Periodic___timers))), (index))), timeout, periodic, function s__LivingMeteor___LivingMeteor_Periodic___onPeriodic) // INLINED!!
                        endif
                    else
                        set s__LivingMeteor___LivingMeteor_Periodic____timer[this]=NewTimerEx(this)
                        call TimerStart(s__LivingMeteor___LivingMeteor_Periodic____timer[this], timeout, periodic, function s__LivingMeteor___LivingMeteor_Periodic___onPeriodic)
                    endif
                else
                    set s__LivingMeteor___LivingMeteor_Periodic____timer[this]=NewTimerEx(this)
                    call TimerStart(s__LivingMeteor___LivingMeteor_Periodic____timer[this], timeout, periodic, function s__LivingMeteor___LivingMeteor_Periodic___onTimeout)
                endif
            else
                call BJDebugMsg("Periodic Error: instance not provided")
            endif
   return true
endfunction
function sa__Shop___Slot_update takes nothing returns boolean
local integer this=f__arg_this
            if (s__Shop___Slot_current_column[(this)]) <= ( s__Shop_columns[s__Shop___Slot_shop[this]] / 2 ) and (s__Shop___Slot_current_row[(this)]) < 3 then // INLINED!!
                call s__Tooltip__set_point(s__Button_tooltip[this],FRAMEPOINT_TOPLEFT)
            elseif (s__Shop___Slot_current_column[(this)]) >= ( ( s__Shop_columns[s__Shop___Slot_shop[this]] / 2 ) + 1 ) and (s__Shop___Slot_current_row[(this)]) < 3 then // INLINED!!
                call s__Tooltip__set_point(s__Button_tooltip[this],FRAMEPOINT_TOPRIGHT)
            elseif (s__Shop___Slot_current_column[(this)]) <= ( s__Shop_columns[s__Shop___Slot_shop[this]] / 2 ) and (s__Shop___Slot_current_row[(this)]) >= 3 then // INLINED!!
                call s__Tooltip__set_point(s__Button_tooltip[this],FRAMEPOINT_BOTTOMLEFT)
            else
                call s__Tooltip__set_point(s__Button_tooltip[this],FRAMEPOINT_BOTTOMRIGHT)
            endif
   return true
endfunction
function sa__Shop___Slot_onScroll takes nothing returns boolean
local integer this=f__arg_this
            if GetLocalPlayer() == GetTriggerPlayer() then
                call sc__Shop_onScroll(s__Shop___Slot_shop[this])
            endif
   return true
endfunction
function sa__Shop___Slot_onClick takes nothing returns boolean
local integer this=f__arg_this
            call sc__Shop_detail(s__Shop___Slot_shop[this],s__Shop___Slot_item[this] , GetTriggerPlayer())
   return true
endfunction
function sa__Shop___Slot_onMiddleClick takes nothing returns boolean
local integer this=f__arg_this
            if sc__Shop___Favorites_has(s__Shop_favorites[s__Shop___Slot_shop[this]],s__Item_id[s__Shop___Slot_item[this]] , GetTriggerPlayer()) then
                call sc__Shop___Favorites_remove(s__Shop_favorites[s__Shop___Slot_shop[this]],s__Shop___Slot_item[this] , GetTriggerPlayer())
            else
                call sc__Shop___Favorites_add(s__Shop_favorites[s__Shop___Slot_shop[this]],s__Shop___Slot_item[this] , GetTriggerPlayer())
            endif
   return true
endfunction
function sa__Shop___Slot_onDoubleClick takes nothing returns boolean
local integer this=f__arg_this
            if sc__Shop_buy(s__Shop___Slot_shop[this],s__Shop___Slot_item[this] , GetTriggerPlayer()) then
                if GetLocalPlayer() == GetTriggerPlayer() then
                    call s__Button_play(this,Shop___SPRITE_MODEL , Shop___SPRITE_SCALE , 0)
                endif
            endif
   return true
endfunction
function sa__Shop___Slot_onRightClick takes nothing returns boolean
local integer this=f__arg_this
            if sc__Shop_buy(s__Shop___Slot_shop[this],s__Shop___Slot_item[this] , GetTriggerPlayer()) then
                if GetLocalPlayer() == GetTriggerPlayer() then
                    call s__Button_play(this,Shop___SPRITE_MODEL , Shop___SPRITE_SCALE , 0)
                endif
            endif
   return true
endfunction
function sa__Shop___Detail__disposeArrays takes nothing returns boolean
 local integer this=f__arg_this
 local integer kthis
    set si__Shop___Detail_arrN=si__Shop___Detail_arrN+1
    set kthis=si__Shop___Detail_arr[this]
    set si__Shop___Detail_arrV[si__Shop___Detail_arrN]=kthis
 return true
endfunction
function sa__Shop___Detail_show takes nothing returns boolean
local integer this=f__arg_this
local integer i=f__arg_integer1
local player p=f__arg_player1
            local integer counter= s__Table_create()
            local integer id= GetPlayerId(p)
            local integer j= 0
            local integer cost
            local integer component
            local integer slot
            if i != 0 then
                set cost=(LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (1))) // INLINED!!
                set s__Shop___Slot_item[((LoadInteger(Table___ht, (s__Shop___Detail_main[this]), (id))))]=i // INLINED!!
                call s__Backdrop__set_texture(s__Component_image[(((LoadInteger(Table___ht, (s__Shop___Detail_main[this]), (id)))))],((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (4))))) // INLINED!!
                call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[((LoadInteger(Table___ht, (s__Shop___Detail_main[this]), (id))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (5))))) // INLINED!!
                call BlzFrameSetText(s__Tooltip_nameFrame[(s__Button_tooltip[((LoadInteger(Table___ht, (s__Shop___Detail_main[this]), (id))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (3))))) // INLINED!!
                call s__Tooltip__set_icon(s__Button_tooltip[((LoadInteger(Table___ht, (s__Shop___Detail_main[this]), (id))))],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (4)))) // INLINED!!
                call sc__Backdrop__set_visible(s__Button_block[(((LoadInteger(Table___ht, (s__Shop___Detail_main[this]), (id)))))],not (sc__Shop_has(s__Shop___Detail_shop[this],s__Item_id[i]))) // INLINED!!
                if i != (LoadInteger(Table___ht, (s__Shop___Detail_item[this]), (id))) then // INLINED!!
                    call SaveInteger(Table___ht, (s__Shop___Detail_item[this]), (id), ( i)) // INLINED!!
                    call SaveInteger(Table___ht, (s__Shop___Detail_count[this]), (id), ( 0)) // INLINED!!
                    call s__Shop___Detail_showUsed(this,p)
                endif
                if GetLocalPlayer() == p then
                    call sc__Component__set_visible(this,true)
                    call sc__Component__set_visible(s__Shop___Detail_uses[this],(LoadInteger(Table___ht, (s__Shop___Detail_count[this]), (id))) > 0) // INLINED!!
                    call sc__Backdrop__set_visible(s__Shop___Detail_vertical[this],(LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) > 0) // INLINED!!
                    call sc__Backdrop__set_visible(s__Shop___Detail_horizontal[this],(LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) > 1) // INLINED!!
                    call s__TextArea__set_text(s___Shop___Detail_description[s__Shop___Detail_description[this]],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (5)))) // INLINED!!
                    call s__TextArea__set_text(s___Shop___Detail_description[s__Shop___Detail_description[this]+1],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (5)))) // INLINED!!
                    call s__TextArea__set_text(s___Shop___Detail_description[s__Shop___Detail_description[this]+2],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (5)))) // INLINED!!
                    call s__TextArea__set_text(s___Shop___Detail_description[s__Shop___Detail_description[this]+3],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (5)))) // INLINED!!
                    call s__TextArea__set_visible(s___Shop___Detail_description[s__Shop___Detail_description[this]],sc__Component__get_visible(s__Shop___Detail_uses[this]) and (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) > 0) // INLINED!!
                    call s__TextArea__set_visible(s___Shop___Detail_description[s__Shop___Detail_description[this]+1],sc__Component__get_visible(s__Shop___Detail_uses[this]) and (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) == 0) // INLINED!!
                    call s__TextArea__set_visible(s___Shop___Detail_description[s__Shop___Detail_description[this]+2],not sc__Component__get_visible(s__Shop___Detail_uses[this]) and (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) > 0) // INLINED!!
                    call s__TextArea__set_visible(s___Shop___Detail_description[s__Shop___Detail_description[this]+3],not sc__Component__get_visible(s__Shop___Detail_uses[this]) and (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) == 0) // INLINED!!
                    call s__Text__set_text(s__Shop___Slot_cost[((LoadInteger(Table___ht, (s__Shop___Detail_main[this]), (id))))],"|cffFFCC00" + I2S(s__Item_cost(i,sc__Shop___Buyer__getindex(s__Shop_buyer[s__Shop___Detail_shop[this]],id))) + "|r") // INLINED!!
                endif
                if (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) > 0 then // INLINED!!
                    loop
                        exitwhen j == 5
                            set component=s__Item_get((LoadInteger(Table___ht, ((s__HashTable__getindex(s__Item_itemtype,s__Item_id[(i)]))), (j)))) // INLINED!!
                            if component != 0 then
                                set slot=(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_components[this],id)), (j))) // INLINED!!
                                if GetLocalPlayer() == p then
                                    if (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) == 1 then // INLINED!!
                                        call s__Component__set_x(slot,0.13725)
                                    elseif (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) == 2 then // INLINED!!
                                        call s__Component__set_x(slot,0.08725 + 0.1 * j)
                                    elseif (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) == 3 then // INLINED!!
                                        call s__Component__set_x(slot,0.03725 + 0.1 * j)
                                    elseif (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) == 4 then // INLINED!!
                                        call s__Component__set_x(slot,0.03725 + 0.06525 * j)
                                    else
                                        call s__Component__set_x(slot,0.03725 + 0.05 * j)
                                    endif
                                    call sc__Component__set_visible(slot,true)
                                endif
                                set s__Shop___Slot_item[slot]=component
                                call s__Backdrop__set_texture(s__Component_image[(slot)],((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(component)])))), (4))))) // INLINED!!
                                call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[slot])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(component)])))), (5))))) // INLINED!!
                                call BlzFrameSetText(s__Tooltip_nameFrame[(s__Button_tooltip[slot])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(component)])))), (3))))) // INLINED!!
                                call s__Tooltip__set_icon(s__Button_tooltip[slot],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(component)])))), (4)))) // INLINED!!
                                call sc__Backdrop__set_visible(s__Button_block[(slot)],not (sc__Shop_has(s__Shop___Detail_shop[this],s__Item_id[component]))) // INLINED!!
                                call s__Text__set_text(s__Shop___Slot_cost[slot],"|cffFFCC00" + I2S(s__Item_cost(component,sc__Shop___Buyer__getindex(s__Shop_buyer[s__Shop___Detail_shop[this]],id))) + "|r")
                                if sc__Shop___Buyer__getindex(s__Shop_buyer[s__Shop___Detail_shop[this]],id) != null then
                                    if (s__Item_hasType((sc__Shop___Buyer__getindex(s__Shop_buyer[s__Shop___Detail_shop[this]],id) ) , ( s__Item_id[component]))) then // INLINED!!
                                        if (s__Item_countType((sc__Shop___Buyer__getindex(s__Shop_buyer[s__Shop___Detail_shop[this]],id) ) , ( s__Item_id[component]))) >= s__Item_count(i,s__Item_id[component]) then // INLINED!!
                                            call sc__Backdrop__set_visible(s__Button_check[(slot)],(true)) // INLINED!!
                                        else
                                            call SaveInteger(Table___ht, (counter), (s__Item_id[component]), ( (LoadInteger(Table___ht, (counter), (s__Item_id[component]))) + 1)) // INLINED!!
                                            call sc__Backdrop__set_visible(s__Button_check[(slot)],((LoadInteger(Table___ht, (counter), (s__Item_id[component]))) <= (s__Item_countType((sc__Shop___Buyer__getindex(s__Shop_buyer[s__Shop___Detail_shop[this]],id) ) , ( s__Item_id[component]))))) // INLINED!!
                                        endif
                                    else
                                        call sc__Backdrop__set_visible(s__Button_check[(slot)],(false)) // INLINED!!
                                    endif
                                else
                                    call sc__Backdrop__set_visible(s__Button_check[(slot)],(false)) // INLINED!!
                                endif
                                if (sc__Backdrop__get_visible(s__Button_check[(slot)])) then // INLINED!!
                                    set cost=cost - (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(component)])), (1))) // INLINED!!
                                endif
                            else
                                if GetLocalPlayer() == p then
                                    call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_components[this],id)), (j)))),false) // INLINED!!
                                endif
                            endif
                        set j=j + 1
                    endloop
                    if GetLocalPlayer() == p then
                        call s__Backdrop__set_width(s__Shop___Detail_horizontal[this],0.2)
                        call s__Backdrop__set_x(s__Shop___Detail_horizontal[this],(s__Component_Components___Operators____x[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_components[this],id)), (0)))))]) + Shop___ITEM_SIZE / 2) // INLINED!!
                        if (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) == 2 then // INLINED!!
                            call s__Backdrop__set_width(s__Shop___Detail_horizontal[this],0.1)
                        elseif (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (7))) == 4 then // INLINED!!
                            call s__Backdrop__set_width(s__Shop___Detail_horizontal[this],0.19575)
                        endif
                    endif
                else
                    loop
                        exitwhen j == 5
                            if GetLocalPlayer() == p then
                                call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_components[this],id)), (j)))),false) // INLINED!!
                            endif
                        set j=j + 1
                    endloop
                endif
            endif
            call s__Table_destroy(counter)
   return true
endfunction
function sa__Shop___Detail_onScroll takes nothing returns boolean
local integer this=f__arg_this
            if GetLocalPlayer() == GetTriggerPlayer() then
                call sc__Shop_onScroll(s__Shop___Detail_shop[this])
            endif
   return true
endfunction
function sa__Shop___Detail_onClicked takes nothing returns boolean

            local integer b= (s__Component_array[GetPlayerId(GetTriggerPlayer())]) // INLINED!!
            local player p= GetTriggerPlayer()
            local integer id= GetPlayerId(p)
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (0))) // INLINED!!
            if this != 0 then
                if b == s__Shop___Detail_close[this] then
                    call sc__Shop_detail(s__Shop___Detail_shop[this],0 , p)
                elseif b == s__Shop___Detail_left[this] or b == s__Shop___Detail_right[this] then
                    call s__Shop___Detail_shift(this,b == s__Shop___Detail_right[this] , p)
                else
                    call sc__Shop_detail(s__Shop___Detail_shop[this],(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (1)))))) , p) // INLINED!!
                endif
            endif
            set p=null
   return true
endfunction
function sa__Shop___Detail_onScrolled takes nothing returns boolean

            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!
            if this != 0 then
                call s__Shop___Detail_shift(this,BlzGetTriggerFrameValue() < 0 , GetTriggerPlayer())
            endif
   return true
endfunction
function sa__Shop___Detail_onMiddleClicked takes nothing returns boolean

            local integer b= (s__Component_array[GetPlayerId(GetTriggerPlayer())]) // INLINED!!
            local player p= GetTriggerPlayer()
            local integer id= GetPlayerId(p)
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (0))) // INLINED!!
            if this != 0 then
                if sc__Shop___Favorites_has(s__Shop_favorites[s__Shop___Detail_shop[this]],s__Item_id[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (1)))))))] , p) then // INLINED!!
                    call sc__Shop___Favorites_remove(s__Shop_favorites[s__Shop___Detail_shop[this]],(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (1)))))) , p) // INLINED!!
                else
                    call sc__Shop___Favorites_add(s__Shop_favorites[s__Shop___Detail_shop[this]],(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (1)))))) , p) // INLINED!!
                endif
            endif
            set p=null
   return true
endfunction
function sa__Shop___Detail_onRightClicked takes nothing returns boolean

            local integer b= (s__Component_array[GetPlayerId(GetTriggerPlayer())]) // INLINED!!
            local player p= GetTriggerPlayer()
            local integer id= GetPlayerId(p)
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (0))) // INLINED!!
            if this != 0 then
                if sc__Shop_buy(s__Shop___Detail_shop[this],(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_used[this],id)), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (1)))))) , p) then // INLINED!!
                    if GetLocalPlayer() == GetTriggerPlayer() then
                        call s__Button_play(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Detail_button[this],id)), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (1))))))),Shop___SPRITE_MODEL , Shop___SPRITE_SCALE , 0) // INLINED!!
                    endif
                endif
            endif
            set p=null
   return true
endfunction
function sa__Shop___Buyer__set_visible takes nothing returns boolean
local integer this=f__arg_this
local boolean visibility=f__arg_boolean1
            local integer i= 0
            local integer id= GetPlayerId(GetLocalPlayer())
            set s__Shop___Buyer_isVisible[this]=visibility
            call s__Shop___Inventory__set_visible(s__Shop___Buyer_inventory[this],visibility)
            if s__Shop___Buyer_isVisible[this] then
                loop
                    exitwhen i == Shop___BUYER_COUNT
                        if (LoadUnitHandle(Table___ht, (((s__HashTable__getindex(s__Shop___Buyer_unit[this],id)))), (i))) == (LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id))) then // INLINED!!
                            call s__Shop___Inventory_move(s__Shop___Buyer_inventory[this],FRAMEPOINT_TOP , (s__Component_Components___Operators____frame[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))))]) , FRAMEPOINT_BOTTOM) // INLINED!!
                            exitwhen true
                        endif
                    set i=i + 1
                endloop
            endif
            call BlzFrameSetVisible((s__Component_Components___Operators____frame[(this)]), visibility) // INLINED!!
   return true
endfunction
function sa__Shop___Buyer__get_visible takes nothing returns boolean
local integer this=f__arg_this
set f__result_boolean= s__Shop___Buyer_isVisible[this]
   return true
endfunction
function sa__Shop___Buyer__getindex takes nothing returns boolean
local integer this=f__arg_this
local integer id=f__arg_integer1
set f__result_unit= (LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id))) // INLINED!!
   return true
endfunction
function sa__Shop___Buyer_onScroll takes nothing returns boolean
local integer this=f__arg_this
            call s__Shop___Buyer_shift(this,BlzGetTriggerFrameValue() < 0 , GetTriggerPlayer())
   return true
endfunction
function sa__Shop___Buyer_onScrolled takes nothing returns boolean

            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!
            if this != 0 then
                call s__Shop___Buyer_shift(this,BlzGetTriggerFrameValue() < 0 , GetTriggerPlayer())
            endif
   return true
endfunction
function sa__Shop___Buyer_onClicked takes nothing returns boolean

            local integer b= (s__Component_array[GetPlayerId(GetTriggerPlayer())]) // INLINED!!
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (0))) // INLINED!!
            local integer i= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,b)), (1))) // INLINED!!
            local integer id= GetPlayerId(GetTriggerPlayer())
            if this != 0 then
                if b == s__Shop___Buyer_left[this] then
                    call s__Shop___Buyer_shift(this,false , GetTriggerPlayer())
                elseif b == s__Shop___Buyer_right[this] then
                    call s__Shop___Buyer_shift(this,true , GetTriggerPlayer())
                else
                    call RemoveSavedInteger(Table___ht, (s__Shop___Buyer_current), (GetHandleId((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id)))))) // INLINED!!
                    call SaveUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id), ( (LoadUnitHandle(Table___ht, (((s__HashTable__getindex(s__Shop___Buyer_unit[this],id)))), (i))))) // INLINED!!
                    call SaveInteger(Table___ht, (s__Shop___Buyer_current), (GetHandleId((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id))))), ( this)) // INLINED!!
                    call IssueNeutralTargetOrder(GetTriggerPlayer(), s__Shop_unit[id], "smart", (LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id)))) // INLINED!!
                    call s__Shop___Inventory_show(s__Shop___Buyer_inventory[this],(LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[this]))), (id)))) // INLINED!!
                    call RemoveSavedInteger(Table___ht, (s__Shop___Inventory_selected[(s__Shop___Buyer_inventory[this])]), ((id))) // INLINED!!
                    if GetLocalPlayer() == GetTriggerPlayer() then
                        call s__Button__set_highlighted(((LoadInteger(Table___ht, (s__Shop___Buyer_last[this]), (id)))),false) // INLINED!!
                        call s__Button__set_highlighted(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))),true) // INLINED!!
                        call SaveInteger(Table___ht, (s__Shop___Buyer_last[this]), (id), ( (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i))))) // INLINED!!
                        call s__Shop___Inventory_move(s__Shop___Buyer_inventory[this],FRAMEPOINT_TOP , (s__Component_Components___Operators____frame[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Buyer_button[this],id)), (i)))))]) , FRAMEPOINT_BOTTOM) // INLINED!!
                        call s__Shop___Detail_refresh(s__Shop_details[s__Shop___Buyer_shop[this]],GetTriggerPlayer())
                    endif
                endif
            endif
   return true
endfunction
function sa__Shop___Favorites_has takes nothing returns boolean
local integer this=f__arg_this
local integer id=f__arg_integer1
local player p=f__arg_player1
            local integer i= 0
            local integer pid= GetPlayerId(p)
            loop
                exitwhen i > (LoadInteger(Table___ht, (((s__Shop___Favorites_count[this]))), (pid))) // INLINED!!
                    if s__Item_id[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],pid)), (i))))] == id then // INLINED!!
set f__result_boolean= true
return true
                    endif
                set i=i + 1
            endloop
set f__result_boolean= false
   return true
endfunction
function sa__Shop___Favorites_remove takes nothing returns boolean
local integer this=f__arg_this
local integer i=f__arg_integer1
local player p=f__arg_player1
            local integer j= 0
            local integer k= 0
            local integer id= GetPlayerId(p)
            if s__Shop___Favorites_has(this,s__Item_id[i] , p) then
                loop
                    exitwhen j > (LoadInteger(Table___ht, (((s__Shop___Favorites_count[this]))), (id))) // INLINED!!
                        if s__Item_id[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],id)), (j))))] == s__Item_id[i] then // INLINED!!
                            set k=j
                            if GetLocalPlayer() == p then
                                call s__Button_tag(((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,s__Shop___Favorites_shop[this])), (s__Item_id[i])))),null , 0 , 0 , 0) // INLINED!!
                            endif
                            loop
                                exitwhen k >= (LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id))) // INLINED!!
                                    call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],id)), (k), ( (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],id)), (k + 1))))) // INLINED!!
                                    if GetLocalPlayer() == p then
                                        call s__Backdrop__set_texture(s__Component_image[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],id)), (k)))))],((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],id)), (k)))))])))), (4))))) // INLINED!!
                                        call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],id)), (k))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],id)), (k)))))])))), (5))))) // INLINED!!
                                        call BlzFrameSetText(s__Tooltip_nameFrame[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],id)), (k))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],id)), (k)))))])))), (3))))) // INLINED!!
                                        call s__Tooltip__set_icon(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],id)), (k))))],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],id)), (k)))))])))), (4)))) // INLINED!!
                                    endif
                                set k=k + 1
                            endloop
                            if GetLocalPlayer() == p then
                                call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],id)), ((LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id))))))),false) // INLINED!!
                            endif
                            call SaveInteger(Table___ht, (s__Shop___Favorites_count[this]), (id), ( (LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id))) - 1)) // INLINED!!
                            exitwhen true
                        endif
                    set j=j + 1
                endloop
            endif
   return true
endfunction
function sa__Shop___Favorites_add takes nothing returns boolean
local integer this=f__arg_this
local integer i=f__arg_integer1
local player p=f__arg_player1
            local integer id= GetPlayerId(p)
            if (LoadInteger(Table___ht, (((s__Shop___Favorites_count[this]))), (id))) < Shop___CATEGORY_COUNT - 1 then // INLINED!!
                if not s__Shop___Favorites_has(this,s__Item_id[i] , p) then
                    call SaveInteger(Table___ht, (s__Shop___Favorites_count[this]), (id), ( (LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id))) + 1)) // INLINED!!
                    call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],id)), ((LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id)))), ( i)) // INLINED!!
                    if GetLocalPlayer() == p then
                        call s__Backdrop__set_texture(s__Component_image[(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],id)), ((LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id))))))))],((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (4))))) // INLINED!!
                        call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],id)), ((LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id)))))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (5))))) // INLINED!!
                        call BlzFrameSetText(s__Tooltip_nameFrame[(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],id)), ((LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id)))))))])], ((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (3))))) // INLINED!!
                        call s__Tooltip__set_icon(s__Button_tooltip[((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],id)), ((LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id)))))))],(LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])))), (4)))) // INLINED!!
                        call sc__Component__set_visible(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],id)), ((LoadInteger(Table___ht, (s__Shop___Favorites_count[this]), (id))))))),true) // INLINED!!
                        call s__Button_tag(((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,s__Shop___Favorites_shop[this])), (s__Item_id[i])))),Shop___TAG_MODEL , Shop___TAG_SCALE , Shop___TAG_XOFFSET , Shop___TAG_YOFFSET) // INLINED!!
                    endif
                endif
            endif
   return true
endfunction
function sa__Shop___Favorites_onClear takes nothing returns boolean

            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!
            if this != 0 then
                call s__Shop___Favorites_reset(this,GetTriggerPlayer())
            endif
   return true
endfunction
function sa__Shop___Favorites_onClicked takes nothing returns boolean

            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!
            if this != 0 then
                call sc__Shop_detail(s__Shop___Favorites_shop[this],(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],GetPlayerId(GetTriggerPlayer()))), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (1)))))) , GetTriggerPlayer()) // INLINED!!
            endif
   return true
endfunction
function sa__Shop___Favorites_onMiddleClicked takes nothing returns boolean

            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!
            if this != 0 then
                call s__Shop___Favorites_remove(this,(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],GetPlayerId(GetTriggerPlayer()))), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (1)))))) , GetTriggerPlayer()) // INLINED!!
            endif
   return true
endfunction
function sa__Shop___Favorites_onDoubleClicked takes nothing returns boolean

            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!
            if this != 0 then
                if sc__Shop_buy(s__Shop___Favorites_shop[this],(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],GetPlayerId(GetTriggerPlayer()))), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (1)))))) , GetTriggerPlayer()) then // INLINED!!
                    if GetLocalPlayer() == GetTriggerPlayer() then
                        call s__Button_play(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],GetPlayerId(GetTriggerPlayer()))), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (1))))))),Shop___SPRITE_MODEL , Shop___SPRITE_SCALE , 0) // INLINED!!
                    endif
                endif
            endif
   return true
endfunction
function sa__Shop___Favorites_onRightClicked takes nothing returns boolean

            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!
            if this != 0 then
                if sc__Shop_buy(s__Shop___Favorites_shop[this],(LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_item[this],GetPlayerId(GetTriggerPlayer()))), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (1)))))) , GetTriggerPlayer()) then // INLINED!!
                    if GetLocalPlayer() == GetTriggerPlayer() then
                        call s__Button_play(((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Favorites_button[this],GetPlayerId(GetTriggerPlayer()))), ((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (1))))))),Shop___SPRITE_MODEL , Shop___SPRITE_SCALE , 0) // INLINED!!
                    endif
                endif
            endif
   return true
endfunction
function sa__Shop___Category__disposeArrays takes nothing returns boolean
 local integer this=f__arg_this
 local integer kthis
    set si__Shop___Category_arrN=si__Shop___Category_arrN+1
    set kthis=si__Shop___Category_arr[this]
    set si__Shop___Category_arrV[si__Shop___Category_arrN]=kthis
 return true
endfunction
function sa__Shop___Category_onClicked takes nothing returns boolean

            local integer category= (s__Component_array[GetPlayerId(GetTriggerPlayer())]) // INLINED!!
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,category)), (0))) // INLINED!!
            if this != 0 and GetLocalPlayer() == GetTriggerPlayer() then
                call s__Component__set_active(category,not (s__Component_isActive[(category)])) // INLINED!!
                if (s__Component_isActive[(category)]) then // INLINED!!
                    set s__Shop___Category_active[this]=s__Shop___Category_active[this] + s___Shop___Category_value[s__Shop___Category_value[this]+(LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,category)), (1)))] // INLINED!!
                else
                    set s__Shop___Category_active[this]=s__Shop___Category_active[this] - s___Shop___Category_value[s__Shop___Category_value[this]+(LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,category)), (1)))] // INLINED!!
                endif
                call sc__Shop_filter(s__Shop___Category_shop[this],s__Shop___Category_active[this] , s__Shop___Category_andLogic[this])
            endif
   return true
endfunction
function sa__Shop___Category_onClear takes nothing returns boolean

            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!
            if this != 0 and GetLocalPlayer() == GetTriggerPlayer() then
                call s__Shop___Category_reset(this)
            endif
   return true
endfunction
function sa__Shop___Category_onLogic takes nothing returns boolean

            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!
            if this != 0 and GetLocalPlayer() == GetTriggerPlayer() then
                call s__Component__set_active(s__Shop___Category_logic[this],not (s__Component_isActive[(s__Shop___Category_logic[this])])) // INLINED!!
                set s__Shop___Category_andLogic[this]=not s__Shop___Category_andLogic[this]
                if s__Shop___Category_andLogic[this] then
                    call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[s__Shop___Category_logic[this]])], ("AND")) // INLINED!!
                else
                    call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[s__Shop___Category_logic[this]])], ("OR")) // INLINED!!
                endif
                call sc__Shop_filter(s__Shop___Category_shop[this],s__Shop___Category_active[this] , s__Shop___Category_andLogic[this])
            endif
   return true
endfunction
function sa__Shop__set_visible takes nothing returns boolean
local integer this=f__arg_this
local boolean visibility=f__arg_boolean1
            set s__Shop_isVisible[this]=visibility
            call s__Shop___Buyer__set_visible(s__Shop_buyer[this],visibility)
            if not visibility then
                set s__Shop___Buyer_index[s__Shop_buyer[this]]=0
            else
                if sc__Component__get_visible(s__Shop_details[this]) then
                    call s__Shop___Detail_refresh(s__Shop_details[this],GetLocalPlayer())
                endif
            endif
            call BlzFrameSetVisible((s__Component_Components___Operators____frame[(this)]), visibility) // INLINED!!
   return true
endfunction
function sa__Shop__get_visible takes nothing returns boolean
local integer this=f__arg_this
set f__result_boolean= s__Shop_isVisible[this]
   return true
endfunction
function sa__Shop_buy takes nothing returns boolean
local integer this=f__arg_this
local integer i=f__arg_integer1
local player p=f__arg_player1
            local integer id= GetPlayerId(p)
            local integer cost= s__Item_cost(i,(LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id))))) // INLINED!!
            local item new
            if s__Shop_canBuy(this,i , p) and cost <= GetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD) then
                set new=CreateItem(s__Item_id[i], GetUnitX((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id))))), GetUnitY((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))))) // INLINED!!
                call s__Shop___Inventory_removeComponents(s__Shop___Buyer_inventory[s__Shop_buyer[this]],i , s__Shop___Transaction_create(this , (LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))) , i , cost , "buy")) // INLINED!!
                if not UnitAddItem((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))), new) then // INLINED!!
                    call IssueTargetItemOrder((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))), "smart", new) // INLINED!!
                endif
                call s__Shop___Inventory_show(s__Shop___Buyer_inventory[s__Shop_buyer[this]],(LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id))))) // INLINED!!
                call s__Shop___Detail_refresh(s__Shop_details[this],p)
                call SetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD, GetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD) - cost)
                call s__Shop___Sound_success(p)
                set new=null
set f__result_boolean= true
return true
            else
                if cost > GetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD) then
                    call s__Shop___Sound_gold(p)
                else
                    call s__Shop___Sound_error(p)
                endif
set f__result_boolean= false
return true
            endif
set f__result_boolean= false
   return true
endfunction
function sa__Shop_sell takes nothing returns boolean
local integer this=f__arg_this
local integer i=f__arg_integer1
local player p=f__arg_player1
local integer slot=f__arg_integer2
            local integer cost
            local integer gold
            local integer charges
            local integer id= GetPlayerId(p)
            local boolean sold= false
            if i != 0 and (LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))) != null then // INLINED!!
                set charges=GetItemCharges(UnitItemInSlot((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))), slot)) // INLINED!!
                if charges == 0 then
                    set charges=1
                endif
                set gold=GetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD)
                set cost=R2I(R2I((LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (1))) / (LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(i)])), (2)))) * charges * s__Shop_tax[this]) // INLINED!!
                if GetItemTypeId(UnitItemInSlot((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))), slot)) == s__Item_id[i] then // INLINED!!
                    set sold=true
                    call s__Shop___Transaction_create(this , (LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))) , i , cost , "sell") // INLINED!!
                    call RemoveItem(UnitItemInSlot((LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id)))), slot)) // INLINED!!
                    call SetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD, gold + cost)
                    call s__Shop___Inventory_show(s__Shop___Buyer_inventory[s__Shop_buyer[this]],(LoadUnitHandle(Table___ht, (((s__Shop___Buyer_selected[(s__Shop_buyer[this])]))), ((id))))) // INLINED!!
                    call s__Shop___Detail_refresh(s__Shop_details[this],p)
                endif
                call s__Shop___Sound_success(p)
            else
                call s__Shop___Sound_error(p)
            endif
set f__result_boolean= sold
   return true
endfunction
function sa__Shop_filter takes nothing returns boolean
local integer this=f__arg_this
local integer categories=f__arg_integer1
local boolean andLogic=f__arg_boolean1
            local integer slot= (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop_itempool,this)), (0))) // INLINED!!
            local boolean process
            local integer i= - 1
            set s__Shop_size[this]=0
            set s__Shop_first[this]=0
            set s__Shop_last[this]=0
            set s__Shop_head[this]=0
            set s__Shop_tail[this]=0
            loop
                exitwhen slot == 0
                    if andLogic then
                        set process=categories == 0 or BlzBitAnd((LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(s__Shop___Slot_item[slot])])), (6))), categories) >= categories // INLINED!!
                    else
                        set process=categories == 0 or BlzBitAnd((LoadInteger(Table___ht, (s__HashTable__getindex(s__Item_itempool,s__Item_id[(s__Shop___Slot_item[slot])])), (6))), categories) > 0 // INLINED!!
                    endif
                    if s__EditBox__get_text(s__Shop_edit[this]) != "" and s__EditBox__get_text(s__Shop_edit[this]) != null then
                        set process=process and sc__Shop_find(this,StringCase((LoadStr(Table___ht, (((s__HashTable__getindex(s__Item_itempool,s__Item_id[(s__Shop___Slot_item[slot])])))), (3))), false) , StringCase(s__EditBox__get_text(s__Shop_edit[this]), false)) // INLINED!!
                    endif
                    if process then
                        set i=i + 1
                        set s__Shop_size[this]=s__Shop_size[this] + 1
                        call s__Shop___Slot_move(slot,R2I(i / s__Shop_columns[this]) , ModuloInteger(i, s__Shop_columns[this]))
                        call sc__Component__set_visible(slot,(s__Shop___Slot_current_row[(slot)]) >= 0 and (s__Shop___Slot_current_row[(slot)]) <= s__Shop_rows[this] - 1 and (s__Shop___Slot_current_column[(slot)]) >= 0 and (s__Shop___Slot_current_column[(slot)]) <= s__Shop_columns[this] - 1) // INLINED!!
                        if i > 0 then
                            set s__Shop___Slot_left[slot]=s__Shop_last[this]
                            set s__Shop___Slot_right[s__Shop_last[this]]=slot
                        else
                            set s__Shop_first[this]=slot
                            set s__Shop_head[this]=s__Shop_first[this]
                        endif
                        if sc__Component__get_visible(slot) then
                            set s__Shop_tail[this]=slot
                        endif
                        set s__Shop_last[this]=slot
                    else
                        call sc__Component__set_visible(slot,false)
                    endif
                set slot=s__Shop___Slot_next[slot]
            endloop
   return true
endfunction
function sa__Shop_detail takes nothing returns boolean
local integer this=f__arg_this
local integer i=f__arg_integer1
local player p=f__arg_player1
            if i != 0 then
                if GetLocalPlayer() == p then
                    set s__Shop_rows[this]=Shop___DETAILED_ROWS
                    set s__Shop_columns[this]=Shop___DETAILED_COLUMNS
                    if not s__Shop_detailed[this] then
                        set s__Shop_detailed[this]=true
                        call s__Shop_filter(this,s__Shop___Category_active[s__Shop_category[this]] , s__Shop___Category_andLogic[s__Shop_category[this]])
                    endif
                endif
                if not sc__Component__get_visible(s__Shop_details[this]) then
                    call s__Shop_scrollTo(this,i , p)
                endif
                call s__Shop_select(this,i , p)
                call s__Shop___Detail_show(s__Shop_details[this],i , p)
            else
                if GetLocalPlayer() == p then
                    set s__Shop_rows[this]=Shop___ROWS
                    set s__Shop_columns[this]=Shop___COLUMNS
                    set s__Shop_detailed[this]=false
                    call sc__Component__set_visible(s__Shop_details[this],false)
                    call s__Shop_filter(this,s__Shop___Category_active[s__Shop_category[this]] , s__Shop___Category_andLogic[s__Shop_category[this]])
                    call s__Shop_scrollTo(this,s__Shop___Slot_item[((LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,this)), (GetPlayerId(p)))))] , p) // INLINED!!
                endif
            endif
   return true
endfunction
function sa__Shop_has takes nothing returns boolean
local integer this=f__arg_this
local integer id=f__arg_integer1
set f__result_boolean= (HaveSavedInteger(Table___ht, (s__HashTable__getindex(Shop___table,this)), (id))) // INLINED!!
   return true
endfunction
function sa__Shop_find takes nothing returns boolean
local integer this=f__arg_this
local string source=f__arg_string1
local string target=f__arg_string2
            local integer sourceLength= StringLength(source)
            local integer targetLenght= StringLength(target)
            local integer i= 0
            if targetLenght <= sourceLength then
                loop
                    exitwhen i > sourceLength - targetLenght
                        if SubString(source, i, i + targetLenght) == target then
set f__result_boolean= true
return true
                        endif
                    set i=i + 1
                endloop
            endif
set f__result_boolean= false
   return true
endfunction
function sa__Shop_addCategory takes nothing returns boolean
local integer id=f__arg_integer1
local string icon=f__arg_string1
local string description=f__arg_string2
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,id)), (0))) // INLINED!!
            if this != 0 then
set f__result_integer= s__Shop___Category_add(s__Shop_category[this],icon , description)
return true
            endif
set f__result_integer= 0
   return true
endfunction
function sa__Shop_addItem takes nothing returns boolean
local integer id=f__arg_integer1
local integer itemId=f__arg_integer2
local integer categories=f__arg_integer3
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,id)), (0))) // INLINED!!
            local integer slot
            local integer i
            if this != 0 then
                if not (HaveSavedInteger(Table___ht, (s__HashTable__getindex(Shop___table,this)), (itemId))) then // INLINED!!
                    set i=s__Item_get(itemId)
                    if i != 0 then
                        set s__Shop_size[this]=s__Shop_size[this] + 1
                        set s__Shop_index[this]=s__Shop_index[this] + 1
                        call s__Item__set_categories(i,categories)
                        set slot=s__Shop___Slot_create(this , i , 0 , 0 , (s__Component_Components___Operators____frame[(this)])) // INLINED!!
                        call s__Shop___Slot__set_row(slot,R2I(s__Shop_index[this] / Shop___COLUMNS))
                        call s__Shop___Slot__set_column(slot,ModuloInteger(s__Shop_index[this], Shop___COLUMNS))
                        call sc__Component__set_visible(slot,(s__Shop___Slot_current_row[(slot)]) >= 0 and (s__Shop___Slot_current_row[(slot)]) <= Shop___ROWS - 1 and (s__Shop___Slot_current_column[(slot)]) >= 0 and (s__Shop___Slot_current_column[(slot)]) <= Shop___COLUMNS - 1) // INLINED!!
                        if s__Shop_index[this] > 0 then
                            set s__Shop___Slot_prev[slot]=s__Shop_last[this]
                            set s__Shop___Slot_left[slot]=s__Shop_last[this]
                            set s__Shop___Slot_next[s__Shop_last[this]]=slot
                            set s__Shop___Slot_right[s__Shop_last[this]]=slot
                        else
                            set s__Shop_first[this]=slot
                            set s__Shop_head[this]=slot
                        endif
                        if sc__Component__get_visible(slot) then
                            set s__Shop_tail[this]=slot
                        endif
                        set s__Shop_last[this]=slot
                        call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,this)), (itemId), ( slot)) // INLINED!!
                        call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop_itempool,this)), (s__Shop_index[this]), ( slot)) // INLINED!!
                    else
                        call BJDebugMsg("Invalid item code: " + A2S(itemId))
                    endif
                else
                    call BJDebugMsg("The item " + GetObjectName(itemId) + " is already registered for the shop " + GetObjectName(id))
                endif
            endif
   return true
endfunction
function sa__Shop_create takes nothing returns boolean
local integer id=f__arg_integer1
local real aoe=f__arg_real1
local real tax=f__arg_real2
            local integer this
            local integer i= 0
            if not (HaveSavedInteger(Table___ht, (s__HashTable__getindex(Shop___table,id)), (0))) then // INLINED!!
                set this=s__Shop__allocate(Shop___X , Shop___Y , Shop___WIDTH , Shop___HEIGHT , BlzGetFrameByName("ConsoleUIBackdrop", 0) , "EscMenuBackdrop")
                set s__Shop_id[this]=id
                set s__Shop_aoe[this]=aoe
                set s__Shop_tax[this]=tax
                set s__Shop_first[this]=0
                set s__Shop_last[this]=0
                set s__Shop_head[this]=0
                set s__Shop_tail[this]=0
                set s__Shop_size[this]=0
                set s__Shop_index[this]=- 1
                set s__Shop_rows[this]=Shop___ROWS
                set s__Shop_columns[this]=Shop___COLUMNS
                set s__Shop_count=s__Shop_count + 1
                set s__Shop_detailed[this]=false
                set s__Shop_scrolls[this]=(s__Table_create()) // INLINED!!
                set s__Shop_buyer[this]=s__Shop___Buyer_create(this)
                set s__Shop_details[this]=s__Shop___Detail_create(this)
                set s__Shop_category[this]=s__Shop___Category_create(this)
                set s__Shop_favorites[this]=s__Shop___Favorites_create(this)
                set s__Shop_edit[this]=s__EditBox_create(0.021 , 0.02 , Shop___EDIT_WIDTH , Shop___EDIT_HEIGHT , (s__Component_Components___Operators____frame[(this)]) , "EscMenuEditBoxTemplate") // INLINED!!
                call s__EditBox__set_onText(s__Shop_edit[this],function sc__Shop_onSearch)
                set s__Shop_close[this]=s__Button_create(( Shop___WIDTH - 2 * Shop___TOOLBAR_BUTTON_SIZE ) , 0.015000 , Shop___TOOLBAR_BUTTON_SIZE , Shop___TOOLBAR_BUTTON_SIZE , (s__Component_Components___Operators____frame[(this)]) , true) // INLINED!!
                call s__Backdrop__set_texture(s__Component_image[(s__Shop_close[this])],(Shop___CLOSE_ICON)) // INLINED!!
                call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[s__Shop_close[this]])], ("Close")) // INLINED!!
                call s__Component__set_onClick(s__Shop_close[this],function sc__Shop_onClose)
                set s__Shop_break[this]=s__Button_create(( Shop___WIDTH - 2 * Shop___TOOLBAR_BUTTON_SIZE - 0.0205 ) , 0.015000 , Shop___TOOLBAR_BUTTON_SIZE , Shop___TOOLBAR_BUTTON_SIZE , (s__Component_Components___Operators____frame[(this)]) , true) // INLINED!!
                call s__Backdrop__set_texture(s__Component_image[(s__Shop_break[this])],(Shop___DISMANTLE_ICON)) // INLINED!!
                call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[s__Shop_break[this]])], ("Dismantle")) // INLINED!!
                call s__Component__set_onClick(s__Shop_break[this],function sc__Shop_onDismantle)
                set s__Shop_revert[this]=s__Button_create(( Shop___WIDTH - 2 * Shop___TOOLBAR_BUTTON_SIZE - 0.0410 ) , 0.015000 , Shop___TOOLBAR_BUTTON_SIZE , Shop___TOOLBAR_BUTTON_SIZE , (s__Component_Components___Operators____frame[(this)]) , true) // INLINED!!
                call s__Backdrop__set_texture(s__Component_image[(s__Shop_revert[this])],(Shop___UNDO_ICON)) // INLINED!!
                call BlzFrameSetText(s__Tooltip_tooltip[(s__Button_tooltip[s__Shop_revert[this]])], ("Undo")) // INLINED!!
                call s__Component__set_onClick(s__Shop_revert[this],function sc__Shop_onUndo)
                call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,id)), (0), ( this)) // INLINED!!
                call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,s__Shop_edit[this])), (0), ( this)) // INLINED!!
                call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,s__Shop_close[this])), (0), ( this)) // INLINED!!
                call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,s__Shop_break[this])), (0), ( this)) // INLINED!!
                call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,s__Shop_revert[this])), (0), ( this)) // INLINED!!
                loop
                    exitwhen i >= bj_MAX_PLAYER_SLOTS
                        if GetPlayerController(Player(i)) == MAP_CONTROL_USER then
                            call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,GetHandleId(Player(i)))), (id), ( this)) // INLINED!!
                            call SaveInteger(Table___ht, (s__HashTable__getindex(Shop___table,GetHandleId(Player(i)))), (s__Shop_count), ( id)) // INLINED!!
                        endif
                    set i=i + 1
                endloop
                call s__Shop__set_visible(this,false)
            endif
set f__result_integer= this
   return true
endfunction
function sa__Shop_onScroll takes nothing returns boolean
local integer this=f__arg_this
            local integer id= GetPlayerId(GetTriggerPlayer())
            local integer direction= R2I(BlzGetTriggerFrameValue())
            if (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop_scrolls[this],id)), (0))) != direction then // INLINED!!
                call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop_scrolls[this],id)), (0), ( direction)) // INLINED!!
                call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop_scrolls[this],id)), (1), ( 0)) // INLINED!!
            else
                call SaveInteger(Table___ht, (s__HashTable__getindex(s__Shop_scrolls[this],id)), (1), ( (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop_scrolls[this],id)), (1))) + 1)) // INLINED!!
            endif
            if GetLocalPlayer() == GetTriggerPlayer() then
                if (LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop_scrolls[this],id)), (1))) == 1 then // INLINED!!
                    call s__Shop_scroll(this,direction < 0)
                else
                    call s__Shop_scroll(this,direction < 0)
                endif
            endif
   return true
endfunction
function sa__Shop_onSearch takes nothing returns boolean

            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(sc__EditBox_get()))), (0))) // INLINED!!
            if this != 0 and GetLocalPlayer() == GetTriggerPlayer() then
                call s__Shop_filter(this,s__Shop___Category_active[s__Shop_category[this]] , s__Shop___Category_andLogic[s__Shop_category[this]])
            endif
   return true
endfunction
function sa__Shop_onClose takes nothing returns boolean

            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!
            local integer id= GetPlayerId(GetTriggerPlayer())
            if this != 0 then
                set s__Shop_unit[id]=null
                if GetLocalPlayer() == GetTriggerPlayer() then
                    call s__Shop__set_visible(this,false)
                endif
                call s__Shop___Transaction_clear(this , id)
            endif
   return true
endfunction
function sa__Shop_onDismantle takes nothing returns boolean

            local integer id= GetPlayerId(GetTriggerPlayer())
            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!
            if this != 0 then
                if (HaveSavedInteger(Table___ht, (s__Shop___Inventory_selected[(s__Shop___Buyer_inventory[s__Shop_buyer[this]])]), ((id)))) then // INLINED!!
                    call s__Shop_dismantle(this,((LoadInteger(Table___ht, (s__HashTable__getindex(s__Shop___Inventory_item[s__Shop___Buyer_inventory[s__Shop_buyer[this]]],id)), ((LoadInteger(Table___ht, (s__Shop___Inventory_selected[(s__Shop___Buyer_inventory[s__Shop_buyer[this]])]), ((id)))))))) , GetTriggerPlayer() , (LoadInteger(Table___ht, (s__Shop___Inventory_selected[(s__Shop___Buyer_inventory[s__Shop_buyer[this]])]), ((id))))) // INLINED!!
                else
                    call s__Shop___Sound_error(GetTriggerPlayer())
                endif
            endif
   return true
endfunction
function sa__Shop_onUndo takes nothing returns boolean

            local integer this= (LoadInteger(Table___ht, (s__HashTable__getindex(Shop___table,(s__Component_array[GetPlayerId(GetTriggerPlayer())]))), (0))) // INLINED!!
            if this != 0 then
                call s__Shop_undo(this,GetTriggerPlayer())
            endif
   return true
endfunction
function sa__SulfurasSmash___Hammer_onFinish takes nothing returns boolean
local integer this=f__arg_this
            local group g= CreateGroup()
            local unit u
            call GroupEnumUnitsInRange(g, s__Missiles_x[this], s__Missiles_y[this], SulfurasSmash___GetNormalAoE(s__Missiles_source[this] , s__SulfurasSmash___Hammer_level[this]), null)
            loop
                set u=FirstOfGroup(g)
                exitwhen u == null
                    if SulfurasSmash___DamageFilter(s__Missiles_source[this] , u) then
                        if DistanceBetweenCoordinates(s__Missiles_x[this] , s__Missiles_y[this] , GetUnitX(u) , GetUnitY(u)) <= s__SulfurasSmash___Hammer_aoe[this] then
                            if UnitDamageTarget(s__Missiles_source[this], u, 2 * s__Missiles_damage[this], false, false, SulfurasSmash___ATTACK_TYPE, SulfurasSmash___DAMAGE_TYPE, null) then
                                call sc__CrowdControl_stun((u ) , (( s__SulfurasSmash___Hammer_stun[this] )*1.0) , ( SulfurasSmash___STUN_MODEL ) , ( SulfurasSmash___STUN_POINT ) , ( false)) // INLINED!!
                            endif
                        else
                            call UnitDamageTarget(s__Missiles_source[this], u, s__Missiles_damage[this], false, false, SulfurasSmash___ATTACK_TYPE, SulfurasSmash___DAMAGE_TYPE, null)
                        endif
                    endif
                call GroupRemoveUnit(g, u)
            endloop
            call DestroyGroup(g)
call s__effectTimed_create((AddSpecialEffectEx(SulfurasSmash___IMPACT_MODEL , s__Missiles_x[this] , s__Missiles_y[this] , 0 , SulfurasSmash___IMPACT_SCALE) ) , (( SulfurasSmash___IMPACT_DURATION)*1.0)) // INLINED!!
                call Afterburn(s__Missiles_x[this] , s__Missiles_y[this] , s__Missiles_source[this])
            set g=null
set f__result_boolean= true
   return true
endfunction
function sa__SulfurasSmash___SulfurasSmash_onTooltip takes nothing returns boolean
    set f__result_string=s__SulfurasSmash___SulfurasSmash_onTooltip(f__arg_this,f__arg_unit1,f__arg_integer1)
   return true
endfunction
function sa__SulfurasSmash___SulfurasSmash_onCast takes nothing returns boolean
local integer this=f__arg_this
            local real angle= AngleBetweenCoordinates((GetSpellTargetX()) , (GetSpellTargetY()) , GetUnitX(s__PluginSpellEffect___Unit_unit[s__Spell_source]) , GetUnitY(s__PluginSpellEffect___Unit_unit[s__Spell_source])) // INLINED!!
            local integer sulfuras= s__SulfurasSmash___Hammer__allocate((GetSpellTargetX()) + SulfurasSmash___LAUNCH_OFFSET * Cos(angle) , (GetSpellTargetY()) + SulfurasSmash___LAUNCH_OFFSET * Sin(angle) , SulfurasSmash___START_HEIGHT , (GetSpellTargetX()) , (GetSpellTargetY()) , 0) // INLINED!!
            call s__Missiles__set_model(sulfuras,SulfurasSmash___SULFURAS_MODEL)
            call s__Missiles__set_scale(sulfuras,SulfurasSmash___SULFURAS_SCALE)
            call s__Missiles__set_duration(sulfuras,SulfurasSmash___LANDING_TIME)
            set s__Missiles_source[sulfuras]=s__PluginSpellEffect___Unit_unit[s__Spell_source]
            set s__SulfurasSmash___Hammer_level[sulfuras]=(GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))) // INLINED!!
            set s__Missiles_owner[sulfuras]=(GetOwningPlayer(s__PluginSpellEffect___Unit_unit[(s__Spell_source)])) // INLINED!!
            set s__Missiles_damage[sulfuras]=SulfurasSmash___GetDamage(s__PluginSpellEffect___Unit_unit[s__Spell_source] , (GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId())))) // INLINED!!
            set s__SulfurasSmash___Hammer_stun[sulfuras]=(1 + 0.25 * R2I(s__Sulfuras_stacks[GetUnitUserData((s__PluginSpellEffect___Unit_unit[s__Spell_source]))] * 0.05)) // INLINED!!
            set s__SulfurasSmash___Hammer_aoe[sulfuras]=(200. + 0 * ((GetUnitAbilityLevel(s__PluginSpellEffect___Unit_unit[s__Spell_source], (GetSpellAbilityId()))))) // INLINED!!
            call s__Missiles_launch(sulfuras)
   return true
endfunction
function sa__MissChance___Miss_get takes nothing returns boolean
    set f__result_real=s__MissChance___Miss_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__MissChance___Miss_Set takes nothing returns boolean
    set f__result_real=s__MissChance___Miss_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__MissChance___Miss_add takes nothing returns boolean
    set f__result_real=s__MissChance___Miss_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__Armor___Armor_get takes nothing returns boolean
    set f__result_real=s__Armor___Armor_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__Armor___Armor_Set takes nothing returns boolean
    set f__result_real=s__Armor___Armor_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__Armor___Armor_add takes nothing returns boolean
    set f__result_real=s__Armor___Armor_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__Block___Block_get takes nothing returns boolean
    set f__result_real=s__Block___Block_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__Block___Block_Set takes nothing returns boolean
    set f__result_real=s__Block___Block_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__Block___Block_add takes nothing returns boolean
    set f__result_real=s__Block___Block_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__Mana___Mana_get takes nothing returns boolean
    set f__result_real=s__Mana___Mana_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__Mana___Mana_Set takes nothing returns boolean
    set f__result_real=s__Mana___Mana_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__Mana___Mana_add takes nothing returns boolean
    set f__result_real=s__Mana___Mana_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__Agility___Agility_get takes nothing returns boolean
    set f__result_real=s__Agility___Agility_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__Agility___Agility_Set takes nothing returns boolean
    set f__result_real=s__Agility___Agility_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__Agility___Agility_add takes nothing returns boolean
    set f__result_real=s__Agility___Agility_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__Health___Health_get takes nothing returns boolean
    set f__result_real=s__Health___Health_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__Health___Health_Set takes nothing returns boolean
    set f__result_real=s__Health___Health_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__Health___Health_add takes nothing returns boolean
    set f__result_real=s__Health___Health_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__EvasionChance___Evasion_get takes nothing returns boolean
    set f__result_real=s__EvasionChance___Evasion_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__EvasionChance___Evasion_Set takes nothing returns boolean
    set f__result_real=s__EvasionChance___Evasion_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__EvasionChance___Evasion_add takes nothing returns boolean
    set f__result_real=s__EvasionChance___Evasion_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__DamageBonus___Damage_get takes nothing returns boolean
    set f__result_real=s__DamageBonus___Damage_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__DamageBonus___Damage_Set takes nothing returns boolean
    set f__result_real=s__DamageBonus___Damage_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__DamageBonus___Damage_add takes nothing returns boolean
    set f__result_real=s__DamageBonus___Damage_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__Strength___Strength_get takes nothing returns boolean
    set f__result_real=s__Strength___Strength_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__Strength___Strength_Set takes nothing returns boolean
    set f__result_real=s__Strength___Strength_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__Strength___Strength_add takes nothing returns boolean
    set f__result_real=s__Strength___Strength_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__TenacityBonus___Tenacity_get takes nothing returns boolean
    set f__result_real=s__TenacityBonus___Tenacity_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__TenacityBonus___Tenacity_Set takes nothing returns boolean
    set f__result_real=s__TenacityBonus___Tenacity_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__TenacityBonus___Tenacity_add takes nothing returns boolean
    set f__result_real=s__TenacityBonus___Tenacity_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__LifeSteal___LifeSteal_get takes nothing returns boolean
    set f__result_real=s__LifeSteal___LifeSteal_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__LifeSteal___LifeSteal_Set takes nothing returns boolean
    set f__result_real=s__LifeSteal___LifeSteal_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__LifeSteal___LifeSteal_add takes nothing returns boolean
    set f__result_real=s__LifeSteal___LifeSteal_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__SpellVamp___SpellVamp_get takes nothing returns boolean
    set f__result_real=s__SpellVamp___SpellVamp_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__SpellVamp___SpellVamp_Set takes nothing returns boolean
    set f__result_real=s__SpellVamp___SpellVamp_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__SpellVamp___SpellVamp_add takes nothing returns boolean
    set f__result_real=s__SpellVamp___SpellVamp_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__SpellPower___SpellPower_get takes nothing returns boolean
    set f__result_real=s__SpellPower___SpellPower_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__SpellPower___SpellPower_Set takes nothing returns boolean
    set f__result_real=s__SpellPower___SpellPower_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__SpellPower___SpellPower_add takes nothing returns boolean
    set f__result_real=s__SpellPower___SpellPower_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__Intelligence___Intelligence_get takes nothing returns boolean
    set f__result_real=s__Intelligence___Intelligence_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__Intelligence___Intelligence_Set takes nothing returns boolean
    set f__result_real=s__Intelligence___Intelligence_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__Intelligence___Intelligence_add takes nothing returns boolean
    set f__result_real=s__Intelligence___Intelligence_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__SightRange___SightRange_get takes nothing returns boolean
    set f__result_real=s__SightRange___SightRange_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__SightRange___SightRange_Set takes nothing returns boolean
    set f__result_real=s__SightRange___SightRange_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__SightRange___SightRange_add takes nothing returns boolean
    set f__result_real=s__SightRange___SightRange_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__TenacityFlat___TenacityFlat_get takes nothing returns boolean
    set f__result_real=s__TenacityFlat___TenacityFlat_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__TenacityFlat___TenacityFlat_Set takes nothing returns boolean
    set f__result_real=s__TenacityFlat___TenacityFlat_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__TenacityFlat___TenacityFlat_add takes nothing returns boolean
    set f__result_real=s__TenacityFlat___TenacityFlat_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__AttackSpeed___AttackSpeed_get takes nothing returns boolean
    set f__result_real=s__AttackSpeed___AttackSpeed_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__AttackSpeed___AttackSpeed_Set takes nothing returns boolean
    set f__result_real=s__AttackSpeed___AttackSpeed_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__AttackSpeed___AttackSpeed_add takes nothing returns boolean
    set f__result_real=s__AttackSpeed___AttackSpeed_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__CriticalChance___CriticalChance_get takes nothing returns boolean
    set f__result_real=s__CriticalChance___CriticalChance_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__CriticalChance___CriticalChance_Set takes nothing returns boolean
    set f__result_real=s__CriticalChance___CriticalChance_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__CriticalChance___CriticalChance_add takes nothing returns boolean
    set f__result_real=s__CriticalChance___CriticalChance_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__CriticalDamage___CriticalDamage_get takes nothing returns boolean
    set f__result_real=s__CriticalDamage___CriticalDamage_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__CriticalDamage___CriticalDamage_Set takes nothing returns boolean
    set f__result_real=s__CriticalDamage___CriticalDamage_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__CriticalDamage___CriticalDamage_add takes nothing returns boolean
    set f__result_real=s__CriticalDamage___CriticalDamage_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__TenacityOffset___TenacityOffset_get takes nothing returns boolean
    set f__result_real=s__TenacityOffset___TenacityOffset_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__TenacityOffset___TenacityOffset_Set takes nothing returns boolean
    set f__result_real=s__TenacityOffset___TenacityOffset_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__TenacityOffset___TenacityOffset_add takes nothing returns boolean
    set f__result_real=s__TenacityOffset___TenacityOffset_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__CooldownOffset___CooldownOffset_get takes nothing returns boolean
    set f__result_real=s__CooldownOffset___CooldownOffset_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__CooldownOffset___CooldownOffset_Set takes nothing returns boolean
    set f__result_real=s__CooldownOffset___CooldownOffset_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__CooldownOffset___CooldownOffset_add takes nothing returns boolean
    set f__result_real=s__CooldownOffset___CooldownOffset_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__ArmorPenetration___ArmorPenetration_get takes nothing returns boolean
    set f__result_real=s__ArmorPenetration___ArmorPenetration_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__ArmorPenetration___ArmorPenetration_Set takes nothing returns boolean
    set f__result_real=s__ArmorPenetration___ArmorPenetration_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__ArmorPenetration___ArmorPenetration_add takes nothing returns boolean
    set f__result_real=s__ArmorPenetration___ArmorPenetration_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__MovementSpeed___MovementSpeed_get takes nothing returns boolean
    set f__result_real=s__MovementSpeed___MovementSpeed_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__MovementSpeed___MovementSpeed_Set takes nothing returns boolean
    set f__result_real=s__MovementSpeed___MovementSpeed_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__MovementSpeed___MovementSpeed_add takes nothing returns boolean
    set f__result_real=s__MovementSpeed___MovementSpeed_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__MagicResistence___MagicResistence_get takes nothing returns boolean
    set f__result_real=s__MagicResistence___MagicResistence_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__MagicResistence___MagicResistence_Set takes nothing returns boolean
    set f__result_real=s__MagicResistence___MagicResistence_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__MagicResistence___MagicResistence_add takes nothing returns boolean
    set f__result_real=s__MagicResistence___MagicResistence_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__MagicPenetration___MagicPenetration_get takes nothing returns boolean
    set f__result_real=s__MagicPenetration___MagicPenetration_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__MagicPenetration___MagicPenetration_Set takes nothing returns boolean
    set f__result_real=s__MagicPenetration___MagicPenetration_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__MagicPenetration___MagicPenetration_add takes nothing returns boolean
    set f__result_real=s__MagicPenetration___MagicPenetration_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__ManaRegeneration___ManaRegeneration_get takes nothing returns boolean
    set f__result_real=s__ManaRegeneration___ManaRegeneration_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__ManaRegeneration___ManaRegeneration_Set takes nothing returns boolean
    set f__result_real=s__ManaRegeneration___ManaRegeneration_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__ManaRegeneration___ManaRegeneration_add takes nothing returns boolean
    set f__result_real=s__ManaRegeneration___ManaRegeneration_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__HealthRegeneration___HealthRegeneration_get takes nothing returns boolean
    set f__result_real=s__HealthRegeneration___HealthRegeneration_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__HealthRegeneration___HealthRegeneration_Set takes nothing returns boolean
    set f__result_real=s__HealthRegeneration___HealthRegeneration_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__HealthRegeneration___HealthRegeneration_add takes nothing returns boolean
    set f__result_real=s__HealthRegeneration___HealthRegeneration_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__CooldownReductionBonus___CooldownReduction_get takes nothing returns boolean
    set f__result_real=s__CooldownReductionBonus___CooldownReduction_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__CooldownReductionBonus___CooldownReduction_Set takes nothing returns boolean
    set f__result_real=s__CooldownReductionBonus___CooldownReduction_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__CooldownReductionBonus___CooldownReduction_add takes nothing returns boolean
    set f__result_real=s__CooldownReductionBonus___CooldownReduction_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__ArmorPenetrationFlat___ArmorPenetrationFlat_get takes nothing returns boolean
    set f__result_real=s__ArmorPenetrationFlat___ArmorPenetrationFlat_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__ArmorPenetrationFlat___ArmorPenetrationFlat_Set takes nothing returns boolean
    set f__result_real=s__ArmorPenetrationFlat___ArmorPenetrationFlat_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__ArmorPenetrationFlat___ArmorPenetrationFlat_add takes nothing returns boolean
    set f__result_real=s__ArmorPenetrationFlat___ArmorPenetrationFlat_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__MagicPenetrationFlat___MagicPenetrationFlat_get takes nothing returns boolean
    set f__result_real=s__MagicPenetrationFlat___MagicPenetrationFlat_get(f__arg_this,f__arg_unit1)
   return true
endfunction
function sa__MagicPenetrationFlat___MagicPenetrationFlat_Set takes nothing returns boolean
    set f__result_real=s__MagicPenetrationFlat___MagicPenetrationFlat_Set(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa__MagicPenetrationFlat___MagicPenetrationFlat_add takes nothing returns boolean
    set f__result_real=s__MagicPenetrationFlat___MagicPenetrationFlat_add(f__arg_this,f__arg_unit1,f__arg_real1)
   return true
endfunction
function sa___prototype3_TimerUtils___init takes nothing returns boolean

     local integer i=0
     local integer o=- 1
     local boolean oops= false
        if ( TimerUtils___didinit ) then
    return true
        else
            set TimerUtils___didinit=true
        endif
            set TimerUtils___ht=InitHashtable()
            loop
                exitwhen ( i == TimerUtils___QUANTITY )
                set s__TimerUtils___tT[i]= CreateTimer()
                call SaveInteger(TimerUtils___ht, 0, GetHandleId((s__TimerUtils___tT[i] )), ( TimerUtils___HELD)) // INLINED!!
                set i=i + 1
            endloop
            set TimerUtils___tN=TimerUtils___QUANTITY
    return true
endfunction

function jasshelper__initstructs91083484 takes nothing returns nothing
    set st__Shop___Inventory_onClick=CreateTrigger()
    call TriggerAddCondition(st__Shop___Inventory_onClick,Condition( function sa__Shop___Inventory_onClick))
    set st__Shop___Inventory_onDoubleClick=CreateTrigger()
    call TriggerAddCondition(st__Shop___Inventory_onDoubleClick,Condition( function sa__Shop___Inventory_onDoubleClick))
    set st__Shop___Inventory_onRightClick=CreateTrigger()
    call TriggerAddCondition(st__Shop___Inventory_onRightClick,Condition( function sa__Shop___Inventory_onRightClick))
    set st__Shop___Transaction_count=CreateTrigger()
    call TriggerAddCondition(st__Shop___Transaction_count,Condition( function sa__Shop___Transaction_count))
    set st__MissileGroup_destroy=CreateTrigger()
    call TriggerAddCondition(st__MissileGroup_destroy,Condition( function sa__MissileGroup_destroy))
    set st__MissileGroup_missileAt=CreateTrigger()
    call TriggerAddCondition(st__MissileGroup_missileAt,Condition( function sa__MissileGroup_missileAt))
    set st__MissileGroup_remove=CreateTrigger()
    call TriggerAddCondition(st__MissileGroup_remove,Condition( function sa__MissileGroup_remove))
    set st__MissileGroup_insert=CreateTrigger()
    call TriggerAddCondition(st__MissileGroup_insert,Condition( function sa__MissileGroup_insert))
    set st__MissileGroup_clear=CreateTrigger()
    call TriggerAddCondition(st__MissileGroup_clear,Condition( function sa__MissileGroup_clear))
    set st__MissileGroup_contains=CreateTrigger()
    call TriggerAddCondition(st__MissileGroup_contains,Condition( function sa__MissileGroup_contains))
    set st__MissileGroup_addGroup=CreateTrigger()
    call TriggerAddCondition(st__MissileGroup_addGroup,Condition( function sa__MissileGroup_addGroup))
    set st__MissileGroup_removeGroup=CreateTrigger()
    call TriggerAddCondition(st__MissileGroup_removeGroup,Condition( function sa__MissileGroup_removeGroup))
    set st__MissileGroup_create=CreateTrigger()
    call TriggerAddCondition(st__MissileGroup_create,Condition( function sa__MissileGroup_create))
    set st__Item___IItem_onTooltip[117]=null
    set st__Item___IItem_onPickup[117]=null
    set st__Item___IItem_onDrop[117]=null
    set st__CrowdControl_silence=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_silence,Condition( function sa__CrowdControl_silence))
    set st__CrowdControl_silenced=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_silenced,Condition( function sa__CrowdControl_silenced))
    set st__CrowdControl_stun=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_stun,Condition( function sa__CrowdControl_stun))
    set st__CrowdControl_stunned=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_stunned,Condition( function sa__CrowdControl_stunned))
    set st__CrowdControl_slow=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_slow,Condition( function sa__CrowdControl_slow))
    set st__CrowdControl_slowed=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_slowed,Condition( function sa__CrowdControl_slowed))
    set st__CrowdControl_slowAttack=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_slowAttack,Condition( function sa__CrowdControl_slowAttack))
    set st__CrowdControl_attackSlowed=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_attackSlowed,Condition( function sa__CrowdControl_attackSlowed))
    set st__CrowdControl_banish=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_banish,Condition( function sa__CrowdControl_banish))
    set st__CrowdControl_banished=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_banished,Condition( function sa__CrowdControl_banished))
    set st__CrowdControl_ensnare=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_ensnare,Condition( function sa__CrowdControl_ensnare))
    set st__CrowdControl_ensnared=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_ensnared,Condition( function sa__CrowdControl_ensnared))
    set st__CrowdControl_purge=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_purge,Condition( function sa__CrowdControl_purge))
    set st__CrowdControl_purged=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_purged,Condition( function sa__CrowdControl_purged))
    set st__CrowdControl_hex=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_hex,Condition( function sa__CrowdControl_hex))
    set st__CrowdControl_hexed=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_hexed,Condition( function sa__CrowdControl_hexed))
    set st__CrowdControl_sleep=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_sleep,Condition( function sa__CrowdControl_sleep))
    set st__CrowdControl_sleeping=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_sleeping,Condition( function sa__CrowdControl_sleeping))
    set st__CrowdControl_cyclone=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_cyclone,Condition( function sa__CrowdControl_cyclone))
    set st__CrowdControl_cycloned=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_cycloned,Condition( function sa__CrowdControl_cycloned))
    set st__CrowdControl_entangle=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_entangle,Condition( function sa__CrowdControl_entangle))
    set st__CrowdControl_entangled=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_entangled,Condition( function sa__CrowdControl_entangled))
    set st__CrowdControl_knockback=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_knockback,Condition( function sa__CrowdControl_knockback))
    set st__CrowdControl_knockedback=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_knockedback,Condition( function sa__CrowdControl_knockedback))
    set st__CrowdControl_knockup=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_knockup,Condition( function sa__CrowdControl_knockup))
    set st__CrowdControl_knockedup=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_knockedup,Condition( function sa__CrowdControl_knockedup))
    set st__CrowdControl_fear=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_fear,Condition( function sa__CrowdControl_fear))
    set st__CrowdControl_feared=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_feared,Condition( function sa__CrowdControl_feared))
    set st__CrowdControl_disarm=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_disarm,Condition( function sa__CrowdControl_disarm))
    set st__CrowdControl_disarmed=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_disarmed,Condition( function sa__CrowdControl_disarmed))
    set st__CrowdControl_taunt=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_taunt,Condition( function sa__CrowdControl_taunt))
    set st__CrowdControl_taunted=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_taunted,Condition( function sa__CrowdControl_taunted))
    set st__CrowdControl_dispel=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_dispel,Condition( function sa__CrowdControl_dispel))
    set st__CrowdControl_dispelAll=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_dispelAll,Condition( function sa__CrowdControl_dispelAll))
    set st__CrowdControl_remaining=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_remaining,Condition( function sa__CrowdControl_remaining))
    set st__CrowdControl_register=CreateTrigger()
    call TriggerAddCondition(st__CrowdControl_register,Condition( function sa__CrowdControl_register))
    set st__TimedPause_create=CreateTrigger()
    call TriggerAddCondition(st__TimedPause_create,Condition( function sa__TimedPause_create))
    set st__TimedDestructable_create=CreateTrigger()
    call TriggerAddCondition(st__TimedDestructable_create,Condition( function sa__TimedDestructable_create))
    set st__AbilityCooldown_start=CreateTrigger()
    call TriggerAddCondition(st__AbilityCooldown_start,Condition( function sa__AbilityCooldown_start))
    set st__EffectLink_BuffLink=CreateTrigger()
    call TriggerAddCondition(st__EffectLink_BuffLink,Condition( function sa__EffectLink_BuffLink))
    set st__EffectLink_ItemLink=CreateTrigger()
    call TriggerAddCondition(st__EffectLink_ItemLink,Condition( function sa__EffectLink_ItemLink))
    set st__DummyPool_recycle=CreateTrigger()
    call TriggerAddCondition(st__DummyPool_recycle,Condition( function sa__DummyPool_recycle))
    set st__DummyPool_retrieve=CreateTrigger()
    call TriggerAddCondition(st__DummyPool_retrieve,Condition( function sa__DummyPool_retrieve))
    set st__DummyPool_recycleTimed=CreateTrigger()
    call TriggerAddCondition(st__DummyPool_recycleTimed,Condition( function sa__DummyPool_recycleTimed))
    set st__ChainLightning_create=CreateTrigger()
    call TriggerAddCondition(st__ChainLightning_create,Condition( function sa__ChainLightning_create))
    set st__EffectSpam_spam=CreateTrigger()
    call TriggerAddCondition(st__EffectSpam_spam,Condition( function sa__EffectSpam_spam))
    set st__TimedAbility_add=CreateTrigger()
    call TriggerAddCondition(st__TimedAbility_add,Condition( function sa__TimedAbility_add))
    set st__ResetCooldown_reset=CreateTrigger()
    call TriggerAddCondition(st__ResetCooldown_reset,Condition( function sa__ResetCooldown_reset))
    set st__NewBonus___IBonus_get[99]=null
    set st__NewBonus___IBonus_Set[99]=null
    set st__NewBonus___IBonus_add[99]=null
    set st__Missiles___MissileEvents_onHit[97]=null
    set st__Missiles___MissileEvents_onHit[124]=null
    set st__Missiles___MissileEvents_onHit[138]=null
    set st__Missiles___MissileEvents_onMissile[97]=null
    set st__Missiles___MissileEvents_onMissile[124]=null
    set st__Missiles___MissileEvents_onMissile[138]=null
    set st__Missiles___MissileEvents_onDestructable[97]=null
    set st__Missiles___MissileEvents_onDestructable[124]=null
    set st__Missiles___MissileEvents_onDestructable[138]=null
    set st__Missiles___MissileEvents_onItem[97]=null
    set st__Missiles___MissileEvents_onItem[124]=null
    set st__Missiles___MissileEvents_onItem[138]=null
    set st__Missiles___MissileEvents_onCliff[97]=null
    set st__Missiles___MissileEvents_onCliff[124]=null
    set st__Missiles___MissileEvents_onCliff[138]=null
    set st__Missiles___MissileEvents_onTerrain[97]=null
    set st__Missiles___MissileEvents_onTerrain[124]=null
    set st__Missiles___MissileEvents_onTerrain[138]=null
    set st__Missiles___MissileEvents_onTileset[97]=null
    set st__Missiles___MissileEvents_onTileset[124]=null
    set st__Missiles___MissileEvents_onTileset[138]=null
    set st__Missiles___MissileEvents_onPeriod[97]=null
    set st__Missiles___MissileEvents_onPeriod[138]=null
    set st__Missiles___MissileEvents_onFinish[97]=null
    set st__Missiles___MissileEvents_onBoundaries[97]=null
    set st__Missiles___MissileEvents_onBoundaries[124]=null
    set st__Missiles___MissileEvents_onBoundaries[138]=null
    set st__Missiles___MissileEvents_onPause[97]=null
    set st__Missiles___MissileEvents_onPause[124]=null
    set st__Missiles___MissileEvents_onPause[138]=null
    set st__Missiles___MissileEvents_onResume[97]=null
    set st__Missiles___MissileEvents_onResume[124]=null
    set st__Missiles___MissileEvents_onResume[138]=null
    set st__Missiles___MissileEvents_onRemove[97]=null
    set st__Missiles___MissileEvents_onRemove[124]=null
    set st__Missiles___MissileEvents_onRemove[138]=null
    set st__ArcingTextTag_StartTimer=CreateTrigger()
    call TriggerAddCondition(st__ArcingTextTag_StartTimer,Condition( function sa__ArcingTextTag_StartTimer))
    set st__Ability___IAbility_onCast[91]=null
    set st__Ability___IAbility_onCast[110]=null
    set st__Ability___IAbility_onLearn[91]=null
    set st__Ability___IAbility_onLearn[110]=null
    set st__Ability___IAbility_onLearn[120]=null
    set st__Ability___IAbility_onLearn[123]=null
    set st__Ability___IAbility_onLearn[125]=null
    set st__Ability___IAbility_onLearn[139]=null
    set st__Ability___IAbility_onTooltip[91]=null
    set st__Ability___IAbility_onTooltip[123]=null
    set st__Tenacity_get=CreateTrigger()
    call TriggerAddCondition(st__Tenacity_get,Condition( function sa__Tenacity_get))
    set st__Tenacity_Set=CreateTrigger()
    call TriggerAddCondition(st__Tenacity_Set,Condition( function sa__Tenacity_Set))
    set st__Tenacity_add=CreateTrigger()
    call TriggerAddCondition(st__Tenacity_add,Condition( function sa__Tenacity_add))
    set st__Tenacity_remove=CreateTrigger()
    call TriggerAddCondition(st__Tenacity_remove,Condition( function sa__Tenacity_remove))
    set st__Tenacity_calculate=CreateTrigger()
    call TriggerAddCondition(st__Tenacity_calculate,Condition( function sa__Tenacity_calculate))
    set st__Tenacity_register=CreateTrigger()
    call TriggerAddCondition(st__Tenacity_register,Condition( function sa__Tenacity_register))
    set st__Tenacity_print=CreateTrigger()
    call TriggerAddCondition(st__Tenacity_print,Condition( function sa__Tenacity_print))
    set st__Tenacity_onDestroy[83]=null
    set st__Tenacity_onDestroy[100]=null
    set st__Tenacity___List_update=CreateTrigger()
    call TriggerAddCondition(st__Tenacity___List_update,Condition( function sa__Tenacity___List_update))
    set st__MagicResistance_get=CreateTrigger()
    call TriggerAddCondition(st__MagicResistance_get,Condition( function sa__MagicResistance_get))
    set st__MagicResistance_Set=CreateTrigger()
    call TriggerAddCondition(st__MagicResistance_Set,Condition( function sa__MagicResistance_Set))
    set st__MagicPenetration_get=CreateTrigger()
    call TriggerAddCondition(st__MagicPenetration_get,Condition( function sa__MagicPenetration_get))
    set st__MagicPenetration_Set=CreateTrigger()
    call TriggerAddCondition(st__MagicPenetration_Set,Condition( function sa__MagicPenetration_Set))
    set st__ArmorPenetration_get=CreateTrigger()
    call TriggerAddCondition(st__ArmorPenetration_get,Condition( function sa__ArmorPenetration_get))
    set st__ArmorPenetration_Set=CreateTrigger()
    call TriggerAddCondition(st__ArmorPenetration_Set,Condition( function sa__ArmorPenetration_Set))
    set st__Critical_getChance=CreateTrigger()
    call TriggerAddCondition(st__Critical_getChance,Condition( function sa__Critical_getChance))
    set st__Critical_getMultiplier=CreateTrigger()
    call TriggerAddCondition(st__Critical_getMultiplier,Condition( function sa__Critical_getMultiplier))
    set st__Critical_setChance=CreateTrigger()
    call TriggerAddCondition(st__Critical_setChance,Condition( function sa__Critical_setChance))
    set st__Critical_setMultiplier=CreateTrigger()
    call TriggerAddCondition(st__Critical_setMultiplier,Condition( function sa__Critical_setMultiplier))
    set st__Critical_add=CreateTrigger()
    call TriggerAddCondition(st__Critical_add,Condition( function sa__Critical_add))
    set st__Critical_register=CreateTrigger()
    call TriggerAddCondition(st__Critical_register,Condition( function sa__Critical_register))
    set st__Evasion_getEvasionChance=CreateTrigger()
    call TriggerAddCondition(st__Evasion_getEvasionChance,Condition( function sa__Evasion_getEvasionChance))
    set st__Evasion_getMissChance=CreateTrigger()
    call TriggerAddCondition(st__Evasion_getMissChance,Condition( function sa__Evasion_getMissChance))
    set st__Evasion_setEvasionChance=CreateTrigger()
    call TriggerAddCondition(st__Evasion_setEvasionChance,Condition( function sa__Evasion_setEvasionChance))
    set st__Evasion_setMissChance=CreateTrigger()
    call TriggerAddCondition(st__Evasion_setMissChance,Condition( function sa__Evasion_setMissChance))
    set st__Evasion_register=CreateTrigger()
    call TriggerAddCondition(st__Evasion_register,Condition( function sa__Evasion_register))
    set st__Evasion__get_evade=CreateTrigger()
    call TriggerAddCondition(st__Evasion__get_evade,Condition( function sa__Evasion__get_evade))
    set st__Damage_register=CreateTrigger()
    call TriggerAddCondition(st__Damage_register,Condition( function sa__Damage_register))
    set st__CDR_onDestroy[69]=null
    set st__CDR_onDestroy[93]=null
    set st__Components___IComponent_onText[60]=null
    set st__Components___IComponent_onText[65]=null
    set st__Components___IComponent_onText[129]=null
    set st__Components___IComponent_onText[66]=null
    set st__Components___IComponent_onText[130]=null
    set st__Components___IComponent_onText[132]=null
    set st__Components___IComponent_onText[133]=null
    set st__Components___IComponent_onText[134]=null
    set st__Components___IComponent_onText[137]=null
    set st__Components___IComponent_onText[61]=null
    set st__Components___IComponent_onText[62]=null
    set st__Components___IComponent_onText[64]=null
    set st__Components___IComponent_onCheck[60]=null
    set st__Components___IComponent_onCheck[65]=null
    set st__Components___IComponent_onCheck[129]=null
    set st__Components___IComponent_onCheck[66]=null
    set st__Components___IComponent_onCheck[130]=null
    set st__Components___IComponent_onCheck[132]=null
    set st__Components___IComponent_onCheck[133]=null
    set st__Components___IComponent_onCheck[134]=null
    set st__Components___IComponent_onCheck[137]=null
    set st__Components___IComponent_onCheck[61]=null
    set st__Components___IComponent_onCheck[62]=null
    set st__Components___IComponent_onCheck[64]=null
    set st__Components___IComponent_onEnter[60]=null
    set st__Components___IComponent_onEnter[65]=null
    set st__Components___IComponent_onEnter[129]=null
    set st__Components___IComponent_onEnter[66]=null
    set st__Components___IComponent_onEnter[130]=null
    set st__Components___IComponent_onEnter[132]=null
    set st__Components___IComponent_onEnter[133]=null
    set st__Components___IComponent_onEnter[134]=null
    set st__Components___IComponent_onEnter[137]=null
    set st__Components___IComponent_onEnter[61]=null
    set st__Components___IComponent_onEnter[62]=null
    set st__Components___IComponent_onEnter[64]=null
    set st__Components___IComponent_onLeave[60]=null
    set st__Components___IComponent_onLeave[65]=null
    set st__Components___IComponent_onLeave[129]=null
    set st__Components___IComponent_onLeave[66]=null
    set st__Components___IComponent_onLeave[130]=null
    set st__Components___IComponent_onLeave[132]=null
    set st__Components___IComponent_onLeave[133]=null
    set st__Components___IComponent_onLeave[134]=null
    set st__Components___IComponent_onLeave[137]=null
    set st__Components___IComponent_onLeave[61]=null
    set st__Components___IComponent_onLeave[62]=null
    set st__Components___IComponent_onLeave[64]=null
    set st__Components___IComponent_onClick[60]=null
    set st__Components___IComponent_onClick[65]=null
    set st__Components___IComponent_onClick[66]=null
    set st__Components___IComponent_onClick[130]=null
    set st__Components___IComponent_onClick[132]=null
    set st__Components___IComponent_onClick[133]=null
    set st__Components___IComponent_onClick[134]=null
    set st__Components___IComponent_onClick[137]=null
    set st__Components___IComponent_onClick[61]=null
    set st__Components___IComponent_onClick[62]=null
    set st__Components___IComponent_onClick[64]=null
    set st__Components___IComponent_onSlide[60]=null
    set st__Components___IComponent_onSlide[65]=null
    set st__Components___IComponent_onSlide[129]=null
    set st__Components___IComponent_onSlide[66]=null
    set st__Components___IComponent_onSlide[130]=null
    set st__Components___IComponent_onSlide[132]=null
    set st__Components___IComponent_onSlide[133]=null
    set st__Components___IComponent_onSlide[134]=null
    set st__Components___IComponent_onSlide[137]=null
    set st__Components___IComponent_onSlide[61]=null
    set st__Components___IComponent_onSlide[62]=null
    set st__Components___IComponent_onSlide[64]=null
    set st__Components___IComponent_onScroll[60]=null
    set st__Components___IComponent_onScroll[65]=null
    set st__Components___IComponent_onScroll[66]=null
    set st__Components___IComponent_onScroll[133]=null
    set st__Components___IComponent_onScroll[134]=null
    set st__Components___IComponent_onScroll[61]=null
    set st__Components___IComponent_onScroll[62]=null
    set st__Components___IComponent_onScroll[64]=null
    set st__Components___IComponent_onUncheck[60]=null
    set st__Components___IComponent_onUncheck[65]=null
    set st__Components___IComponent_onUncheck[129]=null
    set st__Components___IComponent_onUncheck[66]=null
    set st__Components___IComponent_onUncheck[130]=null
    set st__Components___IComponent_onUncheck[132]=null
    set st__Components___IComponent_onUncheck[133]=null
    set st__Components___IComponent_onUncheck[134]=null
    set st__Components___IComponent_onUncheck[137]=null
    set st__Components___IComponent_onUncheck[61]=null
    set st__Components___IComponent_onUncheck[62]=null
    set st__Components___IComponent_onUncheck[64]=null
    set st__Components___IComponent_onRightClick[60]=null
    set st__Components___IComponent_onRightClick[65]=null
    set st__Components___IComponent_onRightClick[66]=null
    set st__Components___IComponent_onRightClick[130]=null
    set st__Components___IComponent_onRightClick[132]=null
    set st__Components___IComponent_onRightClick[133]=null
    set st__Components___IComponent_onRightClick[134]=null
    set st__Components___IComponent_onRightClick[137]=null
    set st__Components___IComponent_onRightClick[61]=null
    set st__Components___IComponent_onRightClick[62]=null
    set st__Components___IComponent_onRightClick[64]=null
    set st__Components___IComponent_onMiddleClick[60]=null
    set st__Components___IComponent_onMiddleClick[65]=null
    set st__Components___IComponent_onMiddleClick[66]=null
    set st__Components___IComponent_onMiddleClick[130]=null
    set st__Components___IComponent_onMiddleClick[132]=null
    set st__Components___IComponent_onMiddleClick[133]=null
    set st__Components___IComponent_onMiddleClick[134]=null
    set st__Components___IComponent_onMiddleClick[137]=null
    set st__Components___IComponent_onMiddleClick[61]=null
    set st__Components___IComponent_onMiddleClick[62]=null
    set st__Components___IComponent_onMiddleClick[64]=null
    set st__Components___IComponent_onDoubleClick[60]=null
    set st__Components___IComponent_onDoubleClick[65]=null
    set st__Components___IComponent_onDoubleClick[66]=null
    set st__Components___IComponent_onDoubleClick[130]=null
    set st__Components___IComponent_onDoubleClick[132]=null
    set st__Components___IComponent_onDoubleClick[133]=null
    set st__Components___IComponent_onDoubleClick[134]=null
    set st__Components___IComponent_onDoubleClick[137]=null
    set st__Components___IComponent_onDoubleClick[61]=null
    set st__Components___IComponent_onDoubleClick[62]=null
    set st__Components___IComponent_onDoubleClick[64]=null
    set st__Backdrop__set_visible[55]=CreateTrigger()
    set st__Backdrop__set_visible[67]=st__Backdrop__set_visible[55]
    call TriggerAddCondition(st__Backdrop__set_visible[55],Condition( function sa__Backdrop__set_visible))
    call TriggerAddAction(st__Backdrop__set_visible[55], function sa__Backdrop__set_visible)
    set st__Backdrop__get_visible[55]=CreateTrigger()
    set st__Backdrop__get_visible[67]=st__Backdrop__get_visible[55]
    call TriggerAddCondition(st__Backdrop__get_visible[55],Condition( function sa__Backdrop__get_visible))
    call TriggerAddAction(st__Backdrop__get_visible[55], function sa__Backdrop__get_visible)
    set st__Backdrop__get_frame=CreateTrigger()
    call TriggerAddCondition(st__Backdrop__get_frame,Condition( function sa__Backdrop__get_frame))
    set st__Backdrop_create=CreateTrigger()
    call TriggerAddCondition(st__Backdrop_create,Condition( function sa__Backdrop_create))
    set st__Backdrop_onDestroy[55]=null
    set st__Backdrop_onDestroy[67]=null
    set st__Slider__set_visible=CreateTrigger()
    call TriggerAddCondition(st__Slider__set_visible,Condition( function sa__Slider__set_visible))
    set st__Slider__get_visible=CreateTrigger()
    call TriggerAddCondition(st__Slider__get_visible,Condition( function sa__Slider__get_visible))
    set st__Slider__get_frame=CreateTrigger()
    call TriggerAddCondition(st__Slider__get_frame,Condition( function sa__Slider__get_frame))
    set st__Slider_get=CreateTrigger()
    call TriggerAddCondition(st__Slider_get,Condition( function sa__Slider_get))
    set st__Components___IComponent_onDestroy[64]=null
    set st__CheckBox__set_visible=CreateTrigger()
    call TriggerAddCondition(st__CheckBox__set_visible,Condition( function sa__CheckBox__set_visible))
    set st__CheckBox__get_visible=CreateTrigger()
    call TriggerAddCondition(st__CheckBox__get_visible,Condition( function sa__CheckBox__get_visible))
    set st__CheckBox__get_frame=CreateTrigger()
    call TriggerAddCondition(st__CheckBox__get_frame,Condition( function sa__CheckBox__get_frame))
    set st__CheckBox_get=CreateTrigger()
    call TriggerAddCondition(st__CheckBox_get,Condition( function sa__CheckBox_get))
    set st__Components___IComponent_onDestroy[62]=CreateTrigger()
    call TriggerAddCondition(st__Components___IComponent_onDestroy[62],Condition( function sa__CheckBox__disposeArrays))
    set st__EditBox__set_visible=CreateTrigger()
    call TriggerAddCondition(st__EditBox__set_visible,Condition( function sa__EditBox__set_visible))
    set st__EditBox__get_visible=CreateTrigger()
    call TriggerAddCondition(st__EditBox__get_visible,Condition( function sa__EditBox__get_visible))
    set st__EditBox__get_frame=CreateTrigger()
    call TriggerAddCondition(st__EditBox__get_frame,Condition( function sa__EditBox__get_frame))
    set st__EditBox_get=CreateTrigger()
    call TriggerAddCondition(st__EditBox_get,Condition( function sa__EditBox_get))
    set st__Components___IComponent_onDestroy[61]=null
    set st__Component__set_visible[60]=CreateTrigger()
    set st__Component__set_visible[65]=st__Component__set_visible[60]
    set st__Component__set_visible[129]=st__Component__set_visible[65]
    set st__Component__set_visible[66]=st__Component__set_visible[60]
    set st__Component__set_visible[130]=st__Component__set_visible[66]
    set st__Component__set_visible[133]=st__Component__set_visible[66]
    set st__Component__set_visible[134]=st__Component__set_visible[66]
    call TriggerAddCondition(st__Component__set_visible[60],Condition( function sa__Component__set_visible))
    call TriggerAddAction(st__Component__set_visible[60], function sa__Component__set_visible)
    set st__Component__get_visible[60]=CreateTrigger()
    set st__Component__get_visible[65]=st__Component__get_visible[60]
    set st__Component__get_visible[129]=st__Component__get_visible[65]
    set st__Component__get_visible[66]=st__Component__get_visible[60]
    set st__Component__get_visible[130]=st__Component__get_visible[66]
    set st__Component__get_visible[133]=st__Component__get_visible[66]
    set st__Component__get_visible[134]=st__Component__get_visible[66]
    call TriggerAddCondition(st__Component__get_visible[60],Condition( function sa__Component__get_visible))
    call TriggerAddAction(st__Component__get_visible[60], function sa__Component__get_visible)
    set st__Component__get_frame=CreateTrigger()
    call TriggerAddCondition(st__Component__get_frame,Condition( function sa__Component__get_frame))
    set st__Component_get=CreateTrigger()
    call TriggerAddCondition(st__Component_get,Condition( function sa__Component_get))
    set st__Component_create=CreateTrigger()
    call TriggerAddCondition(st__Component_create,Condition( function sa__Component_create))
    set st__Components___IComponent_onDestroy[60]=null
    set st__Components___IComponent_onDestroy[65]=null
    set st__Components___IComponent_onDestroy[129]=null
    set st__Components___IComponent_onDestroy[66]=null
    set st__Components___IComponent_onDestroy[132]=null
    set st__Components___IComponent_onDestroy[133]=null
    set st__Components___IComponent_onDestroy[137]=null
    set st__StatusBar__set_visible=CreateTrigger()
    call TriggerAddCondition(st__StatusBar__set_visible,Condition( function sa__StatusBar__set_visible))
    set st__StatusBar__get_visible=CreateTrigger()
    call TriggerAddCondition(st__StatusBar__get_visible,Condition( function sa__StatusBar__get_visible))
    set st__StatusBar__get_frame=CreateTrigger()
    call TriggerAddCondition(st__StatusBar__get_frame,Condition( function sa__StatusBar__get_frame))
    set st__TextArea__set_visible=CreateTrigger()
    call TriggerAddCondition(st__TextArea__set_visible,Condition( function sa__TextArea__set_visible))
    set st__TextArea__get_visible=CreateTrigger()
    call TriggerAddCondition(st__TextArea__get_visible,Condition( function sa__TextArea__get_visible))
    set st__TextArea__get_frame=CreateTrigger()
    call TriggerAddCondition(st__TextArea__get_frame,Condition( function sa__TextArea__get_frame))
    set st__Text__set_visible=CreateTrigger()
    call TriggerAddCondition(st__Text__set_visible,Condition( function sa__Text__set_visible))
    set st__Text__get_visible=CreateTrigger()
    call TriggerAddCondition(st__Text__get_visible,Condition( function sa__Text__get_visible))
    set st__Text__get_frame=CreateTrigger()
    call TriggerAddCondition(st__Text__get_frame,Condition( function sa__Text__get_frame))
    set st__Sprite__set_visible=CreateTrigger()
    call TriggerAddCondition(st__Sprite__set_visible,Condition( function sa__Sprite__set_visible))
    set st__Sprite__get_visible=CreateTrigger()
    call TriggerAddCondition(st__Sprite__get_visible,Condition( function sa__Sprite__get_visible))
    set st__Sprite__get_frame=CreateTrigger()
    call TriggerAddCondition(st__Sprite__get_frame,Condition( function sa__Sprite__get_frame))
    set st__Item_calculate=CreateTrigger()
    call TriggerAddCondition(st__Item_calculate,Condition( function sa__Item_calculate))
    set st__Item_get=CreateTrigger()
    call TriggerAddCondition(st__Item_get,Condition( function sa__Item_get))
    set st__Item_create=CreateTrigger()
    call TriggerAddCondition(st__Item_create,Condition( function sa__Item_create))
    set st__Item_save=CreateTrigger()
    call TriggerAddCondition(st__Item_save,Condition( function sa__Item_save))
    set st__Item_clear=CreateTrigger()
    call TriggerAddCondition(st__Item_clear,Condition( function sa__Item_clear))
    set st__Item___IItem_onDestroy[117]=null
    set st__Button_create=CreateTrigger()
    call TriggerAddCondition(st__Button_create,Condition( function sa__Button_create))
    set st__Panel_create=CreateTrigger()
    call TriggerAddCondition(st__Panel_create,Condition( function sa__Panel_create))
    set st__Ability_onCasting=CreateTrigger()
    call TriggerAddCondition(st__Ability_onCasting,Condition( function sa__Ability_onCasting))
    set st__Ability___IAbility_onDestroy[91]=null
    set st__Ability___IAbility_onDestroy[110]=null
    set st__Ability___IAbility_onDestroy[120]=null
    set st__Ability___IAbility_onDestroy[122]=null
    set st__Ability___IAbility_onDestroy[123]=null
    set st__Ability___IAbility_onDestroy[125]=null
    set st__Ability___IAbility_onDestroy[139]=null
    set st__Missiles_terminate=CreateTrigger()
    call TriggerAddCondition(st__Missiles_terminate,Condition( function sa__Missiles_terminate))
    set st__Missiles_reset=CreateTrigger()
    call TriggerAddCondition(st__Missiles_reset,Condition( function sa__Missiles_reset))
    set st__Missiles_move=CreateTrigger()
    call TriggerAddCondition(st__Missiles_move,Condition( function sa__Missiles_move))
    set st__Missiles_create=CreateTrigger()
    call TriggerAddCondition(st__Missiles_create,Condition( function sa__Missiles_create))
    set st__Missiles___MissileEvents_onDestroy[97]=null
    set st__Missiles___MissileEvents_onDestroy[124]=null
    set st__Missiles___MissileEvents_onDestroy[138]=null
    set st__Bonus_adder=CreateTrigger()
    call TriggerAddCondition(st__Bonus_adder,Condition( function sa__Bonus_adder))
    set st__Bonus_onEvent=CreateTrigger()
    call TriggerAddCondition(st__Bonus_onEvent,Condition( function sa__Bonus_onEvent))
    set st__Bonus_StartTimer=CreateTrigger()
    call TriggerAddCondition(st__Bonus_StartTimer,Condition( function sa__Bonus_StartTimer))
    set st__NewBonus___IBonus_onDestroy[99]=null
    set st__NewBonus___IBonus_onDestroy[140]=null
    set st__NewBonus___IBonus_onDestroy[141]=null
    set st__NewBonus___IBonus_onDestroy[142]=null
    set st__NewBonus___IBonus_onDestroy[143]=null
    set st__NewBonus___IBonus_onDestroy[144]=null
    set st__NewBonus___IBonus_onDestroy[145]=null
    set st__NewBonus___IBonus_onDestroy[146]=null
    set st__NewBonus___IBonus_onDestroy[147]=null
    set st__NewBonus___IBonus_onDestroy[148]=null
    set st__NewBonus___IBonus_onDestroy[149]=null
    set st__NewBonus___IBonus_onDestroy[150]=null
    set st__NewBonus___IBonus_onDestroy[151]=null
    set st__NewBonus___IBonus_onDestroy[152]=null
    set st__NewBonus___IBonus_onDestroy[153]=null
    set st__NewBonus___IBonus_onDestroy[154]=null
    set st__NewBonus___IBonus_onDestroy[155]=null
    set st__NewBonus___IBonus_onDestroy[156]=null
    set st__NewBonus___IBonus_onDestroy[157]=null
    set st__NewBonus___IBonus_onDestroy[158]=null
    set st__NewBonus___IBonus_onDestroy[159]=null
    set st__NewBonus___IBonus_onDestroy[160]=null
    set st__NewBonus___IBonus_onDestroy[161]=null
    set st__NewBonus___IBonus_onDestroy[162]=null
    set st__NewBonus___IBonus_onDestroy[163]=null
    set st__NewBonus___IBonus_onDestroy[164]=null
    set st__NewBonus___IBonus_onDestroy[165]=null
    set st__NewBonus___IBonus_onDestroy[166]=null
    set st__NewBonus___IBonus_onDestroy[167]=null
    set st__NewBonus___IBonus_onDestroy[168]=null
    set st__NewBonus___IBonus_onDestroy[169]=null
    set st__NewBonus___IBonus_onDestroy[170]=null
    set st__TenacityUtils_addTimed=CreateTrigger()
    call TriggerAddCondition(st__TenacityUtils_addTimed,Condition( function sa__TenacityUtils_addTimed))
    set st__Ability___IAbility_onTooltip[110]=CreateTrigger()
    call TriggerAddCondition(st__Ability___IAbility_onTooltip[110],Condition( function sa__Afterburner___Afterburner_onTooltip))
    call TriggerAddAction(st__Ability___IAbility_onTooltip[110], function sa__Afterburner___Afterburner_onTooltip)
    set st__Afterburner___Afterburner_StartTimer=CreateTrigger()
    call TriggerAddCondition(st__Afterburner___Afterburner_StartTimer,Condition( function sa__Afterburner___Afterburner_StartTimer))
    set st__NewBonus___IBonus_get[170]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[170],Condition( function sa__CooldownReductionFlat___CooldownReductionFlat_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[170], function sa__CooldownReductionFlat___CooldownReductionFlat_get)
    set st__NewBonus___IBonus_Set[170]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[170],Condition( function sa__CooldownReductionFlat___CooldownReductionFlat_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[170], function sa__CooldownReductionFlat___CooldownReductionFlat_Set)
    set st__NewBonus___IBonus_add[170]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[170],Condition( function sa__CooldownReductionFlat___CooldownReductionFlat_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[170], function sa__CooldownReductionFlat___CooldownReductionFlat_add)
    set st__Ability___IAbility_onTooltip[120]=CreateTrigger()
    call TriggerAddCondition(st__Ability___IAbility_onTooltip[120],Condition( function sa__MoltenShield___MoltenShield_onTooltip))
    call TriggerAddAction(st__Ability___IAbility_onTooltip[120], function sa__MoltenShield___MoltenShield_onTooltip)
    set st__Ability___IAbility_onCast[120]=CreateTrigger()
    call TriggerAddCondition(st__Ability___IAbility_onCast[120],Condition( function sa__MoltenShield___MoltenShield_onCast))
    call TriggerAddAction(st__Ability___IAbility_onCast[120], function sa__MoltenShield___MoltenShield_onCast)
    set st__MoltenShield___MoltenShield_StartTimer=CreateTrigger()
    call TriggerAddCondition(st__MoltenShield___MoltenShield_StartTimer,Condition( function sa__MoltenShield___MoltenShield_StartTimer))
    set st__Ability___IAbility_onTooltip[122]=CreateTrigger()
    call TriggerAddCondition(st__Ability___IAbility_onTooltip[122],Condition( function sa__ExplosiveRune___ExplosiveRune_onTooltip))
    call TriggerAddAction(st__Ability___IAbility_onTooltip[122], function sa__ExplosiveRune___ExplosiveRune_onTooltip)
    set st__Ability___IAbility_onCast[122]=CreateTrigger()
    call TriggerAddCondition(st__Ability___IAbility_onCast[122],Condition( function sa__ExplosiveRune___ExplosiveRune_onCast))
    call TriggerAddAction(st__Ability___IAbility_onCast[122], function sa__ExplosiveRune___ExplosiveRune_onCast)
    set st__Ability___IAbility_onLearn[122]=CreateTrigger()
    call TriggerAddCondition(st__Ability___IAbility_onLearn[122],Condition( function sa__ExplosiveRune___ExplosiveRune_onLearn))
    call TriggerAddAction(st__Ability___IAbility_onLearn[122], function sa__ExplosiveRune___ExplosiveRune_onLearn)
    set st__ExplosiveRune___ExplosiveRune_HasStartedTimer=CreateTrigger()
    call TriggerAddCondition(st__ExplosiveRune___ExplosiveRune_HasStartedTimer,Condition( function sa__ExplosiveRune___ExplosiveRune_HasStartedTimer))
    set st__ExplosiveRune___ExplosiveRune_GetTimerInstance=CreateTrigger()
    call TriggerAddCondition(st__ExplosiveRune___ExplosiveRune_GetTimerInstance,Condition( function sa__ExplosiveRune___ExplosiveRune_GetTimerInstance))
    set st__ExplosiveRune___ExplosiveRune_GetRemainingTime=CreateTrigger()
    call TriggerAddCondition(st__ExplosiveRune___ExplosiveRune_GetRemainingTime,Condition( function sa__ExplosiveRune___ExplosiveRune_GetRemainingTime))
    set st__ExplosiveRune___ExplosiveRune_StartTimer=CreateTrigger()
    call TriggerAddCondition(st__ExplosiveRune___ExplosiveRune_StartTimer,Condition( function sa__ExplosiveRune___ExplosiveRune_StartTimer))
    set st__Ability___IAbility_onCast[123]=CreateTrigger()
    call TriggerAddCondition(st__Ability___IAbility_onCast[123],Condition( function sa__LavaElemental___LavaElemental_onCast))
    call TriggerAddAction(st__Ability___IAbility_onCast[123], function sa__LavaElemental___LavaElemental_onCast)
    set st__Missiles___MissileEvents_onPeriod[124]=CreateTrigger()
    call TriggerAddCondition(st__Missiles___MissileEvents_onPeriod[124],Condition( function sa__LivingMeteor___Meteor_onPeriod))
    call TriggerAddAction(st__Missiles___MissileEvents_onPeriod[124], function sa__LivingMeteor___Meteor_onPeriod)
    set st__Missiles___MissileEvents_onFinish[124]=CreateTrigger()
    call TriggerAddCondition(st__Missiles___MissileEvents_onFinish[124],Condition( function sa__LivingMeteor___Meteor_onFinish))
    call TriggerAddAction(st__Missiles___MissileEvents_onFinish[124], function sa__LivingMeteor___Meteor_onFinish)
    set st__Ability___IAbility_onTooltip[125]=CreateTrigger()
    call TriggerAddCondition(st__Ability___IAbility_onTooltip[125],Condition( function sa__LivingMeteor___LivingMeteor_onTooltip))
    call TriggerAddAction(st__Ability___IAbility_onTooltip[125], function sa__LivingMeteor___LivingMeteor_onTooltip)
    set st__Ability___IAbility_onCast[125]=CreateTrigger()
    call TriggerAddCondition(st__Ability___IAbility_onCast[125],Condition( function sa__LivingMeteor___LivingMeteor_onCast))
    call TriggerAddAction(st__Ability___IAbility_onCast[125], function sa__LivingMeteor___LivingMeteor_onCast)
    set st__LivingMeteor___LivingMeteor_StartTimer=CreateTrigger()
    call TriggerAddCondition(st__LivingMeteor___LivingMeteor_StartTimer,Condition( function sa__LivingMeteor___LivingMeteor_StartTimer))
    set st__Shop___Slot_update=CreateTrigger()
    call TriggerAddCondition(st__Shop___Slot_update,Condition( function sa__Shop___Slot_update))
    set st__Components___IComponent_onScroll[129]=CreateTrigger()
    call TriggerAddCondition(st__Components___IComponent_onScroll[129],Condition( function sa__Shop___Slot_onScroll))
    call TriggerAddAction(st__Components___IComponent_onScroll[129], function sa__Shop___Slot_onScroll)
    set st__Components___IComponent_onClick[129]=CreateTrigger()
    call TriggerAddCondition(st__Components___IComponent_onClick[129],Condition( function sa__Shop___Slot_onClick))
    call TriggerAddAction(st__Components___IComponent_onClick[129], function sa__Shop___Slot_onClick)
    set st__Components___IComponent_onMiddleClick[129]=CreateTrigger()
    call TriggerAddCondition(st__Components___IComponent_onMiddleClick[129],Condition( function sa__Shop___Slot_onMiddleClick))
    call TriggerAddAction(st__Components___IComponent_onMiddleClick[129], function sa__Shop___Slot_onMiddleClick)
    set st__Components___IComponent_onDoubleClick[129]=CreateTrigger()
    call TriggerAddCondition(st__Components___IComponent_onDoubleClick[129],Condition( function sa__Shop___Slot_onDoubleClick))
    call TriggerAddAction(st__Components___IComponent_onDoubleClick[129], function sa__Shop___Slot_onDoubleClick)
    set st__Components___IComponent_onRightClick[129]=CreateTrigger()
    call TriggerAddCondition(st__Components___IComponent_onRightClick[129],Condition( function sa__Shop___Slot_onRightClick))
    call TriggerAddAction(st__Components___IComponent_onRightClick[129], function sa__Shop___Slot_onRightClick)
    set st__Shop___Detail_show=CreateTrigger()
    call TriggerAddCondition(st__Shop___Detail_show,Condition( function sa__Shop___Detail_show))
    set st__Components___IComponent_onScroll[130]=CreateTrigger()
    call TriggerAddCondition(st__Components___IComponent_onScroll[130],Condition( function sa__Shop___Detail_onScroll))
    call TriggerAddAction(st__Components___IComponent_onScroll[130], function sa__Shop___Detail_onScroll)
    set st__Shop___Detail_onClicked=CreateTrigger()
    call TriggerAddCondition(st__Shop___Detail_onClicked,Condition( function sa__Shop___Detail_onClicked))
    set st__Shop___Detail_onScrolled=CreateTrigger()
    call TriggerAddCondition(st__Shop___Detail_onScrolled,Condition( function sa__Shop___Detail_onScrolled))
    set st__Shop___Detail_onMiddleClicked=CreateTrigger()
    call TriggerAddCondition(st__Shop___Detail_onMiddleClicked,Condition( function sa__Shop___Detail_onMiddleClicked))
    set st__Shop___Detail_onRightClicked=CreateTrigger()
    call TriggerAddCondition(st__Shop___Detail_onRightClicked,Condition( function sa__Shop___Detail_onRightClicked))
    set st__Components___IComponent_onDestroy[130]=CreateTrigger()
    call TriggerAddCondition(st__Components___IComponent_onDestroy[130],Condition( function sa__Shop___Detail__disposeArrays))
    set st__Component__set_visible[132]=CreateTrigger()
    call TriggerAddCondition(st__Component__set_visible[132],Condition( function sa__Shop___Buyer__set_visible))
    call TriggerAddAction(st__Component__set_visible[132], function sa__Shop___Buyer__set_visible)
    set st__Component__get_visible[132]=CreateTrigger()
    call TriggerAddCondition(st__Component__get_visible[132],Condition( function sa__Shop___Buyer__get_visible))
    call TriggerAddAction(st__Component__get_visible[132], function sa__Shop___Buyer__get_visible)
    set st__Shop___Buyer__getindex=CreateTrigger()
    call TriggerAddCondition(st__Shop___Buyer__getindex,Condition( function sa__Shop___Buyer__getindex))
    set st__Components___IComponent_onScroll[132]=CreateTrigger()
    call TriggerAddCondition(st__Components___IComponent_onScroll[132],Condition( function sa__Shop___Buyer_onScroll))
    call TriggerAddAction(st__Components___IComponent_onScroll[132], function sa__Shop___Buyer_onScroll)
    set st__Shop___Buyer_onScrolled=CreateTrigger()
    call TriggerAddCondition(st__Shop___Buyer_onScrolled,Condition( function sa__Shop___Buyer_onScrolled))
    set st__Shop___Buyer_onClicked=CreateTrigger()
    call TriggerAddCondition(st__Shop___Buyer_onClicked,Condition( function sa__Shop___Buyer_onClicked))
    set st__Shop___Favorites_has=CreateTrigger()
    call TriggerAddCondition(st__Shop___Favorites_has,Condition( function sa__Shop___Favorites_has))
    set st__Shop___Favorites_remove=CreateTrigger()
    call TriggerAddCondition(st__Shop___Favorites_remove,Condition( function sa__Shop___Favorites_remove))
    set st__Shop___Favorites_add=CreateTrigger()
    call TriggerAddCondition(st__Shop___Favorites_add,Condition( function sa__Shop___Favorites_add))
    set st__Shop___Favorites_onClear=CreateTrigger()
    call TriggerAddCondition(st__Shop___Favorites_onClear,Condition( function sa__Shop___Favorites_onClear))
    set st__Shop___Favorites_onClicked=CreateTrigger()
    call TriggerAddCondition(st__Shop___Favorites_onClicked,Condition( function sa__Shop___Favorites_onClicked))
    set st__Shop___Favorites_onMiddleClicked=CreateTrigger()
    call TriggerAddCondition(st__Shop___Favorites_onMiddleClicked,Condition( function sa__Shop___Favorites_onMiddleClicked))
    set st__Shop___Favorites_onDoubleClicked=CreateTrigger()
    call TriggerAddCondition(st__Shop___Favorites_onDoubleClicked,Condition( function sa__Shop___Favorites_onDoubleClicked))
    set st__Shop___Favorites_onRightClicked=CreateTrigger()
    call TriggerAddCondition(st__Shop___Favorites_onRightClicked,Condition( function sa__Shop___Favorites_onRightClicked))
    set st__Shop___Category_onClicked=CreateTrigger()
    call TriggerAddCondition(st__Shop___Category_onClicked,Condition( function sa__Shop___Category_onClicked))
    set st__Shop___Category_onClear=CreateTrigger()
    call TriggerAddCondition(st__Shop___Category_onClear,Condition( function sa__Shop___Category_onClear))
    set st__Shop___Category_onLogic=CreateTrigger()
    call TriggerAddCondition(st__Shop___Category_onLogic,Condition( function sa__Shop___Category_onLogic))
    set st__Components___IComponent_onDestroy[134]=CreateTrigger()
    call TriggerAddCondition(st__Components___IComponent_onDestroy[134],Condition( function sa__Shop___Category__disposeArrays))
    set st__Component__set_visible[137]=CreateTrigger()
    call TriggerAddCondition(st__Component__set_visible[137],Condition( function sa__Shop__set_visible))
    call TriggerAddAction(st__Component__set_visible[137], function sa__Shop__set_visible)
    set st__Component__get_visible[137]=CreateTrigger()
    call TriggerAddCondition(st__Component__get_visible[137],Condition( function sa__Shop__get_visible))
    call TriggerAddAction(st__Component__get_visible[137], function sa__Shop__get_visible)
    set st__Shop_buy=CreateTrigger()
    call TriggerAddCondition(st__Shop_buy,Condition( function sa__Shop_buy))
    set st__Shop_sell=CreateTrigger()
    call TriggerAddCondition(st__Shop_sell,Condition( function sa__Shop_sell))
    set st__Shop_filter=CreateTrigger()
    call TriggerAddCondition(st__Shop_filter,Condition( function sa__Shop_filter))
    set st__Shop_detail=CreateTrigger()
    call TriggerAddCondition(st__Shop_detail,Condition( function sa__Shop_detail))
    set st__Shop_has=CreateTrigger()
    call TriggerAddCondition(st__Shop_has,Condition( function sa__Shop_has))
    set st__Shop_find=CreateTrigger()
    call TriggerAddCondition(st__Shop_find,Condition( function sa__Shop_find))
    set st__Shop_addCategory=CreateTrigger()
    call TriggerAddCondition(st__Shop_addCategory,Condition( function sa__Shop_addCategory))
    set st__Shop_addItem=CreateTrigger()
    call TriggerAddCondition(st__Shop_addItem,Condition( function sa__Shop_addItem))
    set st__Shop_create=CreateTrigger()
    call TriggerAddCondition(st__Shop_create,Condition( function sa__Shop_create))
    set st__Components___IComponent_onScroll[137]=CreateTrigger()
    call TriggerAddCondition(st__Components___IComponent_onScroll[137],Condition( function sa__Shop_onScroll))
    call TriggerAddAction(st__Components___IComponent_onScroll[137], function sa__Shop_onScroll)
    set st__Shop_onSearch=CreateTrigger()
    call TriggerAddCondition(st__Shop_onSearch,Condition( function sa__Shop_onSearch))
    set st__Shop_onClose=CreateTrigger()
    call TriggerAddCondition(st__Shop_onClose,Condition( function sa__Shop_onClose))
    set st__Shop_onDismantle=CreateTrigger()
    call TriggerAddCondition(st__Shop_onDismantle,Condition( function sa__Shop_onDismantle))
    set st__Shop_onUndo=CreateTrigger()
    call TriggerAddCondition(st__Shop_onUndo,Condition( function sa__Shop_onUndo))
    set st__Missiles___MissileEvents_onFinish[138]=CreateTrigger()
    call TriggerAddCondition(st__Missiles___MissileEvents_onFinish[138],Condition( function sa__SulfurasSmash___Hammer_onFinish))
    call TriggerAddAction(st__Missiles___MissileEvents_onFinish[138], function sa__SulfurasSmash___Hammer_onFinish)
    set st__Ability___IAbility_onTooltip[139]=CreateTrigger()
    call TriggerAddCondition(st__Ability___IAbility_onTooltip[139],Condition( function sa__SulfurasSmash___SulfurasSmash_onTooltip))
    call TriggerAddAction(st__Ability___IAbility_onTooltip[139], function sa__SulfurasSmash___SulfurasSmash_onTooltip)
    set st__Ability___IAbility_onCast[139]=CreateTrigger()
    call TriggerAddCondition(st__Ability___IAbility_onCast[139],Condition( function sa__SulfurasSmash___SulfurasSmash_onCast))
    call TriggerAddAction(st__Ability___IAbility_onCast[139], function sa__SulfurasSmash___SulfurasSmash_onCast)
    set st__NewBonus___IBonus_get[140]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[140],Condition( function sa__MissChance___Miss_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[140], function sa__MissChance___Miss_get)
    set st__NewBonus___IBonus_Set[140]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[140],Condition( function sa__MissChance___Miss_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[140], function sa__MissChance___Miss_Set)
    set st__NewBonus___IBonus_add[140]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[140],Condition( function sa__MissChance___Miss_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[140], function sa__MissChance___Miss_add)
    set st__NewBonus___IBonus_get[141]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[141],Condition( function sa__Armor___Armor_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[141], function sa__Armor___Armor_get)
    set st__NewBonus___IBonus_Set[141]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[141],Condition( function sa__Armor___Armor_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[141], function sa__Armor___Armor_Set)
    set st__NewBonus___IBonus_add[141]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[141],Condition( function sa__Armor___Armor_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[141], function sa__Armor___Armor_add)
    set st__NewBonus___IBonus_get[142]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[142],Condition( function sa__Block___Block_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[142], function sa__Block___Block_get)
    set st__NewBonus___IBonus_Set[142]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[142],Condition( function sa__Block___Block_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[142], function sa__Block___Block_Set)
    set st__NewBonus___IBonus_add[142]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[142],Condition( function sa__Block___Block_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[142], function sa__Block___Block_add)
    set st__NewBonus___IBonus_get[143]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[143],Condition( function sa__Mana___Mana_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[143], function sa__Mana___Mana_get)
    set st__NewBonus___IBonus_Set[143]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[143],Condition( function sa__Mana___Mana_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[143], function sa__Mana___Mana_Set)
    set st__NewBonus___IBonus_add[143]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[143],Condition( function sa__Mana___Mana_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[143], function sa__Mana___Mana_add)
    set st__NewBonus___IBonus_get[144]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[144],Condition( function sa__Agility___Agility_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[144], function sa__Agility___Agility_get)
    set st__NewBonus___IBonus_Set[144]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[144],Condition( function sa__Agility___Agility_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[144], function sa__Agility___Agility_Set)
    set st__NewBonus___IBonus_add[144]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[144],Condition( function sa__Agility___Agility_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[144], function sa__Agility___Agility_add)
    set st__NewBonus___IBonus_get[145]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[145],Condition( function sa__Health___Health_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[145], function sa__Health___Health_get)
    set st__NewBonus___IBonus_Set[145]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[145],Condition( function sa__Health___Health_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[145], function sa__Health___Health_Set)
    set st__NewBonus___IBonus_add[145]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[145],Condition( function sa__Health___Health_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[145], function sa__Health___Health_add)
    set st__NewBonus___IBonus_get[146]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[146],Condition( function sa__EvasionChance___Evasion_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[146], function sa__EvasionChance___Evasion_get)
    set st__NewBonus___IBonus_Set[146]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[146],Condition( function sa__EvasionChance___Evasion_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[146], function sa__EvasionChance___Evasion_Set)
    set st__NewBonus___IBonus_add[146]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[146],Condition( function sa__EvasionChance___Evasion_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[146], function sa__EvasionChance___Evasion_add)
    set st__NewBonus___IBonus_get[147]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[147],Condition( function sa__DamageBonus___Damage_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[147], function sa__DamageBonus___Damage_get)
    set st__NewBonus___IBonus_Set[147]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[147],Condition( function sa__DamageBonus___Damage_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[147], function sa__DamageBonus___Damage_Set)
    set st__NewBonus___IBonus_add[147]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[147],Condition( function sa__DamageBonus___Damage_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[147], function sa__DamageBonus___Damage_add)
    set st__NewBonus___IBonus_get[148]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[148],Condition( function sa__Strength___Strength_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[148], function sa__Strength___Strength_get)
    set st__NewBonus___IBonus_Set[148]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[148],Condition( function sa__Strength___Strength_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[148], function sa__Strength___Strength_Set)
    set st__NewBonus___IBonus_add[148]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[148],Condition( function sa__Strength___Strength_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[148], function sa__Strength___Strength_add)
    set st__NewBonus___IBonus_get[149]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[149],Condition( function sa__TenacityBonus___Tenacity_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[149], function sa__TenacityBonus___Tenacity_get)
    set st__NewBonus___IBonus_Set[149]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[149],Condition( function sa__TenacityBonus___Tenacity_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[149], function sa__TenacityBonus___Tenacity_Set)
    set st__NewBonus___IBonus_add[149]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[149],Condition( function sa__TenacityBonus___Tenacity_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[149], function sa__TenacityBonus___Tenacity_add)
    set st__NewBonus___IBonus_get[150]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[150],Condition( function sa__LifeSteal___LifeSteal_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[150], function sa__LifeSteal___LifeSteal_get)
    set st__NewBonus___IBonus_Set[150]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[150],Condition( function sa__LifeSteal___LifeSteal_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[150], function sa__LifeSteal___LifeSteal_Set)
    set st__NewBonus___IBonus_add[150]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[150],Condition( function sa__LifeSteal___LifeSteal_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[150], function sa__LifeSteal___LifeSteal_add)
    set st__NewBonus___IBonus_get[151]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[151],Condition( function sa__SpellVamp___SpellVamp_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[151], function sa__SpellVamp___SpellVamp_get)
    set st__NewBonus___IBonus_Set[151]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[151],Condition( function sa__SpellVamp___SpellVamp_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[151], function sa__SpellVamp___SpellVamp_Set)
    set st__NewBonus___IBonus_add[151]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[151],Condition( function sa__SpellVamp___SpellVamp_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[151], function sa__SpellVamp___SpellVamp_add)
    set st__NewBonus___IBonus_get[152]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[152],Condition( function sa__SpellPower___SpellPower_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[152], function sa__SpellPower___SpellPower_get)
    set st__NewBonus___IBonus_Set[152]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[152],Condition( function sa__SpellPower___SpellPower_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[152], function sa__SpellPower___SpellPower_Set)
    set st__NewBonus___IBonus_add[152]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[152],Condition( function sa__SpellPower___SpellPower_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[152], function sa__SpellPower___SpellPower_add)
    set st__NewBonus___IBonus_get[153]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[153],Condition( function sa__Intelligence___Intelligence_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[153], function sa__Intelligence___Intelligence_get)
    set st__NewBonus___IBonus_Set[153]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[153],Condition( function sa__Intelligence___Intelligence_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[153], function sa__Intelligence___Intelligence_Set)
    set st__NewBonus___IBonus_add[153]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[153],Condition( function sa__Intelligence___Intelligence_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[153], function sa__Intelligence___Intelligence_add)
    set st__NewBonus___IBonus_get[154]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[154],Condition( function sa__SightRange___SightRange_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[154], function sa__SightRange___SightRange_get)
    set st__NewBonus___IBonus_Set[154]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[154],Condition( function sa__SightRange___SightRange_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[154], function sa__SightRange___SightRange_Set)
    set st__NewBonus___IBonus_add[154]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[154],Condition( function sa__SightRange___SightRange_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[154], function sa__SightRange___SightRange_add)
    set st__NewBonus___IBonus_get[155]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[155],Condition( function sa__TenacityFlat___TenacityFlat_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[155], function sa__TenacityFlat___TenacityFlat_get)
    set st__NewBonus___IBonus_Set[155]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[155],Condition( function sa__TenacityFlat___TenacityFlat_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[155], function sa__TenacityFlat___TenacityFlat_Set)
    set st__NewBonus___IBonus_add[155]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[155],Condition( function sa__TenacityFlat___TenacityFlat_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[155], function sa__TenacityFlat___TenacityFlat_add)
    set st__NewBonus___IBonus_get[156]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[156],Condition( function sa__AttackSpeed___AttackSpeed_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[156], function sa__AttackSpeed___AttackSpeed_get)
    set st__NewBonus___IBonus_Set[156]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[156],Condition( function sa__AttackSpeed___AttackSpeed_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[156], function sa__AttackSpeed___AttackSpeed_Set)
    set st__NewBonus___IBonus_add[156]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[156],Condition( function sa__AttackSpeed___AttackSpeed_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[156], function sa__AttackSpeed___AttackSpeed_add)
    set st__NewBonus___IBonus_get[157]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[157],Condition( function sa__CriticalChance___CriticalChance_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[157], function sa__CriticalChance___CriticalChance_get)
    set st__NewBonus___IBonus_Set[157]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[157],Condition( function sa__CriticalChance___CriticalChance_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[157], function sa__CriticalChance___CriticalChance_Set)
    set st__NewBonus___IBonus_add[157]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[157],Condition( function sa__CriticalChance___CriticalChance_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[157], function sa__CriticalChance___CriticalChance_add)
    set st__NewBonus___IBonus_get[158]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[158],Condition( function sa__CriticalDamage___CriticalDamage_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[158], function sa__CriticalDamage___CriticalDamage_get)
    set st__NewBonus___IBonus_Set[158]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[158],Condition( function sa__CriticalDamage___CriticalDamage_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[158], function sa__CriticalDamage___CriticalDamage_Set)
    set st__NewBonus___IBonus_add[158]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[158],Condition( function sa__CriticalDamage___CriticalDamage_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[158], function sa__CriticalDamage___CriticalDamage_add)
    set st__NewBonus___IBonus_get[159]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[159],Condition( function sa__TenacityOffset___TenacityOffset_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[159], function sa__TenacityOffset___TenacityOffset_get)
    set st__NewBonus___IBonus_Set[159]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[159],Condition( function sa__TenacityOffset___TenacityOffset_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[159], function sa__TenacityOffset___TenacityOffset_Set)
    set st__NewBonus___IBonus_add[159]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[159],Condition( function sa__TenacityOffset___TenacityOffset_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[159], function sa__TenacityOffset___TenacityOffset_add)
    set st__NewBonus___IBonus_get[160]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[160],Condition( function sa__CooldownOffset___CooldownOffset_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[160], function sa__CooldownOffset___CooldownOffset_get)
    set st__NewBonus___IBonus_Set[160]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[160],Condition( function sa__CooldownOffset___CooldownOffset_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[160], function sa__CooldownOffset___CooldownOffset_Set)
    set st__NewBonus___IBonus_add[160]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[160],Condition( function sa__CooldownOffset___CooldownOffset_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[160], function sa__CooldownOffset___CooldownOffset_add)
    set st__NewBonus___IBonus_get[161]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[161],Condition( function sa__ArmorPenetration___ArmorPenetration_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[161], function sa__ArmorPenetration___ArmorPenetration_get)
    set st__NewBonus___IBonus_Set[161]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[161],Condition( function sa__ArmorPenetration___ArmorPenetration_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[161], function sa__ArmorPenetration___ArmorPenetration_Set)
    set st__NewBonus___IBonus_add[161]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[161],Condition( function sa__ArmorPenetration___ArmorPenetration_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[161], function sa__ArmorPenetration___ArmorPenetration_add)
    set st__NewBonus___IBonus_get[162]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[162],Condition( function sa__MovementSpeed___MovementSpeed_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[162], function sa__MovementSpeed___MovementSpeed_get)
    set st__NewBonus___IBonus_Set[162]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[162],Condition( function sa__MovementSpeed___MovementSpeed_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[162], function sa__MovementSpeed___MovementSpeed_Set)
    set st__NewBonus___IBonus_add[162]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[162],Condition( function sa__MovementSpeed___MovementSpeed_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[162], function sa__MovementSpeed___MovementSpeed_add)
    set st__NewBonus___IBonus_get[163]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[163],Condition( function sa__MagicResistence___MagicResistence_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[163], function sa__MagicResistence___MagicResistence_get)
    set st__NewBonus___IBonus_Set[163]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[163],Condition( function sa__MagicResistence___MagicResistence_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[163], function sa__MagicResistence___MagicResistence_Set)
    set st__NewBonus___IBonus_add[163]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[163],Condition( function sa__MagicResistence___MagicResistence_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[163], function sa__MagicResistence___MagicResistence_add)
    set st__NewBonus___IBonus_get[164]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[164],Condition( function sa__MagicPenetration___MagicPenetration_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[164], function sa__MagicPenetration___MagicPenetration_get)
    set st__NewBonus___IBonus_Set[164]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[164],Condition( function sa__MagicPenetration___MagicPenetration_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[164], function sa__MagicPenetration___MagicPenetration_Set)
    set st__NewBonus___IBonus_add[164]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[164],Condition( function sa__MagicPenetration___MagicPenetration_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[164], function sa__MagicPenetration___MagicPenetration_add)
    set st__NewBonus___IBonus_get[165]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[165],Condition( function sa__ManaRegeneration___ManaRegeneration_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[165], function sa__ManaRegeneration___ManaRegeneration_get)
    set st__NewBonus___IBonus_Set[165]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[165],Condition( function sa__ManaRegeneration___ManaRegeneration_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[165], function sa__ManaRegeneration___ManaRegeneration_Set)
    set st__NewBonus___IBonus_add[165]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[165],Condition( function sa__ManaRegeneration___ManaRegeneration_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[165], function sa__ManaRegeneration___ManaRegeneration_add)
    set st__NewBonus___IBonus_get[166]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[166],Condition( function sa__HealthRegeneration___HealthRegeneration_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[166], function sa__HealthRegeneration___HealthRegeneration_get)
    set st__NewBonus___IBonus_Set[166]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[166],Condition( function sa__HealthRegeneration___HealthRegeneration_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[166], function sa__HealthRegeneration___HealthRegeneration_Set)
    set st__NewBonus___IBonus_add[166]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[166],Condition( function sa__HealthRegeneration___HealthRegeneration_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[166], function sa__HealthRegeneration___HealthRegeneration_add)
    set st__NewBonus___IBonus_get[167]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[167],Condition( function sa__CooldownReductionBonus___CooldownReduction_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[167], function sa__CooldownReductionBonus___CooldownReduction_get)
    set st__NewBonus___IBonus_Set[167]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[167],Condition( function sa__CooldownReductionBonus___CooldownReduction_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[167], function sa__CooldownReductionBonus___CooldownReduction_Set)
    set st__NewBonus___IBonus_add[167]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[167],Condition( function sa__CooldownReductionBonus___CooldownReduction_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[167], function sa__CooldownReductionBonus___CooldownReduction_add)
    set st__NewBonus___IBonus_get[168]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[168],Condition( function sa__ArmorPenetrationFlat___ArmorPenetrationFlat_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[168], function sa__ArmorPenetrationFlat___ArmorPenetrationFlat_get)
    set st__NewBonus___IBonus_Set[168]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[168],Condition( function sa__ArmorPenetrationFlat___ArmorPenetrationFlat_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[168], function sa__ArmorPenetrationFlat___ArmorPenetrationFlat_Set)
    set st__NewBonus___IBonus_add[168]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[168],Condition( function sa__ArmorPenetrationFlat___ArmorPenetrationFlat_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[168], function sa__ArmorPenetrationFlat___ArmorPenetrationFlat_add)
    set st__NewBonus___IBonus_get[169]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_get[169],Condition( function sa__MagicPenetrationFlat___MagicPenetrationFlat_get))
    call TriggerAddAction(st__NewBonus___IBonus_get[169], function sa__MagicPenetrationFlat___MagicPenetrationFlat_get)
    set st__NewBonus___IBonus_Set[169]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_Set[169],Condition( function sa__MagicPenetrationFlat___MagicPenetrationFlat_Set))
    call TriggerAddAction(st__NewBonus___IBonus_Set[169], function sa__MagicPenetrationFlat___MagicPenetrationFlat_Set)
    set st__NewBonus___IBonus_add[169]=CreateTrigger()
    call TriggerAddCondition(st__NewBonus___IBonus_add[169],Condition( function sa__MagicPenetrationFlat___MagicPenetrationFlat_add))
    call TriggerAddAction(st__NewBonus___IBonus_add[169], function sa__MagicPenetrationFlat___MagicPenetrationFlat_add)
    set st___prototype3[1]=CreateTrigger()
    call TriggerAddAction(st___prototype3[1],function sa___prototype3_TimerUtils___init)
    call TriggerAddCondition(st___prototype3[1],Condition(function sa___prototype3_TimerUtils___init))



call ExecuteFunc("s__UserMouse_MouseUtils___Init___onInit")

















































call ExecuteFunc("s__WorldBounds_WorldBounds___WorldBoundInit___onInit")



call ExecuteFunc("s__Backdrop_Components___Operators___onInit")

call ExecuteFunc("s__Sprite_Components___Operators___onInit")

call ExecuteFunc("s__Text_Components___Operators___onInit")

call ExecuteFunc("s__TextArea_Components___Operators___onInit")

call ExecuteFunc("s__StatusBar_Components___Operators___onInit")

call ExecuteFunc("s__Component_Components___Operators___onInit")

call ExecuteFunc("s__EditBox_Components___Operators___onInit")

call ExecuteFunc("s__CheckBox_Components___Operators___onInit")


call ExecuteFunc("s__Slider_Components___Operators___onInit")
















call ExecuteFunc("s__Spell_PluginSpellEffect___Event___onInit")

call ExecuteFunc("s__SpellEffectEvent___S_SpellEffectEvent___M___onInit")











call ExecuteFunc("s__ArcingTextTag_Periodic___onInit")







call ExecuteFunc("s__Bonus_Periodic___onInit")











call ExecuteFunc("s__Afterburner___Afterburner_Periodic___onInit")










call ExecuteFunc("s__MoltenShield___MoltenShield_Periodic___onInit")


call ExecuteFunc("s__ExplosiveRune___ExplosiveRune_Periodic___onInit")



call ExecuteFunc("s__LivingMeteor___LivingMeteor_Periodic___onInit")

















































    call ExecuteFunc("s__Indexer_onInit")
    call ExecuteFunc("s__Component_onInit")
    call ExecuteFunc("s__EditBox_onInit")
    call ExecuteFunc("s__CheckBox_onInit")
    call ExecuteFunc("s__Slider_onInit")
    call ExecuteFunc("s__CDR_onInit")
    call ExecuteFunc("s__Damage_onInit")
    call ExecuteFunc("s__Critical_onInit")
    call ExecuteFunc("s__Tenacity_onInit")
    call ExecuteFunc("s__Ability_onInit")
    call ExecuteFunc("s__ArcingTextTag_onInit")
    call ExecuteFunc("s__Missiles___Pool_onInit")
    call ExecuteFunc("s__Bonus_onInit")
    call ExecuteFunc("s__DummyPool_onInit")
    call ExecuteFunc("s__EffectLink_onInit")
    call ExecuteFunc("s__Afterburner___Afterburner_onInit")
    call ExecuteFunc("s__Fear_onInit")
    call ExecuteFunc("s__Taunt_onInit")
    call ExecuteFunc("s__CrowdControl_onInit")
    call ExecuteFunc("s__Item_onInit")
    call ExecuteFunc("s__MoltenShield___MoltenShield_onInit")
    call ExecuteFunc("s__Sulfuras_onInit")
    call ExecuteFunc("s__ExplosiveRune___ExplosiveRune_onInit")
    call ExecuteFunc("s__LavaElemental___LavaElemental_onInit")
    call ExecuteFunc("s__LivingMeteor___LivingMeteor_onInit")
    call ExecuteFunc("s__Shop___Sound_onInit")
    call ExecuteFunc("s__Shop___Transaction_onInit")
    call ExecuteFunc("s__Shop___Buyer_onInit")
    call ExecuteFunc("s__Shop_onInit")
    call ExecuteFunc("s__SulfurasSmash___SulfurasSmash_onInit")
    call ExecuteFunc("s__MissChance___Miss_onInit")
    call ExecuteFunc("s__Armor___Armor_onInit")
    call ExecuteFunc("s__Block___Block_onInit")
    call ExecuteFunc("s__Mana___Mana_onInit")
    call ExecuteFunc("s__Agility___Agility_onInit")
    call ExecuteFunc("s__Health___Health_onInit")
    call ExecuteFunc("s__EvasionChance___Evasion_onInit")
    call ExecuteFunc("s__DamageBonus___Damage_onInit")
    call ExecuteFunc("s__Strength___Strength_onInit")
    call ExecuteFunc("s__TenacityBonus___Tenacity_onInit")
    call ExecuteFunc("s__LifeSteal___LifeSteal_onInit")
    call ExecuteFunc("s__SpellVamp___SpellVamp_onInit")
    call ExecuteFunc("s__SpellPower___SpellPower_onInit")
    call ExecuteFunc("s__Intelligence___Intelligence_onInit")
    call ExecuteFunc("s__SightRange___SightRange_onInit")
    call ExecuteFunc("s__TenacityFlat___TenacityFlat_onInit")
    call ExecuteFunc("s__AttackSpeed___AttackSpeed_onInit")
    call ExecuteFunc("s__CriticalChance___CriticalChance_onInit")
    call ExecuteFunc("s__CriticalDamage___CriticalDamage_onInit")
    call ExecuteFunc("s__TenacityOffset___TenacityOffset_onInit")
    call ExecuteFunc("s__CooldownOffset___CooldownOffset_onInit")
    call ExecuteFunc("s__ArmorPenetration___ArmorPenetration_onInit")
    call ExecuteFunc("s__MovementSpeed___MovementSpeed_onInit")
    call ExecuteFunc("s__MagicResistence___MagicResistence_onInit")
    call ExecuteFunc("s__MagicPenetration___MagicPenetration_onInit")
    call ExecuteFunc("s__ManaRegeneration___ManaRegeneration_onInit")
    call ExecuteFunc("s__HealthRegeneration___HealthRegeneration_onInit")
    call ExecuteFunc("s__CooldownReductionBonus___CooldownReduction_onInit")
    call ExecuteFunc("s__ArmorPenetrationFlat___ArmorPenetrationFlat_onInit")
    call ExecuteFunc("s__MagicPenetrationFlat___MagicPenetrationFlat_onInit")
    call ExecuteFunc("s__CooldownReductionFlat___CooldownReductionFlat_onInit")
    call ExecuteFunc("s__Revive___Revive_onInit")
    call ExecuteFunc("s__Spawn___Revive_onInit")
    call ExecuteFunc("s__OnDamage___OnDamage_onInit")
endfunction

